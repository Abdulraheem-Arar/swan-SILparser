sil_stage canonical

import Builtin
import Swift
import SwiftShims

sil_scope 1 {  parent @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 }

// main, scope 1
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0, scope 1 // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32), scope 1 // user: %4
  return %3 : $Int32, scope 1                     // id: %4
} // end sil function 'main'

sil_scope 2 { loc "test.swift":25:15 parent @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> }

// static Cryptors.randomIV(_:), loc "test.swift":25:15, scope 2
sil hidden [ossa] @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <Self where Self : Cryptors> (Int, @thick Self.Type) -> @owned Array<UInt8> {
// %0 "count"                                     // users: %35, %6, %2
// %1 "self"                                      // user: %3
bb0(%0 : $Int, %1 : $@thick Self.Type):
  debug_value %0 : $Int, let, name "count", argno 1, loc "test.swift":25:26, scope 2 // id: %2
  debug_value %1 : $@thick Self.Type, let, name "self", argno 2, implicit, loc "test.swift":25:15, scope 2 // id: %3
  %4 = integer_literal $Builtin.Int64, 0, loc "test.swift":26:6, scope 2 // users: %5, %19
  %5 = struct $Int (%4 : $Builtin.Int64), loc "test.swift":26:6, scope 2 // user: %35
  %6 = struct_extract %0 : $Int, #Int._value, loc "test.swift":26:7, scope 2 // user: %19
  %7 = string_literal utf8 "Range requires lowerBound <= upperBound", loc "test.swift":26:7, scope 2 // user: %9
  %8 = integer_literal $Builtin.Word, 39, loc "test.swift":26:7, scope 2 // user: %11
  %9 = builtin "ptrtoint_Word"(%7 : $Builtin.RawPointer) : $Builtin.Word, loc "test.swift":26:7, scope 2 // user: %11
  %10 = integer_literal $Builtin.Int8, 2, loc "test.swift":26:7, scope 2 // users: %28, %15, %11
  %11 = struct $StaticString (%9 : $Builtin.Word, %8 : $Builtin.Word, %10 : $Builtin.Int8), loc "test.swift":26:7, scope 2 // user: %32
  %12 = string_literal utf8 "Swift/Range.swift", loc "test.swift":26:7, scope 2 // user: %14
  %13 = integer_literal $Builtin.Word, 17, loc "test.swift":26:7, scope 2 // user: %15
  %14 = builtin "ptrtoint_Word"(%12 : $Builtin.RawPointer) : $Builtin.Word, loc "test.swift":26:7, scope 2 // user: %15
  %15 = struct $StaticString (%14 : $Builtin.Word, %13 : $Builtin.Word, %10 : $Builtin.Int8), loc "test.swift":26:7, scope 2 // user: %32
  %16 = integer_literal $Builtin.Int64, 744, loc "test.swift":26:7, scope 2 // user: %17
  %17 = struct $UInt (%16 : $Builtin.Int64), loc "test.swift":26:7, scope 2 // user: %32
  debug_step , loc "test.swift":26:7, scope 2     // id: %18
  %19 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, loc "test.swift":26:7, scope 2 // user: %21
  %20 = integer_literal $Builtin.Int1, -1, loc "test.swift":26:7, scope 2 // user: %21
  %21 = builtin "xor_Int1"(%19 : $Builtin.Int1, %20 : $Builtin.Int1) : $Builtin.Int1, loc "test.swift":26:7, scope 2 // user: %23
  %22 = integer_literal $Builtin.Int1, -1, loc "test.swift":26:7, scope 2 // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1, loc "test.swift":26:7, scope 2 // user: %24
  cond_br %23, bb2, bb1, loc "test.swift":26:7, scope 2 // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error", loc "test.swift":26:7, scope 2 // user: %27
  %26 = integer_literal $Builtin.Word, 11, loc "test.swift":26:7, scope 2 // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word, loc "test.swift":26:7, scope 2 // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %10 : $Builtin.Int8), loc "test.swift":26:7, scope 2 // user: %32
  %29 = integer_literal $Builtin.Int32, 1, loc "test.swift":26:7, scope 2 // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32), loc "test.swift":26:7, scope 2 // user: %32
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %31 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, loc "test.swift":26:7, scope 2 // user: %32
  %32 = apply %31(%28, %11, %15, %17, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, loc "test.swift":26:7, scope 2
  unreachable , scope 2                           // id: %33

bb2:                                              // Preds: bb0
  debug_step , loc "test.swift":26:7, scope 2     // id: %34
  %35 = struct $Range<Int> (%5 : $Int, %0 : $Int), loc "test.swift":26:7, scope 2 // user: %37
  %36 = alloc_stack $Range<Int>, loc "test.swift":26:7, scope 2 // users: %43, %41, %37
  store %35 to [trivial] %36 : $*Range<Int>, loc "test.swift":26:7, scope 2 // id: %37
  // function_ref closure #1 in static Cryptors.randomIV(_:)
  %38 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZAFSiXEfU_ : $@convention(thin) @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <Int, UInt8>, loc * "test.swift":26:21, scope 2 // user: %39
  %39 = thin_to_thick_function %38 : $@convention(thin) @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <Int, UInt8> to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <Int, UInt8>, loc "test.swift":26:21, scope 2 // user: %41
  // function_ref Collection.map<A>(_:)
  %40 = function_ref @$sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@owned Array<τ_1_0>, @error any Error), loc "test.swift":26:17, scope 2 // user: %41
  try_apply %40<(Range<Int>), UInt8>(%39, %36) : $@convention(method) <τ_0_0 where τ_0_0 : Collection><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@owned Array<τ_1_0>, @error any Error), normal bb3, error bb4, loc "test.swift":26:17, scope 2 // id: %41

// %42                                            // user: %44
bb3(%42 : @owned $Array<UInt8>):                  // Preds: bb2
  dealloc_stack %36 : $*Range<Int>, loc "test.swift":26:61, scope 2 // id: %43
  return %42 : $Array<UInt8>, loc "test.swift":27:3, scope 2 // id: %44

bb4(%45 : @owned $any Error):                     // Preds: bb2
  unreachable , loc "test.swift":26:17, scope 2   // id: %46
} // end sil function '$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ'

sil_scope 3 {  parent @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int }

// Int.init(_builtinIntegerLiteral:), scope 3
sil public_external [transparent] [serialized] [ossa] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1), scope 3 // user: %3
  (%3, %4) = destructure_tuple %2 : $(Builtin.Int64, Builtin.Int1), scope 3 // user: %5
  %5 = struct $Int (%3 : $Builtin.Int64), scope 3 // user: %6
  return %5 : $Int, scope 3                       // id: %6
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

sil_scope 4 {  parent @$sSLsE3zzloiySnyxGx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out Range<τ_0_0> }

// static Comparable...< infix(_:_:), scope 4
sil public_external [transparent] [serialized] [ossa] @$sSLsE3zzloiySnyxGx_xtFZ : $@convention(method) <Self where Self : Comparable> (@in_guaranteed Self, @in_guaranteed Self, @thick Self.Type) -> @out Range<Self> {
// %0                                             // user: %65
// %1                                             // users: %45, %5
// %2                                             // users: %46, %7
bb0(%0 : $*Range<Self>, %1 : $*Self, %2 : $*Self, %3 : $@thick Self.Type):
  %4 = alloc_stack $Self, scope 4                 // users: %40, %37, %22, %5
  copy_addr %1 to [init] %4 : $*Self, scope 4     // id: %5
  %6 = alloc_stack $Self, scope 4                 // users: %39, %36, %22, %7
  copy_addr %2 to [init] %6 : $*Self, scope 4     // id: %7
  %8 = string_literal utf8 "Range requires lowerBound <= upperBound", scope 4 // user: %10
  %9 = integer_literal $Builtin.Word, 39, scope 4 // user: %12
  %10 = builtin "ptrtoint_Word"(%8 : $Builtin.RawPointer) : $Builtin.Word, scope 4 // user: %12
  %11 = integer_literal $Builtin.Int8, 2, scope 4 // users: %30, %16, %12
  %12 = struct $StaticString (%10 : $Builtin.Word, %9 : $Builtin.Word, %11 : $Builtin.Int8), scope 4 // user: %34
  %13 = string_literal utf8 "Swift/Range.swift", scope 4 // user: %15
  %14 = integer_literal $Builtin.Word, 17, scope 4 // user: %16
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word, scope 4 // user: %16
  %16 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %11 : $Builtin.Int8), scope 4 // user: %34
  %17 = integer_literal $Builtin.Int64, 744, scope 4 // user: %18
  %18 = struct $UInt (%17 : $Builtin.Int64), scope 4 // user: %34
  debug_step , scope 4                            // id: %19
  %20 = metatype $@thick Self.Type, scope 4       // user: %22
  %21 = witness_method $Self, #Comparable."<=" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 4 // user: %22
  %22 = apply %21<Self>(%4, %6, %20) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 4 // user: %23
  %23 = struct_extract %22 : $Bool, #Bool._value, scope 4 // user: %25
  %24 = integer_literal $Builtin.Int1, -1, scope 4 // user: %25
  %25 = builtin "int_expect_Int1"(%23 : $Builtin.Int1, %24 : $Builtin.Int1) : $Builtin.Int1, scope 4 // user: %26
  cond_br %25, bb2, bb1, scope 4                  // id: %26

bb1:                                              // Preds: bb0
  %27 = string_literal utf8 "Fatal error", scope 4 // user: %29
  %28 = integer_literal $Builtin.Word, 11, scope 4 // user: %30
  %29 = builtin "ptrtoint_Word"(%27 : $Builtin.RawPointer) : $Builtin.Word, scope 4 // user: %30
  %30 = struct $StaticString (%29 : $Builtin.Word, %28 : $Builtin.Word, %11 : $Builtin.Int8), scope 4 // user: %34
  %31 = integer_literal $Builtin.Int32, 1, scope 4 // user: %32
  %32 = struct $UInt32 (%31 : $Builtin.Int32), scope 4 // user: %34
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %33 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 4 // user: %34
  %34 = apply %33(%30, %12, %16, %18, %32) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 4
  unreachable , scope 4                           // id: %35

bb2:                                              // Preds: bb0
  destroy_addr %6 : $*Self, scope 4               // id: %36
  destroy_addr %4 : $*Self, scope 4               // id: %37
  debug_step , scope 4                            // id: %38
  dealloc_stack %6 : $*Self, scope 4              // id: %39
  dealloc_stack %4 : $*Self, scope 4              // id: %40
  %41 = alloc_stack $Range<Self>, scope 4         // users: %67, %65, %61, %52
  %42 = alloc_stack $(lower: Self, upper: Self), scope 4 // users: %66, %44, %43
  %43 = tuple_element_addr %42 : $*(lower: Self, upper: Self), 0, scope 4 // users: %59, %50, %45
  %44 = tuple_element_addr %42 : $*(lower: Self, upper: Self), 1, scope 4 // users: %60, %51, %46
  copy_addr %1 to [init] %43 : $*Self, scope 4    // id: %45
  copy_addr %2 to [init] %44 : $*Self, scope 4    // id: %46
  %47 = alloc_stack $(lower: Self, upper: Self), scope 4 // users: %55, %49, %48
  %48 = tuple_element_addr %47 : $*(lower: Self, upper: Self), 0, scope 4 // users: %53, %50
  %49 = tuple_element_addr %47 : $*(lower: Self, upper: Self), 1, scope 4 // users: %54, %51
  copy_addr %43 to [init] %48 : $*Self, scope 4   // id: %50
  copy_addr %44 to [init] %49 : $*Self, scope 4   // id: %51
  %52 = struct_element_addr %41 : $*Range<Self>, #Range.lowerBound, scope 4 // user: %53
  copy_addr [take] %48 to [init] %52 : $*Self, scope 4 // id: %53
  destroy_addr %49 : $*Self, scope 4              // id: %54
  dealloc_stack %47 : $*(lower: Self, upper: Self), scope 4 // id: %55
  %56 = alloc_stack $(lower: Self, upper: Self), scope 4 // users: %64, %58, %57
  %57 = tuple_element_addr %56 : $*(lower: Self, upper: Self), 0, scope 4 // users: %63, %59
  %58 = tuple_element_addr %56 : $*(lower: Self, upper: Self), 1, scope 4 // users: %62, %60
  copy_addr [take] %43 to [init] %57 : $*Self, scope 4 // id: %59
  copy_addr [take] %44 to [init] %58 : $*Self, scope 4 // id: %60
  %61 = struct_element_addr %41 : $*Range<Self>, #Range.upperBound, scope 4 // user: %62
  copy_addr [take] %58 to [init] %61 : $*Self, scope 4 // id: %62
  destroy_addr %57 : $*Self, scope 4              // id: %63
  dealloc_stack %56 : $*(lower: Self, upper: Self), scope 4 // id: %64
  copy_addr [take] %41 to [init] %0 : $*Range<Self>, scope 4 // id: %65
  dealloc_stack %42 : $*(lower: Self, upper: Self), scope 4 // id: %66
  dealloc_stack %41 : $*Range<Self>, scope 4      // id: %67
  %68 = tuple (), scope 4                         // user: %69
  return %68 : $(), scope 4                       // id: %69
} // end sil function '$sSLsE3zzloiySnyxGx_xtFZ'

sil_scope 5 { loc "test.swift":26:21 parent @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZAFSiXEfU_ : $@convention(thin) @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <Int, UInt8> }

// closure #1 in static Cryptors.randomIV(_:), loc "test.swift":26:21, scope 5
sil private [ossa] @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZAFSiXEfU_ : $@convention(thin) @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <Int, UInt8> {
// %0 "$return_value"                             // user: %16
// %1                                             // user: %2
bb0(%0 : $*UInt8, %1 : $*Int):
  %2 = load [trivial] %1 : $*Int, loc "test.swift":26:23, scope 5 // user: %3
  debug_value %2 : $Int, let, name "_0", argno 1, loc "test.swift":26:23, scope 5 // id: %3
  %4 = metatype $@thick UInt8.Type, loc "test.swift":26:28, scope 5 // user: %16
  %5 = integer_literal $Builtin.Int8, 0, loc "test.swift":26:45, scope 5 // user: %6
  %6 = struct $UInt8 (%5 : $Builtin.Int8), loc "test.swift":26:45, scope 5 // user: %12
  %7 = integer_literal $Builtin.Int8, -1, loc "test.swift":26:55, scope 5 // user: %8
  %8 = struct $UInt8 (%7 : $Builtin.Int8), loc "test.swift":26:55, scope 5 // user: %12
  debug_step , loc "test.swift":26:46, scope 5    // id: %9
  debug_step , loc "test.swift":26:46, scope 5    // id: %10
  debug_step , loc "test.swift":26:46, scope 5    // id: %11
  %12 = struct $ClosedRange<UInt8> (%6 : $UInt8, %8 : $UInt8), loc "test.swift":26:46, scope 5 // user: %14
  %13 = alloc_stack $ClosedRange<UInt8>, loc "test.swift":26:46, scope 5 // users: %17, %16, %14
  store %12 to [trivial] %13 : $*ClosedRange<UInt8>, loc "test.swift":26:46, scope 5 // id: %14
  // function_ref static FixedWidthInteger.random(in:)
  %15 = function_ref @$ss17FixedWidthIntegerPsE6random2inxSNyxG_tFZ : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@in_guaranteed ClosedRange<τ_0_0>, @thick τ_0_0.Type) -> @out τ_0_0, loc "test.swift":26:34, scope 5 // user: %16
  %16 = apply %15<UInt8>(%0, %13, %4) : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@in_guaranteed ClosedRange<τ_0_0>, @thick τ_0_0.Type) -> @out τ_0_0, loc "test.swift":26:34, scope 5
  dealloc_stack %13 : $*ClosedRange<UInt8>, loc "test.swift":26:58, scope 5 // id: %17
  %18 = tuple (), loc "test.swift":26:60, scope 5 // user: %19
  return %18 : $(), loc "test.swift":26:60, scope 5 // id: %19
} // end sil function '$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZAFSiXEfU_'

sil_scope 6 {  parent @$ss5UInt8V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt8.Type) -> UInt8 }

// UInt8.init(_builtinIntegerLiteral:), scope 6
sil public_external [transparent] [serialized] [ossa] @$ss5UInt8V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt8.Type) -> UInt8 {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin UInt8.Type):
  %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int8"(%0 : $Builtin.IntLiteral) : $(Builtin.Int8, Builtin.Int1), scope 6 // user: %3
  (%3, %4) = destructure_tuple %2 : $(Builtin.Int8, Builtin.Int1), scope 6 // user: %5
  %5 = struct $UInt8 (%3 : $Builtin.Int8), scope 6 // user: %6
  return %5 : $UInt8, scope 6                     // id: %6
} // end sil function '$ss5UInt8V22_builtinIntegerLiteralABBI_tcfC'

sil_scope 7 {  parent @$sSUss17FixedWidthIntegerRzrlE3maxxvgZ : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger, τ_0_0 : UnsignedInteger> (@thick τ_0_0.Type) -> @out τ_0_0 }

// static UnsignedInteger<>.max.getter, scope 7
sil public_external [transparent] [serialized] [ossa] @$sSUss17FixedWidthIntegerRzrlE3maxxvgZ : $@convention(method) <Self where Self : FixedWidthInteger, Self : UnsignedInteger> (@thick Self.Type) -> @out Self {
// %0                                             // user: %12
bb0(%0 : $*Self, %1 : $@thick Self.Type):
  %2 = metatype $@thick Self.Type, scope 7        // users: %12, %10
  %3 = integer_literal $Builtin.IntLiteral, 0, scope 7 // user: %7
  %4 = metatype $@thick Self.IntegerLiteralType.Type, scope 7 // user: %7
  %5 = alloc_stack $Self.IntegerLiteralType, scope 7 // users: %15, %10, %7
  %6 = witness_method $Self.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 7 // user: %7
  %7 = apply %6<Self.IntegerLiteralType>(%5, %3, %4) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 7
  %8 = alloc_stack $Self, scope 7                 // users: %14, %13, %12, %10
  %9 = witness_method $Self, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 7 // user: %10
  %10 = apply %9<Self>(%8, %5, %2) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 7
  %11 = witness_method $Self, #BinaryInteger."~" : <Self where Self : BinaryInteger> (Self.Type) -> (Self) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 7 // user: %12
  %12 = apply %11<Self>(%0, %8, %2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 7
  destroy_addr %8 : $*Self, scope 7               // id: %13
  dealloc_stack %8 : $*Self, scope 7              // id: %14
  dealloc_stack %5 : $*Self.IntegerLiteralType, scope 7 // id: %15
  %16 = tuple (), scope 7                         // user: %17
  return %16 : $(), scope 7                       // id: %17
} // end sil function '$sSUss17FixedWidthIntegerRzrlE3maxxvgZ'

sil_scope 8 {  parent @$sSLsE3zzzoiySNyxGx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out ClosedRange<τ_0_0> }

// static Comparable.... infix(_:_:), scope 8
sil public_external [transparent] [serialized] [ossa] @$sSLsE3zzzoiySNyxGx_xtFZ : $@convention(method) <Self where Self : Comparable> (@in_guaranteed Self, @in_guaranteed Self, @thick Self.Type) -> @out ClosedRange<Self> {
// %0                                             // user: %65
// %1                                             // users: %45, %5
// %2                                             // users: %46, %7
bb0(%0 : $*ClosedRange<Self>, %1 : $*Self, %2 : $*Self, %3 : $@thick Self.Type):
  %4 = alloc_stack $Self, scope 8                 // users: %40, %37, %22, %5
  copy_addr %1 to [init] %4 : $*Self, scope 8     // id: %5
  %6 = alloc_stack $Self, scope 8                 // users: %39, %36, %22, %7
  copy_addr %2 to [init] %6 : $*Self, scope 8     // id: %7
  %8 = string_literal utf8 "Range requires lowerBound <= upperBound", scope 8 // user: %10
  %9 = integer_literal $Builtin.Word, 39, scope 8 // user: %12
  %10 = builtin "ptrtoint_Word"(%8 : $Builtin.RawPointer) : $Builtin.Word, scope 8 // user: %12
  %11 = integer_literal $Builtin.Int8, 2, scope 8 // users: %30, %16, %12
  %12 = struct $StaticString (%10 : $Builtin.Word, %9 : $Builtin.Word, %11 : $Builtin.Int8), scope 8 // user: %34
  %13 = string_literal utf8 "Swift/ClosedRange.swift", scope 8 // user: %15
  %14 = integer_literal $Builtin.Word, 23, scope 8 // user: %16
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word, scope 8 // user: %16
  %16 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %11 : $Builtin.Int8), scope 8 // user: %34
  %17 = integer_literal $Builtin.Int64, 347, scope 8 // user: %18
  %18 = struct $UInt (%17 : $Builtin.Int64), scope 8 // user: %34
  debug_step , scope 8                            // id: %19
  %20 = metatype $@thick Self.Type, scope 8       // user: %22
  %21 = witness_method $Self, #Comparable."<=" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 8 // user: %22
  %22 = apply %21<Self>(%4, %6, %20) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 8 // user: %23
  %23 = struct_extract %22 : $Bool, #Bool._value, scope 8 // user: %25
  %24 = integer_literal $Builtin.Int1, -1, scope 8 // user: %25
  %25 = builtin "int_expect_Int1"(%23 : $Builtin.Int1, %24 : $Builtin.Int1) : $Builtin.Int1, scope 8 // user: %26
  cond_br %25, bb2, bb1, scope 8                  // id: %26

bb1:                                              // Preds: bb0
  %27 = string_literal utf8 "Fatal error", scope 8 // user: %29
  %28 = integer_literal $Builtin.Word, 11, scope 8 // user: %30
  %29 = builtin "ptrtoint_Word"(%27 : $Builtin.RawPointer) : $Builtin.Word, scope 8 // user: %30
  %30 = struct $StaticString (%29 : $Builtin.Word, %28 : $Builtin.Word, %11 : $Builtin.Int8), scope 8 // user: %34
  %31 = integer_literal $Builtin.Int32, 1, scope 8 // user: %32
  %32 = struct $UInt32 (%31 : $Builtin.Int32), scope 8 // user: %34
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %33 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 8 // user: %34
  %34 = apply %33(%30, %12, %16, %18, %32) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 8
  unreachable , scope 8                           // id: %35

bb2:                                              // Preds: bb0
  destroy_addr %6 : $*Self, scope 8               // id: %36
  destroy_addr %4 : $*Self, scope 8               // id: %37
  debug_step , scope 8                            // id: %38
  dealloc_stack %6 : $*Self, scope 8              // id: %39
  dealloc_stack %4 : $*Self, scope 8              // id: %40
  %41 = alloc_stack $ClosedRange<Self>, scope 8   // users: %67, %65, %61, %52
  %42 = alloc_stack $(lower: Self, upper: Self), scope 8 // users: %66, %44, %43
  %43 = tuple_element_addr %42 : $*(lower: Self, upper: Self), 0, scope 8 // users: %59, %50, %45
  %44 = tuple_element_addr %42 : $*(lower: Self, upper: Self), 1, scope 8 // users: %60, %51, %46
  copy_addr %1 to [init] %43 : $*Self, scope 8    // id: %45
  copy_addr %2 to [init] %44 : $*Self, scope 8    // id: %46
  %47 = alloc_stack $(lower: Self, upper: Self), scope 8 // users: %55, %49, %48
  %48 = tuple_element_addr %47 : $*(lower: Self, upper: Self), 0, scope 8 // users: %53, %50
  %49 = tuple_element_addr %47 : $*(lower: Self, upper: Self), 1, scope 8 // users: %54, %51
  copy_addr %43 to [init] %48 : $*Self, scope 8   // id: %50
  copy_addr %44 to [init] %49 : $*Self, scope 8   // id: %51
  %52 = struct_element_addr %41 : $*ClosedRange<Self>, #ClosedRange.lowerBound, scope 8 // user: %53
  copy_addr [take] %48 to [init] %52 : $*Self, scope 8 // id: %53
  destroy_addr %49 : $*Self, scope 8              // id: %54
  dealloc_stack %47 : $*(lower: Self, upper: Self), scope 8 // id: %55
  %56 = alloc_stack $(lower: Self, upper: Self), scope 8 // users: %64, %58, %57
  %57 = tuple_element_addr %56 : $*(lower: Self, upper: Self), 0, scope 8 // users: %63, %59
  %58 = tuple_element_addr %56 : $*(lower: Self, upper: Self), 1, scope 8 // users: %62, %60
  copy_addr [take] %43 to [init] %57 : $*Self, scope 8 // id: %59
  copy_addr [take] %44 to [init] %58 : $*Self, scope 8 // id: %60
  %61 = struct_element_addr %41 : $*ClosedRange<Self>, #ClosedRange.upperBound, scope 8 // user: %62
  copy_addr [take] %58 to [init] %61 : $*Self, scope 8 // id: %62
  destroy_addr %57 : $*Self, scope 8              // id: %63
  dealloc_stack %56 : $*(lower: Self, upper: Self), scope 8 // id: %64
  copy_addr [take] %41 to [init] %0 : $*ClosedRange<Self>, scope 8 // id: %65
  dealloc_stack %42 : $*(lower: Self, upper: Self), scope 8 // id: %66
  dealloc_stack %41 : $*ClosedRange<Self>, scope 8 // id: %67
  %68 = tuple (), scope 8                         // user: %69
  return %68 : $(), scope 8                       // id: %69
} // end sil function '$sSLsE3zzzoiySNyxGx_xtFZ'


// static FixedWidthInteger.random(in:), scope 0
sil [serialized] @$ss17FixedWidthIntegerPsE6random2inxSNyxG_tFZ : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@in_guaranteed ClosedRange<τ_0_0>, @thick τ_0_0.Type) -> @out τ_0_0


// Collection.map<A>(_:), scope 0
sil [serialized] @$sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@owned Array<τ_1_0>, @error any Error)

sil_scope 9 { loc "test.swift":32:2 parent @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES }

// AES.__allocating_init(key:blockMode:padding:), loc "test.swift":32:2, scope 9
sil hidden [exact_self_class] [ossa] @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES {
// %0 "key"                                       // user: %6
// %1 "blockMode"                                 // user: %6
// %2 "padding"                                   // user: %6
// %3 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : $Padding, %3 : $@thick AES.Type):
  %4 = alloc_ref $AES, loc * "test.swift":32:2, scope 9 // user: %6
  // function_ref AES.init(key:blockMode:padding:)
  %5 = function_ref @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned AES) -> @owned AES, loc * "test.swift":32:2, scope 9 // user: %6
  %6 = apply %5(%0, %1, %2, %4) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned AES) -> @owned AES, loc * "test.swift":32:68, scope 9 // user: %7
  return %6 : $AES, loc * "test.swift":32:68, scope 9 // id: %7
} // end sil function '$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC'

sil_scope 10 { loc "test.swift":32:2 parent @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned AES) -> @owned AES }

// AES.init(key:blockMode:padding:), loc "test.swift":32:2, scope 10
sil hidden [ossa] @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned AES) -> @owned AES {
// %0 "key"                                       // users: %9, %4
// %1 "blockMode"                                 // users: %8, %5
// %2 "padding"                                   // user: %6
// %3 "self"                                      // users: %10, %7
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : $Padding, %3 : @owned $AES):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":32:7, scope 10 // id: %4
  debug_value %1 : $*any BlockMode, let, name "blockMode", argno 2, expr op_deref, loc "test.swift":32:26, scope 10 // id: %5
  debug_value %2 : $Padding, let, name "padding", argno 3, loc "test.swift":32:48, scope 10 // id: %6
  debug_value %3 : $AES, let, name "self", argno 4, implicit, loc "test.swift":32:2, scope 10 // id: %7
  destroy_addr %1 : $*any BlockMode, loc "test.swift":32:68, scope 10 // id: %8
  destroy_value %0 : $Array<UInt8>, loc "test.swift":32:68, scope 10 // id: %9
  return %3 : $AES, loc "test.swift":32:68, scope 10 // id: %10
} // end sil function '$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc'

sil_scope 11 { loc "test.swift":33:2 parent @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES }

// AES.__allocating_init(key:blockMode:), loc "test.swift":33:2, scope 11
sil hidden [exact_self_class] [ossa] @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES {
// %0 "key"                                       // user: %5
// %1 "blockMode"                                 // user: %5
// %2 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : $@thick AES.Type):
  %3 = alloc_ref $AES, loc * "test.swift":33:2, scope 11 // user: %5
  // function_ref AES.init(key:blockMode:)
  %4 = function_ref @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned AES) -> @owned AES, loc * "test.swift":33:2, scope 11 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned AES) -> @owned AES, loc * "test.swift":33:50, scope 11 // user: %6
  return %5 : $AES, loc * "test.swift":33:50, scope 11 // id: %6
} // end sil function '$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC'

sil_scope 12 { loc "test.swift":33:2 parent @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned AES) -> @owned AES }

// AES.init(key:blockMode:), loc "test.swift":33:2, scope 12
sil hidden [ossa] @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned AES) -> @owned AES {
// %0 "key"                                       // users: %7, %3
// %1 "blockMode"                                 // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : @owned $AES):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":33:7, scope 12 // id: %3
  debug_value %1 : $*any BlockMode, let, name "blockMode", argno 2, expr op_deref, loc "test.swift":33:26, scope 12 // id: %4
  debug_value %2 : $AES, let, name "self", argno 3, implicit, loc "test.swift":33:2, scope 12 // id: %5
  destroy_addr %1 : $*any BlockMode, loc "test.swift":33:50, scope 12 // id: %6
  destroy_value %0 : $Array<UInt8>, loc "test.swift":33:50, scope 12 // id: %7
  return %2 : $AES, loc "test.swift":33:50, scope 12 // id: %8
} // end sil function '$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc'

sil_scope 13 { loc "test.swift":34:2 parent @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES }

// AES.__allocating_init(key:iv:), loc "test.swift":34:2, scope 13
sil hidden [exact_self_class] [ossa] @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES {
// %0 "key"                                       // user: %5
// %1 "iv"                                        // user: %5
// %2 "$metatype"
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $@thick AES.Type):
  %3 = alloc_ref $AES, loc * "test.swift":34:2, scope 13 // user: %5
  // function_ref AES.init(key:iv:)
  %4 = function_ref @$s4test3AESC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned AES) -> @owned AES, loc * "test.swift":34:2, scope 13 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned String, @owned String, @owned AES) -> @owned AES, loc * "test.swift":34:34, scope 13 // user: %6
  return %5 : $AES, loc * "test.swift":34:34, scope 13 // id: %6
} // end sil function '$s4test3AESC3key2ivACSS_SStcfC'

sil_scope 14 { loc "test.swift":34:2 parent @$s4test3AESC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned AES) -> @owned AES }

// AES.init(key:iv:), loc "test.swift":34:2, scope 14
sil hidden [ossa] @$s4test3AESC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned AES) -> @owned AES {
// %0 "key"                                       // users: %7, %3
// %1 "iv"                                        // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $String, %1 : @owned $String, %2 : @owned $AES):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":34:7, scope 14 // id: %3
  debug_value %1 : $String, let, name "iv", argno 2, loc "test.swift":34:20, scope 14 // id: %4
  debug_value %2 : $AES, let, name "self", argno 3, implicit, loc "test.swift":34:2, scope 14 // id: %5
  destroy_value %1 : $String, loc "test.swift":34:34, scope 14 // id: %6
  destroy_value %0 : $String, loc "test.swift":34:34, scope 14 // id: %7
  return %2 : $AES, loc "test.swift":34:34, scope 14 // id: %8
} // end sil function '$s4test3AESC3key2ivACSS_SStcfc'

sil_scope 15 { loc "test.swift":35:2 parent @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES }

// AES.__allocating_init(key:iv:padding:), loc "test.swift":35:2, scope 15
sil hidden [exact_self_class] [ossa] @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES {
// %0 "key"                                       // user: %6
// %1 "iv"                                        // user: %6
// %2 "padding"                                   // user: %6
// %3 "$metatype"
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $Padding, %3 : $@thick AES.Type):
  %4 = alloc_ref $AES, loc * "test.swift":35:2, scope 15 // user: %6
  // function_ref AES.init(key:iv:padding:)
  %5 = function_ref @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfc : $@convention(method) (@owned String, @owned String, Padding, @owned AES) -> @owned AES, loc * "test.swift":35:2, scope 15 // user: %6
  %6 = apply %5(%0, %1, %2, %4) : $@convention(method) (@owned String, @owned String, Padding, @owned AES) -> @owned AES, loc * "test.swift":35:52, scope 15 // user: %7
  return %6 : $AES, loc * "test.swift":35:52, scope 15 // id: %7
} // end sil function '$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC'

sil_scope 16 { loc "test.swift":35:2 parent @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfc : $@convention(method) (@owned String, @owned String, Padding, @owned AES) -> @owned AES }

// AES.init(key:iv:padding:), loc "test.swift":35:2, scope 16
sil hidden [ossa] @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfc : $@convention(method) (@owned String, @owned String, Padding, @owned AES) -> @owned AES {
// %0 "key"                                       // users: %9, %4
// %1 "iv"                                        // users: %8, %5
// %2 "padding"                                   // user: %6
// %3 "self"                                      // users: %10, %7
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $Padding, %3 : @owned $AES):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":35:7, scope 16 // id: %4
  debug_value %1 : $String, let, name "iv", argno 2, loc "test.swift":35:20, scope 16 // id: %5
  debug_value %2 : $Padding, let, name "padding", argno 3, loc "test.swift":35:32, scope 16 // id: %6
  debug_value %3 : $AES, let, name "self", argno 4, implicit, loc "test.swift":35:2, scope 16 // id: %7
  destroy_value %1 : $String, loc "test.swift":35:52, scope 16 // id: %8
  destroy_value %0 : $String, loc "test.swift":35:52, scope 16 // id: %9
  return %3 : $AES, loc "test.swift":35:52, scope 16 // id: %10
} // end sil function '$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfc'

sil_scope 17 { loc "test.swift":30:7 parent @$s4test3AESCfd : $@convention(method) (@guaranteed AES) -> @owned Builtin.NativeObject }

// AES.deinit, loc "test.swift":30:7, scope 17
sil hidden [ossa] @$s4test3AESCfd : $@convention(method) (@guaranteed AES) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $AES):
  debug_value %0 : $AES, let, name "self", argno 1, implicit, loc "test.swift":30:7, scope 17 // id: %1
  %2 = unchecked_ref_cast %0 : $AES to $Builtin.NativeObject, loc * "test.swift":30:7, scope 17 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":30:7, scope 17 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":30:7, scope 17 // id: %4
} // end sil function '$s4test3AESCfd'

sil_scope 18 { loc * "test.swift":30:7 parent @$s4test3AESCfD : $@convention(method) (@owned AES) -> () }

// AES.__deallocating_deinit, loc * "test.swift":30:7, scope 18
sil hidden [ossa] @$s4test3AESCfD : $@convention(method) (@owned AES) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $AES):
  debug_value %0 : $AES, let, name "self", argno 1, implicit, loc "test.swift":30:7, scope 18 // id: %1
  // function_ref AES.deinit
  %2 = function_ref @$s4test3AESCfd : $@convention(method) (@guaranteed AES) -> @owned Builtin.NativeObject, loc * "test.swift":30:7, scope 18 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed AES) -> @owned Builtin.NativeObject, loc * "test.swift":30:7, scope 18 // user: %5
  end_lifetime %0 : $AES, loc * "test.swift":30:7, scope 18 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $AES, loc * "test.swift":30:7, scope 18 // user: %6
  dealloc_ref %5 : $AES, loc * "test.swift":30:7, scope 18 // id: %6
  %7 = tuple (), loc * "test.swift":30:7, scope 18 // user: %8
  return %7 : $(), loc * "test.swift":30:7, scope 18 // id: %8
} // end sil function '$s4test3AESCfD'

sil_scope 19 { loc "test.swift":25:15 parent @$s4test3AESCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : AES> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> }

// protocol witness for static Cryptors.randomIV(_:) in conformance AES, loc "test.swift":25:15, scope 19
sil private [transparent] [thunk] [ossa] @$s4test3AESCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : AES> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $@thick τ_0_0.Type):
  // function_ref static Cryptors.randomIV(_:)
  %2 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 19 // user: %3
  %3 = apply %2<τ_0_0>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 19 // user: %4
  return %3 : $Array<UInt8>, loc * "test.swift":25:15, scope 19 // id: %4
} // end sil function '$s4test3AESCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW'

sil_scope 20 { loc "test.swift":40:2 parent @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish }

// Blowfish.__allocating_init(key:blockMode:padding:), loc "test.swift":40:2, scope 20
sil hidden [exact_self_class] [ossa] @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish {
// %0 "key"                                       // user: %6
// %1 "blockMode"                                 // user: %6
// %2 "padding"                                   // user: %6
// %3 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : $Padding, %3 : $@thick Blowfish.Type):
  %4 = alloc_ref $Blowfish, loc * "test.swift":40:2, scope 20 // user: %6
  // function_ref Blowfish.init(key:blockMode:padding:)
  %5 = function_ref @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":40:2, scope 20 // user: %6
  %6 = apply %5(%0, %1, %2, %4) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":40:68, scope 20 // user: %7
  return %6 : $Blowfish, loc * "test.swift":40:68, scope 20 // id: %7
} // end sil function '$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC'

sil_scope 21 { loc "test.swift":40:2 parent @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned Blowfish) -> @owned Blowfish }

// Blowfish.init(key:blockMode:padding:), loc "test.swift":40:2, scope 21
sil hidden [ossa] @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @owned Blowfish) -> @owned Blowfish {
// %0 "key"                                       // users: %9, %4
// %1 "blockMode"                                 // users: %8, %5
// %2 "padding"                                   // user: %6
// %3 "self"                                      // users: %10, %7
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : $Padding, %3 : @owned $Blowfish):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":40:7, scope 21 // id: %4
  debug_value %1 : $*any BlockMode, let, name "blockMode", argno 2, expr op_deref, loc "test.swift":40:26, scope 21 // id: %5
  debug_value %2 : $Padding, let, name "padding", argno 3, loc "test.swift":40:48, scope 21 // id: %6
  debug_value %3 : $Blowfish, let, name "self", argno 4, implicit, loc "test.swift":40:2, scope 21 // id: %7
  destroy_addr %1 : $*any BlockMode, loc "test.swift":40:68, scope 21 // id: %8
  destroy_value %0 : $Array<UInt8>, loc "test.swift":40:68, scope 21 // id: %9
  return %3 : $Blowfish, loc "test.swift":40:68, scope 21 // id: %10
} // end sil function '$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfc'

sil_scope 22 { loc "test.swift":41:3 parent @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, Padding, @thick Blowfish.Type) -> @owned Blowfish }

// Blowfish.__allocating_init(key:padding:), loc "test.swift":41:3, scope 22
sil hidden [exact_self_class] [ossa] @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, Padding, @thick Blowfish.Type) -> @owned Blowfish {
// %0 "key"                                       // user: %5
// %1 "padding"                                   // user: %5
// %2 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $Padding, %2 : $@thick Blowfish.Type):
  %3 = alloc_ref $Blowfish, loc * "test.swift":41:3, scope 22 // user: %5
  // function_ref Blowfish.init(key:padding:)
  %4 = function_ref @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, Padding, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":41:3, scope 22 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned Array<UInt8>, Padding, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":41:47, scope 22 // user: %6
  return %5 : $Blowfish, loc * "test.swift":41:47, scope 22 // id: %6
} // end sil function '$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfC'

sil_scope 23 { loc "test.swift":41:3 parent @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, Padding, @owned Blowfish) -> @owned Blowfish }

// Blowfish.init(key:padding:), loc "test.swift":41:3, scope 23
sil hidden [ossa] @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfc : $@convention(method) (@owned Array<UInt8>, Padding, @owned Blowfish) -> @owned Blowfish {
// %0 "key"                                       // users: %6, %3
// %1 "padding"                                   // user: %4
// %2 "self"                                      // users: %7, %5
bb0(%0 : @owned $Array<UInt8>, %1 : $Padding, %2 : @owned $Blowfish):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":41:8, scope 23 // id: %3
  debug_value %1 : $Padding, let, name "padding", argno 2, loc "test.swift":41:27, scope 23 // id: %4
  debug_value %2 : $Blowfish, let, name "self", argno 3, implicit, loc "test.swift":41:3, scope 23 // id: %5
  destroy_value %0 : $Array<UInt8>, loc "test.swift":41:47, scope 23 // id: %6
  return %2 : $Blowfish, loc "test.swift":41:47, scope 23 // id: %7
} // end sil function '$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfc'

sil_scope 24 { loc "test.swift":42:2 parent @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick Blowfish.Type) -> @owned Blowfish }

// Blowfish.__allocating_init(key:blockMode:), loc "test.swift":42:2, scope 24
sil hidden [exact_self_class] [ossa] @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick Blowfish.Type) -> @owned Blowfish {
// %0 "key"                                       // user: %5
// %1 "blockMode"                                 // user: %5
// %2 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : $@thick Blowfish.Type):
  %3 = alloc_ref $Blowfish, loc * "test.swift":42:2, scope 24 // user: %5
  // function_ref Blowfish.init(key:blockMode:)
  %4 = function_ref @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":42:2, scope 24 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":42:50, scope 24 // user: %6
  return %5 : $Blowfish, loc * "test.swift":42:50, scope 24 // id: %6
} // end sil function '$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC'

sil_scope 25 { loc "test.swift":42:2 parent @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned Blowfish) -> @owned Blowfish }

// Blowfish.init(key:blockMode:), loc "test.swift":42:2, scope 25
sil hidden [ossa] @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @owned Blowfish) -> @owned Blowfish {
// %0 "key"                                       // users: %7, %3
// %1 "blockMode"                                 // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $Array<UInt8>, %1 : $*any BlockMode, %2 : @owned $Blowfish):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":42:7, scope 25 // id: %3
  debug_value %1 : $*any BlockMode, let, name "blockMode", argno 2, expr op_deref, loc "test.swift":42:26, scope 25 // id: %4
  debug_value %2 : $Blowfish, let, name "self", argno 3, implicit, loc "test.swift":42:2, scope 25 // id: %5
  destroy_addr %1 : $*any BlockMode, loc "test.swift":42:50, scope 25 // id: %6
  destroy_value %0 : $Array<UInt8>, loc "test.swift":42:50, scope 25 // id: %7
  return %2 : $Blowfish, loc "test.swift":42:50, scope 25 // id: %8
} // end sil function '$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfc'

sil_scope 26 { loc "test.swift":43:2 parent @$s4test8BlowfishC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish }

// Blowfish.__allocating_init(key:iv:), loc "test.swift":43:2, scope 26
sil hidden [exact_self_class] [ossa] @$s4test8BlowfishC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish {
// %0 "key"                                       // user: %5
// %1 "iv"                                        // user: %5
// %2 "$metatype"
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $@thick Blowfish.Type):
  %3 = alloc_ref $Blowfish, loc * "test.swift":43:2, scope 26 // user: %5
  // function_ref Blowfish.init(key:iv:)
  %4 = function_ref @$s4test8BlowfishC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":43:2, scope 26 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned String, @owned String, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":43:34, scope 26 // user: %6
  return %5 : $Blowfish, loc * "test.swift":43:34, scope 26 // id: %6
} // end sil function '$s4test8BlowfishC3key2ivACSS_SStcfC'

sil_scope 27 { loc "test.swift":43:2 parent @$s4test8BlowfishC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned Blowfish) -> @owned Blowfish }

// Blowfish.init(key:iv:), loc "test.swift":43:2, scope 27
sil hidden [ossa] @$s4test8BlowfishC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned Blowfish) -> @owned Blowfish {
// %0 "key"                                       // users: %7, %3
// %1 "iv"                                        // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $String, %1 : @owned $String, %2 : @owned $Blowfish):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":43:7, scope 27 // id: %3
  debug_value %1 : $String, let, name "iv", argno 2, loc "test.swift":43:20, scope 27 // id: %4
  debug_value %2 : $Blowfish, let, name "self", argno 3, implicit, loc "test.swift":43:2, scope 27 // id: %5
  destroy_value %1 : $String, loc "test.swift":43:34, scope 27 // id: %6
  destroy_value %0 : $String, loc "test.swift":43:34, scope 27 // id: %7
  return %2 : $Blowfish, loc "test.swift":43:34, scope 27 // id: %8
} // end sil function '$s4test8BlowfishC3key2ivACSS_SStcfc'

sil_scope 28 { loc "test.swift":44:2 parent @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish }

// Blowfish.__allocating_init(key:iv:padding:), loc "test.swift":44:2, scope 28
sil hidden [exact_self_class] [ossa] @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish {
// %0 "key"                                       // user: %6
// %1 "iv"                                        // user: %6
// %2 "padding"                                   // user: %6
// %3 "$metatype"
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $Padding, %3 : $@thick Blowfish.Type):
  %4 = alloc_ref $Blowfish, loc * "test.swift":44:2, scope 28 // user: %6
  // function_ref Blowfish.init(key:iv:padding:)
  %5 = function_ref @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfc : $@convention(method) (@owned String, @owned String, Padding, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":44:2, scope 28 // user: %6
  %6 = apply %5(%0, %1, %2, %4) : $@convention(method) (@owned String, @owned String, Padding, @owned Blowfish) -> @owned Blowfish, loc * "test.swift":44:52, scope 28 // user: %7
  return %6 : $Blowfish, loc * "test.swift":44:52, scope 28 // id: %7
} // end sil function '$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC'

sil_scope 29 { loc "test.swift":44:2 parent @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfc : $@convention(method) (@owned String, @owned String, Padding, @owned Blowfish) -> @owned Blowfish }

// Blowfish.init(key:iv:padding:), loc "test.swift":44:2, scope 29
sil hidden [ossa] @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfc : $@convention(method) (@owned String, @owned String, Padding, @owned Blowfish) -> @owned Blowfish {
// %0 "key"                                       // users: %9, %4
// %1 "iv"                                        // users: %8, %5
// %2 "padding"                                   // user: %6
// %3 "self"                                      // users: %10, %7
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $Padding, %3 : @owned $Blowfish):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":44:7, scope 29 // id: %4
  debug_value %1 : $String, let, name "iv", argno 2, loc "test.swift":44:20, scope 29 // id: %5
  debug_value %2 : $Padding, let, name "padding", argno 3, loc "test.swift":44:32, scope 29 // id: %6
  debug_value %3 : $Blowfish, let, name "self", argno 4, implicit, loc "test.swift":44:2, scope 29 // id: %7
  destroy_value %1 : $String, loc "test.swift":44:52, scope 29 // id: %8
  destroy_value %0 : $String, loc "test.swift":44:52, scope 29 // id: %9
  return %3 : $Blowfish, loc "test.swift":44:52, scope 29 // id: %10
} // end sil function '$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfc'

sil_scope 30 { loc "test.swift":38:7 parent @$s4test8BlowfishCfd : $@convention(method) (@guaranteed Blowfish) -> @owned Builtin.NativeObject }

// Blowfish.deinit, loc "test.swift":38:7, scope 30
sil hidden [ossa] @$s4test8BlowfishCfd : $@convention(method) (@guaranteed Blowfish) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $Blowfish):
  debug_value %0 : $Blowfish, let, name "self", argno 1, implicit, loc "test.swift":38:7, scope 30 // id: %1
  %2 = unchecked_ref_cast %0 : $Blowfish to $Builtin.NativeObject, loc * "test.swift":38:7, scope 30 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":38:7, scope 30 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":38:7, scope 30 // id: %4
} // end sil function '$s4test8BlowfishCfd'

sil_scope 31 { loc * "test.swift":38:7 parent @$s4test8BlowfishCfD : $@convention(method) (@owned Blowfish) -> () }

// Blowfish.__deallocating_deinit, loc * "test.swift":38:7, scope 31
sil hidden [ossa] @$s4test8BlowfishCfD : $@convention(method) (@owned Blowfish) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $Blowfish):
  debug_value %0 : $Blowfish, let, name "self", argno 1, implicit, loc "test.swift":38:7, scope 31 // id: %1
  // function_ref Blowfish.deinit
  %2 = function_ref @$s4test8BlowfishCfd : $@convention(method) (@guaranteed Blowfish) -> @owned Builtin.NativeObject, loc * "test.swift":38:7, scope 31 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Blowfish) -> @owned Builtin.NativeObject, loc * "test.swift":38:7, scope 31 // user: %5
  end_lifetime %0 : $Blowfish, loc * "test.swift":38:7, scope 31 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $Blowfish, loc * "test.swift":38:7, scope 31 // user: %6
  dealloc_ref %5 : $Blowfish, loc * "test.swift":38:7, scope 31 // id: %6
  %7 = tuple (), loc * "test.swift":38:7, scope 31 // user: %8
  return %7 : $(), loc * "test.swift":38:7, scope 31 // id: %8
} // end sil function '$s4test8BlowfishCfD'

sil_scope 32 { loc "test.swift":25:15 parent @$s4test8BlowfishCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : Blowfish> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> }

// protocol witness for static Cryptors.randomIV(_:) in conformance Blowfish, loc "test.swift":25:15, scope 32
sil private [transparent] [thunk] [ossa] @$s4test8BlowfishCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : Blowfish> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $@thick τ_0_0.Type):
  // function_ref static Cryptors.randomIV(_:)
  %2 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 32 // user: %3
  %3 = apply %2<τ_0_0>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 32 // user: %4
  return %3 : $Array<UInt8>, loc * "test.swift":25:15, scope 32 // id: %4
} // end sil function '$s4test8BlowfishCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW'

sil_scope 33 { loc "test.swift":49:2 parent @$s4test4HMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC }

// HMAC.__allocating_init(key:), loc "test.swift":49:2, scope 33
sil hidden [exact_self_class] [ossa] @$s4test4HMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC {
// %0 "key"                                       // user: %4
// %1 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $@thick HMAC.Type):
  %2 = alloc_ref $HMAC, loc * "test.swift":49:2, scope 33 // user: %4
  // function_ref HMAC.init(key:)
  %3 = function_ref @$s4test4HMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned HMAC) -> @owned HMAC, loc * "test.swift":49:2, scope 33 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@owned Array<UInt8>, @owned HMAC) -> @owned HMAC, loc * "test.swift":49:28, scope 33 // user: %5
  return %4 : $HMAC, loc * "test.swift":49:28, scope 33 // id: %5
} // end sil function '$s4test4HMACC3keyACSays5UInt8VG_tcfC'

sil_scope 34 { loc "test.swift":49:2 parent @$s4test4HMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned HMAC) -> @owned HMAC }

// HMAC.init(key:), loc "test.swift":49:2, scope 34
sil hidden [ossa] @$s4test4HMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned HMAC) -> @owned HMAC {
// %0 "key"                                       // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $HMAC):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":49:7, scope 34 // id: %2
  debug_value %1 : $HMAC, let, name "self", argno 2, implicit, loc "test.swift":49:2, scope 34 // id: %3
  destroy_value %0 : $Array<UInt8>, loc "test.swift":49:28, scope 34 // id: %4
  return %1 : $HMAC, loc "test.swift":49:28, scope 34 // id: %5
} // end sil function '$s4test4HMACC3keyACSays5UInt8VG_tcfc'

sil_scope 35 { loc "test.swift":50:2 parent @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC }

// HMAC.__allocating_init(key:variant:), loc "test.swift":50:2, scope 35
sil hidden [exact_self_class] [ossa] @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC {
// %0 "key"                                       // user: %5
// %1 "variant"                                   // user: %5
// %2 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $HMAC.Variant, %2 : $@thick HMAC.Type):
  %3 = alloc_ref $HMAC, loc * "test.swift":50:2, scope 35 // user: %5
  // function_ref HMAC.init(key:variant:)
  %4 = function_ref @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfc : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @owned HMAC) -> @owned HMAC, loc * "test.swift":50:2, scope 35 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @owned HMAC) -> @owned HMAC, loc * "test.swift":50:46, scope 35 // user: %6
  return %5 : $HMAC, loc * "test.swift":50:46, scope 35 // id: %6
} // end sil function '$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC'

sil_scope 36 { loc "test.swift":50:2 parent @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfc : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @owned HMAC) -> @owned HMAC }

// HMAC.init(key:variant:), loc "test.swift":50:2, scope 36
sil hidden [ossa] @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfc : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @owned HMAC) -> @owned HMAC {
// %0 "key"                                       // users: %6, %3
// %1 "variant"                                   // user: %4
// %2 "self"                                      // users: %7, %5
bb0(%0 : @owned $Array<UInt8>, %1 : $HMAC.Variant, %2 : @owned $HMAC):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":50:7, scope 36 // id: %3
  debug_value %1 : $HMAC.Variant, let, name "variant", argno 2, loc "test.swift":50:26, scope 36 // id: %4
  debug_value %2 : $HMAC, let, name "self", argno 3, implicit, loc "test.swift":50:2, scope 36 // id: %5
  destroy_value %0 : $Array<UInt8>, loc "test.swift":50:46, scope 36 // id: %6
  return %2 : $HMAC, loc "test.swift":50:46, scope 36 // id: %7
} // end sil function '$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfc'

sil_scope 37 { loc "test.swift":51:2 parent @$s4test4HMACC3keyACSS_tcfC : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC }

// HMAC.__allocating_init(key:), loc "test.swift":51:2, scope 37
sil hidden [exact_self_class] [ossa] @$s4test4HMACC3keyACSS_tcfC : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC {
// %0 "key"                                       // user: %4
// %1 "$metatype"
bb0(%0 : @owned $String, %1 : $@thick HMAC.Type):
  %2 = alloc_ref $HMAC, loc * "test.swift":51:2, scope 37 // user: %4
  // function_ref HMAC.init(key:)
  %3 = function_ref @$s4test4HMACC3keyACSS_tcfc : $@convention(method) (@owned String, @owned HMAC) -> @owned HMAC, loc * "test.swift":51:2, scope 37 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@owned String, @owned HMAC) -> @owned HMAC, loc * "test.swift":51:22, scope 37 // user: %5
  return %4 : $HMAC, loc * "test.swift":51:22, scope 37 // id: %5
} // end sil function '$s4test4HMACC3keyACSS_tcfC'

sil_scope 38 { loc "test.swift":51:2 parent @$s4test4HMACC3keyACSS_tcfc : $@convention(method) (@owned String, @owned HMAC) -> @owned HMAC }

// HMAC.init(key:), loc "test.swift":51:2, scope 38
sil hidden [ossa] @$s4test4HMACC3keyACSS_tcfc : $@convention(method) (@owned String, @owned HMAC) -> @owned HMAC {
// %0 "key"                                       // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : @owned $String, %1 : @owned $HMAC):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":51:7, scope 38 // id: %2
  debug_value %1 : $HMAC, let, name "self", argno 2, implicit, loc "test.swift":51:2, scope 38 // id: %3
  destroy_value %0 : $String, loc "test.swift":51:22, scope 38 // id: %4
  return %1 : $HMAC, loc "test.swift":51:22, scope 38 // id: %5
} // end sil function '$s4test4HMACC3keyACSS_tcfc'

sil_scope 39 { loc "test.swift":52:2 parent @$s4test4HMACC3key7variantACSS_AC7VariantOtcfC : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC }

// HMAC.__allocating_init(key:variant:), loc "test.swift":52:2, scope 39
sil hidden [exact_self_class] [ossa] @$s4test4HMACC3key7variantACSS_AC7VariantOtcfC : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC {
// %0 "key"                                       // user: %5
// %1 "variant"                                   // user: %5
// %2 "$metatype"
bb0(%0 : @owned $String, %1 : $HMAC.Variant, %2 : $@thick HMAC.Type):
  %3 = alloc_ref $HMAC, loc * "test.swift":52:2, scope 39 // user: %5
  // function_ref HMAC.init(key:variant:)
  %4 = function_ref @$s4test4HMACC3key7variantACSS_AC7VariantOtcfc : $@convention(method) (@owned String, HMAC.Variant, @owned HMAC) -> @owned HMAC, loc * "test.swift":52:2, scope 39 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned String, HMAC.Variant, @owned HMAC) -> @owned HMAC, loc * "test.swift":52:40, scope 39 // user: %6
  return %5 : $HMAC, loc * "test.swift":52:40, scope 39 // id: %6
} // end sil function '$s4test4HMACC3key7variantACSS_AC7VariantOtcfC'

sil_scope 40 { loc "test.swift":52:2 parent @$s4test4HMACC3key7variantACSS_AC7VariantOtcfc : $@convention(method) (@owned String, HMAC.Variant, @owned HMAC) -> @owned HMAC }

// HMAC.init(key:variant:), loc "test.swift":52:2, scope 40
sil hidden [ossa] @$s4test4HMACC3key7variantACSS_AC7VariantOtcfc : $@convention(method) (@owned String, HMAC.Variant, @owned HMAC) -> @owned HMAC {
// %0 "key"                                       // users: %6, %3
// %1 "variant"                                   // user: %4
// %2 "self"                                      // users: %7, %5
bb0(%0 : @owned $String, %1 : $HMAC.Variant, %2 : @owned $HMAC):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":52:7, scope 40 // id: %3
  debug_value %1 : $HMAC.Variant, let, name "variant", argno 2, loc "test.swift":52:20, scope 40 // id: %4
  debug_value %2 : $HMAC, let, name "self", argno 3, implicit, loc "test.swift":52:2, scope 40 // id: %5
  destroy_value %0 : $String, loc "test.swift":52:40, scope 40 // id: %6
  return %2 : $HMAC, loc "test.swift":52:40, scope 40 // id: %7
} // end sil function '$s4test4HMACC3key7variantACSS_AC7VariantOtcfc'

sil_scope 41 { loc "test.swift":47:7 parent @$s4test4HMACCfd : $@convention(method) (@guaranteed HMAC) -> @owned Builtin.NativeObject }

// HMAC.deinit, loc "test.swift":47:7, scope 41
sil hidden [ossa] @$s4test4HMACCfd : $@convention(method) (@guaranteed HMAC) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $HMAC):
  debug_value %0 : $HMAC, let, name "self", argno 1, implicit, loc "test.swift":47:7, scope 41 // id: %1
  %2 = unchecked_ref_cast %0 : $HMAC to $Builtin.NativeObject, loc * "test.swift":47:7, scope 41 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":47:7, scope 41 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":47:7, scope 41 // id: %4
} // end sil function '$s4test4HMACCfd'

sil_scope 42 { loc * "test.swift":47:7 parent @$s4test4HMACCfD : $@convention(method) (@owned HMAC) -> () }

// HMAC.__deallocating_deinit, loc * "test.swift":47:7, scope 42
sil hidden [ossa] @$s4test4HMACCfD : $@convention(method) (@owned HMAC) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $HMAC):
  debug_value %0 : $HMAC, let, name "self", argno 1, implicit, loc "test.swift":47:7, scope 42 // id: %1
  // function_ref HMAC.deinit
  %2 = function_ref @$s4test4HMACCfd : $@convention(method) (@guaranteed HMAC) -> @owned Builtin.NativeObject, loc * "test.swift":47:7, scope 42 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed HMAC) -> @owned Builtin.NativeObject, loc * "test.swift":47:7, scope 42 // user: %5
  end_lifetime %0 : $HMAC, loc * "test.swift":47:7, scope 42 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $HMAC, loc * "test.swift":47:7, scope 42 // user: %6
  dealloc_ref %5 : $HMAC, loc * "test.swift":47:7, scope 42 // id: %6
  %7 = tuple (), loc * "test.swift":47:7, scope 42 // user: %8
  return %7 : $(), loc * "test.swift":47:7, scope 42 // id: %8
} // end sil function '$s4test4HMACCfD'

sil_scope 43 { loc "test.swift":25:15 parent @$s4test4HMACCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : HMAC> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> }

// protocol witness for static Cryptors.randomIV(_:) in conformance HMAC, loc "test.swift":25:15, scope 43
sil private [transparent] [thunk] [ossa] @$s4test4HMACCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : HMAC> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $@thick τ_0_0.Type):
  // function_ref static Cryptors.randomIV(_:)
  %2 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 43 // user: %3
  %3 = apply %2<τ_0_0>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 43 // user: %4
  return %3 : $Array<UInt8>, loc * "test.swift":25:15, scope 43 // id: %4
} // end sil function '$s4test4HMACCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW'

sil_scope 44 { loc "test.swift":63:2 parent @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20 }

// ChaCha20.__allocating_init(key:iv:), loc "test.swift":63:2, scope 44
sil hidden [exact_self_class] [ossa] @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20 {
// %0 "key"                                       // user: %5
// %1 "iv"                                        // user: %5
// %2 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $Array<UInt8>, %2 : $@thick ChaCha20.Type):
  %3 = alloc_ref $ChaCha20, loc * "test.swift":63:2, scope 44 // user: %5
  // function_ref ChaCha20.init(key:iv:)
  %4 = function_ref @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfc : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @owned ChaCha20) -> @owned ChaCha20, loc * "test.swift":63:2, scope 44 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @owned ChaCha20) -> @owned ChaCha20, loc * "test.swift":63:46, scope 44 // user: %6
  return %5 : $ChaCha20, loc * "test.swift":63:46, scope 44 // id: %6
} // end sil function '$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC'

sil_scope 45 { loc "test.swift":63:2 parent @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfc : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @owned ChaCha20) -> @owned ChaCha20 }

// ChaCha20.init(key:iv:), loc "test.swift":63:2, scope 45
sil hidden [ossa] @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfc : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @owned ChaCha20) -> @owned ChaCha20 {
// %0 "key"                                       // users: %7, %3
// %1 "iv"                                        // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $Array<UInt8>, %2 : @owned $ChaCha20):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":63:7, scope 45 // id: %3
  debug_value %1 : $Array<UInt8>, let, name "iv", argno 2, loc "test.swift":63:26, scope 45 // id: %4
  debug_value %2 : $ChaCha20, let, name "self", argno 3, implicit, loc "test.swift":63:2, scope 45 // id: %5
  destroy_value %1 : $Array<UInt8>, loc "test.swift":63:46, scope 45 // id: %6
  destroy_value %0 : $Array<UInt8>, loc "test.swift":63:46, scope 45 // id: %7
  return %2 : $ChaCha20, loc "test.swift":63:46, scope 45 // id: %8
} // end sil function '$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfc'

sil_scope 46 { loc "test.swift":64:2 parent @$s4test8ChaCha20C3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20 }

// ChaCha20.__allocating_init(key:iv:), loc "test.swift":64:2, scope 46
sil hidden [exact_self_class] [ossa] @$s4test8ChaCha20C3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20 {
// %0 "key"                                       // user: %5
// %1 "iv"                                        // user: %5
// %2 "$metatype"
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $@thick ChaCha20.Type):
  %3 = alloc_ref $ChaCha20, loc * "test.swift":64:2, scope 46 // user: %5
  // function_ref ChaCha20.init(key:iv:)
  %4 = function_ref @$s4test8ChaCha20C3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned ChaCha20) -> @owned ChaCha20, loc * "test.swift":64:2, scope 46 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned String, @owned String, @owned ChaCha20) -> @owned ChaCha20, loc * "test.swift":64:34, scope 46 // user: %6
  return %5 : $ChaCha20, loc * "test.swift":64:34, scope 46 // id: %6
} // end sil function '$s4test8ChaCha20C3key2ivACSS_SStcfC'

sil_scope 47 { loc "test.swift":64:2 parent @$s4test8ChaCha20C3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned ChaCha20) -> @owned ChaCha20 }

// ChaCha20.init(key:iv:), loc "test.swift":64:2, scope 47
sil hidden [ossa] @$s4test8ChaCha20C3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned ChaCha20) -> @owned ChaCha20 {
// %0 "key"                                       // users: %7, %3
// %1 "iv"                                        // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $String, %1 : @owned $String, %2 : @owned $ChaCha20):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":64:7, scope 47 // id: %3
  debug_value %1 : $String, let, name "iv", argno 2, loc "test.swift":64:20, scope 47 // id: %4
  debug_value %2 : $ChaCha20, let, name "self", argno 3, implicit, loc "test.swift":64:2, scope 47 // id: %5
  destroy_value %1 : $String, loc "test.swift":64:34, scope 47 // id: %6
  destroy_value %0 : $String, loc "test.swift":64:34, scope 47 // id: %7
  return %2 : $ChaCha20, loc "test.swift":64:34, scope 47 // id: %8
} // end sil function '$s4test8ChaCha20C3key2ivACSS_SStcfc'

sil_scope 48 { loc "test.swift":61:7 parent @$s4test8ChaCha20Cfd : $@convention(method) (@guaranteed ChaCha20) -> @owned Builtin.NativeObject }

// ChaCha20.deinit, loc "test.swift":61:7, scope 48
sil hidden [ossa] @$s4test8ChaCha20Cfd : $@convention(method) (@guaranteed ChaCha20) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $ChaCha20):
  debug_value %0 : $ChaCha20, let, name "self", argno 1, implicit, loc "test.swift":61:7, scope 48 // id: %1
  %2 = unchecked_ref_cast %0 : $ChaCha20 to $Builtin.NativeObject, loc * "test.swift":61:7, scope 48 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":61:7, scope 48 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":61:7, scope 48 // id: %4
} // end sil function '$s4test8ChaCha20Cfd'

sil_scope 49 { loc * "test.swift":61:7 parent @$s4test8ChaCha20CfD : $@convention(method) (@owned ChaCha20) -> () }

// ChaCha20.__deallocating_deinit, loc * "test.swift":61:7, scope 49
sil hidden [ossa] @$s4test8ChaCha20CfD : $@convention(method) (@owned ChaCha20) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $ChaCha20):
  debug_value %0 : $ChaCha20, let, name "self", argno 1, implicit, loc "test.swift":61:7, scope 49 // id: %1
  // function_ref ChaCha20.deinit
  %2 = function_ref @$s4test8ChaCha20Cfd : $@convention(method) (@guaranteed ChaCha20) -> @owned Builtin.NativeObject, loc * "test.swift":61:7, scope 49 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed ChaCha20) -> @owned Builtin.NativeObject, loc * "test.swift":61:7, scope 49 // user: %5
  end_lifetime %0 : $ChaCha20, loc * "test.swift":61:7, scope 49 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $ChaCha20, loc * "test.swift":61:7, scope 49 // user: %6
  dealloc_ref %5 : $ChaCha20, loc * "test.swift":61:7, scope 49 // id: %6
  %7 = tuple (), loc * "test.swift":61:7, scope 49 // user: %8
  return %7 : $(), loc * "test.swift":61:7, scope 49 // id: %8
} // end sil function '$s4test8ChaCha20CfD'

sil_scope 50 { loc "test.swift":25:15 parent @$s4test8ChaCha20CAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : ChaCha20> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> }

// protocol witness for static Cryptors.randomIV(_:) in conformance ChaCha20, loc "test.swift":25:15, scope 50
sil private [transparent] [thunk] [ossa] @$s4test8ChaCha20CAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : ChaCha20> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $@thick τ_0_0.Type):
  // function_ref static Cryptors.randomIV(_:)
  %2 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 50 // user: %3
  %3 = apply %2<τ_0_0>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 50 // user: %4
  return %3 : $Array<UInt8>, loc * "test.swift":25:15, scope 50 // id: %4
} // end sil function '$s4test8ChaCha20CAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW'

sil_scope 51 { loc "test.swift":69:2 parent @$s4test6RabbitC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit }

// Rabbit.__allocating_init(key:), loc "test.swift":69:2, scope 51
sil hidden [exact_self_class] [ossa] @$s4test6RabbitC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit {
// %0 "key"                                       // user: %4
// %1 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $@thick Rabbit.Type):
  %2 = alloc_ref $Rabbit, loc * "test.swift":69:2, scope 51 // user: %4
  // function_ref Rabbit.init(key:)
  %3 = function_ref @$s4test6RabbitC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":69:2, scope 51 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@owned Array<UInt8>, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":69:28, scope 51 // user: %5
  return %4 : $Rabbit, loc * "test.swift":69:28, scope 51 // id: %5
} // end sil function '$s4test6RabbitC3keyACSays5UInt8VG_tcfC'

sil_scope 52 { loc "test.swift":69:2 parent @$s4test6RabbitC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned Rabbit) -> @owned Rabbit }

// Rabbit.init(key:), loc "test.swift":69:2, scope 52
sil hidden [ossa] @$s4test6RabbitC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned Rabbit) -> @owned Rabbit {
// %0 "key"                                       // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $Rabbit):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":69:7, scope 52 // id: %2
  debug_value %1 : $Rabbit, let, name "self", argno 2, implicit, loc "test.swift":69:2, scope 52 // id: %3
  destroy_value %0 : $Array<UInt8>, loc "test.swift":69:28, scope 52 // id: %4
  return %1 : $Rabbit, loc "test.swift":69:28, scope 52 // id: %5
} // end sil function '$s4test6RabbitC3keyACSays5UInt8VG_tcfc'

sil_scope 53 { loc "test.swift":70:2 parent @$s4test6RabbitC3keyACSS_tcfC : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit }

// Rabbit.__allocating_init(key:), loc "test.swift":70:2, scope 53
sil hidden [exact_self_class] [ossa] @$s4test6RabbitC3keyACSS_tcfC : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit {
// %0 "key"                                       // user: %4
// %1 "$metatype"
bb0(%0 : @owned $String, %1 : $@thick Rabbit.Type):
  %2 = alloc_ref $Rabbit, loc * "test.swift":70:2, scope 53 // user: %4
  // function_ref Rabbit.init(key:)
  %3 = function_ref @$s4test6RabbitC3keyACSS_tcfc : $@convention(method) (@owned String, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":70:2, scope 53 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@owned String, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":70:22, scope 53 // user: %5
  return %4 : $Rabbit, loc * "test.swift":70:22, scope 53 // id: %5
} // end sil function '$s4test6RabbitC3keyACSS_tcfC'

sil_scope 54 { loc "test.swift":70:2 parent @$s4test6RabbitC3keyACSS_tcfc : $@convention(method) (@owned String, @owned Rabbit) -> @owned Rabbit }

// Rabbit.init(key:), loc "test.swift":70:2, scope 54
sil hidden [ossa] @$s4test6RabbitC3keyACSS_tcfc : $@convention(method) (@owned String, @owned Rabbit) -> @owned Rabbit {
// %0 "key"                                       // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : @owned $String, %1 : @owned $Rabbit):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":70:7, scope 54 // id: %2
  debug_value %1 : $Rabbit, let, name "self", argno 2, implicit, loc "test.swift":70:2, scope 54 // id: %3
  destroy_value %0 : $String, loc "test.swift":70:22, scope 54 // id: %4
  return %1 : $Rabbit, loc "test.swift":70:22, scope 54 // id: %5
} // end sil function '$s4test6RabbitC3keyACSS_tcfc'

sil_scope 55 { loc "test.swift":71:2 parent @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit }

// Rabbit.__allocating_init(key:iv:), loc "test.swift":71:2, scope 55
sil hidden [exact_self_class] [ossa] @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit {
// %0 "key"                                       // user: %5
// %1 "iv"                                        // user: %5
// %2 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $Optional<Array<UInt8>>, %2 : $@thick Rabbit.Type):
  %3 = alloc_ref $Rabbit, loc * "test.swift":71:2, scope 55 // user: %5
  // function_ref Rabbit.init(key:iv:)
  %4 = function_ref @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfc : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":71:2, scope 55 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":71:47, scope 55 // user: %6
  return %5 : $Rabbit, loc * "test.swift":71:47, scope 55 // id: %6
} // end sil function '$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC'

sil_scope 56 { loc "test.swift":71:2 parent @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfc : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @owned Rabbit) -> @owned Rabbit }

// Rabbit.init(key:iv:), loc "test.swift":71:2, scope 56
sil hidden [ossa] @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfc : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @owned Rabbit) -> @owned Rabbit {
// %0 "key"                                       // users: %7, %3
// %1 "iv"                                        // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $Optional<Array<UInt8>>, %2 : @owned $Rabbit):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":71:7, scope 56 // id: %3
  debug_value %1 : $Optional<Array<UInt8>>, let, name "iv", argno 2, loc "test.swift":71:26, scope 56 // id: %4
  debug_value %2 : $Rabbit, let, name "self", argno 3, implicit, loc "test.swift":71:2, scope 56 // id: %5
  destroy_value %1 : $Optional<Array<UInt8>>, loc "test.swift":71:47, scope 56 // id: %6
  destroy_value %0 : $Array<UInt8>, loc "test.swift":71:47, scope 56 // id: %7
  return %2 : $Rabbit, loc "test.swift":71:47, scope 56 // id: %8
} // end sil function '$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfc'

sil_scope 57 { loc "test.swift":72:2 parent @$s4test6RabbitC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit }

// Rabbit.__allocating_init(key:iv:), loc "test.swift":72:2, scope 57
sil hidden [exact_self_class] [ossa] @$s4test6RabbitC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit {
// %0 "key"                                       // user: %5
// %1 "iv"                                        // user: %5
// %2 "$metatype"
bb0(%0 : @owned $String, %1 : @owned $String, %2 : $@thick Rabbit.Type):
  %3 = alloc_ref $Rabbit, loc * "test.swift":72:2, scope 57 // user: %5
  // function_ref Rabbit.init(key:iv:)
  %4 = function_ref @$s4test6RabbitC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":72:2, scope 57 // user: %5
  %5 = apply %4(%0, %1, %3) : $@convention(method) (@owned String, @owned String, @owned Rabbit) -> @owned Rabbit, loc * "test.swift":72:34, scope 57 // user: %6
  return %5 : $Rabbit, loc * "test.swift":72:34, scope 57 // id: %6
} // end sil function '$s4test6RabbitC3key2ivACSS_SStcfC'

sil_scope 58 { loc "test.swift":72:2 parent @$s4test6RabbitC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned Rabbit) -> @owned Rabbit }

// Rabbit.init(key:iv:), loc "test.swift":72:2, scope 58
sil hidden [ossa] @$s4test6RabbitC3key2ivACSS_SStcfc : $@convention(method) (@owned String, @owned String, @owned Rabbit) -> @owned Rabbit {
// %0 "key"                                       // users: %7, %3
// %1 "iv"                                        // users: %6, %4
// %2 "self"                                      // users: %8, %5
bb0(%0 : @owned $String, %1 : @owned $String, %2 : @owned $Rabbit):
  debug_value %0 : $String, let, name "key", argno 1, loc "test.swift":72:7, scope 58 // id: %3
  debug_value %1 : $String, let, name "iv", argno 2, loc "test.swift":72:20, scope 58 // id: %4
  debug_value %2 : $Rabbit, let, name "self", argno 3, implicit, loc "test.swift":72:2, scope 58 // id: %5
  destroy_value %1 : $String, loc "test.swift":72:34, scope 58 // id: %6
  destroy_value %0 : $String, loc "test.swift":72:34, scope 58 // id: %7
  return %2 : $Rabbit, loc "test.swift":72:34, scope 58 // id: %8
} // end sil function '$s4test6RabbitC3key2ivACSS_SStcfc'

sil_scope 59 { loc "test.swift":67:7 parent @$s4test6RabbitCfd : $@convention(method) (@guaranteed Rabbit) -> @owned Builtin.NativeObject }

// Rabbit.deinit, loc "test.swift":67:7, scope 59
sil hidden [ossa] @$s4test6RabbitCfd : $@convention(method) (@guaranteed Rabbit) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $Rabbit):
  debug_value %0 : $Rabbit, let, name "self", argno 1, implicit, loc "test.swift":67:7, scope 59 // id: %1
  %2 = unchecked_ref_cast %0 : $Rabbit to $Builtin.NativeObject, loc * "test.swift":67:7, scope 59 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":67:7, scope 59 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":67:7, scope 59 // id: %4
} // end sil function '$s4test6RabbitCfd'

sil_scope 60 { loc * "test.swift":67:7 parent @$s4test6RabbitCfD : $@convention(method) (@owned Rabbit) -> () }

// Rabbit.__deallocating_deinit, loc * "test.swift":67:7, scope 60
sil hidden [ossa] @$s4test6RabbitCfD : $@convention(method) (@owned Rabbit) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $Rabbit):
  debug_value %0 : $Rabbit, let, name "self", argno 1, implicit, loc "test.swift":67:7, scope 60 // id: %1
  // function_ref Rabbit.deinit
  %2 = function_ref @$s4test6RabbitCfd : $@convention(method) (@guaranteed Rabbit) -> @owned Builtin.NativeObject, loc * "test.swift":67:7, scope 60 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Rabbit) -> @owned Builtin.NativeObject, loc * "test.swift":67:7, scope 60 // user: %5
  end_lifetime %0 : $Rabbit, loc * "test.swift":67:7, scope 60 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $Rabbit, loc * "test.swift":67:7, scope 60 // user: %6
  dealloc_ref %5 : $Rabbit, loc * "test.swift":67:7, scope 60 // id: %6
  %7 = tuple (), loc * "test.swift":67:7, scope 60 // user: %8
  return %7 : $(), loc * "test.swift":67:7, scope 60 // id: %8
} // end sil function '$s4test6RabbitCfD'

sil_scope 61 { loc "test.swift":25:15 parent @$s4test6RabbitCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : Rabbit> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> }

// protocol witness for static Cryptors.randomIV(_:) in conformance Rabbit, loc "test.swift":25:15, scope 61
sil private [transparent] [thunk] [ossa] @$s4test6RabbitCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW : $@convention(witness_method: Cryptors) <τ_0_0 where τ_0_0 : Rabbit> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8> {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $@thick τ_0_0.Type):
  // function_ref static Cryptors.randomIV(_:)
  %2 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 61 // user: %3
  %3 = apply %2<τ_0_0>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc * "test.swift":25:15, scope 61 // user: %4
  return %3 : $Array<UInt8>, loc * "test.swift":25:15, scope 61 // id: %4
} // end sil function '$s4test6RabbitCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW'

sil_scope 62 { loc "test.swift":77:2 parent @$s4test6CBCMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC }

// CBCMAC.__allocating_init(key:), loc "test.swift":77:2, scope 62
sil hidden [exact_self_class] [ossa] @$s4test6CBCMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC {
// %0 "key"                                       // user: %4
// %1 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $@thick CBCMAC.Type):
  %2 = alloc_ref $CBCMAC, loc * "test.swift":77:2, scope 62 // user: %4
  // function_ref CBCMAC.init(key:)
  %3 = function_ref @$s4test6CBCMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned CBCMAC) -> @owned CBCMAC, loc * "test.swift":77:2, scope 62 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@owned Array<UInt8>, @owned CBCMAC) -> @owned CBCMAC, loc * "test.swift":77:28, scope 62 // user: %5
  return %4 : $CBCMAC, loc * "test.swift":77:28, scope 62 // id: %5
} // end sil function '$s4test6CBCMACC3keyACSays5UInt8VG_tcfC'

sil_scope 63 { loc "test.swift":77:2 parent @$s4test6CBCMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned CBCMAC) -> @owned CBCMAC }

// CBCMAC.init(key:), loc "test.swift":77:2, scope 63
sil hidden [ossa] @$s4test6CBCMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned CBCMAC) -> @owned CBCMAC {
// %0 "key"                                       // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $CBCMAC):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":77:7, scope 63 // id: %2
  debug_value %1 : $CBCMAC, let, name "self", argno 2, implicit, loc "test.swift":77:2, scope 63 // id: %3
  destroy_value %0 : $Array<UInt8>, loc "test.swift":77:28, scope 63 // id: %4
  return %1 : $CBCMAC, loc "test.swift":77:28, scope 63 // id: %5
} // end sil function '$s4test6CBCMACC3keyACSays5UInt8VG_tcfc'

sil_scope 64 { loc "test.swift":75:7 parent @$s4test6CBCMACCfd : $@convention(method) (@guaranteed CBCMAC) -> @owned Builtin.NativeObject }

// CBCMAC.deinit, loc "test.swift":75:7, scope 64
sil hidden [ossa] @$s4test6CBCMACCfd : $@convention(method) (@guaranteed CBCMAC) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $CBCMAC):
  debug_value %0 : $CBCMAC, let, name "self", argno 1, implicit, loc "test.swift":75:7, scope 64 // id: %1
  %2 = unchecked_ref_cast %0 : $CBCMAC to $Builtin.NativeObject, loc * "test.swift":75:7, scope 64 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":75:7, scope 64 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":75:7, scope 64 // id: %4
} // end sil function '$s4test6CBCMACCfd'

sil_scope 65 { loc * "test.swift":75:7 parent @$s4test6CBCMACCfD : $@convention(method) (@owned CBCMAC) -> () }

// CBCMAC.__deallocating_deinit, loc * "test.swift":75:7, scope 65
sil hidden [ossa] @$s4test6CBCMACCfD : $@convention(method) (@owned CBCMAC) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $CBCMAC):
  debug_value %0 : $CBCMAC, let, name "self", argno 1, implicit, loc "test.swift":75:7, scope 65 // id: %1
  // function_ref CBCMAC.deinit
  %2 = function_ref @$s4test6CBCMACCfd : $@convention(method) (@guaranteed CBCMAC) -> @owned Builtin.NativeObject, loc * "test.swift":75:7, scope 65 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed CBCMAC) -> @owned Builtin.NativeObject, loc * "test.swift":75:7, scope 65 // user: %5
  end_lifetime %0 : $CBCMAC, loc * "test.swift":75:7, scope 65 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $CBCMAC, loc * "test.swift":75:7, scope 65 // user: %6
  dealloc_ref %5 : $CBCMAC, loc * "test.swift":75:7, scope 65 // id: %6
  %7 = tuple (), loc * "test.swift":75:7, scope 65 // user: %8
  return %7 : $(), loc * "test.swift":75:7, scope 65 // id: %8
} // end sil function '$s4test6CBCMACCfD'

sil_scope 66 { loc "test.swift":82:2 parent @$s4test4CMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC }

// CMAC.__allocating_init(key:), loc "test.swift":82:2, scope 66
sil hidden [exact_self_class] [ossa] @$s4test4CMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC {
// %0 "key"                                       // user: %4
// %1 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $@thick CMAC.Type):
  %2 = alloc_ref $CMAC, loc * "test.swift":82:2, scope 66 // user: %4
  // function_ref CMAC.init(key:)
  %3 = function_ref @$s4test4CMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned CMAC) -> @owned CMAC, loc * "test.swift":82:2, scope 66 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@owned Array<UInt8>, @owned CMAC) -> @owned CMAC, loc * "test.swift":82:28, scope 66 // user: %5
  return %4 : $CMAC, loc * "test.swift":82:28, scope 66 // id: %5
} // end sil function '$s4test4CMACC3keyACSays5UInt8VG_tcfC'

sil_scope 67 { loc "test.swift":82:2 parent @$s4test4CMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned CMAC) -> @owned CMAC }

// CMAC.init(key:), loc "test.swift":82:2, scope 67
sil hidden [ossa] @$s4test4CMACC3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned CMAC) -> @owned CMAC {
// %0 "key"                                       // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $CMAC):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":82:7, scope 67 // id: %2
  debug_value %1 : $CMAC, let, name "self", argno 2, implicit, loc "test.swift":82:2, scope 67 // id: %3
  destroy_value %0 : $Array<UInt8>, loc "test.swift":82:28, scope 67 // id: %4
  return %1 : $CMAC, loc "test.swift":82:28, scope 67 // id: %5
} // end sil function '$s4test4CMACC3keyACSays5UInt8VG_tcfc'

sil_scope 68 { loc "test.swift":80:7 parent @$s4test4CMACCfd : $@convention(method) (@guaranteed CMAC) -> @owned Builtin.NativeObject }

// CMAC.deinit, loc "test.swift":80:7, scope 68
sil hidden [ossa] @$s4test4CMACCfd : $@convention(method) (@guaranteed CMAC) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $CMAC):
  debug_value %0 : $CMAC, let, name "self", argno 1, implicit, loc "test.swift":80:7, scope 68 // id: %1
  %2 = unchecked_ref_cast %0 : $CMAC to $Builtin.NativeObject, loc * "test.swift":80:7, scope 68 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":80:7, scope 68 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":80:7, scope 68 // id: %4
} // end sil function '$s4test4CMACCfd'

sil_scope 69 { loc * "test.swift":80:7 parent @$s4test4CMACCfD : $@convention(method) (@owned CMAC) -> () }

// CMAC.__deallocating_deinit, loc * "test.swift":80:7, scope 69
sil hidden [ossa] @$s4test4CMACCfD : $@convention(method) (@owned CMAC) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $CMAC):
  debug_value %0 : $CMAC, let, name "self", argno 1, implicit, loc "test.swift":80:7, scope 69 // id: %1
  // function_ref CMAC.deinit
  %2 = function_ref @$s4test4CMACCfd : $@convention(method) (@guaranteed CMAC) -> @owned Builtin.NativeObject, loc * "test.swift":80:7, scope 69 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed CMAC) -> @owned Builtin.NativeObject, loc * "test.swift":80:7, scope 69 // user: %5
  end_lifetime %0 : $CMAC, loc * "test.swift":80:7, scope 69 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $CMAC, loc * "test.swift":80:7, scope 69 // user: %6
  dealloc_ref %5 : $CMAC, loc * "test.swift":80:7, scope 69 // id: %6
  %7 = tuple (), loc * "test.swift":80:7, scope 69 // user: %8
  return %7 : $(), loc * "test.swift":80:7, scope 69 // id: %8
} // end sil function '$s4test4CMACCfD'

sil_scope 70 { loc "test.swift":87:2 parent @$s4test8Poly1305C3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305 }

// Poly1305.__allocating_init(key:), loc "test.swift":87:2, scope 70
sil hidden [exact_self_class] [ossa] @$s4test8Poly1305C3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305 {
// %0 "key"                                       // user: %4
// %1 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $@thick Poly1305.Type):
  %2 = alloc_ref $Poly1305, loc * "test.swift":87:2, scope 70 // user: %4
  // function_ref Poly1305.init(key:)
  %3 = function_ref @$s4test8Poly1305C3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned Poly1305) -> @owned Poly1305, loc * "test.swift":87:2, scope 70 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@owned Array<UInt8>, @owned Poly1305) -> @owned Poly1305, loc * "test.swift":87:28, scope 70 // user: %5
  return %4 : $Poly1305, loc * "test.swift":87:28, scope 70 // id: %5
} // end sil function '$s4test8Poly1305C3keyACSays5UInt8VG_tcfC'

sil_scope 71 { loc "test.swift":87:2 parent @$s4test8Poly1305C3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned Poly1305) -> @owned Poly1305 }

// Poly1305.init(key:), loc "test.swift":87:2, scope 71
sil hidden [ossa] @$s4test8Poly1305C3keyACSays5UInt8VG_tcfc : $@convention(method) (@owned Array<UInt8>, @owned Poly1305) -> @owned Poly1305 {
// %0 "key"                                       // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : @owned $Array<UInt8>, %1 : @owned $Poly1305):
  debug_value %0 : $Array<UInt8>, let, name "key", argno 1, loc "test.swift":87:7, scope 71 // id: %2
  debug_value %1 : $Poly1305, let, name "self", argno 2, implicit, loc "test.swift":87:2, scope 71 // id: %3
  destroy_value %0 : $Array<UInt8>, loc "test.swift":87:28, scope 71 // id: %4
  return %1 : $Poly1305, loc "test.swift":87:28, scope 71 // id: %5
} // end sil function '$s4test8Poly1305C3keyACSays5UInt8VG_tcfc'

sil_scope 72 { loc "test.swift":85:7 parent @$s4test8Poly1305Cfd : $@convention(method) (@guaranteed Poly1305) -> @owned Builtin.NativeObject }

// Poly1305.deinit, loc "test.swift":85:7, scope 72
sil hidden [ossa] @$s4test8Poly1305Cfd : $@convention(method) (@guaranteed Poly1305) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $Poly1305):
  debug_value %0 : $Poly1305, let, name "self", argno 1, implicit, loc "test.swift":85:7, scope 72 // id: %1
  %2 = unchecked_ref_cast %0 : $Poly1305 to $Builtin.NativeObject, loc * "test.swift":85:7, scope 72 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":85:7, scope 72 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":85:7, scope 72 // id: %4
} // end sil function '$s4test8Poly1305Cfd'

sil_scope 73 { loc * "test.swift":85:7 parent @$s4test8Poly1305CfD : $@convention(method) (@owned Poly1305) -> () }

// Poly1305.__deallocating_deinit, loc * "test.swift":85:7, scope 73
sil hidden [ossa] @$s4test8Poly1305CfD : $@convention(method) (@owned Poly1305) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $Poly1305):
  debug_value %0 : $Poly1305, let, name "self", argno 1, implicit, loc "test.swift":85:7, scope 73 // id: %1
  // function_ref Poly1305.deinit
  %2 = function_ref @$s4test8Poly1305Cfd : $@convention(method) (@guaranteed Poly1305) -> @owned Builtin.NativeObject, loc * "test.swift":85:7, scope 73 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Poly1305) -> @owned Builtin.NativeObject, loc * "test.swift":85:7, scope 73 // user: %5
  end_lifetime %0 : $Poly1305, loc * "test.swift":85:7, scope 73 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $Poly1305, loc * "test.swift":85:7, scope 73 // user: %6
  dealloc_ref %5 : $Poly1305, loc * "test.swift":85:7, scope 73 // id: %6
  %7 = tuple (), loc * "test.swift":85:7, scope 73 // user: %8
  return %7 : $(), loc * "test.swift":85:7, scope 73 // id: %8
} // end sil function '$s4test8Poly1305CfD'

sil_scope 74 {  parent @$s4test4SHA2C7VariantO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (SHA2.Variant, SHA2.Variant, @thin SHA2.Variant.Type) -> Bool }

// static SHA2.Variant.__derived_enum_equals(_:_:), scope 74
sil hidden [ossa] @$s4test4SHA2C7VariantO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (SHA2.Variant, SHA2.Variant, @thin SHA2.Variant.Type) -> Bool {
// %0 "a"                                         // users: %7, %3
// %1 "b"                                         // users: %33, %4
// %2 "self"                                      // user: %5
bb0(%0 : $SHA2.Variant, %1 : $SHA2.Variant, %2 : $@thin SHA2.Variant.Type):
  debug_value %0 : $SHA2.Variant, let, name "a", argno 1, implicit, scope 74 // id: %3
  debug_value %1 : $SHA2.Variant, let, name "b", argno 2, implicit, scope 74 // id: %4
  debug_value %2 : $@thin SHA2.Variant.Type, let, name "self", argno 3, implicit, scope 74 // id: %5
  %6 = alloc_stack $Int, scope 74                 // users: %58, %28, %22, %16, %10, %65
  switch_enum %0 : $SHA2.Variant, case #SHA2.Variant.sha224!enumelt: bb1, case #SHA2.Variant.sha256!enumelt: bb2, case #SHA2.Variant.sha384!enumelt: bb3, case #SHA2.Variant.sha512!enumelt: bb4, scope 74 // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int64, 0, scope 74 // user: %9
  %9 = struct $Int (%8 : $Builtin.Int64), scope 74 // user: %11
  %10 = begin_access [modify] [static] %6 : $*Int, scope 74 // users: %11, %12
  store %9 to [trivial] %10 : $*Int, scope 74     // id: %11
  end_access %10 : $*Int, scope 74                // id: %12
  br bb5, scope 74                                // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int64, 1, scope 74 // user: %15
  %15 = struct $Int (%14 : $Builtin.Int64), scope 74 // user: %17
  %16 = begin_access [modify] [static] %6 : $*Int, scope 74 // users: %17, %18
  store %15 to [trivial] %16 : $*Int, scope 74    // id: %17
  end_access %16 : $*Int, scope 74                // id: %18
  br bb5, scope 74                                // id: %19

bb3:                                              // Preds: bb0
  %20 = integer_literal $Builtin.Int64, 2, scope 74 // user: %21
  %21 = struct $Int (%20 : $Builtin.Int64), scope 74 // user: %23
  %22 = begin_access [modify] [static] %6 : $*Int, scope 74 // users: %23, %24
  store %21 to [trivial] %22 : $*Int, scope 74    // id: %23
  end_access %22 : $*Int, scope 74                // id: %24
  br bb5, scope 74                                // id: %25

bb4:                                              // Preds: bb0
  %26 = integer_literal $Builtin.Int64, 3, scope 74 // user: %27
  %27 = struct $Int (%26 : $Builtin.Int64), scope 74 // user: %29
  %28 = begin_access [modify] [static] %6 : $*Int, scope 74 // users: %29, %30
  store %27 to [trivial] %28 : $*Int, scope 74    // id: %29
  end_access %28 : $*Int, scope 74                // id: %30
  br bb5, scope 74                                // id: %31

bb5:                                              // Preds: bb4 bb3 bb2 bb1
  %32 = alloc_stack $Int, scope 74                // users: %59, %54, %48, %42, %36, %64
  switch_enum %1 : $SHA2.Variant, case #SHA2.Variant.sha224!enumelt: bb6, case #SHA2.Variant.sha256!enumelt: bb7, case #SHA2.Variant.sha384!enumelt: bb8, case #SHA2.Variant.sha512!enumelt: bb9, scope 74 // id: %33

bb6:                                              // Preds: bb5
  %34 = integer_literal $Builtin.Int64, 0, scope 74 // user: %35
  %35 = struct $Int (%34 : $Builtin.Int64), scope 74 // user: %37
  %36 = begin_access [modify] [static] %32 : $*Int, scope 74 // users: %37, %38
  store %35 to [trivial] %36 : $*Int, scope 74    // id: %37
  end_access %36 : $*Int, scope 74                // id: %38
  br bb10, scope 74                               // id: %39

bb7:                                              // Preds: bb5
  %40 = integer_literal $Builtin.Int64, 1, scope 74 // user: %41
  %41 = struct $Int (%40 : $Builtin.Int64), scope 74 // user: %43
  %42 = begin_access [modify] [static] %32 : $*Int, scope 74 // users: %43, %44
  store %41 to [trivial] %42 : $*Int, scope 74    // id: %43
  end_access %42 : $*Int, scope 74                // id: %44
  br bb10, scope 74                               // id: %45

bb8:                                              // Preds: bb5
  %46 = integer_literal $Builtin.Int64, 2, scope 74 // user: %47
  %47 = struct $Int (%46 : $Builtin.Int64), scope 74 // user: %49
  %48 = begin_access [modify] [static] %32 : $*Int, scope 74 // users: %49, %50
  store %47 to [trivial] %48 : $*Int, scope 74    // id: %49
  end_access %48 : $*Int, scope 74                // id: %50
  br bb10, scope 74                               // id: %51

bb9:                                              // Preds: bb5
  %52 = integer_literal $Builtin.Int64, 3, scope 74 // user: %53
  %53 = struct $Int (%52 : $Builtin.Int64), scope 74 // user: %55
  %54 = begin_access [modify] [static] %32 : $*Int, scope 74 // users: %55, %56
  store %53 to [trivial] %54 : $*Int, scope 74    // id: %55
  end_access %54 : $*Int, scope 74                // id: %56
  br bb10, scope 74                               // id: %57

bb10:                                             // Preds: bb9 bb8 bb7 bb6
  %58 = load [trivial] %6 : $*Int, scope 74       // user: %60
  %59 = load [trivial] %32 : $*Int, scope 74      // user: %61
  %60 = struct_extract %58 : $Int, #Int._value, scope 74 // user: %62
  %61 = struct_extract %59 : $Int, #Int._value, scope 74 // user: %62
  %62 = builtin "cmp_eq_Int64"(%60 : $Builtin.Int64, %61 : $Builtin.Int64) : $Builtin.Int1, scope 74 // user: %63
  %63 = struct $Bool (%62 : $Builtin.Int1), scope 74 // user: %66
  dealloc_stack %32 : $*Int, scope 74             // id: %64
  dealloc_stack %6 : $*Int, scope 74              // id: %65
  return %63 : $Bool, scope 74                    // id: %66
} // end sil function '$s4test4SHA2C7VariantO21__derived_enum_equalsySbAE_AEtFZ'

sil_scope 75 {  parent @$sSi2eeoiySbSi_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Bool }

// static Int.== infix(_:_:), scope 75
sil public_external [transparent] [serialized] [ossa] @$sSi2eeoiySbSi_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value, scope 75 // user: %5
  %4 = struct_extract %1 : $Int, #Int._value, scope 75 // user: %5
  %5 = builtin "cmp_eq_Int64"(%3 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 75 // user: %6
  %6 = struct $Bool (%5 : $Builtin.Int1), scope 75 // user: %7
  return %6 : $Bool, scope 75                     // id: %7
} // end sil function '$sSi2eeoiySbSi_SitFZ'

sil_scope 76 {  parent @$s4test4SHA2C7VariantO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, SHA2.Variant) -> () }

// SHA2.Variant.hash(into:), scope 76
sil hidden [ossa] @$s4test4SHA2C7VariantO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, SHA2.Variant) -> () {
// %0 "hasher"                                    // users: %35, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $*Hasher, %1 : $SHA2.Variant):
  debug_value %0 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref, scope 76 // id: %2
  debug_value %1 : $SHA2.Variant, let, name "self", argno 2, implicit, scope 76 // id: %3
  %4 = alloc_stack $Int, scope 76                 // users: %30, %26, %20, %14, %8, %40
  switch_enum %1 : $SHA2.Variant, case #SHA2.Variant.sha224!enumelt: bb1, case #SHA2.Variant.sha256!enumelt: bb2, case #SHA2.Variant.sha384!enumelt: bb3, case #SHA2.Variant.sha512!enumelt: bb4, scope 76 // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int64, 0, scope 76 // user: %7
  %7 = struct $Int (%6 : $Builtin.Int64), scope 76 // user: %9
  %8 = begin_access [modify] [static] %4 : $*Int, scope 76 // users: %9, %10
  store %7 to [trivial] %8 : $*Int, scope 76      // id: %9
  end_access %8 : $*Int, scope 76                 // id: %10
  br bb5, scope 76                                // id: %11

bb2:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int64, 1, scope 76 // user: %13
  %13 = struct $Int (%12 : $Builtin.Int64), scope 76 // user: %15
  %14 = begin_access [modify] [static] %4 : $*Int, scope 76 // users: %15, %16
  store %13 to [trivial] %14 : $*Int, scope 76    // id: %15
  end_access %14 : $*Int, scope 76                // id: %16
  br bb5, scope 76                                // id: %17

bb3:                                              // Preds: bb0
  %18 = integer_literal $Builtin.Int64, 2, scope 76 // user: %19
  %19 = struct $Int (%18 : $Builtin.Int64), scope 76 // user: %21
  %20 = begin_access [modify] [static] %4 : $*Int, scope 76 // users: %21, %22
  store %19 to [trivial] %20 : $*Int, scope 76    // id: %21
  end_access %20 : $*Int, scope 76                // id: %22
  br bb5, scope 76                                // id: %23

bb4:                                              // Preds: bb0
  %24 = integer_literal $Builtin.Int64, 3, scope 76 // user: %25
  %25 = struct $Int (%24 : $Builtin.Int64), scope 76 // user: %27
  %26 = begin_access [modify] [static] %4 : $*Int, scope 76 // users: %27, %28
  store %25 to [trivial] %26 : $*Int, scope 76    // id: %27
  end_access %26 : $*Int, scope 76                // id: %28
  br bb5, scope 76                                // id: %29

bb5:                                              // Preds: bb4 bb3 bb2 bb1
  %30 = begin_access [read] [static] %4 : $*Int, scope 76 // users: %32, %31
  %31 = load [trivial] %30 : $*Int, scope 76      // user: %34
  end_access %30 : $*Int, scope 76                // id: %32
  %33 = alloc_stack $Int, scope 76                // users: %39, %37, %34
  store %31 to [trivial] %33 : $*Int, scope 76    // id: %34
  %35 = begin_access [modify] [static] %0 : $*Hasher, scope 76 // users: %38, %37
  // function_ref Hasher.combine<A>(_:)
  %36 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> (), scope 76 // user: %37
  %37 = apply %36<Int>(%33, %35) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> (), scope 76
  end_access %35 : $*Hasher, scope 76             // id: %38
  dealloc_stack %33 : $*Int, scope 76             // id: %39
  dealloc_stack %4 : $*Int, scope 76              // id: %40
  %41 = tuple (), scope 76                        // user: %42
  return %41 : $(), scope 76                      // id: %42
} // end sil function '$s4test4SHA2C7VariantO4hash4intoys6HasherVz_tF'


// Hasher.combine<A>(_:), scope 0
sil [serialized] [always_inline] @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()

sil_scope 77 {  parent @$s4test4SHA2C7VariantO9hashValueSivg : $@convention(method) (SHA2.Variant) -> Int }

// SHA2.Variant.hashValue.getter, scope 77
sil hidden [ossa] @$s4test4SHA2C7VariantO9hashValueSivg : $@convention(method) (SHA2.Variant) -> Int {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $SHA2.Variant):
  debug_value %0 : $SHA2.Variant, let, name "self", argno 1, implicit, scope 77 // id: %1
  %2 = alloc_stack $SHA2.Variant, scope 77        // users: %6, %5, %3
  store %0 to [trivial] %2 : $*SHA2.Variant, scope 77 // id: %3
  // function_ref _hashValue<A>(for:)
  %4 = function_ref @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int, scope 77 // user: %5
  %5 = apply %4<SHA2.Variant>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int, scope 77 // user: %7
  dealloc_stack %2 : $*SHA2.Variant, scope 77     // id: %6
  return %5 : $Int, scope 77                      // id: %7
} // end sil function '$s4test4SHA2C7VariantO9hashValueSivg'


// _hashValue<A>(for:), scope 0
sil [serialized] [always_inline] @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int

sil_scope 78 {  parent @$s4test4SHA2C7VariantOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed SHA2.Variant, @in_guaranteed SHA2.Variant, @thick SHA2.Variant.Type) -> Bool }

// protocol witness for static Equatable.== infix(_:_:) in conformance SHA2.Variant, scope 78
sil private [transparent] [thunk] [ossa] @$s4test4SHA2C7VariantOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed SHA2.Variant, @in_guaranteed SHA2.Variant, @thick SHA2.Variant.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*SHA2.Variant, %1 : $*SHA2.Variant, %2 : $@thick SHA2.Variant.Type):
  %3 = load [trivial] %0 : $*SHA2.Variant, scope 78 // user: %7
  %4 = load [trivial] %1 : $*SHA2.Variant, scope 78 // user: %7
  %5 = metatype $@thin SHA2.Variant.Type, scope 78 // user: %7
  // function_ref static SHA2.Variant.__derived_enum_equals(_:_:)
  %6 = function_ref @$s4test4SHA2C7VariantO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (SHA2.Variant, SHA2.Variant, @thin SHA2.Variant.Type) -> Bool, scope 78 // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (SHA2.Variant, SHA2.Variant, @thin SHA2.Variant.Type) -> Bool, scope 78 // user: %8
  return %7 : $Bool, scope 78                     // id: %8
} // end sil function '$s4test4SHA2C7VariantOSQAASQ2eeoiySbx_xtFZTW'

sil_scope 79 {  parent @$s4test4SHA2C7VariantOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed SHA2.Variant) -> Int }

// protocol witness for Hashable.hashValue.getter in conformance SHA2.Variant, scope 79
sil private [transparent] [thunk] [ossa] @$s4test4SHA2C7VariantOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed SHA2.Variant) -> Int {
// %0                                             // user: %1
bb0(%0 : $*SHA2.Variant):
  %1 = load [trivial] %0 : $*SHA2.Variant, scope 79 // user: %3
  // function_ref SHA2.Variant.hashValue.getter
  %2 = function_ref @$s4test4SHA2C7VariantO9hashValueSivg : $@convention(method) (SHA2.Variant) -> Int, scope 79 // user: %3
  %3 = apply %2(%1) : $@convention(method) (SHA2.Variant) -> Int, scope 79 // user: %4
  return %3 : $Int, scope 79                      // id: %4
} // end sil function '$s4test4SHA2C7VariantOSHAASH9hashValueSivgTW'

sil_scope 80 {  parent @$s4test4SHA2C7VariantOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed SHA2.Variant) -> () }

// protocol witness for Hashable.hash(into:) in conformance SHA2.Variant, scope 80
sil private [transparent] [thunk] [ossa] @$s4test4SHA2C7VariantOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed SHA2.Variant) -> () {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*Hasher, %1 : $*SHA2.Variant):
  %2 = load [trivial] %1 : $*SHA2.Variant, scope 80 // user: %4
  // function_ref SHA2.Variant.hash(into:)
  %3 = function_ref @$s4test4SHA2C7VariantO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, SHA2.Variant) -> (), scope 80 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@inout Hasher, SHA2.Variant) -> (), scope 80
  %5 = tuple (), scope 80                         // user: %6
  return %5 : $(), scope 80                       // id: %6
} // end sil function '$s4test4SHA2C7VariantOSHAASH4hash4intoys6HasherVz_tFTW'

sil_scope 81 {  parent @$s4test4SHA2C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed SHA2.Variant) -> Int }

// protocol witness for Hashable._rawHashValue(seed:) in conformance SHA2.Variant, scope 81
sil private [transparent] [thunk] [always_inline] [ossa] @$s4test4SHA2C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed SHA2.Variant) -> Int {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $*SHA2.Variant):
  // function_ref Hashable._rawHashValue(seed:)
  %2 = function_ref @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int, scope 81 // user: %3
  %3 = apply %2<SHA2.Variant>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int, scope 81 // user: %4
  return %3 : $Int, scope 81                      // id: %4
} // end sil function '$s4test4SHA2C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW'


// Hashable._rawHashValue(seed:), scope 0
sil [serialized] [always_inline] @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int

sil_scope 82 { loc "test.swift":92:7 parent @$s4test4SHA2Cfd : $@convention(method) (@guaranteed SHA2) -> @owned Builtin.NativeObject }

// SHA2.deinit, loc "test.swift":92:7, scope 82
sil hidden [ossa] @$s4test4SHA2Cfd : $@convention(method) (@guaranteed SHA2) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $SHA2):
  debug_value %0 : $SHA2, let, name "self", argno 1, implicit, loc "test.swift":92:7, scope 82 // id: %1
  %2 = unchecked_ref_cast %0 : $SHA2 to $Builtin.NativeObject, loc * "test.swift":92:7, scope 82 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":92:7, scope 82 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":92:7, scope 82 // id: %4
} // end sil function '$s4test4SHA2Cfd'

sil_scope 83 { loc * "test.swift":92:7 parent @$s4test4SHA2CfD : $@convention(method) (@owned SHA2) -> () }

// SHA2.__deallocating_deinit, loc * "test.swift":92:7, scope 83
sil hidden [ossa] @$s4test4SHA2CfD : $@convention(method) (@owned SHA2) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $SHA2):
  debug_value %0 : $SHA2, let, name "self", argno 1, implicit, loc "test.swift":92:7, scope 83 // id: %1
  // function_ref SHA2.deinit
  %2 = function_ref @$s4test4SHA2Cfd : $@convention(method) (@guaranteed SHA2) -> @owned Builtin.NativeObject, loc * "test.swift":92:7, scope 83 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed SHA2) -> @owned Builtin.NativeObject, loc * "test.swift":92:7, scope 83 // user: %5
  end_lifetime %0 : $SHA2, loc * "test.swift":92:7, scope 83 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $SHA2, loc * "test.swift":92:7, scope 83 // user: %6
  dealloc_ref %5 : $SHA2, loc * "test.swift":92:7, scope 83 // id: %6
  %7 = tuple (), loc * "test.swift":92:7, scope 83 // user: %8
  return %7 : $(), loc * "test.swift":92:7, scope 83 // id: %8
} // end sil function '$s4test4SHA2CfD'

sil_scope 84 { loc "test.swift":92:7 parent @$s4test4SHA2CACycfC : $@convention(method) (@thick SHA2.Type) -> @owned SHA2 }

// SHA2.__allocating_init(), loc "test.swift":92:7, scope 84
sil hidden [exact_self_class] [ossa] @$s4test4SHA2CACycfC : $@convention(method) (@thick SHA2.Type) -> @owned SHA2 {
// %0 "$metatype"
bb0(%0 : $@thick SHA2.Type):
  %1 = alloc_ref $SHA2, loc * "test.swift":92:7, scope 84 // user: %3
  // function_ref SHA2.init()
  %2 = function_ref @$s4test4SHA2CACycfc : $@convention(method) (@owned SHA2) -> @owned SHA2, loc * "test.swift":92:7, scope 84 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned SHA2) -> @owned SHA2, loc * "test.swift":92:7, scope 84 // user: %4
  return %3 : $SHA2, loc * "test.swift":92:7, scope 84 // id: %4
} // end sil function '$s4test4SHA2CACycfC'

sil_scope 85 { loc "test.swift":92:7 parent @$s4test4SHA2CACycfc : $@convention(method) (@owned SHA2) -> @owned SHA2 }

// SHA2.init(), loc "test.swift":92:7, scope 85
sil hidden [ossa] @$s4test4SHA2CACycfc : $@convention(method) (@owned SHA2) -> @owned SHA2 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @owned $SHA2):
  debug_value %0 : $SHA2, let, name "self", argno 1, implicit, loc "test.swift":92:7, scope 85 // id: %1
  return %0 : $SHA2, loc "test.swift":92:7, scope 85 // id: %2
} // end sil function '$s4test4SHA2CACycfc'

sil_scope 86 {  parent @$s4test4SHA3C7VariantO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (SHA3.Variant, SHA3.Variant, @thin SHA3.Variant.Type) -> Bool }

// static SHA3.Variant.__derived_enum_equals(_:_:), scope 86
sil hidden [ossa] @$s4test4SHA3C7VariantO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (SHA3.Variant, SHA3.Variant, @thin SHA3.Variant.Type) -> Bool {
// %0 "a"                                         // users: %7, %3
// %1 "b"                                         // users: %57, %4
// %2 "self"                                      // user: %5
bb0(%0 : $SHA3.Variant, %1 : $SHA3.Variant, %2 : $@thin SHA3.Variant.Type):
  debug_value %0 : $SHA3.Variant, let, name "a", argno 1, implicit, scope 86 // id: %3
  debug_value %1 : $SHA3.Variant, let, name "b", argno 2, implicit, scope 86 // id: %4
  debug_value %2 : $@thin SHA3.Variant.Type, let, name "self", argno 3, implicit, scope 86 // id: %5
  %6 = alloc_stack $Int, scope 86                 // users: %106, %52, %46, %40, %34, %28, %22, %16, %10, %113
  switch_enum %0 : $SHA3.Variant, case #SHA3.Variant.sha224!enumelt: bb1, case #SHA3.Variant.sha256!enumelt: bb2, case #SHA3.Variant.sha384!enumelt: bb3, case #SHA3.Variant.sha512!enumelt: bb4, case #SHA3.Variant.keccak224!enumelt: bb5, case #SHA3.Variant.keccak256!enumelt: bb6, case #SHA3.Variant.keccak384!enumelt: bb7, case #SHA3.Variant.keccak512!enumelt: bb8, scope 86 // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int64, 0, scope 86 // user: %9
  %9 = struct $Int (%8 : $Builtin.Int64), scope 86 // user: %11
  %10 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %11, %12
  store %9 to [trivial] %10 : $*Int, scope 86     // id: %11
  end_access %10 : $*Int, scope 86                // id: %12
  br bb9, scope 86                                // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int64, 1, scope 86 // user: %15
  %15 = struct $Int (%14 : $Builtin.Int64), scope 86 // user: %17
  %16 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %17, %18
  store %15 to [trivial] %16 : $*Int, scope 86    // id: %17
  end_access %16 : $*Int, scope 86                // id: %18
  br bb9, scope 86                                // id: %19

bb3:                                              // Preds: bb0
  %20 = integer_literal $Builtin.Int64, 2, scope 86 // user: %21
  %21 = struct $Int (%20 : $Builtin.Int64), scope 86 // user: %23
  %22 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %23, %24
  store %21 to [trivial] %22 : $*Int, scope 86    // id: %23
  end_access %22 : $*Int, scope 86                // id: %24
  br bb9, scope 86                                // id: %25

bb4:                                              // Preds: bb0
  %26 = integer_literal $Builtin.Int64, 3, scope 86 // user: %27
  %27 = struct $Int (%26 : $Builtin.Int64), scope 86 // user: %29
  %28 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %29, %30
  store %27 to [trivial] %28 : $*Int, scope 86    // id: %29
  end_access %28 : $*Int, scope 86                // id: %30
  br bb9, scope 86                                // id: %31

bb5:                                              // Preds: bb0
  %32 = integer_literal $Builtin.Int64, 4, scope 86 // user: %33
  %33 = struct $Int (%32 : $Builtin.Int64), scope 86 // user: %35
  %34 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %35, %36
  store %33 to [trivial] %34 : $*Int, scope 86    // id: %35
  end_access %34 : $*Int, scope 86                // id: %36
  br bb9, scope 86                                // id: %37

bb6:                                              // Preds: bb0
  %38 = integer_literal $Builtin.Int64, 5, scope 86 // user: %39
  %39 = struct $Int (%38 : $Builtin.Int64), scope 86 // user: %41
  %40 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %41, %42
  store %39 to [trivial] %40 : $*Int, scope 86    // id: %41
  end_access %40 : $*Int, scope 86                // id: %42
  br bb9, scope 86                                // id: %43

bb7:                                              // Preds: bb0
  %44 = integer_literal $Builtin.Int64, 6, scope 86 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64), scope 86 // user: %47
  %46 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %47, %48
  store %45 to [trivial] %46 : $*Int, scope 86    // id: %47
  end_access %46 : $*Int, scope 86                // id: %48
  br bb9, scope 86                                // id: %49

bb8:                                              // Preds: bb0
  %50 = integer_literal $Builtin.Int64, 7, scope 86 // user: %51
  %51 = struct $Int (%50 : $Builtin.Int64), scope 86 // user: %53
  %52 = begin_access [modify] [static] %6 : $*Int, scope 86 // users: %53, %54
  store %51 to [trivial] %52 : $*Int, scope 86    // id: %53
  end_access %52 : $*Int, scope 86                // id: %54
  br bb9, scope 86                                // id: %55

bb9:                                              // Preds: bb8 bb7 bb6 bb5 bb4 bb3 bb2 bb1
  %56 = alloc_stack $Int, scope 86                // users: %107, %102, %96, %90, %84, %78, %72, %66, %60, %112
  switch_enum %1 : $SHA3.Variant, case #SHA3.Variant.sha224!enumelt: bb10, case #SHA3.Variant.sha256!enumelt: bb11, case #SHA3.Variant.sha384!enumelt: bb12, case #SHA3.Variant.sha512!enumelt: bb13, case #SHA3.Variant.keccak224!enumelt: bb14, case #SHA3.Variant.keccak256!enumelt: bb15, case #SHA3.Variant.keccak384!enumelt: bb16, case #SHA3.Variant.keccak512!enumelt: bb17, scope 86 // id: %57

bb10:                                             // Preds: bb9
  %58 = integer_literal $Builtin.Int64, 0, scope 86 // user: %59
  %59 = struct $Int (%58 : $Builtin.Int64), scope 86 // user: %61
  %60 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %61, %62
  store %59 to [trivial] %60 : $*Int, scope 86    // id: %61
  end_access %60 : $*Int, scope 86                // id: %62
  br bb18, scope 86                               // id: %63

bb11:                                             // Preds: bb9
  %64 = integer_literal $Builtin.Int64, 1, scope 86 // user: %65
  %65 = struct $Int (%64 : $Builtin.Int64), scope 86 // user: %67
  %66 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %67, %68
  store %65 to [trivial] %66 : $*Int, scope 86    // id: %67
  end_access %66 : $*Int, scope 86                // id: %68
  br bb18, scope 86                               // id: %69

bb12:                                             // Preds: bb9
  %70 = integer_literal $Builtin.Int64, 2, scope 86 // user: %71
  %71 = struct $Int (%70 : $Builtin.Int64), scope 86 // user: %73
  %72 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %73, %74
  store %71 to [trivial] %72 : $*Int, scope 86    // id: %73
  end_access %72 : $*Int, scope 86                // id: %74
  br bb18, scope 86                               // id: %75

bb13:                                             // Preds: bb9
  %76 = integer_literal $Builtin.Int64, 3, scope 86 // user: %77
  %77 = struct $Int (%76 : $Builtin.Int64), scope 86 // user: %79
  %78 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %79, %80
  store %77 to [trivial] %78 : $*Int, scope 86    // id: %79
  end_access %78 : $*Int, scope 86                // id: %80
  br bb18, scope 86                               // id: %81

bb14:                                             // Preds: bb9
  %82 = integer_literal $Builtin.Int64, 4, scope 86 // user: %83
  %83 = struct $Int (%82 : $Builtin.Int64), scope 86 // user: %85
  %84 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %85, %86
  store %83 to [trivial] %84 : $*Int, scope 86    // id: %85
  end_access %84 : $*Int, scope 86                // id: %86
  br bb18, scope 86                               // id: %87

bb15:                                             // Preds: bb9
  %88 = integer_literal $Builtin.Int64, 5, scope 86 // user: %89
  %89 = struct $Int (%88 : $Builtin.Int64), scope 86 // user: %91
  %90 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %91, %92
  store %89 to [trivial] %90 : $*Int, scope 86    // id: %91
  end_access %90 : $*Int, scope 86                // id: %92
  br bb18, scope 86                               // id: %93

bb16:                                             // Preds: bb9
  %94 = integer_literal $Builtin.Int64, 6, scope 86 // user: %95
  %95 = struct $Int (%94 : $Builtin.Int64), scope 86 // user: %97
  %96 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %97, %98
  store %95 to [trivial] %96 : $*Int, scope 86    // id: %97
  end_access %96 : $*Int, scope 86                // id: %98
  br bb18, scope 86                               // id: %99

bb17:                                             // Preds: bb9
  %100 = integer_literal $Builtin.Int64, 7, scope 86 // user: %101
  %101 = struct $Int (%100 : $Builtin.Int64), scope 86 // user: %103
  %102 = begin_access [modify] [static] %56 : $*Int, scope 86 // users: %103, %104
  store %101 to [trivial] %102 : $*Int, scope 86  // id: %103
  end_access %102 : $*Int, scope 86               // id: %104
  br bb18, scope 86                               // id: %105

bb18:                                             // Preds: bb17 bb16 bb15 bb14 bb13 bb12 bb11 bb10
  %106 = load [trivial] %6 : $*Int, scope 86      // user: %108
  %107 = load [trivial] %56 : $*Int, scope 86     // user: %109
  %108 = struct_extract %106 : $Int, #Int._value, scope 86 // user: %110
  %109 = struct_extract %107 : $Int, #Int._value, scope 86 // user: %110
  %110 = builtin "cmp_eq_Int64"(%108 : $Builtin.Int64, %109 : $Builtin.Int64) : $Builtin.Int1, scope 86 // user: %111
  %111 = struct $Bool (%110 : $Builtin.Int1), scope 86 // user: %114
  dealloc_stack %56 : $*Int, scope 86             // id: %112
  dealloc_stack %6 : $*Int, scope 86              // id: %113
  return %111 : $Bool, scope 86                   // id: %114
} // end sil function '$s4test4SHA3C7VariantO21__derived_enum_equalsySbAE_AEtFZ'

sil_scope 87 {  parent @$s4test4SHA3C7VariantO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, SHA3.Variant) -> () }

// SHA3.Variant.hash(into:), scope 87
sil hidden [ossa] @$s4test4SHA3C7VariantO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, SHA3.Variant) -> () {
// %0 "hasher"                                    // users: %59, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $*Hasher, %1 : $SHA3.Variant):
  debug_value %0 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref, scope 87 // id: %2
  debug_value %1 : $SHA3.Variant, let, name "self", argno 2, implicit, scope 87 // id: %3
  %4 = alloc_stack $Int, scope 87                 // users: %54, %50, %44, %38, %32, %26, %20, %14, %8, %64
  switch_enum %1 : $SHA3.Variant, case #SHA3.Variant.sha224!enumelt: bb1, case #SHA3.Variant.sha256!enumelt: bb2, case #SHA3.Variant.sha384!enumelt: bb3, case #SHA3.Variant.sha512!enumelt: bb4, case #SHA3.Variant.keccak224!enumelt: bb5, case #SHA3.Variant.keccak256!enumelt: bb6, case #SHA3.Variant.keccak384!enumelt: bb7, case #SHA3.Variant.keccak512!enumelt: bb8, scope 87 // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int64, 0, scope 87 // user: %7
  %7 = struct $Int (%6 : $Builtin.Int64), scope 87 // user: %9
  %8 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %9, %10
  store %7 to [trivial] %8 : $*Int, scope 87      // id: %9
  end_access %8 : $*Int, scope 87                 // id: %10
  br bb9, scope 87                                // id: %11

bb2:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int64, 1, scope 87 // user: %13
  %13 = struct $Int (%12 : $Builtin.Int64), scope 87 // user: %15
  %14 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %15, %16
  store %13 to [trivial] %14 : $*Int, scope 87    // id: %15
  end_access %14 : $*Int, scope 87                // id: %16
  br bb9, scope 87                                // id: %17

bb3:                                              // Preds: bb0
  %18 = integer_literal $Builtin.Int64, 2, scope 87 // user: %19
  %19 = struct $Int (%18 : $Builtin.Int64), scope 87 // user: %21
  %20 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %21, %22
  store %19 to [trivial] %20 : $*Int, scope 87    // id: %21
  end_access %20 : $*Int, scope 87                // id: %22
  br bb9, scope 87                                // id: %23

bb4:                                              // Preds: bb0
  %24 = integer_literal $Builtin.Int64, 3, scope 87 // user: %25
  %25 = struct $Int (%24 : $Builtin.Int64), scope 87 // user: %27
  %26 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %27, %28
  store %25 to [trivial] %26 : $*Int, scope 87    // id: %27
  end_access %26 : $*Int, scope 87                // id: %28
  br bb9, scope 87                                // id: %29

bb5:                                              // Preds: bb0
  %30 = integer_literal $Builtin.Int64, 4, scope 87 // user: %31
  %31 = struct $Int (%30 : $Builtin.Int64), scope 87 // user: %33
  %32 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %33, %34
  store %31 to [trivial] %32 : $*Int, scope 87    // id: %33
  end_access %32 : $*Int, scope 87                // id: %34
  br bb9, scope 87                                // id: %35

bb6:                                              // Preds: bb0
  %36 = integer_literal $Builtin.Int64, 5, scope 87 // user: %37
  %37 = struct $Int (%36 : $Builtin.Int64), scope 87 // user: %39
  %38 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %39, %40
  store %37 to [trivial] %38 : $*Int, scope 87    // id: %39
  end_access %38 : $*Int, scope 87                // id: %40
  br bb9, scope 87                                // id: %41

bb7:                                              // Preds: bb0
  %42 = integer_literal $Builtin.Int64, 6, scope 87 // user: %43
  %43 = struct $Int (%42 : $Builtin.Int64), scope 87 // user: %45
  %44 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %45, %46
  store %43 to [trivial] %44 : $*Int, scope 87    // id: %45
  end_access %44 : $*Int, scope 87                // id: %46
  br bb9, scope 87                                // id: %47

bb8:                                              // Preds: bb0
  %48 = integer_literal $Builtin.Int64, 7, scope 87 // user: %49
  %49 = struct $Int (%48 : $Builtin.Int64), scope 87 // user: %51
  %50 = begin_access [modify] [static] %4 : $*Int, scope 87 // users: %51, %52
  store %49 to [trivial] %50 : $*Int, scope 87    // id: %51
  end_access %50 : $*Int, scope 87                // id: %52
  br bb9, scope 87                                // id: %53

bb9:                                              // Preds: bb8 bb7 bb6 bb5 bb4 bb3 bb2 bb1
  %54 = begin_access [read] [static] %4 : $*Int, scope 87 // users: %56, %55
  %55 = load [trivial] %54 : $*Int, scope 87      // user: %58
  end_access %54 : $*Int, scope 87                // id: %56
  %57 = alloc_stack $Int, scope 87                // users: %63, %61, %58
  store %55 to [trivial] %57 : $*Int, scope 87    // id: %58
  %59 = begin_access [modify] [static] %0 : $*Hasher, scope 87 // users: %62, %61
  // function_ref Hasher.combine<A>(_:)
  %60 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> (), scope 87 // user: %61
  %61 = apply %60<Int>(%57, %59) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> (), scope 87
  end_access %59 : $*Hasher, scope 87             // id: %62
  dealloc_stack %57 : $*Int, scope 87             // id: %63
  dealloc_stack %4 : $*Int, scope 87              // id: %64
  %65 = tuple (), scope 87                        // user: %66
  return %65 : $(), scope 87                      // id: %66
} // end sil function '$s4test4SHA3C7VariantO4hash4intoys6HasherVz_tF'

sil_scope 88 {  parent @$s4test4SHA3C7VariantO9hashValueSivg : $@convention(method) (SHA3.Variant) -> Int }

// SHA3.Variant.hashValue.getter, scope 88
sil hidden [ossa] @$s4test4SHA3C7VariantO9hashValueSivg : $@convention(method) (SHA3.Variant) -> Int {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $SHA3.Variant):
  debug_value %0 : $SHA3.Variant, let, name "self", argno 1, implicit, scope 88 // id: %1
  %2 = alloc_stack $SHA3.Variant, scope 88        // users: %6, %5, %3
  store %0 to [trivial] %2 : $*SHA3.Variant, scope 88 // id: %3
  // function_ref _hashValue<A>(for:)
  %4 = function_ref @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int, scope 88 // user: %5
  %5 = apply %4<SHA3.Variant>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int, scope 88 // user: %7
  dealloc_stack %2 : $*SHA3.Variant, scope 88     // id: %6
  return %5 : $Int, scope 88                      // id: %7
} // end sil function '$s4test4SHA3C7VariantO9hashValueSivg'

sil_scope 89 {  parent @$s4test4SHA3C7VariantOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed SHA3.Variant, @in_guaranteed SHA3.Variant, @thick SHA3.Variant.Type) -> Bool }

// protocol witness for static Equatable.== infix(_:_:) in conformance SHA3.Variant, scope 89
sil private [transparent] [thunk] [ossa] @$s4test4SHA3C7VariantOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed SHA3.Variant, @in_guaranteed SHA3.Variant, @thick SHA3.Variant.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*SHA3.Variant, %1 : $*SHA3.Variant, %2 : $@thick SHA3.Variant.Type):
  %3 = load [trivial] %0 : $*SHA3.Variant, scope 89 // user: %7
  %4 = load [trivial] %1 : $*SHA3.Variant, scope 89 // user: %7
  %5 = metatype $@thin SHA3.Variant.Type, scope 89 // user: %7
  // function_ref static SHA3.Variant.__derived_enum_equals(_:_:)
  %6 = function_ref @$s4test4SHA3C7VariantO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (SHA3.Variant, SHA3.Variant, @thin SHA3.Variant.Type) -> Bool, scope 89 // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (SHA3.Variant, SHA3.Variant, @thin SHA3.Variant.Type) -> Bool, scope 89 // user: %8
  return %7 : $Bool, scope 89                     // id: %8
} // end sil function '$s4test4SHA3C7VariantOSQAASQ2eeoiySbx_xtFZTW'

sil_scope 90 {  parent @$s4test4SHA3C7VariantOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed SHA3.Variant) -> Int }

// protocol witness for Hashable.hashValue.getter in conformance SHA3.Variant, scope 90
sil private [transparent] [thunk] [ossa] @$s4test4SHA3C7VariantOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed SHA3.Variant) -> Int {
// %0                                             // user: %1
bb0(%0 : $*SHA3.Variant):
  %1 = load [trivial] %0 : $*SHA3.Variant, scope 90 // user: %3
  // function_ref SHA3.Variant.hashValue.getter
  %2 = function_ref @$s4test4SHA3C7VariantO9hashValueSivg : $@convention(method) (SHA3.Variant) -> Int, scope 90 // user: %3
  %3 = apply %2(%1) : $@convention(method) (SHA3.Variant) -> Int, scope 90 // user: %4
  return %3 : $Int, scope 90                      // id: %4
} // end sil function '$s4test4SHA3C7VariantOSHAASH9hashValueSivgTW'

sil_scope 91 {  parent @$s4test4SHA3C7VariantOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed SHA3.Variant) -> () }

// protocol witness for Hashable.hash(into:) in conformance SHA3.Variant, scope 91
sil private [transparent] [thunk] [ossa] @$s4test4SHA3C7VariantOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed SHA3.Variant) -> () {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*Hasher, %1 : $*SHA3.Variant):
  %2 = load [trivial] %1 : $*SHA3.Variant, scope 91 // user: %4
  // function_ref SHA3.Variant.hash(into:)
  %3 = function_ref @$s4test4SHA3C7VariantO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, SHA3.Variant) -> (), scope 91 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@inout Hasher, SHA3.Variant) -> (), scope 91
  %5 = tuple (), scope 91                         // user: %6
  return %5 : $(), scope 91                       // id: %6
} // end sil function '$s4test4SHA3C7VariantOSHAASH4hash4intoys6HasherVz_tFTW'

sil_scope 92 {  parent @$s4test4SHA3C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed SHA3.Variant) -> Int }

// protocol witness for Hashable._rawHashValue(seed:) in conformance SHA3.Variant, scope 92
sil private [transparent] [thunk] [always_inline] [ossa] @$s4test4SHA3C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed SHA3.Variant) -> Int {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $*SHA3.Variant):
  // function_ref Hashable._rawHashValue(seed:)
  %2 = function_ref @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int, scope 92 // user: %3
  %3 = apply %2<SHA3.Variant>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int, scope 92 // user: %4
  return %3 : $Int, scope 92                      // id: %4
} // end sil function '$s4test4SHA3C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW'

sil_scope 93 { loc "test.swift":98:7 parent @$s4test4SHA3Cfd : $@convention(method) (@guaranteed SHA3) -> @owned Builtin.NativeObject }

// SHA3.deinit, loc "test.swift":98:7, scope 93
sil hidden [ossa] @$s4test4SHA3Cfd : $@convention(method) (@guaranteed SHA3) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $SHA3):
  debug_value %0 : $SHA3, let, name "self", argno 1, implicit, loc "test.swift":98:7, scope 93 // id: %1
  %2 = unchecked_ref_cast %0 : $SHA3 to $Builtin.NativeObject, loc * "test.swift":98:7, scope 93 // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned, loc * "test.swift":98:7, scope 93 // user: %4
  return %3 : $Builtin.NativeObject, loc * "test.swift":98:7, scope 93 // id: %4
} // end sil function '$s4test4SHA3Cfd'

sil_scope 94 { loc * "test.swift":98:7 parent @$s4test4SHA3CfD : $@convention(method) (@owned SHA3) -> () }

// SHA3.__deallocating_deinit, loc * "test.swift":98:7, scope 94
sil hidden [ossa] @$s4test4SHA3CfD : $@convention(method) (@owned SHA3) -> () {
// %0 "self"                                      // users: %3, %4, %1
bb0(%0 : @owned $SHA3):
  debug_value %0 : $SHA3, let, name "self", argno 1, implicit, loc "test.swift":98:7, scope 94 // id: %1
  // function_ref SHA3.deinit
  %2 = function_ref @$s4test4SHA3Cfd : $@convention(method) (@guaranteed SHA3) -> @owned Builtin.NativeObject, loc * "test.swift":98:7, scope 94 // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed SHA3) -> @owned Builtin.NativeObject, loc * "test.swift":98:7, scope 94 // user: %5
  end_lifetime %0 : $SHA3, loc * "test.swift":98:7, scope 94 // id: %4
  %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $SHA3, loc * "test.swift":98:7, scope 94 // user: %6
  dealloc_ref %5 : $SHA3, loc * "test.swift":98:7, scope 94 // id: %6
  %7 = tuple (), loc * "test.swift":98:7, scope 94 // user: %8
  return %7 : $(), loc * "test.swift":98:7, scope 94 // id: %8
} // end sil function '$s4test4SHA3CfD'

sil_scope 95 { loc "test.swift":98:7 parent @$s4test4SHA3CACycfC : $@convention(method) (@thick SHA3.Type) -> @owned SHA3 }

// SHA3.__allocating_init(), loc "test.swift":98:7, scope 95
sil hidden [exact_self_class] [ossa] @$s4test4SHA3CACycfC : $@convention(method) (@thick SHA3.Type) -> @owned SHA3 {
// %0 "$metatype"
bb0(%0 : $@thick SHA3.Type):
  %1 = alloc_ref $SHA3, loc * "test.swift":98:7, scope 95 // user: %3
  // function_ref SHA3.init()
  %2 = function_ref @$s4test4SHA3CACycfc : $@convention(method) (@owned SHA3) -> @owned SHA3, loc * "test.swift":98:7, scope 95 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned SHA3) -> @owned SHA3, loc * "test.swift":98:7, scope 95 // user: %4
  return %3 : $SHA3, loc * "test.swift":98:7, scope 95 // id: %4
} // end sil function '$s4test4SHA3CACycfC'

sil_scope 96 { loc "test.swift":98:7 parent @$s4test4SHA3CACycfc : $@convention(method) (@owned SHA3) -> @owned SHA3 }

// SHA3.init(), loc "test.swift":98:7, scope 96
sil hidden [ossa] @$s4test4SHA3CACycfc : $@convention(method) (@owned SHA3) -> @owned SHA3 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @owned $SHA3):
  debug_value %0 : $SHA3, let, name "self", argno 1, implicit, loc "test.swift":98:7, scope 96 // id: %1
  return %0 : $SHA3, loc "test.swift":98:7, scope 96 // id: %2
} // end sil function '$s4test4SHA3CACycfc'

sil_scope 97 { loc "test.swift":107:3 parent @$s4test3CBCVACycfC : $@convention(method) (@thin CBC.Type) -> CBC }

// CBC.init(), loc "test.swift":107:3, scope 97
sil hidden [ossa] @$s4test3CBCVACycfC : $@convention(method) (@thin CBC.Type) -> CBC {
// %0 "$metatype"
bb0(%0 : $@thin CBC.Type):
  %1 = alloc_stack $CBC, var, name "self", implicit, loc "test.swift":107:3, scope 97 // user: %3
  %2 = struct $CBC (), loc "test.swift":107:12, scope 97 // user: %4
  dealloc_stack %1 : $*CBC, loc "test.swift":107:3, scope 97 // id: %3
  return %2 : $CBC, loc "test.swift":107:12, scope 97 // id: %4
} // end sil function '$s4test3CBCVACycfC'

sil_scope 98 { loc "test.swift":108:2 parent @$s4test3CBCV2ivACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin CBC.Type) -> CBC }

// CBC.init(iv:), loc "test.swift":108:2, scope 98
sil hidden [ossa] @$s4test3CBCV2ivACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin CBC.Type) -> CBC {
// %0 "iv"                                        // users: %5, %3
// %1 "$metatype"
bb0(%0 : @owned $Array<UInt8>, %1 : $@thin CBC.Type):
  %2 = alloc_stack $CBC, var, name "self", implicit, loc "test.swift":108:2, scope 98 // user: %6
  debug_value %0 : $Array<UInt8>, let, name "iv", argno 1, loc "test.swift":108:7, scope 98 // id: %3
  %4 = struct $CBC (), loc "test.swift":108:27, scope 98 // user: %7
  destroy_value %0 : $Array<UInt8>, loc "test.swift":108:27, scope 98 // id: %5
  dealloc_stack %2 : $*CBC, loc "test.swift":108:2, scope 98 // id: %6
  return %4 : $CBC, loc "test.swift":108:27, scope 98 // id: %7
} // end sil function '$s4test3CBCV2ivACSays5UInt8VG_tcfC'

sil_scope 99 {  parent @$s4test7PaddingO21__derived_enum_equalsySbAC_ACtFZ : $@convention(method) (Padding, Padding, @thin Padding.Type) -> Bool }

// static Padding.__derived_enum_equals(_:_:), scope 99
sil hidden [ossa] @$s4test7PaddingO21__derived_enum_equalsySbAC_ACtFZ : $@convention(method) (Padding, Padding, @thin Padding.Type) -> Bool {
// %0 "a"                                         // users: %7, %3
// %1 "b"                                         // users: %57, %4
// %2 "self"                                      // user: %5
bb0(%0 : $Padding, %1 : $Padding, %2 : $@thin Padding.Type):
  debug_value %0 : $Padding, let, name "a", argno 1, implicit, scope 99 // id: %3
  debug_value %1 : $Padding, let, name "b", argno 2, implicit, scope 99 // id: %4
  debug_value %2 : $@thin Padding.Type, let, name "self", argno 3, implicit, scope 99 // id: %5
  %6 = alloc_stack $Int, scope 99                 // users: %106, %52, %46, %40, %34, %28, %22, %16, %10, %113
  switch_enum %0 : $Padding, case #Padding.noPadding!enumelt: bb1, case #Padding.zeroPadding!enumelt: bb2, case #Padding.pkcs7!enumelt: bb3, case #Padding.pkcs5!enumelt: bb4, case #Padding.eme_pkcs1v15!enumelt: bb5, case #Padding.emsa_pkcs1v15!enumelt: bb6, case #Padding.iso78164!enumelt: bb7, case #Padding.iso10126!enumelt: bb8, scope 99 // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int64, 0, scope 99 // user: %9
  %9 = struct $Int (%8 : $Builtin.Int64), scope 99 // user: %11
  %10 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %11, %12
  store %9 to [trivial] %10 : $*Int, scope 99     // id: %11
  end_access %10 : $*Int, scope 99                // id: %12
  br bb9, scope 99                                // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int64, 1, scope 99 // user: %15
  %15 = struct $Int (%14 : $Builtin.Int64), scope 99 // user: %17
  %16 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %17, %18
  store %15 to [trivial] %16 : $*Int, scope 99    // id: %17
  end_access %16 : $*Int, scope 99                // id: %18
  br bb9, scope 99                                // id: %19

bb3:                                              // Preds: bb0
  %20 = integer_literal $Builtin.Int64, 2, scope 99 // user: %21
  %21 = struct $Int (%20 : $Builtin.Int64), scope 99 // user: %23
  %22 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %23, %24
  store %21 to [trivial] %22 : $*Int, scope 99    // id: %23
  end_access %22 : $*Int, scope 99                // id: %24
  br bb9, scope 99                                // id: %25

bb4:                                              // Preds: bb0
  %26 = integer_literal $Builtin.Int64, 3, scope 99 // user: %27
  %27 = struct $Int (%26 : $Builtin.Int64), scope 99 // user: %29
  %28 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %29, %30
  store %27 to [trivial] %28 : $*Int, scope 99    // id: %29
  end_access %28 : $*Int, scope 99                // id: %30
  br bb9, scope 99                                // id: %31

bb5:                                              // Preds: bb0
  %32 = integer_literal $Builtin.Int64, 4, scope 99 // user: %33
  %33 = struct $Int (%32 : $Builtin.Int64), scope 99 // user: %35
  %34 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %35, %36
  store %33 to [trivial] %34 : $*Int, scope 99    // id: %35
  end_access %34 : $*Int, scope 99                // id: %36
  br bb9, scope 99                                // id: %37

bb6:                                              // Preds: bb0
  %38 = integer_literal $Builtin.Int64, 5, scope 99 // user: %39
  %39 = struct $Int (%38 : $Builtin.Int64), scope 99 // user: %41
  %40 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %41, %42
  store %39 to [trivial] %40 : $*Int, scope 99    // id: %41
  end_access %40 : $*Int, scope 99                // id: %42
  br bb9, scope 99                                // id: %43

bb7:                                              // Preds: bb0
  %44 = integer_literal $Builtin.Int64, 6, scope 99 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64), scope 99 // user: %47
  %46 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %47, %48
  store %45 to [trivial] %46 : $*Int, scope 99    // id: %47
  end_access %46 : $*Int, scope 99                // id: %48
  br bb9, scope 99                                // id: %49

bb8:                                              // Preds: bb0
  %50 = integer_literal $Builtin.Int64, 7, scope 99 // user: %51
  %51 = struct $Int (%50 : $Builtin.Int64), scope 99 // user: %53
  %52 = begin_access [modify] [static] %6 : $*Int, scope 99 // users: %53, %54
  store %51 to [trivial] %52 : $*Int, scope 99    // id: %53
  end_access %52 : $*Int, scope 99                // id: %54
  br bb9, scope 99                                // id: %55

bb9:                                              // Preds: bb8 bb7 bb6 bb5 bb4 bb3 bb2 bb1
  %56 = alloc_stack $Int, scope 99                // users: %107, %102, %96, %90, %84, %78, %72, %66, %60, %112
  switch_enum %1 : $Padding, case #Padding.noPadding!enumelt: bb10, case #Padding.zeroPadding!enumelt: bb11, case #Padding.pkcs7!enumelt: bb12, case #Padding.pkcs5!enumelt: bb13, case #Padding.eme_pkcs1v15!enumelt: bb14, case #Padding.emsa_pkcs1v15!enumelt: bb15, case #Padding.iso78164!enumelt: bb16, case #Padding.iso10126!enumelt: bb17, scope 99 // id: %57

bb10:                                             // Preds: bb9
  %58 = integer_literal $Builtin.Int64, 0, scope 99 // user: %59
  %59 = struct $Int (%58 : $Builtin.Int64), scope 99 // user: %61
  %60 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %61, %62
  store %59 to [trivial] %60 : $*Int, scope 99    // id: %61
  end_access %60 : $*Int, scope 99                // id: %62
  br bb18, scope 99                               // id: %63

bb11:                                             // Preds: bb9
  %64 = integer_literal $Builtin.Int64, 1, scope 99 // user: %65
  %65 = struct $Int (%64 : $Builtin.Int64), scope 99 // user: %67
  %66 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %67, %68
  store %65 to [trivial] %66 : $*Int, scope 99    // id: %67
  end_access %66 : $*Int, scope 99                // id: %68
  br bb18, scope 99                               // id: %69

bb12:                                             // Preds: bb9
  %70 = integer_literal $Builtin.Int64, 2, scope 99 // user: %71
  %71 = struct $Int (%70 : $Builtin.Int64), scope 99 // user: %73
  %72 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %73, %74
  store %71 to [trivial] %72 : $*Int, scope 99    // id: %73
  end_access %72 : $*Int, scope 99                // id: %74
  br bb18, scope 99                               // id: %75

bb13:                                             // Preds: bb9
  %76 = integer_literal $Builtin.Int64, 3, scope 99 // user: %77
  %77 = struct $Int (%76 : $Builtin.Int64), scope 99 // user: %79
  %78 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %79, %80
  store %77 to [trivial] %78 : $*Int, scope 99    // id: %79
  end_access %78 : $*Int, scope 99                // id: %80
  br bb18, scope 99                               // id: %81

bb14:                                             // Preds: bb9
  %82 = integer_literal $Builtin.Int64, 4, scope 99 // user: %83
  %83 = struct $Int (%82 : $Builtin.Int64), scope 99 // user: %85
  %84 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %85, %86
  store %83 to [trivial] %84 : $*Int, scope 99    // id: %85
  end_access %84 : $*Int, scope 99                // id: %86
  br bb18, scope 99                               // id: %87

bb15:                                             // Preds: bb9
  %88 = integer_literal $Builtin.Int64, 5, scope 99 // user: %89
  %89 = struct $Int (%88 : $Builtin.Int64), scope 99 // user: %91
  %90 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %91, %92
  store %89 to [trivial] %90 : $*Int, scope 99    // id: %91
  end_access %90 : $*Int, scope 99                // id: %92
  br bb18, scope 99                               // id: %93

bb16:                                             // Preds: bb9
  %94 = integer_literal $Builtin.Int64, 6, scope 99 // user: %95
  %95 = struct $Int (%94 : $Builtin.Int64), scope 99 // user: %97
  %96 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %97, %98
  store %95 to [trivial] %96 : $*Int, scope 99    // id: %97
  end_access %96 : $*Int, scope 99                // id: %98
  br bb18, scope 99                               // id: %99

bb17:                                             // Preds: bb9
  %100 = integer_literal $Builtin.Int64, 7, scope 99 // user: %101
  %101 = struct $Int (%100 : $Builtin.Int64), scope 99 // user: %103
  %102 = begin_access [modify] [static] %56 : $*Int, scope 99 // users: %103, %104
  store %101 to [trivial] %102 : $*Int, scope 99  // id: %103
  end_access %102 : $*Int, scope 99               // id: %104
  br bb18, scope 99                               // id: %105

bb18:                                             // Preds: bb17 bb16 bb15 bb14 bb13 bb12 bb11 bb10
  %106 = load [trivial] %6 : $*Int, scope 99      // user: %108
  %107 = load [trivial] %56 : $*Int, scope 99     // user: %109
  %108 = struct_extract %106 : $Int, #Int._value, scope 99 // user: %110
  %109 = struct_extract %107 : $Int, #Int._value, scope 99 // user: %110
  %110 = builtin "cmp_eq_Int64"(%108 : $Builtin.Int64, %109 : $Builtin.Int64) : $Builtin.Int1, scope 99 // user: %111
  %111 = struct $Bool (%110 : $Builtin.Int1), scope 99 // user: %114
  dealloc_stack %56 : $*Int, scope 99             // id: %112
  dealloc_stack %6 : $*Int, scope 99              // id: %113
  return %111 : $Bool, scope 99                   // id: %114
} // end sil function '$s4test7PaddingO21__derived_enum_equalsySbAC_ACtFZ'

sil_scope 100 {  parent @$s4test7PaddingO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, Padding) -> () }

// Padding.hash(into:), scope 100
sil hidden [ossa] @$s4test7PaddingO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, Padding) -> () {
// %0 "hasher"                                    // users: %59, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $*Hasher, %1 : $Padding):
  debug_value %0 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref, scope 100 // id: %2
  debug_value %1 : $Padding, let, name "self", argno 2, implicit, scope 100 // id: %3
  %4 = alloc_stack $Int, scope 100                // users: %54, %50, %44, %38, %32, %26, %20, %14, %8, %64
  switch_enum %1 : $Padding, case #Padding.noPadding!enumelt: bb1, case #Padding.zeroPadding!enumelt: bb2, case #Padding.pkcs7!enumelt: bb3, case #Padding.pkcs5!enumelt: bb4, case #Padding.eme_pkcs1v15!enumelt: bb5, case #Padding.emsa_pkcs1v15!enumelt: bb6, case #Padding.iso78164!enumelt: bb7, case #Padding.iso10126!enumelt: bb8, scope 100 // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int64, 0, scope 100 // user: %7
  %7 = struct $Int (%6 : $Builtin.Int64), scope 100 // user: %9
  %8 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %9, %10
  store %7 to [trivial] %8 : $*Int, scope 100     // id: %9
  end_access %8 : $*Int, scope 100                // id: %10
  br bb9, scope 100                               // id: %11

bb2:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int64, 1, scope 100 // user: %13
  %13 = struct $Int (%12 : $Builtin.Int64), scope 100 // user: %15
  %14 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %15, %16
  store %13 to [trivial] %14 : $*Int, scope 100   // id: %15
  end_access %14 : $*Int, scope 100               // id: %16
  br bb9, scope 100                               // id: %17

bb3:                                              // Preds: bb0
  %18 = integer_literal $Builtin.Int64, 2, scope 100 // user: %19
  %19 = struct $Int (%18 : $Builtin.Int64), scope 100 // user: %21
  %20 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %21, %22
  store %19 to [trivial] %20 : $*Int, scope 100   // id: %21
  end_access %20 : $*Int, scope 100               // id: %22
  br bb9, scope 100                               // id: %23

bb4:                                              // Preds: bb0
  %24 = integer_literal $Builtin.Int64, 3, scope 100 // user: %25
  %25 = struct $Int (%24 : $Builtin.Int64), scope 100 // user: %27
  %26 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %27, %28
  store %25 to [trivial] %26 : $*Int, scope 100   // id: %27
  end_access %26 : $*Int, scope 100               // id: %28
  br bb9, scope 100                               // id: %29

bb5:                                              // Preds: bb0
  %30 = integer_literal $Builtin.Int64, 4, scope 100 // user: %31
  %31 = struct $Int (%30 : $Builtin.Int64), scope 100 // user: %33
  %32 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %33, %34
  store %31 to [trivial] %32 : $*Int, scope 100   // id: %33
  end_access %32 : $*Int, scope 100               // id: %34
  br bb9, scope 100                               // id: %35

bb6:                                              // Preds: bb0
  %36 = integer_literal $Builtin.Int64, 5, scope 100 // user: %37
  %37 = struct $Int (%36 : $Builtin.Int64), scope 100 // user: %39
  %38 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %39, %40
  store %37 to [trivial] %38 : $*Int, scope 100   // id: %39
  end_access %38 : $*Int, scope 100               // id: %40
  br bb9, scope 100                               // id: %41

bb7:                                              // Preds: bb0
  %42 = integer_literal $Builtin.Int64, 6, scope 100 // user: %43
  %43 = struct $Int (%42 : $Builtin.Int64), scope 100 // user: %45
  %44 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %45, %46
  store %43 to [trivial] %44 : $*Int, scope 100   // id: %45
  end_access %44 : $*Int, scope 100               // id: %46
  br bb9, scope 100                               // id: %47

bb8:                                              // Preds: bb0
  %48 = integer_literal $Builtin.Int64, 7, scope 100 // user: %49
  %49 = struct $Int (%48 : $Builtin.Int64), scope 100 // user: %51
  %50 = begin_access [modify] [static] %4 : $*Int, scope 100 // users: %51, %52
  store %49 to [trivial] %50 : $*Int, scope 100   // id: %51
  end_access %50 : $*Int, scope 100               // id: %52
  br bb9, scope 100                               // id: %53

bb9:                                              // Preds: bb8 bb7 bb6 bb5 bb4 bb3 bb2 bb1
  %54 = begin_access [read] [static] %4 : $*Int, scope 100 // users: %56, %55
  %55 = load [trivial] %54 : $*Int, scope 100     // user: %58
  end_access %54 : $*Int, scope 100               // id: %56
  %57 = alloc_stack $Int, scope 100               // users: %63, %61, %58
  store %55 to [trivial] %57 : $*Int, scope 100   // id: %58
  %59 = begin_access [modify] [static] %0 : $*Hasher, scope 100 // users: %62, %61
  // function_ref Hasher.combine<A>(_:)
  %60 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> (), scope 100 // user: %61
  %61 = apply %60<Int>(%57, %59) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> (), scope 100
  end_access %59 : $*Hasher, scope 100            // id: %62
  dealloc_stack %57 : $*Int, scope 100            // id: %63
  dealloc_stack %4 : $*Int, scope 100             // id: %64
  %65 = tuple (), scope 100                       // user: %66
  return %65 : $(), scope 100                     // id: %66
} // end sil function '$s4test7PaddingO4hash4intoys6HasherVz_tF'

sil_scope 101 {  parent @$s4test7PaddingO9hashValueSivg : $@convention(method) (Padding) -> Int }

// Padding.hashValue.getter, scope 101
sil hidden [ossa] @$s4test7PaddingO9hashValueSivg : $@convention(method) (Padding) -> Int {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $Padding):
  debug_value %0 : $Padding, let, name "self", argno 1, implicit, scope 101 // id: %1
  %2 = alloc_stack $Padding, scope 101            // users: %6, %5, %3
  store %0 to [trivial] %2 : $*Padding, scope 101 // id: %3
  // function_ref _hashValue<A>(for:)
  %4 = function_ref @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int, scope 101 // user: %5
  %5 = apply %4<Padding>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int, scope 101 // user: %7
  dealloc_stack %2 : $*Padding, scope 101         // id: %6
  return %5 : $Int, scope 101                     // id: %7
} // end sil function '$s4test7PaddingO9hashValueSivg'

sil_scope 102 {  parent @$s4test7PaddingOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed Padding, @in_guaranteed Padding, @thick Padding.Type) -> Bool }

// protocol witness for static Equatable.== infix(_:_:) in conformance Padding, scope 102
sil private [transparent] [thunk] [ossa] @$s4test7PaddingOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed Padding, @in_guaranteed Padding, @thick Padding.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*Padding, %1 : $*Padding, %2 : $@thick Padding.Type):
  %3 = load [trivial] %0 : $*Padding, scope 102   // user: %7
  %4 = load [trivial] %1 : $*Padding, scope 102   // user: %7
  %5 = metatype $@thin Padding.Type, scope 102    // user: %7
  // function_ref static Padding.__derived_enum_equals(_:_:)
  %6 = function_ref @$s4test7PaddingO21__derived_enum_equalsySbAC_ACtFZ : $@convention(method) (Padding, Padding, @thin Padding.Type) -> Bool, scope 102 // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (Padding, Padding, @thin Padding.Type) -> Bool, scope 102 // user: %8
  return %7 : $Bool, scope 102                    // id: %8
} // end sil function '$s4test7PaddingOSQAASQ2eeoiySbx_xtFZTW'

sil_scope 103 {  parent @$s4test7PaddingOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed Padding) -> Int }

// protocol witness for Hashable.hashValue.getter in conformance Padding, scope 103
sil private [transparent] [thunk] [ossa] @$s4test7PaddingOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed Padding) -> Int {
// %0                                             // user: %1
bb0(%0 : $*Padding):
  %1 = load [trivial] %0 : $*Padding, scope 103   // user: %3
  // function_ref Padding.hashValue.getter
  %2 = function_ref @$s4test7PaddingO9hashValueSivg : $@convention(method) (Padding) -> Int, scope 103 // user: %3
  %3 = apply %2(%1) : $@convention(method) (Padding) -> Int, scope 103 // user: %4
  return %3 : $Int, scope 103                     // id: %4
} // end sil function '$s4test7PaddingOSHAASH9hashValueSivgTW'

sil_scope 104 {  parent @$s4test7PaddingOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed Padding) -> () }

// protocol witness for Hashable.hash(into:) in conformance Padding, scope 104
sil private [transparent] [thunk] [ossa] @$s4test7PaddingOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed Padding) -> () {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*Hasher, %1 : $*Padding):
  %2 = load [trivial] %1 : $*Padding, scope 104   // user: %4
  // function_ref Padding.hash(into:)
  %3 = function_ref @$s4test7PaddingO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, Padding) -> (), scope 104 // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@inout Hasher, Padding) -> (), scope 104
  %5 = tuple (), scope 104                        // user: %6
  return %5 : $(), scope 104                      // id: %6
} // end sil function '$s4test7PaddingOSHAASH4hash4intoys6HasherVz_tFTW'

sil_scope 105 {  parent @$s4test7PaddingOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed Padding) -> Int }

// protocol witness for Hashable._rawHashValue(seed:) in conformance Padding, scope 105
sil private [transparent] [thunk] [always_inline] [ossa] @$s4test7PaddingOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed Padding) -> Int {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $*Padding):
  // function_ref Hashable._rawHashValue(seed:)
  %2 = function_ref @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int, scope 105 // user: %3
  %3 = apply %2<Padding>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int, scope 105 // user: %4
  return %3 : $Int, scope 105                     // id: %4
} // end sil function '$s4test7PaddingOSHAASH13_rawHashValue4seedS2i_tFTW'

sil_scope 106 { loc "test.swift":118:6 parent @$s4test17getConstantStringSSyF : $@convention(thin) () -> @owned String }

// getConstantString(), loc "test.swift":118:6, scope 106
sil hidden [ossa] @$s4test17getConstantStringSSyF : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "this string is constant", loc "test.swift":119:3, scope 106 // user: %5
  %1 = integer_literal $Builtin.Word, 23, loc "test.swift":119:3, scope 106 // user: %5
  %2 = integer_literal $Builtin.Int1, -1, loc "test.swift":119:3, scope 106 // user: %5
  %3 = metatype $@thin String.Type, loc "test.swift":119:3, scope 106 // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":119:3, scope 106 // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":119:3, scope 106 // user: %6
  return %5 : $String, loc "test.swift":120:1, scope 106 // id: %6
} // end sil function '$s4test17getConstantStringSSyF'

sil_scope 107 {  parent @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String }

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:), scope 107
sil public_external [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] [ossa] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String {
// %0                                             // users: %290, %259, %143
// %1                                             // user: %4
// %2                                             // user: %281
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Word, %2 : $Builtin.Int1, %3 : $@thin String.Type):
  %4 = builtin "sextOrBitCast_Word_Int64"(%1 : $Builtin.Word) : $Builtin.Int64, scope 107 // users: %23, %19
  %5 = string_literal utf8 "UnsafeBufferPointer with negative count", scope 107 // user: %7
  %6 = integer_literal $Builtin.Word, 39, scope 107 // users: %40, %9
  %7 = builtin "ptrtoint_Word"(%5 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %9
  %8 = integer_literal $Builtin.Int8, 2, scope 107 // users: %329, %275, %250, %201, %191, %163, %127, %117, %99, %89, %85, %64, %44, %40, %13, %9
  %9 = struct $StaticString (%7 : $Builtin.Word, %6 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %333
  %10 = string_literal utf8 "Swift/UnsafeBufferPointer.swift", scope 107 // user: %12
  %11 = integer_literal $Builtin.Word, 31, scope 107 // user: %13
  %12 = builtin "ptrtoint_Word"(%10 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %13
  %13 = struct $StaticString (%12 : $Builtin.Word, %11 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %333
  %14 = integer_literal $Builtin.Int64, 1134, scope 107 // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64), scope 107 // user: %333
  %16 = integer_literal $Builtin.Int1, 0, scope 107 // users: %293, %268, %243, %177, %150, %145, %80, %50, %20
  debug_step , scope 107                          // id: %17
  %18 = integer_literal $Builtin.Int64, 0, scope 107 // user: %19
  %19 = builtin "cmp_slt_Int64"(%4 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %20
  %20 = builtin "int_expect_Int1"(%19 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %21
  cond_br %20, bb52, bb1, scope 107               // id: %21

bb1:                                              // Preds: bb0
  debug_step , scope 107                          // id: %22
  %23 = builtin "assumeNonNegative_Int64"(%4 : $Builtin.Int64) : $Builtin.Int64, scope 107 // users: %284, %282, %226, %145, %33, %31, %28, %25
  %24 = integer_literal $Builtin.Int64, 0, scope 107 // users: %307, %218, %176, %167, %152, %152, %152, %149, %141, %79, %68, %52, %52, %52, %49, %25
  %25 = builtin "cmp_eq_Int64"(%23 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %26
  cond_br %25, bb49, bb2, scope 107               // id: %26

bb2:                                              // Preds: bb1
  %27 = integer_literal $Builtin.Int64, 15, scope 107 // user: %28
  %28 = builtin "cmp_slt_Int64"(%27 : $Builtin.Int64, %23 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %29
  cond_br %28, bb45, bb3, scope 107               // id: %29

bb3:                                              // Preds: bb2
  %30 = integer_literal $Builtin.Int64, 8, scope 107 // users: %268, %243, %145, %35, %31
  %31 = builtin "cmp_slt_Int64"(%30 : $Builtin.Int64, %23 : $Builtin.Int64) : $Builtin.Int1, scope 107 // users: %140, %32
  cond_br %31, bb5, bb4, scope 107                // id: %32

bb4:                                              // Preds: bb3
  %33 = struct $Int (%23 : $Builtin.Int64), scope 107 // user: %34
  br bb6(%33 : $Int), scope 107                   // id: %34

bb5:                                              // Preds: bb3
  %35 = struct $Int (%30 : $Builtin.Int64), scope 107 // user: %36
  br bb6(%35 : $Int), scope 107                   // id: %36

// %37                                            // users: %92, %78, %69, %58, %48
bb6(%37 : $Int):                                  // Preds: bb5 bb4
  %38 = string_literal utf8 "Range requires lowerBound <= upperBound", scope 107 // user: %39
  %39 = builtin "ptrtoint_Word"(%38 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %40
  %40 = struct $StaticString (%39 : $Builtin.Word, %6 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // users: %279, %254, %195, %121
  %41 = string_literal utf8 "Swift/Range.swift", scope 107 // user: %43
  %42 = integer_literal $Builtin.Word, 17, scope 107 // user: %44
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %44
  %44 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // users: %279, %254, %205, %195, %131, %121
  %45 = integer_literal $Builtin.Int64, 744, scope 107 // user: %46
  %46 = struct $UInt (%45 : $Builtin.Int64), scope 107 // users: %279, %254, %195, %121
  debug_step , scope 107                          // id: %47
  %48 = struct_extract %37 : $Int, #Int._value, scope 107 // user: %49
  %49 = builtin "cmp_slt_Int64"(%48 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %50
  %50 = builtin "int_expect_Int1"(%49 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %51
  cond_br %50, bb44, bb7, scope 107               // id: %51

bb7:                                              // Preds: bb6
  br bb8(%24 : $Builtin.Int64, %24 : $Builtin.Int64, %24 : $Builtin.Int64), scope 107 // id: %52

// %53                                            // users: %268, %265
// %54                                            // users: %267, %215, %139
// %55                                            // users: %134, %108, %93, %71, %68, %59, %57
bb8(%53 : $Builtin.Int64, %54 : $Builtin.Int64, %55 : $Builtin.Int64): // Preds: bb43 bb7
  %56 = alloc_stack $Optional<Int>, scope 107     // users: %137, %136, %133, %112, %76
  %57 = struct $Int (%55 : $Builtin.Int64), scope 107 // user: %77
  %58 = destructure_struct %37 : $Int, scope 107  // user: %59
  %59 = builtin "cmp_eq_Int64"(%55 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %60
  cond_br %59, bb19, bb9, scope 107               // id: %60

bb9:                                              // Preds: bb8
  %61 = string_literal utf8 "Index out of range", scope 107 // user: %63
  %62 = integer_literal $Builtin.Word, 18, scope 107 // user: %64
  %63 = builtin "ptrtoint_Word"(%61 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %64
  %64 = struct $StaticString (%63 : $Builtin.Word, %62 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %131
  %65 = integer_literal $Builtin.Int64, 305, scope 107 // user: %66
  %66 = struct $UInt (%65 : $Builtin.Int64), scope 107 // user: %131
  debug_step , scope 107                          // id: %67
  %68 = builtin "cmp_slt_Int64"(%55 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %70
  %69 = destructure_struct %37 : $Int, scope 107  // user: %71
  cond_br %68, bb17, bb10, scope 107              // id: %70

bb10:                                             // Preds: bb9
  %71 = builtin "cmp_slt_Int64"(%55 : $Builtin.Int64, %69 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %73
  %72 = integer_literal $Builtin.Int1, -1, scope 107 // users: %94, %73
  %73 = builtin "int_expect_Int1"(%71 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %74
  cond_br %73, bb12, bb11, scope 107              // id: %74

bb11:                                             // Preds: bb10
  br bb18, scope 107                              // id: %75

bb12:                                             // Preds: bb10
  %76 = init_enum_data_addr %56 : $*Optional<Int>, #Optional.some!enumelt, scope 107 // user: %77
  store %57 to [trivial] %76 : $*Int, scope 107   // id: %77
  %78 = destructure_struct %37 : $Int, scope 107  // user: %79
  %79 = builtin "cmp_slt_Int64"(%78 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %80
  %80 = builtin "int_expect_Int1"(%79 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %81
  cond_br %80, bb16, bb13, scope 107              // id: %81

bb13:                                             // Preds: bb12
  %82 = string_literal utf8 "Index out of bounds", scope 107 // user: %84
  %83 = integer_literal $Builtin.Word, 19, scope 107 // user: %85
  %84 = builtin "ptrtoint_Word"(%82 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %85
  %85 = struct $StaticString (%84 : $Builtin.Word, %83 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %103
  %86 = string_literal utf8 "Swift/Collection.swift", scope 107 // user: %88
  %87 = integer_literal $Builtin.Word, 22, scope 107 // user: %89
  %88 = builtin "ptrtoint_Word"(%86 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %89
  %89 = struct $StaticString (%88 : $Builtin.Word, %87 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %103
  %90 = integer_literal $Builtin.Int64, 714, scope 107 // user: %91
  %91 = struct $UInt (%90 : $Builtin.Int64), scope 107 // user: %103
  %92 = destructure_struct %37 : $Int, scope 107  // user: %93
  %93 = builtin "cmp_slt_Int64"(%55 : $Builtin.Int64, %92 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %94
  %94 = builtin "int_expect_Int1"(%93 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %95
  cond_br %94, bb15, bb14, scope 107              // id: %95

bb14:                                             // Preds: bb13
  %96 = string_literal utf8 "Fatal error", scope 107 // user: %98
  %97 = integer_literal $Builtin.Word, 11, scope 107 // user: %99
  %98 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %99
  %99 = struct $StaticString (%98 : $Builtin.Word, %97 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %103
  %100 = integer_literal $Builtin.Int32, 1, scope 107 // user: %101
  %101 = struct $UInt32 (%100 : $Builtin.Int32), scope 107 // user: %103
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %102 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %103
  %103 = apply %102(%99, %85, %89, %91, %101) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %104

bb15:                                             // Preds: bb13
  debug_step , scope 107                          // id: %105
  %106 = integer_literal $Builtin.Int64, 1, scope 107 // user: %108
  %107 = integer_literal $Builtin.Int1, -1, scope 107 // user: %108
  %108 = builtin "sadd_with_overflow_Int64"(%55 : $Builtin.Int64, %106 : $Builtin.Int64, %107 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %109
  (%109, %110) = destructure_tuple %108 : $(Builtin.Int64, Builtin.Int1), scope 107 // users: %113, %111
  cond_fail %110 : $Builtin.Int1, "arithmetic overflow", scope 107 // id: %111
  inject_enum_addr %56 : $*Optional<Int>, #Optional.some!enumelt, scope 107 // id: %112
  br bb20(%109 : $Builtin.Int64), scope 107       // id: %113

bb16:                                             // Preds: bb12
  %114 = string_literal utf8 "Fatal error", scope 107 // user: %116
  %115 = integer_literal $Builtin.Word, 11, scope 107 // user: %117
  %116 = builtin "ptrtoint_Word"(%114 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %117
  %117 = struct $StaticString (%116 : $Builtin.Word, %115 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %121
  %118 = integer_literal $Builtin.Int32, 1, scope 107 // user: %119
  %119 = struct $UInt32 (%118 : $Builtin.Int32), scope 107 // user: %121
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %120 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %121
  %121 = apply %120(%117, %40, %44, %46, %119) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %122

bb17:                                             // Preds: bb9
  br bb18, scope 107                              // id: %123

bb18:                                             // Preds: bb17 bb11
  %124 = string_literal utf8 "Fatal error", scope 107 // user: %126
  %125 = integer_literal $Builtin.Word, 11, scope 107 // user: %127
  %126 = builtin "ptrtoint_Word"(%124 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %127
  %127 = struct $StaticString (%126 : $Builtin.Word, %125 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %131
  %128 = integer_literal $Builtin.Int32, 1, scope 107 // user: %129
  %129 = struct $UInt32 (%128 : $Builtin.Int32), scope 107 // user: %131
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %130 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %131
  %131 = apply %130(%127, %64, %44, %66, %129) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %132

bb19:                                             // Preds: bb8
  inject_enum_addr %56 : $*Optional<Int>, #Optional.none!enumelt, scope 107 // id: %133
  br bb20(%55 : $Builtin.Int64), scope 107        // id: %134

// %135                                           // user: %271
bb20(%135 : $Builtin.Int64):                      // Preds: bb19 bb15
  %136 = load [trivial] %56 : $*Optional<Int>, scope 107 // user: %138
  dealloc_stack %56 : $*Optional<Int>, scope 107  // id: %137
  switch_enum %136 : $Optional<Int>, case #Optional.some!enumelt: bb43, case #Optional.none!enumelt: bb21, scope 107 // id: %138

bb21:                                             // Preds: bb20
  %139 = struct $UInt64 (%54 : $Builtin.Int64), scope 107 // user: %230
  cond_br %31, bb23, bb22, scope 107              // id: %140

bb22:                                             // Preds: bb21
  br bb37(%24 : $Builtin.Int64), scope 107        // id: %141

bb23:                                             // Preds: bb21
  %142 = integer_literal $Builtin.Word, 8, scope 107 // user: %144
  %143 = pointer_to_address %0 : $Builtin.RawPointer to [strict] $*UInt8, scope 107 // user: %144
  %144 = index_addr [stack_protection] %143 : $*UInt8, %142 : $Builtin.Word, scope 107 // user: %235
  %145 = builtin "ssub_with_overflow_Int64"(%23 : $Builtin.Int64, %30 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %146
  (%146, %147) = destructure_tuple %145 : $(Builtin.Int64, Builtin.Int1), scope 107 // users: %176, %169, %158, %149
  debug_step , scope 107                          // id: %148
  %149 = builtin "cmp_slt_Int64"(%146 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %150
  %150 = builtin "int_expect_Int1"(%149 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %151
  cond_br %150, bb42, bb24, scope 107             // id: %151

bb24:                                             // Preds: bb23
  br bb25(%24 : $Builtin.Int64, %24 : $Builtin.Int64, %24 : $Builtin.Int64), scope 107 // id: %152

// %153                                           // users: %243, %240
// %154                                           // users: %242, %213
// %155                                           // users: %208, %182, %169, %167, %158, %157
bb25(%153 : $Builtin.Int64, %154 : $Builtin.Int64, %155 : $Builtin.Int64): // Preds: bb41 bb24
  %156 = alloc_stack $Optional<Int>, scope 107    // users: %211, %210, %207, %186, %174
  %157 = struct $Int (%155 : $Builtin.Int64), scope 107 // user: %175
  %158 = builtin "cmp_eq_Int64"(%155 : $Builtin.Int64, %146 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %159
  cond_br %158, bb34, bb26, scope 107             // id: %159

bb26:                                             // Preds: bb25
  %160 = string_literal utf8 "Index out of range", scope 107 // user: %162
  %161 = integer_literal $Builtin.Word, 18, scope 107 // user: %163
  %162 = builtin "ptrtoint_Word"(%160 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %163
  %163 = struct $StaticString (%162 : $Builtin.Word, %161 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %205
  %164 = integer_literal $Builtin.Int64, 305, scope 107 // user: %165
  %165 = struct $UInt (%164 : $Builtin.Int64), scope 107 // user: %205
  debug_step , scope 107                          // id: %166
  %167 = builtin "cmp_slt_Int64"(%155 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %168
  cond_br %167, bb32, bb27, scope 107             // id: %168

bb27:                                             // Preds: bb26
  %169 = builtin "cmp_slt_Int64"(%155 : $Builtin.Int64, %146 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %171
  %170 = integer_literal $Builtin.Int1, -1, scope 107 // user: %171
  %171 = builtin "int_expect_Int1"(%169 : $Builtin.Int1, %170 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %172
  cond_br %171, bb29, bb28, scope 107             // id: %172

bb28:                                             // Preds: bb27
  br bb33, scope 107                              // id: %173

bb29:                                             // Preds: bb27
  %174 = init_enum_data_addr %156 : $*Optional<Int>, #Optional.some!enumelt, scope 107 // user: %175
  store %157 to [trivial] %174 : $*Int, scope 107 // id: %175
  %176 = builtin "cmp_slt_Int64"(%146 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %177
  %177 = builtin "int_expect_Int1"(%176 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1, scope 107 // user: %178
  cond_br %177, bb31, bb30, scope 107             // id: %178

bb30:                                             // Preds: bb29
  debug_step , scope 107                          // id: %179
  %180 = integer_literal $Builtin.Int64, 1, scope 107 // user: %182
  %181 = integer_literal $Builtin.Int1, -1, scope 107 // user: %182
  %182 = builtin "sadd_with_overflow_Int64"(%155 : $Builtin.Int64, %180 : $Builtin.Int64, %181 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %183
  (%183, %184) = destructure_tuple %182 : $(Builtin.Int64, Builtin.Int1), scope 107 // users: %187, %185
  cond_fail %184 : $Builtin.Int1, "arithmetic overflow", scope 107 // id: %185
  inject_enum_addr %156 : $*Optional<Int>, #Optional.some!enumelt, scope 107 // id: %186
  br bb35(%183 : $Builtin.Int64), scope 107       // id: %187

bb31:                                             // Preds: bb29
  %188 = string_literal utf8 "Fatal error", scope 107 // user: %190
  %189 = integer_literal $Builtin.Word, 11, scope 107 // user: %191
  %190 = builtin "ptrtoint_Word"(%188 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %191
  %191 = struct $StaticString (%190 : $Builtin.Word, %189 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %195
  %192 = integer_literal $Builtin.Int32, 1, scope 107 // user: %193
  %193 = struct $UInt32 (%192 : $Builtin.Int32), scope 107 // user: %195
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %194 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %195
  %195 = apply %194(%191, %40, %44, %46, %193) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %196

bb32:                                             // Preds: bb26
  br bb33, scope 107                              // id: %197

bb33:                                             // Preds: bb32 bb28
  %198 = string_literal utf8 "Fatal error", scope 107 // user: %200
  %199 = integer_literal $Builtin.Word, 11, scope 107 // user: %201
  %200 = builtin "ptrtoint_Word"(%198 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %201
  %201 = struct $StaticString (%200 : $Builtin.Word, %199 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %205
  %202 = integer_literal $Builtin.Int32, 1, scope 107 // user: %203
  %203 = struct $UInt32 (%202 : $Builtin.Int32), scope 107 // user: %205
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %204 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %205
  %205 = apply %204(%201, %163, %44, %165, %203) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %206

bb34:                                             // Preds: bb25
  inject_enum_addr %156 : $*Optional<Int>, #Optional.none!enumelt, scope 107 // id: %207
  br bb35(%155 : $Builtin.Int64), scope 107       // id: %208

// %209                                           // user: %246
bb35(%209 : $Builtin.Int64):                      // Preds: bb34 bb30
  %210 = load [trivial] %156 : $*Optional<Int>, scope 107 // user: %212
  dealloc_stack %156 : $*Optional<Int>, scope 107 // id: %211
  switch_enum %210 : $Optional<Int>, case #Optional.some!enumelt: bb41, case #Optional.none!enumelt: bb36, scope 107 // id: %212

bb36:                                             // Preds: bb35
  br bb37(%154 : $Builtin.Int64), scope 107       // id: %213

// %214                                           // users: %228, %215
bb37(%214 : $Builtin.Int64):                      // Preds: bb36 bb22
  %215 = builtin "or_Int64"(%54 : $Builtin.Int64, %214 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %217
  %216 = integer_literal $Builtin.Int64, -9187201950435737472, scope 107 // user: %217
  %217 = builtin "and_Int64"(%215 : $Builtin.Int64, %216 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %218
  %218 = builtin "cmp_eq_Int64"(%217 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1, scope 107 // user: %219
  cond_br %218, bb39, bb38, scope 107             // id: %219

bb38:                                             // Preds: bb37
  %220 = integer_literal $Builtin.Int64, -6917529027641081856, scope 107 // user: %221
  br bb40(%220 : $Builtin.Int64), scope 107       // id: %221

bb39:                                             // Preds: bb37
  %222 = integer_literal $Builtin.Int64, -2305843009213693952, scope 107 // user: %223
  br bb40(%222 : $Builtin.Int64), scope 107       // id: %223

// %224                                           // user: %227
bb40(%224 : $Builtin.Int64):                      // Preds: bb39 bb38
  %225 = integer_literal $Builtin.Int64, 56, scope 107 // user: %226
  %226 = builtin "shl_Int64"(%23 : $Builtin.Int64, %225 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %227
  %227 = builtin "or_Int64"(%224 : $Builtin.Int64, %226 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %228
  %228 = builtin "or_Int64"(%214 : $Builtin.Int64, %227 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %229
  %229 = struct $UInt64 (%228 : $Builtin.Int64), scope 107 // user: %230
  %230 = tuple (%139 : $UInt64, %229 : $UInt64), scope 107 // user: %231
  br bb50(%230 : $(UInt64, UInt64)), scope 107    // id: %231

// %232                                           // user: %233
bb41(%232 : $Int):                                // Preds: bb35
  %233 = struct_extract %232 : $Int, #Int._value, scope 107 // user: %234
  %234 = builtin "truncOrBitCast_Int64_Word"(%233 : $Builtin.Int64) : $Builtin.Word, scope 107 // user: %235
  %235 = index_addr [stack_protection] %144 : $*UInt8, %234 : $Builtin.Word, scope 107 // user: %236
  %236 = load [trivial] %235 : $*UInt8, scope 107 // user: %237
  %237 = destructure_struct %236 : $UInt8, scope 107 // user: %238
  %238 = builtin "zextOrBitCast_Int8_Int64"(%237 : $Builtin.Int8) : $Builtin.Int64, scope 107 // user: %241
  %239 = integer_literal $Builtin.Int64, 63, scope 107 // user: %240
  %240 = builtin "and_Int64"(%153 : $Builtin.Int64, %239 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %241
  %241 = builtin "shl_Int64"(%238 : $Builtin.Int64, %240 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %242
  %242 = builtin "or_Int64"(%154 : $Builtin.Int64, %241 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %246
  %243 = builtin "sadd_with_overflow_Int64"(%153 : $Builtin.Int64, %30 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %244
  (%244, %245) = destructure_tuple %243 : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %246
  br bb25(%244 : $Builtin.Int64, %242 : $Builtin.Int64, %209 : $Builtin.Int64), scope 107 // id: %246

bb42:                                             // Preds: bb23
  %247 = string_literal utf8 "Fatal error", scope 107 // user: %249
  %248 = integer_literal $Builtin.Word, 11, scope 107 // user: %250
  %249 = builtin "ptrtoint_Word"(%247 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %250
  %250 = struct $StaticString (%249 : $Builtin.Word, %248 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %254
  %251 = integer_literal $Builtin.Int32, 1, scope 107 // user: %252
  %252 = struct $UInt32 (%251 : $Builtin.Int32), scope 107 // user: %254
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %253 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %254
  %254 = apply %253(%250, %40, %44, %46, %252) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %255

// %256                                           // user: %257
bb43(%256 : $Int):                                // Preds: bb20
  %257 = struct_extract %256 : $Int, #Int._value, scope 107 // user: %258
  %258 = builtin "truncOrBitCast_Int64_Word"(%257 : $Builtin.Int64) : $Builtin.Word, scope 107 // user: %260
  %259 = pointer_to_address %0 : $Builtin.RawPointer to [strict] $*UInt8, scope 107 // user: %260
  %260 = index_addr [stack_protection] %259 : $*UInt8, %258 : $Builtin.Word, scope 107 // user: %261
  %261 = load [trivial] %260 : $*UInt8, scope 107 // user: %262
  %262 = destructure_struct %261 : $UInt8, scope 107 // user: %263
  %263 = builtin "zextOrBitCast_Int8_Int64"(%262 : $Builtin.Int8) : $Builtin.Int64, scope 107 // user: %266
  %264 = integer_literal $Builtin.Int64, 63, scope 107 // user: %265
  %265 = builtin "and_Int64"(%53 : $Builtin.Int64, %264 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %266
  %266 = builtin "shl_Int64"(%263 : $Builtin.Int64, %265 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %267
  %267 = builtin "or_Int64"(%54 : $Builtin.Int64, %266 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %271
  %268 = builtin "sadd_with_overflow_Int64"(%53 : $Builtin.Int64, %30 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %269
  (%269, %270) = destructure_tuple %268 : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %271
  br bb8(%269 : $Builtin.Int64, %267 : $Builtin.Int64, %135 : $Builtin.Int64), scope 107 // id: %271

bb44:                                             // Preds: bb6
  %272 = string_literal utf8 "Fatal error", scope 107 // user: %274
  %273 = integer_literal $Builtin.Word, 11, scope 107 // user: %275
  %274 = builtin "ptrtoint_Word"(%272 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %275
  %275 = struct $StaticString (%274 : $Builtin.Word, %273 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %279
  %276 = integer_literal $Builtin.Int32, 1, scope 107 // user: %277
  %277 = struct $UInt32 (%276 : $Builtin.Int32), scope 107 // user: %279
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %278 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %279
  %279 = apply %278(%275, %40, %44, %46, %277) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %280

bb45:                                             // Preds: bb2
  cond_br %2, bb47, bb46, scope 107               // id: %281

bb46:                                             // Preds: bb45
  br bb48(%23 : $Builtin.Int64), scope 107        // id: %282

bb47:                                             // Preds: bb45
  %283 = integer_literal $Builtin.Int64, -4611686018427387904, scope 107 // user: %284
  %284 = builtin "or_Int64"(%23 : $Builtin.Int64, %283 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %285
  br bb48(%284 : $Builtin.Int64), scope 107       // id: %285

// %286                                           // user: %288
bb48(%286 : $Builtin.Int64):                      // Preds: bb47 bb46
  %287 = integer_literal $Builtin.Int64, 1152921504606846976, scope 107 // user: %288
  %288 = builtin "or_Int64"(%286 : $Builtin.Int64, %287 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %289
  %289 = struct $UInt64 (%288 : $Builtin.Int64), scope 107 // user: %300
  %290 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %291
  %291 = builtin "zextOrBitCast_Word_Int64"(%290 : $Builtin.Word) : $Builtin.Int64, scope 107 // user: %293
  %292 = integer_literal $Builtin.Int64, 32, scope 107 // user: %293
  %293 = builtin "usub_with_overflow_Int64"(%291 : $Builtin.Int64, %292 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %294
  (%294, %295) = destructure_tuple %293 : $(Builtin.Int64, Builtin.Int1), scope 107 // user: %297
  %296 = integer_literal $Builtin.Int64, -9223372036854775808, scope 107 // user: %297
  %297 = builtin "stringObjectOr_Int64"(%294 : $Builtin.Int64, %296 : $Builtin.Int64) : $Builtin.Int64, scope 107 // user: %298
  %298 = value_to_bridge_object %297 : $Builtin.Int64, scope 107 // user: %299
  %299 = copy_value %298 : $Builtin.BridgeObject, scope 107 // user: %300
  %300 = struct $_StringObject (%289 : $UInt64, %299 : $Builtin.BridgeObject), scope 107 // user: %301
  %301 = struct $_StringGuts (%300 : $_StringObject), scope 107 // user: %302
  %302 = struct $String (%301 : $_StringGuts), scope 107 // user: %303
  br bb51(%302 : $String), scope 107              // id: %303

bb49:                                             // Preds: bb1
  %304 = integer_literal $Builtin.Int64, -2305843009213693952, scope 107 // user: %305
  %305 = value_to_bridge_object %304 : $Builtin.Int64, scope 107 // user: %306
  %306 = copy_value %305 : $Builtin.BridgeObject, scope 107 // users: %309, %308
  %307 = struct $UInt64 (%24 : $Builtin.Int64), scope 107 // user: %310
  %308 = unchecked_trivial_bit_cast %306 : $Builtin.BridgeObject to $UInt64, scope 107 // user: %310
  destroy_value %306 : $Builtin.BridgeObject, scope 107 // id: %309
  %310 = tuple (%307 : $UInt64, %308 : $UInt64), scope 107 // user: %311
  br bb50(%310 : $(UInt64, UInt64)), scope 107    // id: %311

// %312                                           // users: %315, %313
bb50(%312 : $(UInt64, UInt64)):                   // Preds: bb49 bb40
  (%313, %314) = destructure_tuple %312 : $(UInt64, UInt64), scope 107 // user: %320
  (%315, %316) = destructure_tuple %312 : $(UInt64, UInt64), scope 107 // user: %317
  %317 = struct_extract %316 : $UInt64, #UInt64._value, scope 107 // user: %318
  %318 = value_to_bridge_object %317 : $Builtin.Int64, scope 107 // user: %319
  %319 = copy_value %318 : $Builtin.BridgeObject, scope 107 // user: %320
  %320 = struct $_StringObject (%313 : $UInt64, %319 : $Builtin.BridgeObject), scope 107 // user: %321
  %321 = struct $_StringGuts (%320 : $_StringObject), scope 107 // user: %322
  %322 = struct $String (%321 : $_StringGuts), scope 107 // user: %323
  br bb51(%322 : $String), scope 107              // id: %323

// %324                                           // user: %325
bb51(%324 : @owned $String):                      // Preds: bb50 bb48
  return %324 : $String, scope 107                // id: %325

bb52:                                             // Preds: bb0
  %326 = string_literal utf8 "Fatal error", scope 107 // user: %328
  %327 = integer_literal $Builtin.Word, 11, scope 107 // user: %329
  %328 = builtin "ptrtoint_Word"(%326 : $Builtin.RawPointer) : $Builtin.Word, scope 107 // user: %329
  %329 = struct $StaticString (%328 : $Builtin.Word, %327 : $Builtin.Word, %8 : $Builtin.Int8), scope 107 // user: %333
  %330 = integer_literal $Builtin.Int32, 1, scope 107 // user: %331
  %331 = struct $UInt32 (%330 : $Builtin.Int32), scope 107 // user: %333
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %332 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107 // user: %333
  %333 = apply %332(%329, %9, %13, %15, %331) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 107
  unreachable , scope 107                         // id: %334
} // end sil function '$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC'

sil_scope 108 { loc "test.swift":122:6 parent @$s4test16getConstantArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8> }

// getConstantArray(), loc "test.swift":122:6, scope 108
sil hidden [ossa] @$s4test16getConstantArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8> {
bb0:
  %0 = metatype $@thin Array<UInt8>.Type, loc "test.swift":123:2, scope 108 // user: %9
  // function_ref getConstantString()
  %1 = function_ref @$s4test17getConstantStringSSyF : $@convention(thin) () -> @owned String, loc "test.swift":123:10, scope 108 // user: %2
  %2 = apply %1() : $@convention(thin) () -> @owned String, loc "test.swift":123:10, scope 108 // users: %4, %5
  // function_ref String.utf8.getter
  %3 = function_ref @$sSS4utf8SS8UTF8ViewVvg : $@convention(method) (@guaranteed String) -> @owned String.UTF8View, loc "test.swift":123:30, scope 108 // user: %4
  %4 = apply %3(%2) : $@convention(method) (@guaranteed String) -> @owned String.UTF8View, loc "test.swift":123:30, scope 108 // user: %7
  destroy_value %2 : $String, loc "test.swift":123:28, scope 108 // id: %5
  %6 = alloc_stack $String.UTF8View, loc "test.swift":123:30, scope 108 // users: %10, %9, %7
  store %4 to [init] %6 : $*String.UTF8View, loc "test.swift":123:30, scope 108 // id: %7
  // function_ref Array.init<A>(_:)
  %8 = function_ref @$sSaySayxGqd__c7ElementQyd__RszSTRd__lufC : $@convention(method) <τ_0_0><τ_1_0 where τ_0_0 == τ_1_0.Element, τ_1_0 : Sequence> (@in τ_1_0, @thin Array<τ_0_0>.Type) -> @owned Array<τ_0_0>, loc "test.swift":123:8, scope 108 // user: %9
  %9 = apply %8<UInt8, String.UTF8View>(%6, %0) : $@convention(method) <τ_0_0><τ_1_0 where τ_0_0 == τ_1_0.Element, τ_1_0 : Sequence> (@in τ_1_0, @thin Array<τ_0_0>.Type) -> @owned Array<τ_0_0>, loc "test.swift":123:8, scope 108 // user: %11
  dealloc_stack %6 : $*String.UTF8View, loc "test.swift":123:34, scope 108 // id: %10
  return %9 : $Array<UInt8>, loc "test.swift":124:1, scope 108 // id: %11
} // end sil function '$s4test16getConstantArraySays5UInt8VGyF'


// String.utf8.getter, scope 0
sil [serialized] [always_inline] @$sSS4utf8SS8UTF8ViewVvg : $@convention(method) (@guaranteed String) -> @owned String.UTF8View


// Array.init<A>(_:), scope 0
sil [serialized] @$sSaySayxGqd__c7ElementQyd__RszSTRd__lufC : $@convention(method) <τ_0_0><τ_1_0 where τ_0_0 == τ_1_0.Element, τ_1_0 : Sequence> (@in τ_1_0, @thin Array<τ_0_0>.Type) -> @owned Array<τ_0_0>

sil_scope 109 { loc "test.swift":126:6 parent @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8> }

// getRandomArray(), loc "test.swift":126:6, scope 109
sil hidden [ossa] @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8> {
bb0:
  %0 = metatype $@thick AES.Type, loc "test.swift":127:2, scope 109 // user: %4
  %1 = integer_literal $Builtin.Int64, 10, loc "test.swift":127:15, scope 109 // user: %2
  %2 = struct $Int (%1 : $Builtin.Int64), loc "test.swift":127:15, scope 109 // user: %4
  // function_ref static Cryptors.randomIV(_:)
  %3 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":127:6, scope 109 // user: %4
  %4 = apply %3<AES>(%2, %0) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":127:6, scope 109 // user: %5
  return %4 : $Array<UInt8>, loc "test.swift":128:1, scope 109 // id: %5
} // end sil function '$s4test14getRandomArraySays5UInt8VGyF'

sil_scope 110 { loc "test.swift":130:6 parent @$s4test13arrayToStringySSSays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String }

// arrayToString(_:), loc "test.swift":130:6, scope 110
sil hidden [ossa] @$s4test13arrayToStringySSSays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String {
// %0 "arr"                                       // users: %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "arr", argno 1, loc "test.swift":130:22, scope 110 // id: %1
  %2 = metatype $@thin String.Type, loc "test.swift":131:3, scope 110 // user: %10
  %3 = alloc_stack $Array<UInt8>, loc "test.swift":131:17, scope 110 // users: %12, %4
  %4 = store_borrow %0 to %3 : $*Array<UInt8>, loc "test.swift":131:17, scope 110 // users: %11, %10
  // function_ref String.Encoding.utf8.unsafeMutableAddressor
  %5 = function_ref @$sSS10FoundationE8EncodingV4utf8ACvau : $@convention(thin) () -> Builtin.RawPointer, loc "test.swift":131:33, scope 110 // user: %6
  %6 = apply %5() : $@convention(thin) () -> Builtin.RawPointer, loc "test.swift":131:33, scope 110 // user: %7
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*String.Encoding, loc "test.swift":131:33, scope 110 // user: %8
  %8 = load [trivial] %7 : $*String.Encoding, loc "test.swift":131:33, scope 110 // user: %10
  // function_ref String.init<A>(bytes:encoding:)
  %9 = function_ref @$sSS10FoundationE5bytes8encodingSSSgxh_SSAAE8EncodingVtcSTRzs5UInt8V7ElementRtzlufC : $@convention(method) <τ_0_0 where τ_0_0 : Sequence, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, String.Encoding, @thin String.Type) -> @owned Optional<String>, loc "test.swift":131:3, scope 110 // user: %10
  %10 = apply %9<[UInt8]>(%4, %8, %2) : $@convention(method) <τ_0_0 where τ_0_0 : Sequence, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, String.Encoding, @thin String.Type) -> @owned Optional<String>, loc "test.swift":131:3, scope 110 // user: %13
  end_borrow %4 : $*Array<UInt8>, loc "test.swift":131:37, scope 110 // id: %11
  dealloc_stack %3 : $*Array<UInt8>, loc "test.swift":131:37, scope 110 // id: %12
  switch_enum %10 : $Optional<String>, case #Optional.some!enumelt: bb2, case #Optional.none!enumelt: bb1, loc "test.swift":131:38, scope 110 // id: %13

bb1:                                              // Preds: bb0
  %14 = string_literal utf8 "test/test.swift", loc "test.swift":131:38, scope 110 // user: %22
  %15 = integer_literal $Builtin.Word, 15, loc "test.swift":131:38, scope 110 // user: %25
  debug_step , loc "test.swift":131:38, scope 110 // id: %16
  %17 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value", loc "test.swift":131:38, scope 110 // user: %19
  %18 = integer_literal $Builtin.Word, 57, loc "test.swift":131:38, scope 110 // user: %21
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word, loc "test.swift":131:38, scope 110 // user: %21
  %20 = integer_literal $Builtin.Int8, 2, loc "test.swift":131:38, scope 110 // users: %25, %32, %21
  %21 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %20 : $Builtin.Int8), loc "test.swift":131:38, scope 110 // user: %36
  %22 = builtin "ptrtoint_Word"(%14 : $Builtin.RawPointer) : $Builtin.Word, loc "test.swift":131:38, scope 110 // user: %25
  debug_step , loc "test.swift":131:38, scope 110 // id: %23
  debug_step , loc "test.swift":131:38, scope 110 // id: %24
  %25 = struct $StaticString (%22 : $Builtin.Word, %15 : $Builtin.Word, %20 : $Builtin.Int8), loc "test.swift":131:38, scope 110 // user: %36
  %26 = integer_literal $Builtin.Int64, 131, loc "test.swift":131:38, scope 110 // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64), loc "test.swift":131:38, scope 110 // user: %36
  debug_step , loc "test.swift":131:38, scope 110 // id: %28
  %29 = string_literal utf8 "Fatal error", loc "test.swift":131:38, scope 110 // user: %31
  %30 = integer_literal $Builtin.Word, 11, loc "test.swift":131:38, scope 110 // user: %32
  %31 = builtin "ptrtoint_Word"(%29 : $Builtin.RawPointer) : $Builtin.Word, loc "test.swift":131:38, scope 110 // user: %32
  %32 = struct $StaticString (%31 : $Builtin.Word, %30 : $Builtin.Word, %20 : $Builtin.Int8), loc "test.swift":131:38, scope 110 // user: %36
  %33 = integer_literal $Builtin.Int32, 1, loc "test.swift":131:38, scope 110 // user: %34
  %34 = struct $UInt32 (%33 : $Builtin.Int32), loc "test.swift":131:38, scope 110 // user: %36
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %35 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, loc "test.swift":131:38, scope 110 // user: %36
  %36 = apply %35(%32, %21, %25, %27, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, loc "test.swift":131:38, scope 110
  unreachable , scope 110                         // id: %37

// %38                                            // user: %39
bb2(%38 : @owned $String):                        // Preds: bb0
  return %38 : $String, loc "test.swift":132:1, scope 110 // id: %39
} // end sil function '$s4test13arrayToStringySSSays5UInt8VGF'


// String.Encoding.utf8.unsafeMutableAddressor, scope 0
sil [global_init] @$sSS10FoundationE8EncodingV4utf8ACvau : $@convention(thin) () -> Builtin.RawPointer {
[global: read,write,copy,destroy,allocate,deinit_barrier]
} // end sil function '$sSS10FoundationE8EncodingV4utf8ACvau'


// String.init<A>(bytes:encoding:), scope 0
sil @$sSS10FoundationE5bytes8encodingSSSgxh_SSAAE8EncodingVtcSTRzs5UInt8V7ElementRtzlufC : $@convention(method) <τ_0_0 where τ_0_0 : Sequence, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, String.Encoding, @thin String.Type) -> @owned Optional<String>

sil_scope 111 {  parent @$ss30_diagnoseUnexpectedNilOptional14_filenameStart01_E6Length01_E7IsASCII5_line17_isImplicitUnwrapyBp_BwBi1_BwBi1_tF : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, Builtin.Word, Builtin.Int1) -> () }

// _diagnoseUnexpectedNilOptional(_filenameStart:_filenameLength:_filenameIsASCII:_line:_isImplicitUnwrap:), scope 111
sil public_external [transparent] [serialized] [ossa] @$ss30_diagnoseUnexpectedNilOptional14_filenameStart01_E6Length01_E7IsASCII5_line17_isImplicitUnwrapyBp_BwBi1_BwBi1_tF : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, Builtin.Word, Builtin.Int1) -> () {
// %0                                             // users: %35, %11
// %1                                             // users: %41, %17
// %2                                             // users: %36, %12
// %3                                             // users: %42, %18
// %4                                             // user: %5
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Word, %2 : $Builtin.Int1, %3 : $Builtin.Word, %4 : $Builtin.Int1):
  cond_br %4, bb5, bb1, scope 111                 // id: %5

bb1:                                              // Preds: bb0
  %6 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value", scope 111 // user: %8
  %7 = integer_literal $Builtin.Word, 57, scope 111 // user: %10
  %8 = builtin "ptrtoint_Word"(%6 : $Builtin.RawPointer) : $Builtin.Word, scope 111 // user: %10
  %9 = integer_literal $Builtin.Int8, 2, scope 111 // users: %24, %15, %10
  %10 = struct $StaticString (%8 : $Builtin.Word, %7 : $Builtin.Word, %9 : $Builtin.Int8), scope 111 // user: %28
  %11 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word, scope 111 // user: %17
  cond_br %2, bb3, bb2, scope 111                 // id: %12

bb2:                                              // Preds: bb1
  %13 = integer_literal $Builtin.Int8, 0, scope 111 // user: %14
  br bb4(%13 : $Builtin.Int8), scope 111          // id: %14

bb3:                                              // Preds: bb1
  br bb4(%9 : $Builtin.Int8), scope 111           // id: %15

// %16                                            // user: %17
bb4(%16 : $Builtin.Int8):                         // Preds: bb2 bb3
  %17 = struct $StaticString (%11 : $Builtin.Word, %1 : $Builtin.Word, %16 : $Builtin.Int8), scope 111 // user: %28
  %18 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64, scope 111 // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64), scope 111 // user: %28
  debug_step , scope 111                          // id: %20
  %21 = string_literal utf8 "Fatal error", scope 111 // user: %23
  %22 = integer_literal $Builtin.Word, 11, scope 111 // user: %24
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word, scope 111 // user: %24
  %24 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %9 : $Builtin.Int8), scope 111 // user: %28
  %25 = integer_literal $Builtin.Int32, 1, scope 111 // user: %26
  %26 = struct $UInt32 (%25 : $Builtin.Int32), scope 111 // user: %28
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %27 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 111 // user: %28
  %28 = apply %27(%24, %10, %17, %19, %26) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 111
  unreachable , scope 111                         // id: %29

bb5:                                              // Preds: bb0
  %30 = string_literal utf8 "Unexpectedly found nil while implicitly unwrapping an Optional value", scope 111 // user: %32
  %31 = integer_literal $Builtin.Word, 68, scope 111 // user: %34
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word, scope 111 // user: %34
  %33 = integer_literal $Builtin.Int8, 2, scope 111 // users: %48, %39, %34
  %34 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %33 : $Builtin.Int8), scope 111 // user: %52
  %35 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word, scope 111 // user: %41
  cond_br %2, bb7, bb6, scope 111                 // id: %36

bb6:                                              // Preds: bb5
  %37 = integer_literal $Builtin.Int8, 0, scope 111 // user: %38
  br bb8(%37 : $Builtin.Int8), scope 111          // id: %38

bb7:                                              // Preds: bb5
  br bb8(%33 : $Builtin.Int8), scope 111          // id: %39

// %40                                            // user: %41
bb8(%40 : $Builtin.Int8):                         // Preds: bb6 bb7
  %41 = struct $StaticString (%35 : $Builtin.Word, %1 : $Builtin.Word, %40 : $Builtin.Int8), scope 111 // user: %52
  %42 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64, scope 111 // user: %43
  %43 = struct $UInt (%42 : $Builtin.Int64), scope 111 // user: %52
  debug_step , scope 111                          // id: %44
  %45 = string_literal utf8 "Fatal error", scope 111 // user: %47
  %46 = integer_literal $Builtin.Word, 11, scope 111 // user: %48
  %47 = builtin "ptrtoint_Word"(%45 : $Builtin.RawPointer) : $Builtin.Word, scope 111 // user: %48
  %48 = struct $StaticString (%47 : $Builtin.Word, %46 : $Builtin.Word, %33 : $Builtin.Int8), scope 111 // user: %52
  %49 = integer_literal $Builtin.Int32, 1, scope 111 // user: %50
  %50 = struct $UInt32 (%49 : $Builtin.Int32), scope 111 // user: %52
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %51 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 111 // user: %52
  %52 = apply %51(%48, %34, %41, %43, %50) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 111
  unreachable , scope 111                         // id: %53
} // end sil function '$ss30_diagnoseUnexpectedNilOptional14_filenameStart01_E6Length01_E7IsASCII5_line17_isImplicitUnwrapyBp_BwBi1_BwBi1_tF'

sil_scope 112 { loc "test.swift":139:6 parent @$s4test07codeql_A0yyF : $@convention(thin) () -> () }
sil_scope 113 { loc "test.swift":140:26 parent 112 }
sil_scope 114 { loc "test.swift":140:6 parent 112 }
sil_scope 115 { loc "test.swift":141:13 parent 114 }
sil_scope 116 { loc "test.swift":141:6 parent 114 }
sil_scope 117 { loc "test.swift":142:18 parent 116 }
sil_scope 118 { loc "test.swift":142:6 parent 116 }
sil_scope 119 { loc "test.swift":144:20 parent 118 }
sil_scope 120 { loc "test.swift":144:6 parent 118 }
sil_scope 121 { loc "test.swift":145:18 parent 120 }
sil_scope 122 { loc "test.swift":145:6 parent 120 }
sil_scope 123 { loc "test.swift":146:24 parent 122 }
sil_scope 124 { loc "test.swift":146:6 parent 122 }
sil_scope 125 { loc "test.swift":148:18 parent 124 }
sil_scope 126 { loc "test.swift":148:6 parent 124 }
sil_scope 127 { loc "test.swift":149:16 parent 126 }
sil_scope 128 { loc "test.swift":149:6 parent 126 }
sil_scope 129 { loc "test.swift":150:16 parent 128 }
sil_scope 130 { loc "test.swift":150:6 parent 128 }
sil_scope 131 { loc "test.swift":152:11 parent 130 }
sil_scope 132 { loc "test.swift":152:6 parent 130 }
sil_scope 133 { loc "test.swift":153:17 parent 132 }
sil_scope 134 { loc "test.swift":153:6 parent 132 }
sil_scope 135 { loc "test.swift":156:12 parent 134 }
sil_scope 136 { loc "test.swift":156:6 parent 134 }
sil_scope 137 { loc "test.swift":157:12 parent 136 }
sil_scope 138 { loc "test.swift":157:6 parent 136 }
sil_scope 139 { loc "test.swift":158:12 parent 138 }
sil_scope 140 { loc "test.swift":158:6 parent 138 }
sil_scope 141 { loc "test.swift":159:12 parent 140 }
sil_scope 142 { loc "test.swift":159:6 parent 140 }
sil_scope 143 { loc "test.swift":161:12 parent 142 }
sil_scope 144 { loc "test.swift":161:6 parent 142 }
sil_scope 145 { loc "test.swift":162:12 parent 144 }
sil_scope 146 { loc "test.swift":162:6 parent 144 }
sil_scope 147 { loc "test.swift":163:12 parent 146 }
sil_scope 148 { loc "test.swift":163:6 parent 146 }
sil_scope 149 { loc "test.swift":164:12 parent 148 }
sil_scope 150 { loc "test.swift":164:6 parent 148 }
sil_scope 151 { loc "test.swift":167:12 parent 150 }
sil_scope 152 { loc "test.swift":167:6 parent 150 }
sil_scope 153 { loc "test.swift":168:12 parent 152 }
sil_scope 154 { loc "test.swift":168:6 parent 152 }
sil_scope 155 { loc "test.swift":169:12 parent 154 }
sil_scope 156 { loc "test.swift":169:6 parent 154 }
sil_scope 157 { loc "test.swift":170:12 parent 156 }
sil_scope 158 { loc "test.swift":170:6 parent 156 }
sil_scope 159 { loc "test.swift":172:12 parent 158 }
sil_scope 160 { loc "test.swift":172:6 parent 158 }
sil_scope 161 { loc "test.swift":173:12 parent 160 }
sil_scope 162 { loc "test.swift":173:6 parent 160 }
sil_scope 163 { loc "test.swift":174:12 parent 162 }
sil_scope 164 { loc "test.swift":174:6 parent 162 }
sil_scope 165 { loc "test.swift":175:12 parent 164 }
sil_scope 166 { loc "test.swift":175:6 parent 164 }
sil_scope 167 { loc "test.swift":178:12 parent 166 }
sil_scope 168 { loc "test.swift":178:6 parent 166 }
sil_scope 169 { loc "test.swift":179:12 parent 168 }
sil_scope 170 { loc "test.swift":179:6 parent 168 }
sil_scope 171 { loc "test.swift":181:12 parent 170 }
sil_scope 172 { loc "test.swift":181:6 parent 170 }
sil_scope 173 { loc "test.swift":182:12 parent 172 }
sil_scope 174 { loc "test.swift":182:6 parent 172 }
sil_scope 175 { loc "test.swift":185:13 parent 174 }
sil_scope 176 { loc "test.swift":185:6 parent 174 }
sil_scope 177 { loc "test.swift":187:13 parent 176 }
sil_scope 178 { loc "test.swift":187:6 parent 176 }
sil_scope 179 { loc "test.swift":190:15 parent 178 }
sil_scope 180 { loc "test.swift":190:6 parent 178 }
sil_scope 181 { loc "test.swift":192:15 parent 180 }
sil_scope 182 { loc "test.swift":192:6 parent 180 }
sil_scope 183 { loc "test.swift":195:12 parent 182 }
sil_scope 184 { loc "test.swift":195:6 parent 182 }
sil_scope 185 { loc "test.swift":197:12 parent 184 }
sil_scope 186 { loc "test.swift":197:6 parent 184 }
sil_scope 187 { loc "test.swift":200:12 parent 186 }
sil_scope 188 { loc "test.swift":200:6 parent 186 }
sil_scope 189 { loc "test.swift":201:12 parent 188 }
sil_scope 190 { loc "test.swift":201:6 parent 188 }
sil_scope 191 { loc "test.swift":202:12 parent 190 }
sil_scope 192 { loc "test.swift":202:6 parent 190 }
sil_scope 193 { loc "test.swift":203:12 parent 192 }
sil_scope 194 { loc "test.swift":203:6 parent 192 }
sil_scope 195 { loc "test.swift":205:12 parent 194 }
sil_scope 196 { loc "test.swift":205:6 parent 194 }
sil_scope 197 { loc "test.swift":206:12 parent 196 }
sil_scope 198 { loc "test.swift":206:6 parent 196 }
sil_scope 199 { loc "test.swift":207:12 parent 198 }
sil_scope 200 { loc "test.swift":207:6 parent 198 }
sil_scope 201 { loc "test.swift":208:12 parent 200 }
sil_scope 202 { loc "test.swift":208:6 parent 200 }
sil_scope 203 { loc "test.swift":211:12 parent 202 }
sil_scope 204 { loc "test.swift":211:6 parent 202 }
sil_scope 205 { loc "test.swift":212:12 parent 204 }
sil_scope 206 { loc "test.swift":212:6 parent 204 }
sil_scope 207 { loc "test.swift":213:12 parent 206 }
sil_scope 208 { loc "test.swift":213:6 parent 206 }
sil_scope 209 { loc "test.swift":214:12 parent 208 }
sil_scope 210 { loc "test.swift":214:6 parent 208 }
sil_scope 211 { loc "test.swift":216:12 parent 210 }
sil_scope 212 { loc "test.swift":216:6 parent 210 }
sil_scope 213 { loc "test.swift":217:12 parent 212 }
sil_scope 214 { loc "test.swift":217:6 parent 212 }
sil_scope 215 { loc "test.swift":218:12 parent 214 }
sil_scope 216 { loc "test.swift":218:6 parent 214 }
sil_scope 217 { loc "test.swift":219:12 parent 216 }
sil_scope 218 { loc "test.swift":219:6 parent 216 }

// codeql_test(), loc "test.swift":139:6, scope 112
sil hidden [ossa] @$s4test07codeql_A0yyF : $@convention(thin) () -> () {
bb0:
  %0 = integer_literal $Builtin.Word, 16, loc "test.swift":140:26, scope 113 // user: %2
  // function_ref _allocateUninitializedArray<A>(_:)
  %1 = function_ref @$ss27_allocateUninitializedArrayySayxG_BptBwlF : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer), loc "test.swift":140:26, scope 113 // user: %2
  %2 = apply %1<UInt8>(%0) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer), loc "test.swift":140:26, scope 113 // user: %3
  (%3, %4) = destructure_tuple %2 : $(Array<UInt8>, Builtin.RawPointer), loc "test.swift":140:26, scope 113 // users: %85, %5
  %5 = pointer_to_address %4 : $Builtin.RawPointer to [strict] $*UInt8, loc "test.swift":140:26, scope 113 // users: %80, %75, %70, %65, %60, %55, %50, %45, %40, %35, %30, %25, %20, %15, %10, %8
  %6 = integer_literal $Builtin.Int8, 42, loc "test.swift":140:27, scope 113 // user: %7
  %7 = struct $UInt8 (%6 : $Builtin.Int8), loc "test.swift":140:27, scope 113 // user: %8
  store %7 to [trivial] %5 : $*UInt8, loc "test.swift":140:27, scope 113 // id: %8
  %9 = integer_literal $Builtin.Word, 1, loc "test.swift":140:26, scope 113 // user: %10
  %10 = index_addr %5 : $*UInt8, %9 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %13
  %11 = integer_literal $Builtin.Int8, 58, loc "test.swift":140:33, scope 113 // user: %12
  %12 = struct $UInt8 (%11 : $Builtin.Int8), loc "test.swift":140:33, scope 113 // user: %13
  store %12 to [trivial] %10 : $*UInt8, loc "test.swift":140:33, scope 113 // id: %13
  %14 = integer_literal $Builtin.Word, 2, loc "test.swift":140:26, scope 113 // user: %15
  %15 = index_addr %5 : $*UInt8, %14 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %18
  %16 = integer_literal $Builtin.Int8, -128, loc "test.swift":140:39, scope 113 // user: %17
  %17 = struct $UInt8 (%16 : $Builtin.Int8), loc "test.swift":140:39, scope 113 // user: %18
  store %17 to [trivial] %15 : $*UInt8, loc "test.swift":140:39, scope 113 // id: %18
  %19 = integer_literal $Builtin.Word, 3, loc "test.swift":140:26, scope 113 // user: %20
  %20 = index_addr %5 : $*UInt8, %19 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %23
  %21 = integer_literal $Builtin.Int8, 5, loc "test.swift":140:45, scope 113 // user: %22
  %22 = struct $UInt8 (%21 : $Builtin.Int8), loc "test.swift":140:45, scope 113 // user: %23
  store %22 to [trivial] %20 : $*UInt8, loc "test.swift":140:45, scope 113 // id: %23
  %24 = integer_literal $Builtin.Word, 4, loc "test.swift":140:26, scope 113 // user: %25
  %25 = index_addr %5 : $*UInt8, %24 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %28
  %26 = integer_literal $Builtin.Int8, -81, loc "test.swift":140:51, scope 113 // user: %27
  %27 = struct $UInt8 (%26 : $Builtin.Int8), loc "test.swift":140:51, scope 113 // user: %28
  store %27 to [trivial] %25 : $*UInt8, loc "test.swift":140:51, scope 113 // id: %28
  %29 = integer_literal $Builtin.Word, 5, loc "test.swift":140:26, scope 113 // user: %30
  %30 = index_addr %5 : $*UInt8, %29 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %33
  %31 = integer_literal $Builtin.Int8, 70, loc "test.swift":140:57, scope 113 // user: %32
  %32 = struct $UInt8 (%31 : $Builtin.Int8), loc "test.swift":140:57, scope 113 // user: %33
  store %32 to [trivial] %30 : $*UInt8, loc "test.swift":140:57, scope 113 // id: %33
  %34 = integer_literal $Builtin.Word, 6, loc "test.swift":140:26, scope 113 // user: %35
  %35 = index_addr %5 : $*UInt8, %34 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %38
  %36 = integer_literal $Builtin.Int8, 88, loc "test.swift":140:63, scope 113 // user: %37
  %37 = struct $UInt8 (%36 : $Builtin.Int8), loc "test.swift":140:63, scope 113 // user: %38
  store %37 to [trivial] %35 : $*UInt8, loc "test.swift":140:63, scope 113 // id: %38
  %39 = integer_literal $Builtin.Word, 7, loc "test.swift":140:26, scope 113 // user: %40
  %40 = index_addr %5 : $*UInt8, %39 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %43
  %41 = integer_literal $Builtin.Int8, 45, loc "test.swift":140:69, scope 113 // user: %42
  %42 = struct $UInt8 (%41 : $Builtin.Int8), loc "test.swift":140:69, scope 113 // user: %43
  store %42 to [trivial] %40 : $*UInt8, loc "test.swift":140:69, scope 113 // id: %43
  %44 = integer_literal $Builtin.Word, 8, loc "test.swift":140:26, scope 113 // user: %45
  %45 = index_addr %5 : $*UInt8, %44 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %48
  %46 = integer_literal $Builtin.Int8, 102, loc "test.swift":140:75, scope 113 // user: %47
  %47 = struct $UInt8 (%46 : $Builtin.Int8), loc "test.swift":140:75, scope 113 // user: %48
  store %47 to [trivial] %45 : $*UInt8, loc "test.swift":140:75, scope 113 // id: %48
  %49 = integer_literal $Builtin.Word, 9, loc "test.swift":140:26, scope 113 // user: %50
  %50 = index_addr %5 : $*UInt8, %49 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %53
  %51 = integer_literal $Builtin.Int8, 82, loc "test.swift":140:81, scope 113 // user: %52
  %52 = struct $UInt8 (%51 : $Builtin.Int8), loc "test.swift":140:81, scope 113 // user: %53
  store %52 to [trivial] %50 : $*UInt8, loc "test.swift":140:81, scope 113 // id: %53
  %54 = integer_literal $Builtin.Word, 10, loc "test.swift":140:26, scope 113 // user: %55
  %55 = index_addr %5 : $*UInt8, %54 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %58
  %56 = integer_literal $Builtin.Int8, 16, loc "test.swift":140:87, scope 113 // user: %57
  %57 = struct $UInt8 (%56 : $Builtin.Int8), loc "test.swift":140:87, scope 113 // user: %58
  store %57 to [trivial] %55 : $*UInt8, loc "test.swift":140:87, scope 113 // id: %58
  %59 = integer_literal $Builtin.Word, 11, loc "test.swift":140:26, scope 113 // user: %60
  %60 = index_addr %5 : $*UInt8, %59 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %63
  %61 = integer_literal $Builtin.Int8, -82, loc "test.swift":140:93, scope 113 // user: %62
  %62 = struct $UInt8 (%61 : $Builtin.Int8), loc "test.swift":140:93, scope 113 // user: %63
  store %62 to [trivial] %60 : $*UInt8, loc "test.swift":140:93, scope 113 // id: %63
  %64 = integer_literal $Builtin.Word, 12, loc "test.swift":140:26, scope 113 // user: %65
  %65 = index_addr %5 : $*UInt8, %64 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %68
  %66 = integer_literal $Builtin.Int8, -122, loc "test.swift":140:99, scope 113 // user: %67
  %67 = struct $UInt8 (%66 : $Builtin.Int8), loc "test.swift":140:99, scope 113 // user: %68
  store %67 to [trivial] %65 : $*UInt8, loc "test.swift":140:99, scope 113 // id: %68
  %69 = integer_literal $Builtin.Word, 13, loc "test.swift":140:26, scope 113 // user: %70
  %70 = index_addr %5 : $*UInt8, %69 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %73
  %71 = integer_literal $Builtin.Int8, -45, loc "test.swift":140:105, scope 113 // user: %72
  %72 = struct $UInt8 (%71 : $Builtin.Int8), loc "test.swift":140:105, scope 113 // user: %73
  store %72 to [trivial] %70 : $*UInt8, loc "test.swift":140:105, scope 113 // id: %73
  %74 = integer_literal $Builtin.Word, 14, loc "test.swift":140:26, scope 113 // user: %75
  %75 = index_addr %5 : $*UInt8, %74 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %78
  %76 = integer_literal $Builtin.Int8, -114, loc "test.swift":140:111, scope 113 // user: %77
  %77 = struct $UInt8 (%76 : $Builtin.Int8), loc "test.swift":140:111, scope 113 // user: %78
  store %77 to [trivial] %75 : $*UInt8, loc "test.swift":140:111, scope 113 // id: %78
  %79 = integer_literal $Builtin.Word, 15, loc "test.swift":140:26, scope 113 // user: %80
  %80 = index_addr %5 : $*UInt8, %79 : $Builtin.Word, loc "test.swift":140:26, scope 113 // user: %83
  %81 = integer_literal $Builtin.Int8, -113, loc "test.swift":140:117, scope 113 // user: %82
  %82 = struct $UInt8 (%81 : $Builtin.Int8), loc "test.swift":140:117, scope 113 // user: %83
  store %82 to [trivial] %80 : $*UInt8, loc "test.swift":140:117, scope 113 // id: %83
  // function_ref _finalizeUninitializedArray<A>(_:)
  %84 = function_ref @$ss27_finalizeUninitializedArrayySayxGABnlF : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0>, loc "test.swift":140:26, scope 113 // user: %85
  %85 = apply %84<UInt8>(%3) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0>, loc "test.swift":140:26, scope 113 // users: %86, %191, %197, %239, %267, %279, %291, %303, %313, %371, %383, %515
  debug_value %85 : $Array<UInt8>, let, name "key", loc "test.swift":140:6, scope 114 // id: %86
  // function_ref getConstantArray()
  %87 = function_ref @$s4test16getConstantArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":141:13, scope 115 // user: %88
  %88 = apply %87() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":141:13, scope 115 // users: %89, %123, %133, %514
  debug_value %88 : $Array<UInt8>, let, name "key2", loc "test.swift":141:6, scope 116 // id: %89
  // function_ref getConstantString()
  %90 = function_ref @$s4test17getConstantStringSSyF : $@convention(thin) () -> @owned String, loc "test.swift":142:18, scope 117 // user: %91
  %91 = apply %90() : $@convention(thin) () -> @owned String, loc "test.swift":142:18, scope 117 // users: %92, %143, %150, %203, %209, %246, %323, %330, %377, %391, %513
  debug_value %91 : $String, let, name "keyString", loc "test.swift":142:6, scope 118 // id: %92
  // function_ref getRandomArray()
  %93 = function_ref @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":144:20, scope 119 // user: %94
  %94 = apply %93() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":144:20, scope 119 // users: %95, %512
  debug_value %94 : $Array<UInt8>, let, name "randomArray", loc "test.swift":144:6, scope 120 // id: %95
  // function_ref getRandomArray()
  %96 = function_ref @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":145:18, scope 121 // user: %97
  %97 = apply %96() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":145:18, scope 121 // users: %98, %157, %167, %215, %221, %253, %273, %285, %297, %337, %347, %398, %410, %511
  debug_value %97 : $Array<UInt8>, let, name "randomKey", loc "test.swift":145:6, scope 122 // id: %98
  %99 = metatype $@thin String.Type, loc "test.swift":146:24, scope 123 // user: %103
  // function_ref getRandomArray()
  %100 = function_ref @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":146:40, scope 123 // user: %101
  %101 = apply %100() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":146:40, scope 123 // user: %103
  // function_ref String.init(cString:)
  %102 = function_ref @$sSS7cStringSSSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin String.Type) -> @owned String, loc "test.swift":146:24, scope 123 // user: %103
  %103 = apply %102(%101, %99) : $@convention(method) (@owned Array<UInt8>, @thin String.Type) -> @owned String, loc "test.swift":146:24, scope 123 // users: %104, %177, %184, %227, %233, %260, %357, %364, %404, %418, %510
  debug_value %103 : $String, let, name "randomKeyString", loc "test.swift":146:6, scope 124 // id: %104
  %105 = metatype $@thin CBC.Type, loc "test.swift":148:18, scope 125 // user: %107
  // function_ref CBC.init()
  %106 = function_ref @$s4test3CBCVACycfC : $@convention(method) (@thin CBC.Type) -> CBC, loc "test.swift":148:18, scope 125 // user: %107
  %107 = apply %106(%105) : $@convention(method) (@thin CBC.Type) -> CBC, loc "test.swift":148:18, scope 125 // users: %350, %340, %316, %306, %170, %160, %136, %126, %108
  debug_value %107 : $CBC, let, name "blockMode", loc "test.swift":148:6, scope 126 // id: %108
  %109 = enum $Padding, #Padding.noPadding!enumelt, loc "test.swift":149:24, scope 127 // users: %367, %342, %333, %308, %187, %162, %153, %128, %110
  debug_value %109 : $Padding, let, name "padding", loc "test.swift":149:6, scope 128 // id: %110
  %111 = enum $SHA2.Variant, #SHA2.Variant.sha256!enumelt, loc "test.swift":150:35, scope 129 // user: %112
  %112 = enum $HMAC.Variant, #HMAC.Variant.sha2!enumelt, %111 : $SHA2.Variant, loc "test.swift":150:29, scope 129 // users: %235, %223, %211, %199, %113
  debug_value %112 : $HMAC.Variant, let, name "variant", loc "test.swift":150:6, scope 130 // id: %113
  // function_ref getRandomArray()
  %114 = function_ref @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":152:11, scope 131 // user: %115
  %115 = apply %114() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":152:11, scope 131 // users: %116, %118, %240, %254, %384, %411, %509
  debug_value %115 : $Array<UInt8>, let, name "iv", loc "test.swift":152:6, scope 132 // id: %116
  %117 = metatype $@thin String.Type, loc "test.swift":153:17, scope 133 // user: %120
  %118 = copy_value %115 : $Array<UInt8>, loc "test.swift":153:33, scope 133 // user: %120
  // function_ref String.init(cString:)
  %119 = function_ref @$sSS7cStringSSSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin String.Type) -> @owned String, loc "test.swift":153:17, scope 133 // user: %120
  %120 = apply %119(%118, %117) : $@convention(method) (@owned Array<UInt8>, @thin String.Type) -> @owned String, loc "test.swift":153:17, scope 133 // users: %121, %144, %151, %178, %185, %247, %261, %324, %331, %358, %365, %392, %419, %508
  debug_value %120 : $String, let, name "ivString", loc "test.swift":153:6, scope 134 // id: %121
  %122 = metatype $@thick AES.Type, loc "test.swift":156:12, scope 135 // user: %128
  %123 = copy_value %88 : $Array<UInt8>, loc "test.swift":156:21, scope 135 // user: %128
  %124 = alloc_stack $any BlockMode, loc "test.swift":156:38, scope 135 // users: %129, %128, %125
  %125 = init_existential_addr %124 : $*any BlockMode, $CBC, loc "test.swift":156:38, scope 135 // user: %126
  store %107 to [trivial] %125 : $*CBC, loc "test.swift":156:38, scope 135 // id: %126
  // function_ref AES.__allocating_init(key:blockMode:padding:)
  %127 = function_ref @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":156:12, scope 135 // user: %128
  %128 = apply %127(%123, %124, %109, %122) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":156:12, scope 135 // users: %507, %130
  dealloc_stack %124 : $*any BlockMode, loc "test.swift":156:65, scope 135 // id: %129
  %130 = begin_borrow [lexical] [var_decl] %128 : $AES, loc "test.swift":156:12, scope 135 // users: %506, %131
  debug_value %130 : $AES, let, name "ab1", loc "test.swift":156:6, scope 136 // id: %131
  %132 = metatype $@thick AES.Type, loc "test.swift":157:12, scope 137 // user: %138
  %133 = copy_value %88 : $Array<UInt8>, loc "test.swift":157:21, scope 137 // user: %138
  %134 = alloc_stack $any BlockMode, loc "test.swift":157:38, scope 137 // users: %139, %138, %135
  %135 = init_existential_addr %134 : $*any BlockMode, $CBC, loc "test.swift":157:38, scope 137 // user: %136
  store %107 to [trivial] %135 : $*CBC, loc "test.swift":157:38, scope 137 // id: %136
  // function_ref AES.__allocating_init(key:blockMode:)
  %137 = function_ref @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":157:12, scope 137 // user: %138
  %138 = apply %137(%133, %134, %132) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":157:12, scope 137 // users: %505, %140
  dealloc_stack %134 : $*any BlockMode, loc "test.swift":157:47, scope 137 // id: %139
  %140 = begin_borrow [lexical] [var_decl] %138 : $AES, loc "test.swift":157:12, scope 137 // users: %504, %141
  debug_value %140 : $AES, let, name "ab2", loc "test.swift":157:6, scope 138 // id: %141
  %142 = metatype $@thick AES.Type, loc "test.swift":158:12, scope 139 // user: %146
  %143 = copy_value %91 : $String, loc "test.swift":158:21, scope 139 // user: %146
  %144 = copy_value %120 : $String, loc "test.swift":158:36, scope 139 // user: %146
  // function_ref AES.__allocating_init(key:iv:)
  %145 = function_ref @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":158:12, scope 139 // user: %146
  %146 = apply %145(%143, %144, %142) : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":158:12, scope 139 // users: %503, %147
  %147 = begin_borrow [lexical] [var_decl] %146 : $AES, loc "test.swift":158:12, scope 139 // users: %502, %148
  debug_value %147 : $AES, let, name "ab3", loc "test.swift":158:6, scope 140 // id: %148
  %149 = metatype $@thick AES.Type, loc "test.swift":159:12, scope 141 // user: %153
  %150 = copy_value %91 : $String, loc "test.swift":159:21, scope 141 // user: %153
  %151 = copy_value %120 : $String, loc "test.swift":159:36, scope 141 // user: %153
  // function_ref AES.__allocating_init(key:iv:padding:)
  %152 = function_ref @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":159:12, scope 141 // user: %153
  %153 = apply %152(%150, %151, %109, %149) : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":159:12, scope 141 // users: %501, %154
  %154 = begin_borrow [lexical] [var_decl] %153 : $AES, loc "test.swift":159:12, scope 141 // users: %500, %155
  debug_value %154 : $AES, let, name "ab4", loc "test.swift":159:6, scope 142 // id: %155
  %156 = metatype $@thick AES.Type, loc "test.swift":161:12, scope 143 // user: %162
  %157 = copy_value %97 : $Array<UInt8>, loc "test.swift":161:21, scope 143 // user: %162
  %158 = alloc_stack $any BlockMode, loc "test.swift":161:43, scope 143 // users: %163, %162, %159
  %159 = init_existential_addr %158 : $*any BlockMode, $CBC, loc "test.swift":161:43, scope 143 // user: %160
  store %107 to [trivial] %159 : $*CBC, loc "test.swift":161:43, scope 143 // id: %160
  // function_ref AES.__allocating_init(key:blockMode:padding:)
  %161 = function_ref @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":161:12, scope 143 // user: %162
  %162 = apply %161(%157, %158, %109, %156) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":161:12, scope 143 // users: %499, %164
  dealloc_stack %158 : $*any BlockMode, loc "test.swift":161:70, scope 143 // id: %163
  %164 = begin_borrow [lexical] [var_decl] %162 : $AES, loc "test.swift":161:12, scope 143 // users: %498, %165
  debug_value %164 : $AES, let, name "ag1", loc "test.swift":161:6, scope 144 // id: %165
  %166 = metatype $@thick AES.Type, loc "test.swift":162:12, scope 145 // user: %172
  %167 = copy_value %97 : $Array<UInt8>, loc "test.swift":162:21, scope 145 // user: %172
  %168 = alloc_stack $any BlockMode, loc "test.swift":162:43, scope 145 // users: %173, %172, %169
  %169 = init_existential_addr %168 : $*any BlockMode, $CBC, loc "test.swift":162:43, scope 145 // user: %170
  store %107 to [trivial] %169 : $*CBC, loc "test.swift":162:43, scope 145 // id: %170
  // function_ref AES.__allocating_init(key:blockMode:)
  %171 = function_ref @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":162:12, scope 145 // user: %172
  %172 = apply %171(%167, %168, %166) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":162:12, scope 145 // users: %497, %174
  dealloc_stack %168 : $*any BlockMode, loc "test.swift":162:52, scope 145 // id: %173
  %174 = begin_borrow [lexical] [var_decl] %172 : $AES, loc "test.swift":162:12, scope 145 // users: %496, %175
  debug_value %174 : $AES, let, name "ag2", loc "test.swift":162:6, scope 146 // id: %175
  %176 = metatype $@thick AES.Type, loc "test.swift":163:12, scope 147 // user: %180
  %177 = copy_value %103 : $String, loc "test.swift":163:21, scope 147 // user: %180
  %178 = copy_value %120 : $String, loc "test.swift":163:42, scope 147 // user: %180
  // function_ref AES.__allocating_init(key:iv:)
  %179 = function_ref @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":163:12, scope 147 // user: %180
  %180 = apply %179(%177, %178, %176) : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":163:12, scope 147 // users: %495, %181
  %181 = begin_borrow [lexical] [var_decl] %180 : $AES, loc "test.swift":163:12, scope 147 // users: %494, %182
  debug_value %181 : $AES, let, name "ag3", loc "test.swift":163:6, scope 148 // id: %182
  %183 = metatype $@thick AES.Type, loc "test.swift":164:12, scope 149 // user: %187
  %184 = copy_value %103 : $String, loc "test.swift":164:21, scope 149 // user: %187
  %185 = copy_value %120 : $String, loc "test.swift":164:42, scope 149 // user: %187
  // function_ref AES.__allocating_init(key:iv:padding:)
  %186 = function_ref @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":164:12, scope 149 // user: %187
  %187 = apply %186(%184, %185, %109, %183) : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":164:12, scope 149 // users: %493, %188
  %188 = begin_borrow [lexical] [var_decl] %187 : $AES, loc "test.swift":164:12, scope 149 // users: %492, %189
  debug_value %188 : $AES, let, name "ag4", loc "test.swift":164:6, scope 150 // id: %189
  %190 = metatype $@thick HMAC.Type, loc "test.swift":167:12, scope 151 // user: %193
  %191 = copy_value %85 : $Array<UInt8>, loc "test.swift":167:22, scope 151 // user: %193
  // function_ref HMAC.__allocating_init(key:)
  %192 = function_ref @$s4test4HMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":167:12, scope 151 // user: %193
  %193 = apply %192(%191, %190) : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":167:12, scope 151 // users: %491, %194
  %194 = begin_borrow [lexical] [var_decl] %193 : $HMAC, loc "test.swift":167:12, scope 151 // users: %490, %195
  debug_value %194 : $HMAC, let, name "hb1", loc "test.swift":167:6, scope 152 // id: %195
  %196 = metatype $@thick HMAC.Type, loc "test.swift":168:12, scope 153 // user: %199
  %197 = copy_value %85 : $Array<UInt8>, loc "test.swift":168:22, scope 153 // user: %199
  // function_ref HMAC.__allocating_init(key:variant:)
  %198 = function_ref @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":168:12, scope 153 // user: %199
  %199 = apply %198(%197, %112, %196) : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":168:12, scope 153 // users: %489, %200
  %200 = begin_borrow [lexical] [var_decl] %199 : $HMAC, loc "test.swift":168:12, scope 153 // users: %488, %201
  debug_value %200 : $HMAC, let, name "hb2", loc "test.swift":168:6, scope 154 // id: %201
  %202 = metatype $@thick HMAC.Type, loc "test.swift":169:12, scope 155 // user: %205
  %203 = copy_value %91 : $String, loc "test.swift":169:22, scope 155 // user: %205
  // function_ref HMAC.__allocating_init(key:)
  %204 = function_ref @$s4test4HMACC3keyACSS_tcfC : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":169:12, scope 155 // user: %205
  %205 = apply %204(%203, %202) : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":169:12, scope 155 // users: %487, %206
  %206 = begin_borrow [lexical] [var_decl] %205 : $HMAC, loc "test.swift":169:12, scope 155 // users: %486, %207
  debug_value %206 : $HMAC, let, name "hb3", loc "test.swift":169:6, scope 156 // id: %207
  %208 = metatype $@thick HMAC.Type, loc "test.swift":170:12, scope 157 // user: %211
  %209 = copy_value %91 : $String, loc "test.swift":170:22, scope 157 // user: %211
  // function_ref HMAC.__allocating_init(key:variant:)
  %210 = function_ref @$s4test4HMACC3key7variantACSS_AC7VariantOtcfC : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":170:12, scope 157 // user: %211
  %211 = apply %210(%209, %112, %208) : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":170:12, scope 157 // users: %485, %212
  %212 = begin_borrow [lexical] [var_decl] %211 : $HMAC, loc "test.swift":170:12, scope 157 // users: %484, %213
  debug_value %212 : $HMAC, let, name "hb4", loc "test.swift":170:6, scope 158 // id: %213
  %214 = metatype $@thick HMAC.Type, loc "test.swift":172:12, scope 159 // user: %217
  %215 = copy_value %97 : $Array<UInt8>, loc "test.swift":172:22, scope 159 // user: %217
  // function_ref HMAC.__allocating_init(key:)
  %216 = function_ref @$s4test4HMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":172:12, scope 159 // user: %217
  %217 = apply %216(%215, %214) : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":172:12, scope 159 // users: %483, %218
  %218 = begin_borrow [lexical] [var_decl] %217 : $HMAC, loc "test.swift":172:12, scope 159 // users: %482, %219
  debug_value %218 : $HMAC, let, name "hg1", loc "test.swift":172:6, scope 160 // id: %219
  %220 = metatype $@thick HMAC.Type, loc "test.swift":173:12, scope 161 // user: %223
  %221 = copy_value %97 : $Array<UInt8>, loc "test.swift":173:22, scope 161 // user: %223
  // function_ref HMAC.__allocating_init(key:variant:)
  %222 = function_ref @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":173:12, scope 161 // user: %223
  %223 = apply %222(%221, %112, %220) : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":173:12, scope 161 // users: %481, %224
  %224 = begin_borrow [lexical] [var_decl] %223 : $HMAC, loc "test.swift":173:12, scope 161 // users: %480, %225
  debug_value %224 : $HMAC, let, name "hg2", loc "test.swift":173:6, scope 162 // id: %225
  %226 = metatype $@thick HMAC.Type, loc "test.swift":174:12, scope 163 // user: %229
  %227 = copy_value %103 : $String, loc "test.swift":174:22, scope 163 // user: %229
  // function_ref HMAC.__allocating_init(key:)
  %228 = function_ref @$s4test4HMACC3keyACSS_tcfC : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":174:12, scope 163 // user: %229
  %229 = apply %228(%227, %226) : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":174:12, scope 163 // users: %479, %230
  %230 = begin_borrow [lexical] [var_decl] %229 : $HMAC, loc "test.swift":174:12, scope 163 // users: %478, %231
  debug_value %230 : $HMAC, let, name "hg3", loc "test.swift":174:6, scope 164 // id: %231
  %232 = metatype $@thick HMAC.Type, loc "test.swift":175:12, scope 165 // user: %235
  %233 = copy_value %103 : $String, loc "test.swift":175:22, scope 165 // user: %235
  // function_ref HMAC.__allocating_init(key:variant:)
  %234 = function_ref @$s4test4HMACC3key7variantACSS_AC7VariantOtcfC : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":175:12, scope 165 // user: %235
  %235 = apply %234(%233, %112, %232) : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":175:12, scope 165 // users: %477, %236
  %236 = begin_borrow [lexical] [var_decl] %235 : $HMAC, loc "test.swift":175:12, scope 165 // users: %476, %237
  debug_value %236 : $HMAC, let, name "hg4", loc "test.swift":175:6, scope 166 // id: %237
  %238 = metatype $@thick ChaCha20.Type, loc "test.swift":178:12, scope 167 // user: %242
  %239 = copy_value %85 : $Array<UInt8>, loc "test.swift":178:26, scope 167 // user: %242
  %240 = copy_value %115 : $Array<UInt8>, loc "test.swift":178:35, scope 167 // user: %242
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %241 = function_ref @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":178:12, scope 167 // user: %242
  %242 = apply %241(%239, %240, %238) : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":178:12, scope 167 // users: %475, %243
  %243 = begin_borrow [lexical] [var_decl] %242 : $ChaCha20, loc "test.swift":178:12, scope 167 // users: %474, %244
  debug_value %243 : $ChaCha20, let, name "cb1", loc "test.swift":178:6, scope 168 // id: %244
  %245 = metatype $@thick ChaCha20.Type, loc "test.swift":179:12, scope 169 // user: %249
  %246 = copy_value %91 : $String, loc "test.swift":179:26, scope 169 // user: %249
  %247 = copy_value %120 : $String, loc "test.swift":179:41, scope 169 // user: %249
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %248 = function_ref @$s4test8ChaCha20C3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":179:12, scope 169 // user: %249
  %249 = apply %248(%246, %247, %245) : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":179:12, scope 169 // users: %473, %250
  %250 = begin_borrow [lexical] [var_decl] %249 : $ChaCha20, loc "test.swift":179:12, scope 169 // users: %472, %251
  debug_value %250 : $ChaCha20, let, name "cb2", loc "test.swift":179:6, scope 170 // id: %251
  %252 = metatype $@thick ChaCha20.Type, loc "test.swift":181:12, scope 171 // user: %256
  %253 = copy_value %97 : $Array<UInt8>, loc "test.swift":181:26, scope 171 // user: %256
  %254 = copy_value %115 : $Array<UInt8>, loc "test.swift":181:41, scope 171 // user: %256
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %255 = function_ref @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":181:12, scope 171 // user: %256
  %256 = apply %255(%253, %254, %252) : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":181:12, scope 171 // users: %471, %257
  %257 = begin_borrow [lexical] [var_decl] %256 : $ChaCha20, loc "test.swift":181:12, scope 171 // users: %470, %258
  debug_value %257 : $ChaCha20, let, name "cg1", loc "test.swift":181:6, scope 172 // id: %258
  %259 = metatype $@thick ChaCha20.Type, loc "test.swift":182:12, scope 173 // user: %263
  %260 = copy_value %103 : $String, loc "test.swift":182:26, scope 173 // user: %263
  %261 = copy_value %120 : $String, loc "test.swift":182:47, scope 173 // user: %263
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %262 = function_ref @$s4test8ChaCha20C3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":182:12, scope 173 // user: %263
  %263 = apply %262(%260, %261, %259) : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":182:12, scope 173 // users: %469, %264
  %264 = begin_borrow [lexical] [var_decl] %263 : $ChaCha20, loc "test.swift":182:12, scope 173 // users: %468, %265
  debug_value %264 : $ChaCha20, let, name "cg2", loc "test.swift":182:6, scope 174 // id: %265
  %266 = metatype $@thick CBCMAC.Type, loc "test.swift":185:13, scope 175 // user: %269
  %267 = copy_value %85 : $Array<UInt8>, loc "test.swift":185:25, scope 175 // user: %269
  // function_ref CBCMAC.__allocating_init(key:)
  %268 = function_ref @$s4test6CBCMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":185:13, scope 175 // user: %269
  %269 = apply %268(%267, %266) : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":185:13, scope 175 // users: %467, %270
  %270 = begin_borrow [lexical] [var_decl] %269 : $CBCMAC, loc "test.swift":185:13, scope 175 // users: %466, %271
  debug_value %270 : $CBCMAC, let, name "cmb1", loc "test.swift":185:6, scope 176 // id: %271
  %272 = metatype $@thick CBCMAC.Type, loc "test.swift":187:13, scope 177 // user: %275
  %273 = copy_value %97 : $Array<UInt8>, loc "test.swift":187:25, scope 177 // user: %275
  // function_ref CBCMAC.__allocating_init(key:)
  %274 = function_ref @$s4test6CBCMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":187:13, scope 177 // user: %275
  %275 = apply %274(%273, %272) : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":187:13, scope 177 // users: %465, %276
  %276 = begin_borrow [lexical] [var_decl] %275 : $CBCMAC, loc "test.swift":187:13, scope 177 // users: %464, %277
  debug_value %276 : $CBCMAC, let, name "cmg1", loc "test.swift":187:6, scope 178 // id: %277
  %278 = metatype $@thick CMAC.Type, loc "test.swift":190:15, scope 179 // user: %281
  %279 = copy_value %85 : $Array<UInt8>, loc "test.swift":190:25, scope 179 // user: %281
  // function_ref CMAC.__allocating_init(key:)
  %280 = function_ref @$s4test4CMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":190:15, scope 179 // user: %281
  %281 = apply %280(%279, %278) : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":190:15, scope 179 // users: %463, %282
  %282 = begin_borrow [lexical] [var_decl] %281 : $CMAC, loc "test.swift":190:15, scope 179 // users: %462, %283
  debug_value %282 : $CMAC, let, name "cmacb1", loc "test.swift":190:6, scope 180 // id: %283
  %284 = metatype $@thick CMAC.Type, loc "test.swift":192:15, scope 181 // user: %287
  %285 = copy_value %97 : $Array<UInt8>, loc "test.swift":192:25, scope 181 // user: %287
  // function_ref CMAC.__allocating_init(key:)
  %286 = function_ref @$s4test4CMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":192:15, scope 181 // user: %287
  %287 = apply %286(%285, %284) : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":192:15, scope 181 // users: %461, %288
  %288 = begin_borrow [lexical] [var_decl] %287 : $CMAC, loc "test.swift":192:15, scope 181 // users: %460, %289
  debug_value %288 : $CMAC, let, name "cmacg1", loc "test.swift":192:6, scope 182 // id: %289
  %290 = metatype $@thick Poly1305.Type, loc "test.swift":195:12, scope 183 // user: %293
  %291 = copy_value %85 : $Array<UInt8>, loc "test.swift":195:26, scope 183 // user: %293
  // function_ref Poly1305.__allocating_init(key:)
  %292 = function_ref @$s4test8Poly1305C3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":195:12, scope 183 // user: %293
  %293 = apply %292(%291, %290) : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":195:12, scope 183 // users: %459, %294
  %294 = begin_borrow [lexical] [var_decl] %293 : $Poly1305, loc "test.swift":195:12, scope 183 // users: %458, %295
  debug_value %294 : $Poly1305, let, name "pb1", loc "test.swift":195:6, scope 184 // id: %295
  %296 = metatype $@thick Poly1305.Type, loc "test.swift":197:12, scope 185 // user: %299
  %297 = copy_value %97 : $Array<UInt8>, loc "test.swift":197:26, scope 185 // user: %299
  // function_ref Poly1305.__allocating_init(key:)
  %298 = function_ref @$s4test8Poly1305C3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":197:12, scope 185 // user: %299
  %299 = apply %298(%297, %296) : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":197:12, scope 185 // users: %457, %300
  %300 = begin_borrow [lexical] [var_decl] %299 : $Poly1305, loc "test.swift":197:12, scope 185 // users: %456, %301
  debug_value %300 : $Poly1305, let, name "pg1", loc "test.swift":197:6, scope 186 // id: %301
  %302 = metatype $@thick Blowfish.Type, loc "test.swift":200:12, scope 187 // user: %308
  %303 = copy_value %85 : $Array<UInt8>, loc "test.swift":200:26, scope 187 // user: %308
  %304 = alloc_stack $any BlockMode, loc "test.swift":200:42, scope 187 // users: %309, %308, %305
  %305 = init_existential_addr %304 : $*any BlockMode, $CBC, loc "test.swift":200:42, scope 187 // user: %306
  store %107 to [trivial] %305 : $*CBC, loc "test.swift":200:42, scope 187 // id: %306
  // function_ref Blowfish.__allocating_init(key:blockMode:padding:)
  %307 = function_ref @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":200:12, scope 187 // user: %308
  %308 = apply %307(%303, %304, %109, %302) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":200:12, scope 187 // users: %455, %310
  dealloc_stack %304 : $*any BlockMode, loc "test.swift":200:69, scope 187 // id: %309
  %310 = begin_borrow [lexical] [var_decl] %308 : $Blowfish, loc "test.swift":200:12, scope 187 // users: %454, %311
  debug_value %310 : $Blowfish, let, name "bb1", loc "test.swift":200:6, scope 188 // id: %311
  %312 = metatype $@thick Blowfish.Type, loc "test.swift":201:12, scope 189 // user: %318
  %313 = copy_value %85 : $Array<UInt8>, loc "test.swift":201:26, scope 189 // user: %318
  %314 = alloc_stack $any BlockMode, loc "test.swift":201:42, scope 189 // users: %319, %318, %315
  %315 = init_existential_addr %314 : $*any BlockMode, $CBC, loc "test.swift":201:42, scope 189 // user: %316
  store %107 to [trivial] %315 : $*CBC, loc "test.swift":201:42, scope 189 // id: %316
  // function_ref Blowfish.__allocating_init(key:blockMode:)
  %317 = function_ref @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":201:12, scope 189 // user: %318
  %318 = apply %317(%313, %314, %312) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":201:12, scope 189 // users: %453, %320
  dealloc_stack %314 : $*any BlockMode, loc "test.swift":201:51, scope 189 // id: %319
  %320 = begin_borrow [lexical] [var_decl] %318 : $Blowfish, loc "test.swift":201:12, scope 189 // users: %452, %321
  debug_value %320 : $Blowfish, let, name "bb2", loc "test.swift":201:6, scope 190 // id: %321
  %322 = metatype $@thick Blowfish.Type, loc "test.swift":202:12, scope 191 // user: %326
  %323 = copy_value %91 : $String, loc "test.swift":202:26, scope 191 // user: %326
  %324 = copy_value %120 : $String, loc "test.swift":202:41, scope 191 // user: %326
  // function_ref Blowfish.__allocating_init(key:iv:)
  %325 = function_ref @$s4test8BlowfishC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":202:12, scope 191 // user: %326
  %326 = apply %325(%323, %324, %322) : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":202:12, scope 191 // users: %451, %327
  %327 = begin_borrow [lexical] [var_decl] %326 : $Blowfish, loc "test.swift":202:12, scope 191 // users: %450, %328
  debug_value %327 : $Blowfish, let, name "bb3", loc "test.swift":202:6, scope 192 // id: %328
  %329 = metatype $@thick Blowfish.Type, loc "test.swift":203:12, scope 193 // user: %333
  %330 = copy_value %91 : $String, loc "test.swift":203:26, scope 193 // user: %333
  %331 = copy_value %120 : $String, loc "test.swift":203:41, scope 193 // user: %333
  // function_ref Blowfish.__allocating_init(key:iv:padding:)
  %332 = function_ref @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":203:12, scope 193 // user: %333
  %333 = apply %332(%330, %331, %109, %329) : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":203:12, scope 193 // users: %449, %334
  %334 = begin_borrow [lexical] [var_decl] %333 : $Blowfish, loc "test.swift":203:12, scope 193 // users: %448, %335
  debug_value %334 : $Blowfish, let, name "bb4", loc "test.swift":203:6, scope 194 // id: %335
  %336 = metatype $@thick Blowfish.Type, loc "test.swift":205:12, scope 195 // user: %342
  %337 = copy_value %97 : $Array<UInt8>, loc "test.swift":205:26, scope 195 // user: %342
  %338 = alloc_stack $any BlockMode, loc "test.swift":205:48, scope 195 // users: %343, %342, %339
  %339 = init_existential_addr %338 : $*any BlockMode, $CBC, loc "test.swift":205:48, scope 195 // user: %340
  store %107 to [trivial] %339 : $*CBC, loc "test.swift":205:48, scope 195 // id: %340
  // function_ref Blowfish.__allocating_init(key:blockMode:padding:)
  %341 = function_ref @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":205:12, scope 195 // user: %342
  %342 = apply %341(%337, %338, %109, %336) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":205:12, scope 195 // users: %447, %344
  dealloc_stack %338 : $*any BlockMode, loc "test.swift":205:75, scope 195 // id: %343
  %344 = begin_borrow [lexical] [var_decl] %342 : $Blowfish, loc "test.swift":205:12, scope 195 // users: %446, %345
  debug_value %344 : $Blowfish, let, name "bg1", loc "test.swift":205:6, scope 196 // id: %345
  %346 = metatype $@thick Blowfish.Type, loc "test.swift":206:12, scope 197 // user: %352
  %347 = copy_value %97 : $Array<UInt8>, loc "test.swift":206:26, scope 197 // user: %352
  %348 = alloc_stack $any BlockMode, loc "test.swift":206:48, scope 197 // users: %353, %352, %349
  %349 = init_existential_addr %348 : $*any BlockMode, $CBC, loc "test.swift":206:48, scope 197 // user: %350
  store %107 to [trivial] %349 : $*CBC, loc "test.swift":206:48, scope 197 // id: %350
  // function_ref Blowfish.__allocating_init(key:blockMode:)
  %351 = function_ref @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":206:12, scope 197 // user: %352
  %352 = apply %351(%347, %348, %346) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":206:12, scope 197 // users: %445, %354
  dealloc_stack %348 : $*any BlockMode, loc "test.swift":206:57, scope 197 // id: %353
  %354 = begin_borrow [lexical] [var_decl] %352 : $Blowfish, loc "test.swift":206:12, scope 197 // users: %444, %355
  debug_value %354 : $Blowfish, let, name "bg2", loc "test.swift":206:6, scope 198 // id: %355
  %356 = metatype $@thick Blowfish.Type, loc "test.swift":207:12, scope 199 // user: %360
  %357 = copy_value %103 : $String, loc "test.swift":207:26, scope 199 // user: %360
  %358 = copy_value %120 : $String, loc "test.swift":207:47, scope 199 // user: %360
  // function_ref Blowfish.__allocating_init(key:iv:)
  %359 = function_ref @$s4test8BlowfishC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":207:12, scope 199 // user: %360
  %360 = apply %359(%357, %358, %356) : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":207:12, scope 199 // users: %443, %361
  %361 = begin_borrow [lexical] [var_decl] %360 : $Blowfish, loc "test.swift":207:12, scope 199 // users: %442, %362
  debug_value %361 : $Blowfish, let, name "bg3", loc "test.swift":207:6, scope 200 // id: %362
  %363 = metatype $@thick Blowfish.Type, loc "test.swift":208:12, scope 201 // user: %367
  %364 = copy_value %103 : $String, loc "test.swift":208:26, scope 201 // user: %367
  %365 = copy_value %120 : $String, loc "test.swift":208:47, scope 201 // user: %367
  // function_ref Blowfish.__allocating_init(key:iv:padding:)
  %366 = function_ref @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":208:12, scope 201 // user: %367
  %367 = apply %366(%364, %365, %109, %363) : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":208:12, scope 201 // users: %441, %368
  %368 = begin_borrow [lexical] [var_decl] %367 : $Blowfish, loc "test.swift":208:12, scope 201 // users: %440, %369
  debug_value %368 : $Blowfish, let, name "bg4", loc "test.swift":208:6, scope 202 // id: %369
  %370 = metatype $@thick Rabbit.Type, loc "test.swift":211:12, scope 203 // user: %373
  %371 = copy_value %85 : $Array<UInt8>, loc "test.swift":211:24, scope 203 // user: %373
  // function_ref Rabbit.__allocating_init(key:)
  %372 = function_ref @$s4test6RabbitC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":211:12, scope 203 // user: %373
  %373 = apply %372(%371, %370) : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":211:12, scope 203 // users: %439, %374
  %374 = begin_borrow [lexical] [var_decl] %373 : $Rabbit, loc "test.swift":211:12, scope 203 // users: %438, %375
  debug_value %374 : $Rabbit, let, name "rb1", loc "test.swift":211:6, scope 204 // id: %375
  %376 = metatype $@thick Rabbit.Type, loc "test.swift":212:12, scope 205 // user: %379
  %377 = copy_value %91 : $String, loc "test.swift":212:24, scope 205 // user: %379
  // function_ref Rabbit.__allocating_init(key:)
  %378 = function_ref @$s4test6RabbitC3keyACSS_tcfC : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":212:12, scope 205 // user: %379
  %379 = apply %378(%377, %376) : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":212:12, scope 205 // users: %437, %380
  %380 = begin_borrow [lexical] [var_decl] %379 : $Rabbit, loc "test.swift":212:12, scope 205 // users: %436, %381
  debug_value %380 : $Rabbit, let, name "rb2", loc "test.swift":212:6, scope 206 // id: %381
  %382 = metatype $@thick Rabbit.Type, loc "test.swift":213:12, scope 207 // user: %387
  %383 = copy_value %85 : $Array<UInt8>, loc "test.swift":213:24, scope 207 // user: %387
  %384 = copy_value %115 : $Array<UInt8>, loc "test.swift":213:33, scope 207 // user: %385
  %385 = enum $Optional<Array<UInt8>>, #Optional.some!enumelt, %384 : $Array<UInt8>, loc "test.swift":213:33, scope 207 // user: %387
  // function_ref Rabbit.__allocating_init(key:iv:)
  %386 = function_ref @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":213:12, scope 207 // user: %387
  %387 = apply %386(%383, %385, %382) : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":213:12, scope 207 // users: %435, %388
  %388 = begin_borrow [lexical] [var_decl] %387 : $Rabbit, loc "test.swift":213:12, scope 207 // users: %434, %389
  debug_value %388 : $Rabbit, let, name "rb3", loc "test.swift":213:6, scope 208 // id: %389
  %390 = metatype $@thick Rabbit.Type, loc "test.swift":214:12, scope 209 // user: %394
  %391 = copy_value %91 : $String, loc "test.swift":214:24, scope 209 // user: %394
  %392 = copy_value %120 : $String, loc "test.swift":214:39, scope 209 // user: %394
  // function_ref Rabbit.__allocating_init(key:iv:)
  %393 = function_ref @$s4test6RabbitC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":214:12, scope 209 // user: %394
  %394 = apply %393(%391, %392, %390) : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":214:12, scope 209 // users: %433, %395
  %395 = begin_borrow [lexical] [var_decl] %394 : $Rabbit, loc "test.swift":214:12, scope 209 // users: %432, %396
  debug_value %395 : $Rabbit, let, name "rb4", loc "test.swift":214:6, scope 210 // id: %396
  %397 = metatype $@thick Rabbit.Type, loc "test.swift":216:12, scope 211 // user: %400
  %398 = copy_value %97 : $Array<UInt8>, loc "test.swift":216:24, scope 211 // user: %400
  // function_ref Rabbit.__allocating_init(key:)
  %399 = function_ref @$s4test6RabbitC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":216:12, scope 211 // user: %400
  %400 = apply %399(%398, %397) : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":216:12, scope 211 // users: %431, %401
  %401 = begin_borrow [lexical] [var_decl] %400 : $Rabbit, loc "test.swift":216:12, scope 211 // users: %430, %402
  debug_value %401 : $Rabbit, let, name "rg1", loc "test.swift":216:6, scope 212 // id: %402
  %403 = metatype $@thick Rabbit.Type, loc "test.swift":217:12, scope 213 // user: %406
  %404 = copy_value %103 : $String, loc "test.swift":217:24, scope 213 // user: %406
  // function_ref Rabbit.__allocating_init(key:)
  %405 = function_ref @$s4test6RabbitC3keyACSS_tcfC : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":217:12, scope 213 // user: %406
  %406 = apply %405(%404, %403) : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":217:12, scope 213 // users: %429, %407
  %407 = begin_borrow [lexical] [var_decl] %406 : $Rabbit, loc "test.swift":217:12, scope 213 // users: %428, %408
  debug_value %407 : $Rabbit, let, name "rg2", loc "test.swift":217:6, scope 214 // id: %408
  %409 = metatype $@thick Rabbit.Type, loc "test.swift":218:12, scope 215 // user: %414
  %410 = copy_value %97 : $Array<UInt8>, loc "test.swift":218:24, scope 215 // user: %414
  %411 = copy_value %115 : $Array<UInt8>, loc "test.swift":218:39, scope 215 // user: %412
  %412 = enum $Optional<Array<UInt8>>, #Optional.some!enumelt, %411 : $Array<UInt8>, loc "test.swift":218:39, scope 215 // user: %414
  // function_ref Rabbit.__allocating_init(key:iv:)
  %413 = function_ref @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":218:12, scope 215 // user: %414
  %414 = apply %413(%410, %412, %409) : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":218:12, scope 215 // users: %427, %415
  %415 = begin_borrow [lexical] [var_decl] %414 : $Rabbit, loc "test.swift":218:12, scope 215 // users: %426, %416
  debug_value %415 : $Rabbit, let, name "rg3", loc "test.swift":218:6, scope 216 // id: %416
  %417 = metatype $@thick Rabbit.Type, loc "test.swift":219:12, scope 217 // user: %421
  %418 = copy_value %103 : $String, loc "test.swift":219:24, scope 217 // user: %421
  %419 = copy_value %120 : $String, loc "test.swift":219:45, scope 217 // user: %421
  // function_ref Rabbit.__allocating_init(key:iv:)
  %420 = function_ref @$s4test6RabbitC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":219:12, scope 217 // user: %421
  %421 = apply %420(%418, %419, %417) : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":219:12, scope 217 // users: %425, %422
  %422 = begin_borrow [lexical] [var_decl] %421 : $Rabbit, loc "test.swift":219:12, scope 217 // users: %424, %423
  debug_value %422 : $Rabbit, let, name "rg4", loc "test.swift":219:6, scope 218 // id: %423
  end_borrow %422 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %424
  destroy_value %421 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %425
  end_borrow %415 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %426
  destroy_value %414 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %427
  end_borrow %407 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %428
  destroy_value %406 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %429
  end_borrow %401 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %430
  destroy_value %400 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %431
  end_borrow %395 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %432
  destroy_value %394 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %433
  end_borrow %388 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %434
  destroy_value %387 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %435
  end_borrow %380 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %436
  destroy_value %379 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %437
  end_borrow %374 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %438
  destroy_value %373 : $Rabbit, loc "test.swift":220:1, scope 217 // id: %439
  end_borrow %368 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %440
  destroy_value %367 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %441
  end_borrow %361 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %442
  destroy_value %360 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %443
  end_borrow %354 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %444
  destroy_value %352 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %445
  end_borrow %344 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %446
  destroy_value %342 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %447
  end_borrow %334 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %448
  destroy_value %333 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %449
  end_borrow %327 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %450
  destroy_value %326 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %451
  end_borrow %320 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %452
  destroy_value %318 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %453
  end_borrow %310 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %454
  destroy_value %308 : $Blowfish, loc "test.swift":220:1, scope 217 // id: %455
  end_borrow %300 : $Poly1305, loc "test.swift":220:1, scope 217 // id: %456
  destroy_value %299 : $Poly1305, loc "test.swift":220:1, scope 217 // id: %457
  end_borrow %294 : $Poly1305, loc "test.swift":220:1, scope 217 // id: %458
  destroy_value %293 : $Poly1305, loc "test.swift":220:1, scope 217 // id: %459
  end_borrow %288 : $CMAC, loc "test.swift":220:1, scope 217 // id: %460
  destroy_value %287 : $CMAC, loc "test.swift":220:1, scope 217 // id: %461
  end_borrow %282 : $CMAC, loc "test.swift":220:1, scope 217 // id: %462
  destroy_value %281 : $CMAC, loc "test.swift":220:1, scope 217 // id: %463
  end_borrow %276 : $CBCMAC, loc "test.swift":220:1, scope 217 // id: %464
  destroy_value %275 : $CBCMAC, loc "test.swift":220:1, scope 217 // id: %465
  end_borrow %270 : $CBCMAC, loc "test.swift":220:1, scope 217 // id: %466
  destroy_value %269 : $CBCMAC, loc "test.swift":220:1, scope 217 // id: %467
  end_borrow %264 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %468
  destroy_value %263 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %469
  end_borrow %257 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %470
  destroy_value %256 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %471
  end_borrow %250 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %472
  destroy_value %249 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %473
  end_borrow %243 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %474
  destroy_value %242 : $ChaCha20, loc "test.swift":220:1, scope 217 // id: %475
  end_borrow %236 : $HMAC, loc "test.swift":220:1, scope 217 // id: %476
  destroy_value %235 : $HMAC, loc "test.swift":220:1, scope 217 // id: %477
  end_borrow %230 : $HMAC, loc "test.swift":220:1, scope 217 // id: %478
  destroy_value %229 : $HMAC, loc "test.swift":220:1, scope 217 // id: %479
  end_borrow %224 : $HMAC, loc "test.swift":220:1, scope 217 // id: %480
  destroy_value %223 : $HMAC, loc "test.swift":220:1, scope 217 // id: %481
  end_borrow %218 : $HMAC, loc "test.swift":220:1, scope 217 // id: %482
  destroy_value %217 : $HMAC, loc "test.swift":220:1, scope 217 // id: %483
  end_borrow %212 : $HMAC, loc "test.swift":220:1, scope 217 // id: %484
  destroy_value %211 : $HMAC, loc "test.swift":220:1, scope 217 // id: %485
  end_borrow %206 : $HMAC, loc "test.swift":220:1, scope 217 // id: %486
  destroy_value %205 : $HMAC, loc "test.swift":220:1, scope 217 // id: %487
  end_borrow %200 : $HMAC, loc "test.swift":220:1, scope 217 // id: %488
  destroy_value %199 : $HMAC, loc "test.swift":220:1, scope 217 // id: %489
  end_borrow %194 : $HMAC, loc "test.swift":220:1, scope 217 // id: %490
  destroy_value %193 : $HMAC, loc "test.swift":220:1, scope 217 // id: %491
  end_borrow %188 : $AES, loc "test.swift":220:1, scope 217 // id: %492
  destroy_value %187 : $AES, loc "test.swift":220:1, scope 217 // id: %493
  end_borrow %181 : $AES, loc "test.swift":220:1, scope 217 // id: %494
  destroy_value %180 : $AES, loc "test.swift":220:1, scope 217 // id: %495
  end_borrow %174 : $AES, loc "test.swift":220:1, scope 217 // id: %496
  destroy_value %172 : $AES, loc "test.swift":220:1, scope 217 // id: %497
  end_borrow %164 : $AES, loc "test.swift":220:1, scope 217 // id: %498
  destroy_value %162 : $AES, loc "test.swift":220:1, scope 217 // id: %499
  end_borrow %154 : $AES, loc "test.swift":220:1, scope 217 // id: %500
  destroy_value %153 : $AES, loc "test.swift":220:1, scope 217 // id: %501
  end_borrow %147 : $AES, loc "test.swift":220:1, scope 217 // id: %502
  destroy_value %146 : $AES, loc "test.swift":220:1, scope 217 // id: %503
  end_borrow %140 : $AES, loc "test.swift":220:1, scope 217 // id: %504
  destroy_value %138 : $AES, loc "test.swift":220:1, scope 217 // id: %505
  end_borrow %130 : $AES, loc "test.swift":220:1, scope 217 // id: %506
  destroy_value %128 : $AES, loc "test.swift":220:1, scope 217 // id: %507
  destroy_value %120 : $String, loc "test.swift":220:1, scope 217 // id: %508
  destroy_value %115 : $Array<UInt8>, loc "test.swift":220:1, scope 217 // id: %509
  destroy_value %103 : $String, loc "test.swift":220:1, scope 217 // id: %510
  destroy_value %97 : $Array<UInt8>, loc "test.swift":220:1, scope 217 // id: %511
  destroy_value %94 : $Array<UInt8>, loc "test.swift":220:1, scope 217 // id: %512
  destroy_value %91 : $String, loc "test.swift":220:1, scope 217 // id: %513
  destroy_value %88 : $Array<UInt8>, loc "test.swift":220:1, scope 217 // id: %514
  destroy_value %85 : $Array<UInt8>, loc "test.swift":220:1, scope 217 // id: %515
  %516 = tuple (), loc "test.swift":220:1, scope 217 // user: %517
  return %516 : $(), loc "test.swift":220:1, scope 217 // id: %517
} // end sil function '$s4test07codeql_A0yyF'


// _allocateUninitializedArray<A>(_:), scope 0
sil [serialized] [always_inline] [_semantics "array.uninitialized_intrinsic"] @$ss27_allocateUninitializedArrayySayxG_BptBwlF : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)

sil_scope 219 {  parent @$ss27_finalizeUninitializedArrayySayxGABnlF : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> }

// _finalizeUninitializedArray<A>(_:), scope 219
sil shared [serialized] [readnone] [_semantics "array.finalize_intrinsic"] [ossa] @$ss27_finalizeUninitializedArrayySayxGABnlF : $@convention(thin) <Element> (@owned Array<Element>) -> @owned Array<Element> {
[%0: escape! v** => %r.v**, escape! v**.c*.v** => %r.v**.c*.v**]
// %0                                             // user: %2
bb0(%0 : @owned $Array<Element>):
  %1 = alloc_stack $Array<Element>, scope 219     // users: %6, %5, %4, %2
  store %0 to [init] %1 : $*Array<Element>, scope 219 // id: %2
  // function_ref Array._endMutation()
  %3 = function_ref @$sSa12_endMutationyyF : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> (), scope 219 // user: %4
  %4 = apply %3<Element>(%1) : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> (), scope 219
  %5 = load [take] %1 : $*Array<Element>, scope 219 // user: %7
  dealloc_stack %1 : $*Array<Element>, scope 219  // id: %6
  return %5 : $Array<Element>, scope 219          // id: %7
} // end sil function '$ss27_finalizeUninitializedArrayySayxGABnlF'

sil_scope 220 {  parent @$sSS7cStringSSSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin String.Type) -> @owned String }

// String.init(cString:), scope 220
sil shared [serialized] [ossa] @$sSS7cStringSSSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin String.Type) -> @owned String {
// %0                                             // users: %168, %2
// %1                                             // user: %159
bb0(%0 : @owned $Array<UInt8>, %1 : $@thin String.Type):
  %2 = begin_borrow %0 : $Array<UInt8>, scope 220 // users: %167, %3
  %3 = struct_extract %2 : $Array<UInt8>, #Array._buffer, scope 220 // users: %163, %7, %4
  %4 = struct_extract %3 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage, scope 220 // user: %5
  %5 = ref_tail_addr %4 : $__ContiguousArrayStorageBase, $UInt8, scope 220 // users: %60, %6
  %6 = address_to_pointer %5 : $*UInt8 to $Builtin.RawPointer, scope 220 // user: %133
  %7 = struct_extract %3 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage, scope 220 // user: %8
  %8 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity, scope 220 // user: %9
  %9 = struct_element_addr %8 : $*_ArrayBody, #_ArrayBody._storage, scope 220 // user: %10
  %10 = struct_element_addr %9 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count, scope 220 // user: %11
  %11 = struct_element_addr %10 : $*Int, #Int._value, scope 220 // user: %12
  %12 = load [trivial] %11 : $*Builtin.Int64, scope 220 // user: %13
  %13 = builtin "assumeNonNegative_Int64"(%12 : $Builtin.Int64) : $Builtin.Int64, scope 220 // user: %14
  %14 = builtin "assumeNonNegative_Int64"(%13 : $Builtin.Int64) : $Builtin.Int64, scope 220 // users: %75, %45, %23
  %15 = integer_literal $Builtin.Int8, 0, scope 220 // user: %63
  %16 = alloc_stack $Optional<Int>, scope 220     // users: %90, %109, %108, %106, %102
  %17 = alloc_stack $Optional<Optional<Int>>, scope 220 // users: %20, %19, %18
  inject_enum_addr %17 : $*Optional<Optional<Int>>, #Optional.none!enumelt, scope 220 // id: %18
  %19 = load [trivial] %17 : $*Optional<Optional<Int>>, scope 220 // users: %105, %21
  dealloc_stack %17 : $*Optional<Optional<Int>>, scope 220 // id: %20
  switch_enum %19 : $Optional<Optional<Int>>, case #Optional.some!enumelt: bb16, case #Optional.none!enumelt: bb1, scope 220 // id: %21

bb1:                                              // Preds: bb0
  %22 = integer_literal $Builtin.Int64, 0, scope 220 // users: %40, %25, %23
  %23 = builtin "cmp_eq_Int64"(%14 : $Builtin.Int64, %22 : $Builtin.Int64) : $Builtin.Int1, scope 220 // user: %24
  cond_br %23, bb14, bb2, scope 220               // id: %24

bb2:                                              // Preds: bb1
  br bb3(%22 : $Builtin.Int64), scope 220         // id: %25

// %26                                            // users: %88, %66, %59, %45, %40
bb3(%26 : $Builtin.Int64):                        // Preds: bb9 bb2
  %27 = string_literal utf8 "Swift/UnsafeBufferPointer.swift", scope 220 // user: %29
  %28 = integer_literal $Builtin.Word, 31, scope 220 // user: %31
  %29 = builtin "ptrtoint_Word"(%27 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %31
  %30 = integer_literal $Builtin.Int8, 2, scope 220 // users: %95, %82, %52, %37, %31
  %31 = struct $StaticString (%29 : $Builtin.Word, %28 : $Builtin.Word, %30 : $Builtin.Int8), scope 220 // users: %99, %86, %56
  %32 = integer_literal $Builtin.Int64, 1399, scope 220 // user: %33
  %33 = struct $UInt (%32 : $Builtin.Int64), scope 220 // user: %99
  %34 = string_literal utf8 "", scope 220         // user: %36
  %35 = integer_literal $Builtin.Word, 0, scope 220 // user: %37
  %36 = builtin "ptrtoint_Word"(%34 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %37
  %37 = struct $StaticString (%36 : $Builtin.Word, %35 : $Builtin.Word, %30 : $Builtin.Int8), scope 220 // users: %99, %86, %56
  %38 = integer_literal $Builtin.Int1, 0, scope 220 // users: %72, %66, %41
  debug_step , scope 220                          // id: %39
  %40 = builtin "cmp_slt_Int64"(%26 : $Builtin.Int64, %22 : $Builtin.Int64) : $Builtin.Int1, scope 220 // user: %41
  %41 = builtin "int_expect_Int1"(%40 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1, scope 220 // user: %42
  cond_br %41, bb13, bb4, scope 220               // id: %42

bb4:                                              // Preds: bb3
  %43 = integer_literal $Builtin.Int64, 1400, scope 220 // user: %44
  %44 = struct $UInt (%43 : $Builtin.Int64), scope 220 // user: %56
  %45 = builtin "cmp_slt_Int64"(%26 : $Builtin.Int64, %14 : $Builtin.Int64) : $Builtin.Int1, scope 220 // user: %47
  %46 = integer_literal $Builtin.Int1, -1, scope 220 // user: %47
  %47 = builtin "int_expect_Int1"(%45 : $Builtin.Int1, %46 : $Builtin.Int1) : $Builtin.Int1, scope 220 // user: %48
  cond_br %47, bb6, bb5, scope 220                // id: %48

bb5:                                              // Preds: bb4
  %49 = string_literal utf8 "Fatal error", scope 220 // user: %51
  %50 = integer_literal $Builtin.Word, 11, scope 220 // user: %52
  %51 = builtin "ptrtoint_Word"(%49 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %52
  %52 = struct $StaticString (%51 : $Builtin.Word, %50 : $Builtin.Word, %30 : $Builtin.Int8), scope 220 // user: %56
  %53 = integer_literal $Builtin.Int32, 1, scope 220 // user: %54
  %54 = struct $UInt32 (%53 : $Builtin.Int32), scope 220 // user: %56
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %55 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220 // user: %56
  %56 = apply %55(%52, %37, %31, %44, %54) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220
  unreachable , scope 220                         // id: %57

bb6:                                              // Preds: bb4
  debug_step , scope 220                          // id: %58
  %59 = builtin "truncOrBitCast_Int64_Word"(%26 : $Builtin.Int64) : $Builtin.Word, scope 220 // user: %60
  %60 = index_addr [stack_protection] %5 : $*UInt8, %59 : $Builtin.Word, scope 220 // user: %61
  %61 = load [trivial] %60 : $*UInt8, scope 220   // user: %62
  %62 = destructure_struct %61 : $UInt8, scope 220 // user: %63
  %63 = builtin "cmp_eq_Int8"(%62 : $Builtin.Int8, %15 : $Builtin.Int8) : $Builtin.Int1, scope 220 // user: %64
  cond_br %63, bb12, bb7, scope 220               // id: %64

bb7:                                              // Preds: bb6
  %65 = integer_literal $Builtin.Int64, 1, scope 220 // user: %66
  %66 = builtin "sadd_with_overflow_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64, %38 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 220 // user: %67
  (%67, %68) = destructure_tuple %66 : $(Builtin.Int64, Builtin.Int1), scope 220 // users: %77, %75, %72
  %69 = integer_literal $Builtin.Int64, 1274, scope 220 // user: %70
  %70 = struct $UInt (%69 : $Builtin.Int64), scope 220 // user: %86
  debug_step , scope 220                          // id: %71
  %72 = builtin "int_expect_Int1"(%68 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1, scope 220 // user: %73
  cond_br %72, bb11, bb8, scope 220               // id: %73

bb8:                                              // Preds: bb7
  debug_step , scope 220                          // id: %74
  %75 = builtin "cmp_eq_Int64"(%67 : $Builtin.Int64, %14 : $Builtin.Int64) : $Builtin.Int1, scope 220 // user: %76
  cond_br %75, bb10, bb9, scope 220               // id: %76

bb9:                                              // Preds: bb8
  br bb3(%67 : $Builtin.Int64), scope 220         // id: %77

bb10:                                             // Preds: bb8
  br bb15, scope 220                              // id: %78

bb11:                                             // Preds: bb7
  %79 = string_literal utf8 "Fatal error", scope 220 // user: %81
  %80 = integer_literal $Builtin.Word, 11, scope 220 // user: %82
  %81 = builtin "ptrtoint_Word"(%79 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %82
  %82 = struct $StaticString (%81 : $Builtin.Word, %80 : $Builtin.Word, %30 : $Builtin.Int8), scope 220 // user: %86
  %83 = integer_literal $Builtin.Int32, 1, scope 220 // user: %84
  %84 = struct $UInt32 (%83 : $Builtin.Int32), scope 220 // user: %86
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %85 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220 // user: %86
  %86 = apply %85(%82, %37, %31, %70, %84) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220
  unreachable , scope 220                         // id: %87

bb12:                                             // Preds: bb6
  %88 = struct $Int (%26 : $Builtin.Int64), scope 220 // user: %89
  %89 = enum $Optional<Int>, #Optional.some!enumelt, %88 : $Int, scope 220 // user: %90
  store %89 to [trivial] %16 : $*Optional<Int>, scope 220 // id: %90
  br bb17, scope 220                              // id: %91

bb13:                                             // Preds: bb3
  %92 = string_literal utf8 "Fatal error", scope 220 // user: %94
  %93 = integer_literal $Builtin.Word, 11, scope 220 // user: %95
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %95
  %95 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %30 : $Builtin.Int8), scope 220 // user: %99
  %96 = integer_literal $Builtin.Int32, 1, scope 220 // user: %97
  %97 = struct $UInt32 (%96 : $Builtin.Int32), scope 220 // user: %99
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %98 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220 // user: %99
  %99 = apply %98(%95, %37, %31, %33, %97) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220
  unreachable , scope 220                         // id: %100

bb14:                                             // Preds: bb1
  br bb15, scope 220                              // id: %101

bb15:                                             // Preds: bb14 bb10
  inject_enum_addr %16 : $*Optional<Int>, #Optional.none!enumelt, scope 220 // id: %102
  br bb17, scope 220                              // id: %103

bb16(%104 : $Optional<Int>):                      // Preds: bb0
  %105 = unchecked_enum_data %19 : $Optional<Optional<Int>>, #Optional.some!enumelt, scope 220 // user: %106
  store %105 to [trivial] %16 : $*Optional<Int>, scope 220 // id: %106
  br bb17, scope 220                              // id: %107

bb17:                                             // Preds: bb16 bb15 bb12
  %108 = load [trivial] %16 : $*Optional<Int>, scope 220 // user: %110
  dealloc_stack %16 : $*Optional<Int>, scope 220  // id: %109
  switch_enum %108 : $Optional<Int>, case #Optional.some!enumelt: bb19, case #Optional.none!enumelt: bb18, scope 220 // id: %110

bb18:                                             // Preds: bb17
  %111 = string_literal utf8 "input of String.init(cString:) must be null-terminated", scope 220 // user: %113
  %112 = integer_literal $Builtin.Word, 54, scope 220 // user: %115
  %113 = builtin "ptrtoint_Word"(%111 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %115
  %114 = integer_literal $Builtin.Int8, 2, scope 220 // users: %126, %119, %115
  %115 = struct $StaticString (%113 : $Builtin.Word, %112 : $Builtin.Word, %114 : $Builtin.Int8), scope 220 // user: %130
  %116 = string_literal utf8 "Swift/CString.swift", scope 220 // user: %118
  %117 = integer_literal $Builtin.Word, 19, scope 220 // user: %119
  %118 = builtin "ptrtoint_Word"(%116 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %119
  %119 = struct $StaticString (%118 : $Builtin.Word, %117 : $Builtin.Word, %114 : $Builtin.Int8), scope 220 // user: %130
  %120 = integer_literal $Builtin.Int64, 65, scope 220 // user: %121
  %121 = struct $UInt (%120 : $Builtin.Int64), scope 220 // user: %130
  debug_step , scope 220                          // id: %122
  %123 = string_literal utf8 "Fatal error", scope 220 // user: %125
  %124 = integer_literal $Builtin.Word, 11, scope 220 // user: %126
  %125 = builtin "ptrtoint_Word"(%123 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %126
  %126 = struct $StaticString (%125 : $Builtin.Word, %124 : $Builtin.Word, %114 : $Builtin.Int8), scope 220 // user: %130
  %127 = integer_literal $Builtin.Int32, 1, scope 220 // user: %128
  %128 = struct $UInt32 (%127 : $Builtin.Int32), scope 220 // user: %130
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %129 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220 // user: %130
  %130 = apply %129(%126, %115, %119, %121, %128) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220
  unreachable , scope 220                         // id: %131

// %132                                           // users: %154, %149
bb19(%132 : $Int):                                // Preds: bb17
  %133 = struct $UnsafePointer<UInt8> (%6 : $Builtin.RawPointer), scope 220 // user: %134
  %134 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %133 : $UnsafePointer<UInt8>, scope 220 // user: %157
  %135 = string_literal utf8 "UnsafeBufferPointer with negative count", scope 220 // user: %137
  %136 = integer_literal $Builtin.Word, 39, scope 220 // user: %139
  %137 = builtin "ptrtoint_Word"(%135 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %139
  %138 = integer_literal $Builtin.Int8, 2, scope 220 // users: %173, %143, %139
  %139 = struct $StaticString (%137 : $Builtin.Word, %136 : $Builtin.Word, %138 : $Builtin.Int8), scope 220 // user: %177
  %140 = string_literal utf8 "Swift/UnsafeBufferPointer.swift", scope 220 // user: %142
  %141 = integer_literal $Builtin.Word, 31, scope 220 // user: %143
  %142 = builtin "ptrtoint_Word"(%140 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %143
  %143 = struct $StaticString (%142 : $Builtin.Word, %141 : $Builtin.Word, %138 : $Builtin.Int8), scope 220 // user: %177
  %144 = integer_literal $Builtin.Int64, 1134, scope 220 // user: %145
  %145 = struct $UInt (%144 : $Builtin.Int64), scope 220 // user: %177
  %146 = integer_literal $Builtin.Int1, 0, scope 220 // user: %151
  debug_step , scope 220                          // id: %147
  %148 = integer_literal $Builtin.Int64, 0, scope 220 // user: %150
  %149 = struct_extract %132 : $Int, #Int._value, scope 220 // user: %150
  %150 = builtin "cmp_slt_Int64"(%149 : $Builtin.Int64, %148 : $Builtin.Int64) : $Builtin.Int1, scope 220 // user: %151
  %151 = builtin "int_expect_Int1"(%150 : $Builtin.Int1, %146 : $Builtin.Int1) : $Builtin.Int1, scope 220 // user: %152
  cond_br %151, bb21, bb20, scope 220             // id: %152

bb20:                                             // Preds: bb19
  debug_step , scope 220                          // id: %153
  %154 = struct_extract %132 : $Int, #Int._value, scope 220 // user: %155
  %155 = builtin "assumeNonNegative_Int64"(%154 : $Builtin.Int64) : $Builtin.Int64, scope 220 // user: %156
  %156 = struct $Int (%155 : $Builtin.Int64), scope 220 // user: %157
  %157 = struct $UnsafeBufferPointer<UInt8> (%134 : $Optional<UnsafePointer<UInt8>>, %156 : $Int), scope 220 // user: %159
  // function_ref static String._fromUTF8Repairing(_:)
  %158 = function_ref @$sSS18_fromUTF8RepairingySS6result_Sb11repairsMadetSRys5UInt8VGFZ : $@convention(method) (UnsafeBufferPointer<UInt8>, @thin String.Type) -> (@owned String, Bool), scope 220 // user: %159
  %159 = apply %158(%157, %1) : $@convention(method) (UnsafeBufferPointer<UInt8>, @thin String.Type) -> (@owned String, Bool), scope 220 // user: %160
  (%160, %161) = destructure_tuple %159 : $(String, Bool), scope 220 // user: %169
  %162 = alloc_stack $_ContiguousArrayBuffer<UInt8>, scope 220 // users: %166, %163
  %163 = store_borrow %3 to %162 : $*_ContiguousArrayBuffer<UInt8>, scope 220 // users: %165, %164
  fix_lifetime %163 : $*_ContiguousArrayBuffer<UInt8>, scope 220 // id: %164
  end_borrow %163 : $*_ContiguousArrayBuffer<UInt8>, scope 220 // id: %165
  dealloc_stack %162 : $*_ContiguousArrayBuffer<UInt8>, scope 220 // id: %166
  end_borrow %2 : $Array<UInt8>, scope 220        // id: %167
  destroy_value %0 : $Array<UInt8>, scope 220     // id: %168
  return %160 : $String, scope 220                // id: %169

bb21:                                             // Preds: bb19
  %170 = string_literal utf8 "Fatal error", scope 220 // user: %172
  %171 = integer_literal $Builtin.Word, 11, scope 220 // user: %173
  %172 = builtin "ptrtoint_Word"(%170 : $Builtin.RawPointer) : $Builtin.Word, scope 220 // user: %173
  %173 = struct $StaticString (%172 : $Builtin.Word, %171 : $Builtin.Word, %138 : $Builtin.Int8), scope 220 // user: %177
  %174 = integer_literal $Builtin.Int32, 1, scope 220 // user: %175
  %175 = struct $UInt32 (%174 : $Builtin.Int32), scope 220 // user: %177
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %176 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220 // user: %177
  %177 = apply %176(%173, %139, %143, %145, %175) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 220
  unreachable , scope 220                         // id: %178
} // end sil function '$sSS7cStringSSSays5UInt8VG_tcfC'

sil_scope 221 { loc "test.swift":224:6 parent @$s4test0A20_r3_simple_violationyyKF : $@convention(thin) () -> @error any Error }
sil_scope 222 { loc "test.swift":225:13 parent 221 }
sil_scope 223 { loc "test.swift":225:7 parent 221 }
sil_scope 224 { loc "test.swift":226:21 parent 223 }
sil_scope 225 { loc "test.swift":226:7 parent 223 }
sil_scope 226 { loc "test.swift":227:19 parent 225 }
sil_scope 227 { loc "test.swift":227:7 parent 225 }
sil_scope 228 { loc "test.swift":228:19 parent 227 }
sil_scope 229 { loc "test.swift":228:7 parent 227 }
sil_scope 230 { loc "test.swift":229:17 parent 229 }
sil_scope 231 { loc "test.swift":229:7 parent 229 }
sil_scope 232 { loc "test.swift":230:17 parent 231 }
sil_scope 233 { loc "test.swift":230:7 parent 231 }
sil_scope 234 { loc "test.swift":231:12 parent 233 }
sil_scope 235 { loc "test.swift":231:7 parent 233 }
sil_scope 236 { loc "test.swift":232:18 parent 235 }
sil_scope 237 { loc "test.swift":232:7 parent 235 }
sil_scope 238 { loc "test.swift":274:19 parent 237 }
sil_scope 239 { loc "test.swift":274:7 parent 237 }

// test_r3_simple_violation(), loc "test.swift":224:6, scope 221
sil hidden [ossa] @$s4test0A20_r3_simple_violationyyKF : $@convention(thin) () -> @error any Error {
bb0:
  debug_value undef : $any Error, var, name "$error", argno 1, loc "test.swift":224:33, scope 221 // id: %0
  // function_ref getConstantArray()
  %1 = function_ref @$s4test16getConstantArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":225:13, scope 222 // user: %2
  %2 = apply %1() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":225:13, scope 222 // users: %3, %29, %38, %59, %64, %79, %91, %96, %101, %118, %127, %132, %142, %193
  debug_value %2 : $Array<UInt8>, let, name "key", loc "test.swift":225:7, scope 223 // id: %3
  // function_ref getRandomArray()
  %4 = function_ref @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":226:21, scope 224 // user: %5
  %5 = apply %4() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":226:21, scope 224 // users: %12, %6
  debug_value %5 : $Array<UInt8>, let, name "randomArray", loc "test.swift":226:7, scope 225 // id: %6
  // function_ref getConstantString()
  %7 = function_ref @$s4test17getConstantStringSSyF : $@convention(thin) () -> @owned String, loc "test.swift":227:19, scope 226 // user: %8
  %8 = apply %7() : $@convention(thin) () -> @owned String, loc "test.swift":227:19, scope 226 // users: %9, %47, %53, %69, %74, %85, %106, %112, %137, %149, %192
  debug_value %8 : $String, let, name "keyString", loc "test.swift":227:7, scope 227 // id: %9
  %10 = metatype $@thin CBC.Type, loc "test.swift":228:19, scope 228 // user: %12
  // function_ref CBC.init(iv:)
  %11 = function_ref @$s4test3CBCV2ivACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin CBC.Type) -> CBC, loc "test.swift":228:19, scope 228 // user: %12
  %12 = apply %11(%5, %10) : $@convention(method) (@owned Array<UInt8>, @thin CBC.Type) -> CBC, loc "test.swift":228:19, scope 228 // users: %121, %41, %32, %13
  debug_value %12 : $CBC, let, name "blockMode", loc "test.swift":228:7, scope 229 // id: %13
  %14 = enum $Padding, #Padding.noPadding!enumelt, loc "test.swift":229:25, scope 230 // users: %129, %123, %115, %56, %34, %15
  debug_value %14 : $Padding, let, name "padding", loc "test.swift":229:7, scope 231 // id: %15
  %16 = enum $SHA2.Variant, #SHA2.Variant.sha256!enumelt, loc "test.swift":230:36, scope 232 // user: %17
  %17 = enum $HMAC.Variant, #HMAC.Variant.sha2!enumelt, %16 : $SHA2.Variant, loc "test.swift":230:30, scope 232 // users: %76, %66, %18
  debug_value %17 : $HMAC.Variant, let, name "variant", loc "test.swift":230:7, scope 233 // id: %18
  %19 = metatype $@thick AES.Type, loc "test.swift":231:12, scope 234 // user: %23
  %20 = integer_literal $Builtin.Int64, 10, loc "test.swift":231:25, scope 234 // user: %21
  %21 = struct $Int (%20 : $Builtin.Int64), loc "test.swift":231:25, scope 234 // user: %23
  // function_ref static Cryptors.randomIV(_:)
  %22 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":231:16, scope 234 // user: %23
  %23 = apply %22<AES>(%21, %19) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":231:16, scope 234 // users: %24, %26, %80, %143, %191
  debug_value %23 : $Array<UInt8>, let, name "iv", loc "test.swift":231:7, scope 235 // id: %24
  // function_ref arrayToString(_:)
  %25 = function_ref @$s4test13arrayToStringySSSays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String, loc "test.swift":232:18, scope 236 // user: %26
  %26 = apply %25(%23) : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String, loc "test.swift":232:18, scope 236 // users: %27, %48, %54, %86, %107, %113, %150, %185, %190
  debug_value %26 : $String, let, name "ivString", loc "test.swift":232:7, scope 237 // id: %27
  %28 = metatype $@thick AES.Type, loc "test.swift":237:11, scope 237 // user: %34
  %29 = copy_value %2 : $Array<UInt8>, loc "test.swift":237:20, scope 237 // user: %34
  %30 = alloc_stack $any BlockMode, loc "test.swift":237:36, scope 237 // users: %35, %34, %31
  %31 = init_existential_addr %30 : $*any BlockMode, $CBC, loc "test.swift":237:36, scope 237 // user: %32
  store %12 to [trivial] %31 : $*CBC, loc "test.swift":237:36, scope 237 // id: %32
  // function_ref AES.__allocating_init(key:blockMode:padding:)
  %33 = function_ref @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":237:11, scope 237 // user: %34
  %34 = apply %33(%29, %30, %14, %28) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":237:11, scope 237 // user: %36
  dealloc_stack %30 : $*any BlockMode, loc "test.swift":237:63, scope 237 // id: %35
  destroy_value %34 : $AES, loc "test.swift":237:63, scope 237 // id: %36
  %37 = metatype $@thick AES.Type, loc "test.swift":238:11, scope 237 // user: %43
  %38 = copy_value %2 : $Array<UInt8>, loc "test.swift":238:20, scope 237 // user: %43
  %39 = alloc_stack $any BlockMode, loc "test.swift":238:36, scope 237 // users: %44, %43, %40
  %40 = init_existential_addr %39 : $*any BlockMode, $CBC, loc "test.swift":238:36, scope 237 // user: %41
  store %12 to [trivial] %40 : $*CBC, loc "test.swift":238:36, scope 237 // id: %41
  // function_ref AES.__allocating_init(key:blockMode:)
  %42 = function_ref @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":238:11, scope 237 // user: %43
  %43 = apply %42(%38, %39, %37) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":238:11, scope 237 // user: %45
  dealloc_stack %39 : $*any BlockMode, loc "test.swift":238:45, scope 237 // id: %44
  destroy_value %43 : $AES, loc "test.swift":238:45, scope 237 // id: %45
  %46 = metatype $@thick AES.Type, loc "test.swift":239:11, scope 237 // user: %50
  %47 = copy_value %8 : $String, loc "test.swift":239:20, scope 237 // user: %50
  %48 = copy_value %26 : $String, loc "test.swift":239:35, scope 237 // user: %50
  // function_ref AES.__allocating_init(key:iv:)
  %49 = function_ref @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":239:11, scope 237 // user: %50
  %50 = apply %49(%47, %48, %46) : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":239:11, scope 237 // user: %51
  destroy_value %50 : $AES, loc "test.swift":239:43, scope 237 // id: %51
  %52 = metatype $@thick AES.Type, loc "test.swift":240:11, scope 237 // user: %56
  %53 = copy_value %8 : $String, loc "test.swift":240:20, scope 237 // user: %56
  %54 = copy_value %26 : $String, loc "test.swift":240:35, scope 237 // user: %56
  // function_ref AES.__allocating_init(key:iv:padding:)
  %55 = function_ref @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":240:11, scope 237 // user: %56
  %56 = apply %55(%53, %54, %14, %52) : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":240:11, scope 237 // user: %57
  destroy_value %56 : $AES, loc "test.swift":240:61, scope 237 // id: %57
  %58 = metatype $@thick HMAC.Type, loc "test.swift":243:7, scope 237 // user: %61
  %59 = copy_value %2 : $Array<UInt8>, loc "test.swift":243:17, scope 237 // user: %61
  // function_ref HMAC.__allocating_init(key:)
  %60 = function_ref @$s4test4HMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":243:7, scope 237 // user: %61
  %61 = apply %60(%59, %58) : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":243:7, scope 237 // user: %62
  destroy_value %61 : $HMAC, loc "test.swift":243:20, scope 237 // id: %62
  %63 = metatype $@thick HMAC.Type, loc "test.swift":244:7, scope 237 // user: %66
  %64 = copy_value %2 : $Array<UInt8>, loc "test.swift":244:17, scope 237 // user: %66
  // function_ref HMAC.__allocating_init(key:variant:)
  %65 = function_ref @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":244:7, scope 237 // user: %66
  %66 = apply %65(%64, %17, %63) : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":244:7, scope 237 // user: %67
  destroy_value %66 : $HMAC, loc "test.swift":244:38, scope 237 // id: %67
  %68 = metatype $@thick HMAC.Type, loc "test.swift":245:11, scope 237 // user: %71
  %69 = copy_value %8 : $String, loc "test.swift":245:21, scope 237 // user: %71
  // function_ref HMAC.__allocating_init(key:)
  %70 = function_ref @$s4test4HMACC3keyACSS_tcfC : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":245:11, scope 237 // user: %71
  %71 = apply %70(%69, %68) : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":245:11, scope 237 // user: %72
  destroy_value %71 : $HMAC, loc "test.swift":245:30, scope 237 // id: %72
  %73 = metatype $@thick HMAC.Type, loc "test.swift":246:11, scope 237 // user: %76
  %74 = copy_value %8 : $String, loc "test.swift":246:21, scope 237 // user: %76
  // function_ref HMAC.__allocating_init(key:variant:)
  %75 = function_ref @$s4test4HMACC3key7variantACSS_AC7VariantOtcfC : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":246:11, scope 237 // user: %76
  %76 = apply %75(%74, %17, %73) : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":246:11, scope 237 // user: %77
  destroy_value %76 : $HMAC, loc "test.swift":246:48, scope 237 // id: %77
  %78 = metatype $@thick ChaCha20.Type, loc "test.swift":249:11, scope 237 // user: %82
  %79 = copy_value %2 : $Array<UInt8>, loc "test.swift":249:25, scope 237 // user: %82
  %80 = copy_value %23 : $Array<UInt8>, loc "test.swift":249:34, scope 237 // user: %82
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %81 = function_ref @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":249:11, scope 237 // user: %82
  %82 = apply %81(%79, %80, %78) : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":249:11, scope 237 // user: %83
  destroy_value %82 : $ChaCha20, loc "test.swift":249:36, scope 237 // id: %83
  %84 = metatype $@thick ChaCha20.Type, loc "test.swift":250:11, scope 237 // user: %88
  %85 = copy_value %8 : $String, loc "test.swift":250:25, scope 237 // user: %88
  %86 = copy_value %26 : $String, loc "test.swift":250:40, scope 237 // user: %88
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %87 = function_ref @$s4test8ChaCha20C3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":250:11, scope 237 // user: %88
  %88 = apply %87(%85, %86, %84) : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":250:11, scope 237 // user: %89
  destroy_value %88 : $ChaCha20, loc "test.swift":250:48, scope 237 // id: %89
  %90 = metatype $@thick CBCMAC.Type, loc "test.swift":253:11, scope 237 // user: %93
  %91 = copy_value %2 : $Array<UInt8>, loc "test.swift":253:23, scope 237 // user: %93
  // function_ref CBCMAC.__allocating_init(key:)
  %92 = function_ref @$s4test6CBCMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":253:11, scope 237 // user: %93
  %93 = apply %92(%91, %90) : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":253:11, scope 237 // user: %94
  destroy_value %93 : $CBCMAC, loc "test.swift":253:26, scope 237 // id: %94
  %95 = metatype $@thick CMAC.Type, loc "test.swift":256:11, scope 237 // user: %98
  %96 = copy_value %2 : $Array<UInt8>, loc "test.swift":256:21, scope 237 // user: %98
  // function_ref CMAC.__allocating_init(key:)
  %97 = function_ref @$s4test4CMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":256:11, scope 237 // user: %98
  %98 = apply %97(%96, %95) : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":256:11, scope 237 // user: %99
  destroy_value %98 : $CMAC, loc "test.swift":256:24, scope 237 // id: %99
  %100 = metatype $@thick Poly1305.Type, loc "test.swift":259:7, scope 237 // user: %103
  %101 = copy_value %2 : $Array<UInt8>, loc "test.swift":259:21, scope 237 // user: %103
  // function_ref Poly1305.__allocating_init(key:)
  %102 = function_ref @$s4test8Poly1305C3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":259:7, scope 237 // user: %103
  %103 = apply %102(%101, %100) : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":259:7, scope 237 // user: %104
  destroy_value %103 : $Poly1305, loc "test.swift":259:24, scope 237 // id: %104
  %105 = metatype $@thick Blowfish.Type, loc "test.swift":262:11, scope 237 // user: %109
  %106 = copy_value %8 : $String, loc "test.swift":262:25, scope 237 // user: %109
  %107 = copy_value %26 : $String, loc "test.swift":262:40, scope 237 // user: %109
  // function_ref Blowfish.__allocating_init(key:iv:)
  %108 = function_ref @$s4test8BlowfishC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":262:11, scope 237 // user: %109
  %109 = apply %108(%106, %107, %105) : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":262:11, scope 237 // user: %110
  destroy_value %109 : $Blowfish, loc "test.swift":262:48, scope 237 // id: %110
  %111 = metatype $@thick Blowfish.Type, loc "test.swift":263:11, scope 237 // user: %115
  %112 = copy_value %8 : $String, loc "test.swift":263:25, scope 237 // user: %115
  %113 = copy_value %26 : $String, loc "test.swift":263:40, scope 237 // user: %115
  // function_ref Blowfish.__allocating_init(key:iv:padding:)
  %114 = function_ref @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":263:11, scope 237 // user: %115
  %115 = apply %114(%112, %113, %14, %111) : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":263:11, scope 237 // user: %116
  destroy_value %115 : $Blowfish, loc "test.swift":263:66, scope 237 // id: %116
  %117 = metatype $@thick Blowfish.Type, loc "test.swift":264:11, scope 237 // user: %123
  %118 = copy_value %2 : $Array<UInt8>, loc "test.swift":264:25, scope 237 // user: %123
  %119 = alloc_stack $any BlockMode, loc "test.swift":264:41, scope 237 // users: %124, %123, %120
  %120 = init_existential_addr %119 : $*any BlockMode, $CBC, loc "test.swift":264:41, scope 237 // user: %121
  store %12 to [trivial] %120 : $*CBC, loc "test.swift":264:41, scope 237 // id: %121
  // function_ref Blowfish.__allocating_init(key:blockMode:padding:)
  %122 = function_ref @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":264:11, scope 237 // user: %123
  %123 = apply %122(%118, %119, %14, %117) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":264:11, scope 237 // user: %125
  dealloc_stack %119 : $*any BlockMode, loc "test.swift":264:68, scope 237 // id: %124
  destroy_value %123 : $Blowfish, loc "test.swift":264:68, scope 237 // id: %125
  %126 = metatype $@thick Blowfish.Type, loc "test.swift":265:11, scope 237 // user: %129
  %127 = copy_value %2 : $Array<UInt8>, loc "test.swift":265:25, scope 237 // user: %129
  // function_ref Blowfish.__allocating_init(key:padding:)
  %128 = function_ref @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":265:11, scope 237 // user: %129
  %129 = apply %128(%127, %14, %126) : $@convention(method) (@owned Array<UInt8>, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":265:11, scope 237 // user: %130
  destroy_value %129 : $Blowfish, loc "test.swift":265:46, scope 237 // id: %130
  %131 = metatype $@thick Rabbit.Type, loc "test.swift":268:11, scope 237 // user: %134
  %132 = copy_value %2 : $Array<UInt8>, loc "test.swift":268:23, scope 237 // user: %134
  // function_ref Rabbit.__allocating_init(key:)
  %133 = function_ref @$s4test6RabbitC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":268:11, scope 237 // user: %134
  %134 = apply %133(%132, %131) : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":268:11, scope 237 // user: %135
  destroy_value %134 : $Rabbit, loc "test.swift":268:26, scope 237 // id: %135
  %136 = metatype $@thick Rabbit.Type, loc "test.swift":269:11, scope 237 // user: %139
  %137 = copy_value %8 : $String, loc "test.swift":269:23, scope 237 // user: %139
  // function_ref Rabbit.__allocating_init(key:)
  %138 = function_ref @$s4test6RabbitC3keyACSS_tcfC : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":269:11, scope 237 // user: %139
  %139 = apply %138(%137, %136) : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":269:11, scope 237 // user: %140
  destroy_value %139 : $Rabbit, loc "test.swift":269:32, scope 237 // id: %140
  %141 = metatype $@thick Rabbit.Type, loc "test.swift":270:11, scope 237 // user: %146
  %142 = copy_value %2 : $Array<UInt8>, loc "test.swift":270:23, scope 237 // user: %146
  %143 = copy_value %23 : $Array<UInt8>, loc "test.swift":270:32, scope 237 // user: %144
  %144 = enum $Optional<Array<UInt8>>, #Optional.some!enumelt, %143 : $Array<UInt8>, loc "test.swift":270:32, scope 237 // user: %146
  // function_ref Rabbit.__allocating_init(key:iv:)
  %145 = function_ref @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":270:11, scope 237 // user: %146
  %146 = apply %145(%142, %144, %141) : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":270:11, scope 237 // user: %147
  destroy_value %146 : $Rabbit, loc "test.swift":270:34, scope 237 // id: %147
  %148 = metatype $@thick Rabbit.Type, loc "test.swift":271:11, scope 237 // user: %152
  %149 = copy_value %8 : $String, loc "test.swift":271:23, scope 237 // user: %152
  %150 = copy_value %26 : $String, loc "test.swift":271:38, scope 237 // user: %152
  // function_ref Rabbit.__allocating_init(key:iv:)
  %151 = function_ref @$s4test6RabbitC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":271:11, scope 237 // user: %152
  %152 = apply %151(%149, %150, %148) : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":271:11, scope 237 // user: %153
  destroy_value %152 : $Rabbit, loc "test.swift":271:46, scope 237 // id: %153
  %154 = metatype $@thin String.Type, loc "test.swift":274:30, scope 237 // user: %179
  %155 = metatype $@thin String.Type, loc "test.swift":274:24, scope 237 // user: %169
  %156 = string_literal utf8 "con", loc "test.swift":274:19, scope 238 // user: %161
  %157 = integer_literal $Builtin.Word, 3, loc "test.swift":274:19, scope 238 // user: %161
  %158 = integer_literal $Builtin.Int1, -1, loc "test.swift":274:19, scope 238 // user: %161
  %159 = metatype $@thin String.Type, loc "test.swift":274:19, scope 238 // user: %161
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %160 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":274:19, scope 238 // user: %161
  %161 = apply %160(%156, %157, %158, %159) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":274:19, scope 238 // users: %171, %169
  %162 = string_literal utf8 "cat", loc "test.swift":274:25, scope 238 // user: %167
  %163 = integer_literal $Builtin.Word, 3, loc "test.swift":274:25, scope 238 // user: %167
  %164 = integer_literal $Builtin.Int1, -1, loc "test.swift":274:25, scope 238 // user: %167
  %165 = metatype $@thin String.Type, loc "test.swift":274:25, scope 238 // user: %167
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %166 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":274:25, scope 238 // user: %167
  %167 = apply %166(%162, %163, %164, %165) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":274:25, scope 238 // users: %170, %169
  // function_ref static String.+ infix(_:_:)
  %168 = function_ref @$sSS1poiyS2S_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":274:24, scope 238 // user: %169
  %169 = apply %168(%161, %167, %155) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":274:24, scope 238 // users: %181, %179
  destroy_value %167 : $String, loc "test.swift":274:25, scope 238 // id: %170
  destroy_value %161 : $String, loc "test.swift":274:25, scope 238 // id: %171
  %172 = string_literal utf8 "me", loc "test.swift":274:31, scope 238 // user: %177
  %173 = integer_literal $Builtin.Word, 2, loc "test.swift":274:31, scope 238 // user: %177
  %174 = integer_literal $Builtin.Int1, -1, loc "test.swift":274:31, scope 238 // user: %177
  %175 = metatype $@thin String.Type, loc "test.swift":274:31, scope 238 // user: %177
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %176 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":274:31, scope 238 // user: %177
  %177 = apply %176(%172, %173, %174, %175) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":274:31, scope 238 // users: %180, %179
  // function_ref static String.+ infix(_:_:)
  %178 = function_ref @$sSS1poiyS2S_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":274:30, scope 238 // user: %179
  %179 = apply %178(%169, %177, %154) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":274:30, scope 238 // users: %182, %184, %189
  destroy_value %177 : $String, loc "test.swift":274:31, scope 238 // id: %180
  destroy_value %169 : $String, loc "test.swift":274:31, scope 238 // id: %181
  debug_value %179 : $String, let, name "concatKey", loc "test.swift":274:7, scope 239 // id: %182
  %183 = metatype $@thick AES.Type, loc "test.swift":275:11, scope 239 // user: %187
  %184 = copy_value %179 : $String, loc "test.swift":275:20, scope 239 // user: %187
  %185 = copy_value %26 : $String, loc "test.swift":275:35, scope 239 // user: %187
  // function_ref AES.__allocating_init(key:iv:)
  %186 = function_ref @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":275:11, scope 239 // user: %187
  %187 = apply %186(%184, %185, %183) : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":275:11, scope 239 // user: %188
  destroy_value %187 : $AES, loc "test.swift":275:43, scope 239 // id: %188
  destroy_value %179 : $String, loc "test.swift":276:1, scope 239 // id: %189
  destroy_value %26 : $String, loc "test.swift":276:1, scope 239 // id: %190
  destroy_value %23 : $Array<UInt8>, loc "test.swift":276:1, scope 239 // id: %191
  destroy_value %8 : $String, loc "test.swift":276:1, scope 239 // id: %192
  destroy_value %2 : $Array<UInt8>, loc "test.swift":276:1, scope 239 // id: %193
  %194 = tuple (), loc "test.swift":276:1, scope 239 // user: %195
  return %194 : $(), loc "test.swift":276:1, scope 239 // id: %195
} // end sil function '$s4test0A20_r3_simple_violationyyKF'


// static String.+ infix(_:_:), scope 0
sil [serialized] [readonly] [_semantics "string.concat"] @$sSS1poiyS2S_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String

sil_scope 240 { loc "test.swift":278:6 parent @$s4test0A23_r3_simple_no_violationyyKF : $@convention(thin) () -> @error any Error }
sil_scope 241 { loc "test.swift":279:13 parent 240 }
sil_scope 242 { loc "test.swift":279:7 parent 240 }
sil_scope 243 { loc "test.swift":280:21 parent 242 }
sil_scope 244 { loc "test.swift":280:7 parent 242 }
sil_scope 245 { loc "test.swift":281:19 parent 244 }
sil_scope 246 { loc "test.swift":281:7 parent 244 }
sil_scope 247 { loc "test.swift":282:19 parent 246 }
sil_scope 248 { loc "test.swift":282:7 parent 246 }
sil_scope 249 { loc "test.swift":283:17 parent 248 }
sil_scope 250 { loc "test.swift":283:7 parent 248 }
sil_scope 251 { loc "test.swift":284:17 parent 250 }
sil_scope 252 { loc "test.swift":284:7 parent 250 }
sil_scope 253 { loc "test.swift":285:12 parent 252 }
sil_scope 254 { loc "test.swift":285:7 parent 252 }
sil_scope 255 { loc "test.swift":286:18 parent 254 }
sil_scope 256 { loc "test.swift":286:7 parent 254 }
sil_scope 257 { loc "test.swift":328:19 parent 256 }
sil_scope 258 { loc "test.swift":328:7 parent 256 }

// test_r3_simple_no_violation(), loc "test.swift":278:6, scope 240
sil hidden [ossa] @$s4test0A23_r3_simple_no_violationyyKF : $@convention(thin) () -> @error any Error {
bb0:
  debug_value undef : $any Error, var, name "$error", argno 1, loc "test.swift":278:36, scope 240 // id: %0
  // function_ref getRandomArray()
  %1 = function_ref @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":279:13, scope 241 // user: %2
  %2 = apply %1() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":279:13, scope 241 // users: %3, %35, %44, %65, %80, %85, %97, %102, %107, %124, %133, %138, %148, %203
  debug_value %2 : $Array<UInt8>, let, name "key", loc "test.swift":279:7, scope 242 // id: %3
  // function_ref getRandomArray()
  %4 = function_ref @$s4test14getRandomArraySays5UInt8VGyF : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":280:21, scope 243 // user: %5
  %5 = apply %4() : $@convention(thin) () -> @owned Array<UInt8>, loc "test.swift":280:21, scope 243 // users: %18, %6
  debug_value %5 : $Array<UInt8>, let, name "randomArray", loc "test.swift":280:7, scope 244 // id: %6
  %7 = metatype $@thick AES.Type, loc "test.swift":281:33, scope 245 // user: %11
  %8 = integer_literal $Builtin.Int64, 10, loc "test.swift":281:46, scope 245 // user: %9
  %9 = struct $Int (%8 : $Builtin.Int64), loc "test.swift":281:46, scope 245 // user: %11
  // function_ref static Cryptors.randomIV(_:)
  %10 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":281:37, scope 245 // user: %11
  %11 = apply %10<AES>(%9, %7) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":281:37, scope 245 // users: %14, %13
  // function_ref arrayToString(_:)
  %12 = function_ref @$s4test13arrayToStringySSSays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String, loc "test.swift":281:19, scope 245 // user: %13
  %13 = apply %12(%11) : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String, loc "test.swift":281:19, scope 245 // users: %15, %53, %59, %70, %75, %91, %112, %118, %143, %155, %180, %202
  destroy_value %11 : $Array<UInt8>, loc "test.swift":281:49, scope 245 // id: %14
  debug_value %13 : $String, let, name "keyString", loc "test.swift":281:7, scope 246 // id: %15
  %16 = metatype $@thin CBC.Type, loc "test.swift":282:19, scope 247 // user: %18
  // function_ref CBC.init(iv:)
  %17 = function_ref @$s4test3CBCV2ivACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thin CBC.Type) -> CBC, loc "test.swift":282:19, scope 247 // user: %18
  %18 = apply %17(%5, %16) : $@convention(method) (@owned Array<UInt8>, @thin CBC.Type) -> CBC, loc "test.swift":282:19, scope 247 // users: %127, %47, %38, %19
  debug_value %18 : $CBC, let, name "blockMode", loc "test.swift":282:7, scope 248 // id: %19
  %20 = enum $Padding, #Padding.noPadding!enumelt, loc "test.swift":283:25, scope 249 // users: %135, %129, %121, %62, %40, %21
  debug_value %20 : $Padding, let, name "padding", loc "test.swift":283:7, scope 250 // id: %21
  %22 = enum $SHA2.Variant, #SHA2.Variant.sha256!enumelt, loc "test.swift":284:36, scope 251 // user: %23
  %23 = enum $HMAC.Variant, #HMAC.Variant.sha2!enumelt, %22 : $SHA2.Variant, loc "test.swift":284:30, scope 251 // users: %77, %67, %24
  debug_value %23 : $HMAC.Variant, let, name "variant", loc "test.swift":284:7, scope 252 // id: %24
  %25 = metatype $@thick AES.Type, loc "test.swift":285:12, scope 253 // user: %29
  %26 = integer_literal $Builtin.Int64, 10, loc "test.swift":285:25, scope 253 // user: %27
  %27 = struct $Int (%26 : $Builtin.Int64), loc "test.swift":285:25, scope 253 // user: %29
  // function_ref static Cryptors.randomIV(_:)
  %28 = function_ref @$s4test8CryptorsPAAE8randomIVySays5UInt8VGSiFZ : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":285:16, scope 253 // user: %29
  %29 = apply %28<AES>(%27, %25) : $@convention(method) <τ_0_0 where τ_0_0 : Cryptors> (Int, @thick τ_0_0.Type) -> @owned Array<UInt8>, loc "test.swift":285:16, scope 253 // users: %30, %32, %86, %149, %201
  debug_value %29 : $Array<UInt8>, let, name "iv", loc "test.swift":285:7, scope 254 // id: %30
  // function_ref arrayToString(_:)
  %31 = function_ref @$s4test13arrayToStringySSSays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String, loc "test.swift":286:18, scope 255 // user: %32
  %32 = apply %31(%29) : $@convention(thin) (@guaranteed Array<UInt8>) -> @owned String, loc "test.swift":286:18, scope 255 // users: %33, %54, %60, %92, %113, %119, %156, %195, %200
  debug_value %32 : $String, let, name "ivString", loc "test.swift":286:7, scope 256 // id: %33
  %34 = metatype $@thick AES.Type, loc "test.swift":291:11, scope 256 // user: %40
  %35 = copy_value %2 : $Array<UInt8>, loc "test.swift":291:20, scope 256 // user: %40
  %36 = alloc_stack $any BlockMode, loc "test.swift":291:36, scope 256 // users: %41, %40, %37
  %37 = init_existential_addr %36 : $*any BlockMode, $CBC, loc "test.swift":291:36, scope 256 // user: %38
  store %18 to [trivial] %37 : $*CBC, loc "test.swift":291:36, scope 256 // id: %38
  // function_ref AES.__allocating_init(key:blockMode:padding:)
  %39 = function_ref @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":291:11, scope 256 // user: %40
  %40 = apply %39(%35, %36, %20, %34) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":291:11, scope 256 // user: %42
  dealloc_stack %36 : $*any BlockMode, loc "test.swift":291:63, scope 256 // id: %41
  destroy_value %40 : $AES, loc "test.swift":291:63, scope 256 // id: %42
  %43 = metatype $@thick AES.Type, loc "test.swift":292:11, scope 256 // user: %49
  %44 = copy_value %2 : $Array<UInt8>, loc "test.swift":292:20, scope 256 // user: %49
  %45 = alloc_stack $any BlockMode, loc "test.swift":292:36, scope 256 // users: %50, %49, %46
  %46 = init_existential_addr %45 : $*any BlockMode, $CBC, loc "test.swift":292:36, scope 256 // user: %47
  store %18 to [trivial] %46 : $*CBC, loc "test.swift":292:36, scope 256 // id: %47
  // function_ref AES.__allocating_init(key:blockMode:)
  %48 = function_ref @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":292:11, scope 256 // user: %49
  %49 = apply %48(%44, %45, %43) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, @thick AES.Type) -> @owned AES, loc "test.swift":292:11, scope 256 // user: %51
  dealloc_stack %45 : $*any BlockMode, loc "test.swift":292:45, scope 256 // id: %50
  destroy_value %49 : $AES, loc "test.swift":292:45, scope 256 // id: %51
  %52 = metatype $@thick AES.Type, loc "test.swift":293:11, scope 256 // user: %56
  %53 = copy_value %13 : $String, loc "test.swift":293:20, scope 256 // user: %56
  %54 = copy_value %32 : $String, loc "test.swift":293:35, scope 256 // user: %56
  // function_ref AES.__allocating_init(key:iv:)
  %55 = function_ref @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":293:11, scope 256 // user: %56
  %56 = apply %55(%53, %54, %52) : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":293:11, scope 256 // user: %57
  destroy_value %56 : $AES, loc "test.swift":293:43, scope 256 // id: %57
  %58 = metatype $@thick AES.Type, loc "test.swift":294:11, scope 256 // user: %62
  %59 = copy_value %13 : $String, loc "test.swift":294:20, scope 256 // user: %62
  %60 = copy_value %32 : $String, loc "test.swift":294:35, scope 256 // user: %62
  // function_ref AES.__allocating_init(key:iv:padding:)
  %61 = function_ref @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":294:11, scope 256 // user: %62
  %62 = apply %61(%59, %60, %20, %58) : $@convention(method) (@owned String, @owned String, Padding, @thick AES.Type) -> @owned AES, loc "test.swift":294:11, scope 256 // user: %63
  destroy_value %62 : $AES, loc "test.swift":294:61, scope 256 // id: %63
  %64 = metatype $@thick HMAC.Type, loc "test.swift":297:7, scope 256 // user: %67
  %65 = copy_value %2 : $Array<UInt8>, loc "test.swift":297:17, scope 256 // user: %67
  // function_ref HMAC.__allocating_init(key:variant:)
  %66 = function_ref @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":297:7, scope 256 // user: %67
  %67 = apply %66(%65, %23, %64) : $@convention(method) (@owned Array<UInt8>, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":297:7, scope 256 // user: %68
  destroy_value %67 : $HMAC, loc "test.swift":297:38, scope 256 // id: %68
  %69 = metatype $@thick HMAC.Type, loc "test.swift":298:11, scope 256 // user: %72
  %70 = copy_value %13 : $String, loc "test.swift":298:21, scope 256 // user: %72
  // function_ref HMAC.__allocating_init(key:)
  %71 = function_ref @$s4test4HMACC3keyACSS_tcfC : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":298:11, scope 256 // user: %72
  %72 = apply %71(%70, %69) : $@convention(method) (@owned String, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":298:11, scope 256 // user: %73
  destroy_value %72 : $HMAC, loc "test.swift":298:30, scope 256 // id: %73
  %74 = metatype $@thick HMAC.Type, loc "test.swift":299:11, scope 256 // user: %77
  %75 = copy_value %13 : $String, loc "test.swift":299:21, scope 256 // user: %77
  // function_ref HMAC.__allocating_init(key:variant:)
  %76 = function_ref @$s4test4HMACC3key7variantACSS_AC7VariantOtcfC : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":299:11, scope 256 // user: %77
  %77 = apply %76(%75, %23, %74) : $@convention(method) (@owned String, HMAC.Variant, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":299:11, scope 256 // user: %78
  destroy_value %77 : $HMAC, loc "test.swift":299:48, scope 256 // id: %78
  %79 = metatype $@thick HMAC.Type, loc "test.swift":300:7, scope 256 // user: %82
  %80 = copy_value %2 : $Array<UInt8>, loc "test.swift":300:17, scope 256 // user: %82
  // function_ref HMAC.__allocating_init(key:)
  %81 = function_ref @$s4test4HMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":300:7, scope 256 // user: %82
  %82 = apply %81(%80, %79) : $@convention(method) (@owned Array<UInt8>, @thick HMAC.Type) -> @owned HMAC, loc "test.swift":300:7, scope 256 // user: %83
  destroy_value %82 : $HMAC, loc "test.swift":300:20, scope 256 // id: %83
  %84 = metatype $@thick ChaCha20.Type, loc "test.swift":303:11, scope 256 // user: %88
  %85 = copy_value %2 : $Array<UInt8>, loc "test.swift":303:25, scope 256 // user: %88
  %86 = copy_value %29 : $Array<UInt8>, loc "test.swift":303:34, scope 256 // user: %88
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %87 = function_ref @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":303:11, scope 256 // user: %88
  %88 = apply %87(%85, %86, %84) : $@convention(method) (@owned Array<UInt8>, @owned Array<UInt8>, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":303:11, scope 256 // user: %89
  destroy_value %88 : $ChaCha20, loc "test.swift":303:36, scope 256 // id: %89
  %90 = metatype $@thick ChaCha20.Type, loc "test.swift":304:11, scope 256 // user: %94
  %91 = copy_value %13 : $String, loc "test.swift":304:25, scope 256 // user: %94
  %92 = copy_value %32 : $String, loc "test.swift":304:40, scope 256 // user: %94
  // function_ref ChaCha20.__allocating_init(key:iv:)
  %93 = function_ref @$s4test8ChaCha20C3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":304:11, scope 256 // user: %94
  %94 = apply %93(%91, %92, %90) : $@convention(method) (@owned String, @owned String, @thick ChaCha20.Type) -> @owned ChaCha20, loc "test.swift":304:11, scope 256 // user: %95
  destroy_value %94 : $ChaCha20, loc "test.swift":304:48, scope 256 // id: %95
  %96 = metatype $@thick CBCMAC.Type, loc "test.swift":307:11, scope 256 // user: %99
  %97 = copy_value %2 : $Array<UInt8>, loc "test.swift":307:23, scope 256 // user: %99
  // function_ref CBCMAC.__allocating_init(key:)
  %98 = function_ref @$s4test6CBCMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":307:11, scope 256 // user: %99
  %99 = apply %98(%97, %96) : $@convention(method) (@owned Array<UInt8>, @thick CBCMAC.Type) -> @owned CBCMAC, loc "test.swift":307:11, scope 256 // user: %100
  destroy_value %99 : $CBCMAC, loc "test.swift":307:26, scope 256 // id: %100
  %101 = metatype $@thick CMAC.Type, loc "test.swift":310:11, scope 256 // user: %104
  %102 = copy_value %2 : $Array<UInt8>, loc "test.swift":310:21, scope 256 // user: %104
  // function_ref CMAC.__allocating_init(key:)
  %103 = function_ref @$s4test4CMACC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":310:11, scope 256 // user: %104
  %104 = apply %103(%102, %101) : $@convention(method) (@owned Array<UInt8>, @thick CMAC.Type) -> @owned CMAC, loc "test.swift":310:11, scope 256 // user: %105
  destroy_value %104 : $CMAC, loc "test.swift":310:24, scope 256 // id: %105
  %106 = metatype $@thick Poly1305.Type, loc "test.swift":313:7, scope 256 // user: %109
  %107 = copy_value %2 : $Array<UInt8>, loc "test.swift":313:21, scope 256 // user: %109
  // function_ref Poly1305.__allocating_init(key:)
  %108 = function_ref @$s4test8Poly1305C3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":313:7, scope 256 // user: %109
  %109 = apply %108(%107, %106) : $@convention(method) (@owned Array<UInt8>, @thick Poly1305.Type) -> @owned Poly1305, loc "test.swift":313:7, scope 256 // user: %110
  destroy_value %109 : $Poly1305, loc "test.swift":313:24, scope 256 // id: %110
  %111 = metatype $@thick Blowfish.Type, loc "test.swift":316:11, scope 256 // user: %115
  %112 = copy_value %13 : $String, loc "test.swift":316:25, scope 256 // user: %115
  %113 = copy_value %32 : $String, loc "test.swift":316:40, scope 256 // user: %115
  // function_ref Blowfish.__allocating_init(key:iv:)
  %114 = function_ref @$s4test8BlowfishC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":316:11, scope 256 // user: %115
  %115 = apply %114(%112, %113, %111) : $@convention(method) (@owned String, @owned String, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":316:11, scope 256 // user: %116
  destroy_value %115 : $Blowfish, loc "test.swift":316:48, scope 256 // id: %116
  %117 = metatype $@thick Blowfish.Type, loc "test.swift":317:11, scope 256 // user: %121
  %118 = copy_value %13 : $String, loc "test.swift":317:25, scope 256 // user: %121
  %119 = copy_value %32 : $String, loc "test.swift":317:40, scope 256 // user: %121
  // function_ref Blowfish.__allocating_init(key:iv:padding:)
  %120 = function_ref @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":317:11, scope 256 // user: %121
  %121 = apply %120(%118, %119, %20, %117) : $@convention(method) (@owned String, @owned String, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":317:11, scope 256 // user: %122
  destroy_value %121 : $Blowfish, loc "test.swift":317:66, scope 256 // id: %122
  %123 = metatype $@thick Blowfish.Type, loc "test.swift":318:11, scope 256 // user: %129
  %124 = copy_value %2 : $Array<UInt8>, loc "test.swift":318:25, scope 256 // user: %129
  %125 = alloc_stack $any BlockMode, loc "test.swift":318:41, scope 256 // users: %130, %129, %126
  %126 = init_existential_addr %125 : $*any BlockMode, $CBC, loc "test.swift":318:41, scope 256 // user: %127
  store %18 to [trivial] %126 : $*CBC, loc "test.swift":318:41, scope 256 // id: %127
  // function_ref Blowfish.__allocating_init(key:blockMode:padding:)
  %128 = function_ref @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":318:11, scope 256 // user: %129
  %129 = apply %128(%124, %125, %20, %123) : $@convention(method) (@owned Array<UInt8>, @in any BlockMode, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":318:11, scope 256 // user: %131
  dealloc_stack %125 : $*any BlockMode, loc "test.swift":318:68, scope 256 // id: %130
  destroy_value %129 : $Blowfish, loc "test.swift":318:68, scope 256 // id: %131
  %132 = metatype $@thick Blowfish.Type, loc "test.swift":319:11, scope 256 // user: %135
  %133 = copy_value %2 : $Array<UInt8>, loc "test.swift":319:25, scope 256 // user: %135
  // function_ref Blowfish.__allocating_init(key:padding:)
  %134 = function_ref @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfC : $@convention(method) (@owned Array<UInt8>, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":319:11, scope 256 // user: %135
  %135 = apply %134(%133, %20, %132) : $@convention(method) (@owned Array<UInt8>, Padding, @thick Blowfish.Type) -> @owned Blowfish, loc "test.swift":319:11, scope 256 // user: %136
  destroy_value %135 : $Blowfish, loc "test.swift":319:46, scope 256 // id: %136
  %137 = metatype $@thick Rabbit.Type, loc "test.swift":322:11, scope 256 // user: %140
  %138 = copy_value %2 : $Array<UInt8>, loc "test.swift":322:23, scope 256 // user: %140
  // function_ref Rabbit.__allocating_init(key:)
  %139 = function_ref @$s4test6RabbitC3keyACSays5UInt8VG_tcfC : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":322:11, scope 256 // user: %140
  %140 = apply %139(%138, %137) : $@convention(method) (@owned Array<UInt8>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":322:11, scope 256 // user: %141
  destroy_value %140 : $Rabbit, loc "test.swift":322:26, scope 256 // id: %141
  %142 = metatype $@thick Rabbit.Type, loc "test.swift":323:11, scope 256 // user: %145
  %143 = copy_value %13 : $String, loc "test.swift":323:23, scope 256 // user: %145
  // function_ref Rabbit.__allocating_init(key:)
  %144 = function_ref @$s4test6RabbitC3keyACSS_tcfC : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":323:11, scope 256 // user: %145
  %145 = apply %144(%143, %142) : $@convention(method) (@owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":323:11, scope 256 // user: %146
  destroy_value %145 : $Rabbit, loc "test.swift":323:32, scope 256 // id: %146
  %147 = metatype $@thick Rabbit.Type, loc "test.swift":324:11, scope 256 // user: %152
  %148 = copy_value %2 : $Array<UInt8>, loc "test.swift":324:23, scope 256 // user: %152
  %149 = copy_value %29 : $Array<UInt8>, loc "test.swift":324:32, scope 256 // user: %150
  %150 = enum $Optional<Array<UInt8>>, #Optional.some!enumelt, %149 : $Array<UInt8>, loc "test.swift":324:32, scope 256 // user: %152
  // function_ref Rabbit.__allocating_init(key:iv:)
  %151 = function_ref @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":324:11, scope 256 // user: %152
  %152 = apply %151(%148, %150, %147) : $@convention(method) (@owned Array<UInt8>, @owned Optional<Array<UInt8>>, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":324:11, scope 256 // user: %153
  destroy_value %152 : $Rabbit, loc "test.swift":324:34, scope 256 // id: %153
  %154 = metatype $@thick Rabbit.Type, loc "test.swift":325:11, scope 256 // user: %158
  %155 = copy_value %13 : $String, loc "test.swift":325:23, scope 256 // user: %158
  %156 = copy_value %32 : $String, loc "test.swift":325:38, scope 256 // user: %158
  // function_ref Rabbit.__allocating_init(key:iv:)
  %157 = function_ref @$s4test6RabbitC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":325:11, scope 256 // user: %158
  %158 = apply %157(%155, %156, %154) : $@convention(method) (@owned String, @owned String, @thick Rabbit.Type) -> @owned Rabbit, loc "test.swift":325:11, scope 256 // user: %159
  destroy_value %158 : $Rabbit, loc "test.swift":325:46, scope 256 // id: %159
  %160 = metatype $@thin String.Type, loc "test.swift":328:40, scope 256 // user: %189
  %161 = metatype $@thin String.Type, loc "test.swift":328:30, scope 256 // user: %180
  %162 = metatype $@thin String.Type, loc "test.swift":328:24, scope 256 // user: %176
  %163 = string_literal utf8 "con", loc "test.swift":328:19, scope 257 // user: %168
  %164 = integer_literal $Builtin.Word, 3, loc "test.swift":328:19, scope 257 // user: %168
  %165 = integer_literal $Builtin.Int1, -1, loc "test.swift":328:19, scope 257 // user: %168
  %166 = metatype $@thin String.Type, loc "test.swift":328:19, scope 257 // user: %168
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %167 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":328:19, scope 257 // user: %168
  %168 = apply %167(%163, %164, %165, %166) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":328:19, scope 257 // users: %178, %176
  %169 = string_literal utf8 "cat", loc "test.swift":328:25, scope 257 // user: %174
  %170 = integer_literal $Builtin.Word, 3, loc "test.swift":328:25, scope 257 // user: %174
  %171 = integer_literal $Builtin.Int1, -1, loc "test.swift":328:25, scope 257 // user: %174
  %172 = metatype $@thin String.Type, loc "test.swift":328:25, scope 257 // user: %174
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %173 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":328:25, scope 257 // user: %174
  %174 = apply %173(%169, %170, %171, %172) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":328:25, scope 257 // users: %177, %176
  // function_ref static String.+ infix(_:_:)
  %175 = function_ref @$sSS1poiyS2S_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":328:24, scope 257 // user: %176
  %176 = apply %175(%168, %174, %162) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":328:24, scope 257 // users: %181, %180
  destroy_value %174 : $String, loc "test.swift":328:25, scope 257 // id: %177
  destroy_value %168 : $String, loc "test.swift":328:25, scope 257 // id: %178
  // function_ref static String.+ infix(_:_:)
  %179 = function_ref @$sSS1poiyS2S_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":328:30, scope 257 // user: %180
  %180 = apply %179(%176, %13, %161) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":328:30, scope 257 // users: %191, %189
  destroy_value %176 : $String, loc "test.swift":328:31, scope 257 // id: %181
  %182 = string_literal utf8 "me", loc "test.swift":328:41, scope 257 // user: %187
  %183 = integer_literal $Builtin.Word, 2, loc "test.swift":328:41, scope 257 // user: %187
  %184 = integer_literal $Builtin.Int1, -1, loc "test.swift":328:41, scope 257 // user: %187
  %185 = metatype $@thin String.Type, loc "test.swift":328:41, scope 257 // user: %187
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %186 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":328:41, scope 257 // user: %187
  %187 = apply %186(%182, %183, %184, %185) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, loc "test.swift":328:41, scope 257 // users: %190, %189
  // function_ref static String.+ infix(_:_:)
  %188 = function_ref @$sSS1poiyS2S_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":328:40, scope 257 // user: %189
  %189 = apply %188(%180, %187, %160) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> @owned String, loc "test.swift":328:40, scope 257 // users: %192, %194, %199
  destroy_value %187 : $String, loc "test.swift":328:41, scope 257 // id: %190
  destroy_value %180 : $String, loc "test.swift":328:41, scope 257 // id: %191
  debug_value %189 : $String, let, name "concatKey", loc "test.swift":328:7, scope 258 // id: %192
  %193 = metatype $@thick AES.Type, loc "test.swift":329:11, scope 258 // user: %197
  %194 = copy_value %189 : $String, loc "test.swift":329:20, scope 258 // user: %197
  %195 = copy_value %32 : $String, loc "test.swift":329:35, scope 258 // user: %197
  // function_ref AES.__allocating_init(key:iv:)
  %196 = function_ref @$s4test3AESC3key2ivACSS_SStcfC : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":329:11, scope 258 // user: %197
  %197 = apply %196(%194, %195, %193) : $@convention(method) (@owned String, @owned String, @thick AES.Type) -> @owned AES, loc "test.swift":329:11, scope 258 // user: %198
  destroy_value %197 : $AES, loc "test.swift":329:43, scope 258 // id: %198
  destroy_value %189 : $String, loc "test.swift":330:1, scope 258 // id: %199
  destroy_value %32 : $String, loc "test.swift":330:1, scope 258 // id: %200
  destroy_value %29 : $Array<UInt8>, loc "test.swift":330:1, scope 258 // id: %201
  destroy_value %13 : $String, loc "test.swift":330:1, scope 258 // id: %202
  destroy_value %2 : $Array<UInt8>, loc "test.swift":330:1, scope 258 // id: %203
  %204 = tuple (), loc "test.swift":330:1, scope 258 // user: %205
  return %204 : $(), loc "test.swift":330:1, scope 258 // id: %205
} // end sil function '$s4test0A23_r3_simple_no_violationyyKF'


// _assertionFailure(_:_:file:line:flags:), loc * "<compiler-generated>":0:0, scope 0
sil [noinline] [_semantics "programtermination_point"] @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

sil_scope 259 { loc * "<compiler-generated>":0:0 parent @$sSiSLsSL1loiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool }

// protocol witness for static Comparable.< infix(_:_:) in conformance Int, loc * "<compiler-generated>":0:0, scope 259
sil shared [transparent] [serialized] [thunk] [ossa] @$sSiSLsSL1loiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value, scope 259 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int64, scope 259 // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value, scope 259 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int64, scope 259 // user: %7
  %7 = builtin "cmp_slt_Int64"(%4 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int1, scope 259 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1), scope 259 // user: %9
  return %8 : $Bool, scope 259                    // id: %9
} // end sil function '$sSiSLsSL1loiySbx_xtFZTW'

sil_scope 260 { loc * "<compiler-generated>":0:0 parent @$sSiSLsSL2leoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool }

// protocol witness for static Comparable.<= infix(_:_:) in conformance Int, loc * "<compiler-generated>":0:0, scope 260
sil shared [transparent] [serialized] [thunk] [ossa] @$sSiSLsSL2leoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value, scope 260 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int64, scope 260 // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value, scope 260 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int64, scope 260 // user: %7
  %7 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 260 // user: %9
  %8 = integer_literal $Builtin.Int1, -1, scope 260 // user: %9
  %9 = builtin "xor_Int1"(%7 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1, scope 260 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1), scope 260 // user: %11
  return %10 : $Bool, scope 260                   // id: %11
} // end sil function '$sSiSLsSL2leoiySbx_xtFZTW'

sil_scope 261 { loc * "<compiler-generated>":0:0 parent @$sSiSLsSL2geoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool }

// protocol witness for static Comparable.>= infix(_:_:) in conformance Int, loc * "<compiler-generated>":0:0, scope 261
sil shared [transparent] [serialized] [thunk] [ossa] @$sSiSLsSL2geoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value, scope 261 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int64, scope 261 // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value, scope 261 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int64, scope 261 // user: %7
  %7 = builtin "cmp_slt_Int64"(%4 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int1, scope 261 // user: %9
  %8 = integer_literal $Builtin.Int1, -1, scope 261 // user: %9
  %9 = builtin "xor_Int1"(%7 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1, scope 261 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1), scope 261 // user: %11
  return %10 : $Bool, scope 261                   // id: %11
} // end sil function '$sSiSLsSL2geoiySbx_xtFZTW'

sil_scope 262 { loc * "<compiler-generated>":0:0 parent @$sSiSLsSL1goiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool }

// protocol witness for static Comparable.> infix(_:_:) in conformance Int, loc * "<compiler-generated>":0:0, scope 262
sil shared [transparent] [serialized] [thunk] [ossa] @$sSiSLsSL1goiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed Int, @in_guaranteed Int, @thick Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*Int, %2 : $@thick Int.Type):
  %3 = struct_element_addr %0 : $*Int, #Int._value, scope 262 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int64, scope 262 // user: %7
  %5 = struct_element_addr %1 : $*Int, #Int._value, scope 262 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int64, scope 262 // user: %7
  %7 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 262 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1), scope 262 // user: %9
  return %8 : $Bool, scope 262                    // id: %9
} // end sil function '$sSiSLsSL1goiySbx_xtFZTW'

sil_scope 263 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSLsSL1loiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool }

// protocol witness for static Comparable.< infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 263
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSLsSL1loiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 263 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 263 // user: %7
  %5 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 263 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int8, scope 263 // user: %7
  %7 = builtin "cmp_ult_Int8"(%4 : $Builtin.Int8, %6 : $Builtin.Int8) : $Builtin.Int1, scope 263 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1), scope 263 // user: %9
  return %8 : $Bool, scope 263                    // id: %9
} // end sil function '$ss5UInt8VSLsSL1loiySbx_xtFZTW'

sil_scope 264 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSLsSL2leoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool }

// protocol witness for static Comparable.<= infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 264
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSLsSL2leoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 264 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 264 // user: %7
  %5 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 264 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int8, scope 264 // user: %7
  %7 = builtin "cmp_ult_Int8"(%6 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int1, scope 264 // user: %9
  %8 = integer_literal $Builtin.Int1, -1, scope 264 // user: %9
  %9 = builtin "xor_Int1"(%7 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1, scope 264 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1), scope 264 // user: %11
  return %10 : $Bool, scope 264                   // id: %11
} // end sil function '$ss5UInt8VSLsSL2leoiySbx_xtFZTW'

sil_scope 265 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSLsSL2geoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool }

// protocol witness for static Comparable.>= infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 265
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSLsSL2geoiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 265 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 265 // user: %7
  %5 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 265 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int8, scope 265 // user: %7
  %7 = builtin "cmp_ult_Int8"(%4 : $Builtin.Int8, %6 : $Builtin.Int8) : $Builtin.Int1, scope 265 // user: %9
  %8 = integer_literal $Builtin.Int1, -1, scope 265 // user: %9
  %9 = builtin "xor_Int1"(%7 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1, scope 265 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1), scope 265 // user: %11
  return %10 : $Bool, scope 265                   // id: %11
} // end sil function '$ss5UInt8VSLsSL2geoiySbx_xtFZTW'

sil_scope 266 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSLsSL1goiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool }

// protocol witness for static Comparable.> infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 266
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSLsSL1goiySbx_xtFZTW : $@convention(witness_method: Comparable) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 266 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 266 // user: %7
  %5 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 266 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int8, scope 266 // user: %7
  %7 = builtin "cmp_ult_Int8"(%6 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int1, scope 266 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1), scope 266 // user: %9
  return %8 : $Bool, scope 266                    // id: %9
} // end sil function '$ss5UInt8VSLsSL1goiySbx_xtFZTW'

sil_scope 267 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz8isSignedSbvgZTW : $@convention(witness_method: BinaryInteger) (@thick UInt8.Type) -> Bool }

// protocol witness for static BinaryInteger.isSigned.getter in conformance UInt8, loc * "<compiler-generated>":0:0, scope 267
sil shared [transparent] [serialized] [thunk] [always_inline] [ossa] @$ss5UInt8VSzsSz8isSignedSbvgZTW : $@convention(witness_method: BinaryInteger) (@thick UInt8.Type) -> Bool {
bb0(%0 : $@thick UInt8.Type):
  %1 = integer_literal $Builtin.Int1, 0, scope 267 // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1), scope 267 // user: %3
  return %2 : $Bool, scope 267                    // id: %3
} // end sil function '$ss5UInt8VSzsSz8isSignedSbvgZTW'

sil_scope 268 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz7exactlyxSgqd___tcSBRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in τ_0_0, @thick UInt8.Type) -> @out Optional<UInt8> }

// protocol witness for BinaryInteger.init<A>(exactly:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 268
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz7exactlyxSgqd___tcSBRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in τ_0_0, @thick UInt8.Type) -> @out Optional<UInt8> {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Optional<UInt8>, %1 : $*τ_0_0, %2 : $@thick UInt8.Type):
  // function_ref FixedWidthInteger.init<A>(exactly:)
  %3 = function_ref @$ss17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufC : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in τ_1_0, @thick τ_0_0.Type) -> @out Optional<τ_0_0>, scope 268 // user: %4
  %4 = apply %3<UInt8, τ_0_0>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in τ_1_0, @thick τ_0_0.Type) -> @out Optional<τ_0_0>, scope 268
  %5 = tuple (), scope 268                        // user: %6
  return %5 : $(), scope 268                      // id: %6
} // end sil function '$ss5UInt8VSzsSz7exactlyxSgqd___tcSBRd__lufCTW'

sil_scope 269 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSzyxqd__cSBRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for BinaryInteger.init<A>(_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 269
sil shared [transparent] [serialized] [thunk] [always_inline] [ossa] @$ss5UInt8VSzsSzyxqd__cSBRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %68
// %1                                             // users: %65, %5
// %2                                             // users: %43, %5
bb0(%0 : $*UInt8, %1 : $*τ_0_0, %2 : $@thick UInt8.Type):
  %3 = alloc_stack $Optional<UInt8>, scope 269    // users: %69, %66, %8, %6, %5
  // function_ref static FixedWidthInteger._convert<A>(from:)
  %4 = function_ref @$ss17FixedWidthIntegerPsE8_convert4fromxSg5value_Sb5exacttqd___tSBRd__lFZ : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in_guaranteed τ_1_0, @thick τ_0_0.Type) -> (@out Optional<τ_0_0>, Bool), scope 269 // user: %5
  %5 = apply %4<UInt8, τ_0_0>(%3, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in_guaranteed τ_1_0, @thick τ_0_0.Type) -> (@out Optional<τ_0_0>, Bool), scope 269
  %6 = load [trivial] %3 : $*Optional<UInt8>, scope 269 // user: %7
  switch_enum %6 : $Optional<UInt8>, case #Optional.some!enumelt: bb2, case #Optional.none!enumelt: bb1, scope 269 // id: %7

bb1:                                              // Preds: bb0
  dealloc_stack %3 : $*Optional<UInt8>, scope 269 // id: %8
  %9 = string_literal utf8 "Swift/Integers.swift", scope 269 // user: %11
  %10 = integer_literal $Builtin.Word, 20, scope 269 // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word, scope 269 // user: %13
  %12 = integer_literal $Builtin.Int8, 2, scope 269 // users: %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8), scope 269 // user: %62
  %14 = integer_literal $Builtin.Int64, 3033, scope 269 // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64), scope 269 // user: %62
  %16 = string_literal utf8 "Fatal error", scope 269 // user: %18
  %17 = integer_literal $Builtin.Word, 11, scope 269 // user: %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word, scope 269 // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8), scope 269 // user: %62
  %20 = alloc_stack $String, scope 269            // users: %54, %52, %50, %45, %41, %36, %26
  %21 = integer_literal $Builtin.Int64, 80, scope 269 // user: %22
  %22 = struct $Int (%21 : $Builtin.Int64), scope 269 // user: %25
  %23 = metatype $@thin String.Type, scope 269    // users: %56, %49, %40, %25
  // function_ref static String._createEmpty(withInitialCapacity:)
  %24 = function_ref @$sSS12_createEmpty19withInitialCapacitySSSi_tFZ : $@convention(method) (Int, @thin String.Type) -> @owned String, scope 269 // user: %25
  %25 = apply %24(%22, %23) : $@convention(method) (Int, @thin String.Type) -> @owned String, scope 269 // user: %26
  store %25 to [init] %20 : $*String, scope 269   // id: %26
  %27 = integer_literal $Builtin.Int1, -1, scope 269 // users: %49, %40
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %28 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, scope 269 // users: %49, %40
  // function_ref String.append(_:)
  %29 = function_ref @$sSS6appendyySSF : $@convention(method) (@guaranteed String, @inout String) -> (), scope 269 // users: %50, %45, %41, %36
  %30 = metatype $@thick τ_0_0.Type, scope 269    // user: %31
  %31 = init_existential_metatype %30 : $@thick τ_0_0.Type, $@thick any Any.Type, scope 269 // user: %35
  %32 = integer_literal $Builtin.Int1, 0, scope 269 // user: %33
  %33 = struct $Bool (%32 : $Builtin.Int1), scope 269 // users: %44, %35
  // function_ref _typeName(_:qualified:)
  %34 = function_ref @$ss9_typeName_9qualifiedSSypXp_SbtF : $@convention(thin) (@thick any Any.Type, Bool) -> @owned String, scope 269 // users: %44, %35
  %35 = apply %34(%31, %33) : $@convention(thin) (@thick any Any.Type, Bool) -> @owned String, scope 269 // users: %37, %36
  %36 = apply %29(%35, %20) : $@convention(method) (@guaranteed String, @inout String) -> (), scope 269
  destroy_value %35 : $String, scope 269          // id: %37
  %38 = string_literal utf8 " value cannot be converted to ", scope 269 // user: %40
  %39 = integer_literal $Builtin.Word, 30, scope 269 // user: %40
  %40 = apply %28(%38, %39, %27, %23) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, scope 269 // users: %42, %41
  %41 = apply %29(%40, %20) : $@convention(method) (@guaranteed String, @inout String) -> (), scope 269
  destroy_value %40 : $String, scope 269          // id: %42
  %43 = init_existential_metatype %2 : $@thick UInt8.Type, $@thick any Any.Type, scope 269 // user: %44
  %44 = apply %34(%43, %33) : $@convention(thin) (@thick any Any.Type, Bool) -> @owned String, scope 269 // users: %46, %45
  %45 = apply %29(%44, %20) : $@convention(method) (@guaranteed String, @inout String) -> (), scope 269
  destroy_value %44 : $String, scope 269          // id: %46
  %47 = string_literal utf8 " because it is outside the representable range", scope 269 // user: %49
  %48 = integer_literal $Builtin.Word, 46, scope 269 // user: %49
  %49 = apply %28(%47, %48, %27, %23) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String, scope 269 // users: %51, %50
  %50 = apply %29(%49, %20) : $@convention(method) (@guaranteed String, @inout String) -> (), scope 269
  destroy_value %49 : $String, scope 269          // id: %51
  %52 = load [take] %20 : $*String, scope 269     // user: %53
  %53 = struct $DefaultStringInterpolation (%52 : $String), scope 269 // user: %56
  dealloc_stack %20 : $*String, scope 269         // id: %54
  // function_ref String.init(stringInterpolation:)
  %55 = function_ref @$sSS19stringInterpolationSSs013DefaultStringB0V_tcfC : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String, scope 269 // user: %56
  %56 = apply %55(%53, %23) : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String, scope 269 // user: %62
  debug_step , scope 269                          // id: %57
  %58 = integer_literal $Builtin.Int32, 1, scope 269 // user: %59
  %59 = struct $UInt32 (%58 : $Builtin.Int32), scope 269 // user: %62
  debug_step , scope 269                          // id: %60
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %61 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never, scope 269 // user: %62
  %62 = apply %61(%19, %56, %13, %15, %59) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never, scope 269
  unreachable , scope 269                         // id: %63

bb2(%64 : $UInt8):                                // Preds: bb0
  destroy_addr %1 : $*τ_0_0, scope 269            // id: %65
  %66 = load [trivial] %3 : $*Optional<UInt8>, scope 269 // user: %67
  %67 = unchecked_enum_data %66 : $Optional<UInt8>, #Optional.some!enumelt, scope 269 // user: %68
  store %67 to [trivial] %0 : $*UInt8, scope 269  // id: %68
  dealloc_stack %3 : $*Optional<UInt8>, scope 269 // id: %69
  %70 = tuple (), scope 269                       // user: %71
  return %70 : $(), scope 269                     // id: %71
} // end sil function '$ss5UInt8VSzsSzyxqd__cSBRd__lufCTW'

sil_scope 270 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSzyxqd__cSzRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for BinaryInteger.init<A>(_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 270
sil shared [transparent] [serialized] [thunk] [always_inline] [ossa] @$ss5UInt8VSzsSzyxqd__cSzRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %171
// %1                                             // users: %167, %166, %60, %54, %10
bb0(%0 : $*UInt8, %1 : $*τ_0_0, %2 : $@thick UInt8.Type):
  %3 = metatype $@thick τ_0_0.Type, scope 270     // users: %141, %139, %116, %114, %98, %96, %77, %32, %30, %5
  %4 = witness_method $τ_0_0, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 270 // users: %77, %5
  %5 = apply %4<τ_0_0>(%3) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 270 // user: %6
  %6 = struct_extract %5 : $Bool, #Bool._value, scope 270 // user: %7
  cond_br %6, bb2, bb1, scope 270                 // id: %7

bb1:                                              // Preds: bb0
  br bb5, scope 270                               // id: %8

bb2:                                              // Preds: bb0
  %9 = alloc_stack $τ_0_0, scope 270              // users: %51, %49, %32, %10
  copy_addr %1 to [init] %9 : $*τ_0_0, scope 270  // id: %10
  %11 = string_literal utf8 "Negative value is not representable", scope 270 // user: %13
  %12 = integer_literal $Builtin.Word, 35, scope 270 // user: %15
  %13 = builtin "ptrtoint_Word"(%11 : $Builtin.RawPointer) : $Builtin.Word, scope 270 // user: %15
  %14 = integer_literal $Builtin.Int8, 2, scope 270 // users: %43, %19, %15
  %15 = struct $StaticString (%13 : $Builtin.Word, %12 : $Builtin.Word, %14 : $Builtin.Int8), scope 270 // user: %47
  %16 = string_literal utf8 "Swift/Integers.swift", scope 270 // user: %18
  %17 = integer_literal $Builtin.Word, 20, scope 270 // user: %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word, scope 270 // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %14 : $Builtin.Int8), scope 270 // user: %47
  %20 = integer_literal $Builtin.Int64, 3422, scope 270 // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64), scope 270 // user: %47
  debug_step , scope 270                          // id: %22
  %23 = integer_literal $Builtin.IntLiteral, 0, scope 270 // user: %27
  %24 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 270 // user: %27
  %25 = alloc_stack $τ_0_0.IntegerLiteralType, scope 270 // users: %35, %30, %27
  %26 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 270 // user: %27
  %27 = apply %26<τ_0_0.IntegerLiteralType>(%25, %23, %24) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 270
  %28 = alloc_stack $τ_0_0, scope 270             // users: %34, %33, %32, %30
  %29 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 270 // user: %30
  %30 = apply %29<τ_0_0>(%28, %25, %3) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 270
  %31 = witness_method $τ_0_0, #Comparable.">=" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %32
  %32 = apply %31<τ_0_0>(%9, %28, %3) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %36
  destroy_addr %28 : $*τ_0_0, scope 270           // id: %33
  dealloc_stack %28 : $*τ_0_0, scope 270          // id: %34
  dealloc_stack %25 : $*τ_0_0.IntegerLiteralType, scope 270 // id: %35
  %36 = struct_extract %32 : $Bool, #Bool._value, scope 270 // user: %38
  %37 = integer_literal $Builtin.Int1, -1, scope 270 // user: %38
  %38 = builtin "int_expect_Int1"(%36 : $Builtin.Int1, %37 : $Builtin.Int1) : $Builtin.Int1, scope 270 // user: %39
  cond_br %38, bb4, bb3, scope 270                // id: %39

bb3:                                              // Preds: bb2
  %40 = string_literal utf8 "Fatal error", scope 270 // user: %42
  %41 = integer_literal $Builtin.Word, 11, scope 270 // user: %43
  %42 = builtin "ptrtoint_Word"(%40 : $Builtin.RawPointer) : $Builtin.Word, scope 270 // user: %43
  %43 = struct $StaticString (%42 : $Builtin.Word, %41 : $Builtin.Word, %14 : $Builtin.Int8), scope 270 // user: %47
  %44 = integer_literal $Builtin.Int32, 1, scope 270 // user: %45
  %45 = struct $UInt32 (%44 : $Builtin.Int32), scope 270 // user: %47
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %46 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 270 // user: %47
  %47 = apply %46(%43, %15, %19, %21, %45) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 270
  unreachable , scope 270                         // id: %48

bb4:                                              // Preds: bb2
  destroy_addr %9 : $*τ_0_0, scope 270            // id: %49
  debug_step , scope 270                          // id: %50
  dealloc_stack %9 : $*τ_0_0, scope 270           // id: %51
  br bb5, scope 270                               // id: %52

bb5:                                              // Preds: bb4 bb1
  %53 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 270 // users: %103, %80, %54
  %54 = apply %53<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 270 // user: %56
  %55 = integer_literal $Builtin.Int64, 8, scope 270 // users: %105, %82, %57
  %56 = struct_extract %54 : $Int, #Int._value, scope 270 // user: %57
  %57 = builtin "cmp_slt_Int64"(%56 : $Builtin.Int64, %55 : $Builtin.Int64) : $Builtin.Int1, scope 270 // user: %58
  cond_br %57, bb19, bb6, scope 270               // id: %58

bb6:                                              // Preds: bb5
  %59 = alloc_stack $τ_0_0, scope 270             // users: %153, %151, %141, %121, %116, %103, %98, %85, %80, %60
  copy_addr %1 to [init] %59 : $*τ_0_0, scope 270 // id: %60
  %61 = string_literal utf8 "Not enough bits to represent the passed value", scope 270 // user: %63
  %62 = integer_literal $Builtin.Word, 45, scope 270 // user: %65
  %63 = builtin "ptrtoint_Word"(%61 : $Builtin.RawPointer) : $Builtin.Word, scope 270 // user: %65
  %64 = integer_literal $Builtin.Int8, 2, scope 270 // users: %158, %69, %65
  %65 = struct $StaticString (%63 : $Builtin.Word, %62 : $Builtin.Word, %64 : $Builtin.Int8), scope 270 // user: %162
  %66 = string_literal utf8 "Swift/Integers.swift", scope 270 // user: %68
  %67 = integer_literal $Builtin.Word, 20, scope 270 // user: %69
  %68 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word, scope 270 // user: %69
  %69 = struct $StaticString (%68 : $Builtin.Word, %67 : $Builtin.Word, %64 : $Builtin.Int8), scope 270 // user: %162
  %70 = integer_literal $Builtin.Int64, 3426, scope 270 // user: %71
  %71 = struct $UInt (%70 : $Builtin.Int64), scope 270 // user: %162
  debug_step , scope 270                          // id: %72
  %73 = alloc_stack $UInt8, scope 270             // users: %147, %139, %96, %76
  %74 = integer_literal $Builtin.Int8, -1, scope 270 // users: %132, %92, %75
  %75 = struct $UInt8 (%74 : $Builtin.Int8), scope 270 // user: %76
  store %75 to [trivial] %73 : $*UInt8, scope 270 // id: %76
  %77 = apply %4<τ_0_0>(%3) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 270 // user: %78
  %78 = struct_extract %77 : $Bool, #Bool._value, scope 270 // user: %79
  cond_br %78, bb10, bb7, scope 270               // id: %79

bb7:                                              // Preds: bb6
  %80 = apply %53<τ_0_0>(%59) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 270 // user: %81
  %81 = struct_extract %80 : $Int, #Int._value, scope 270 // user: %82
  %82 = builtin "cmp_slt_Int64"(%55 : $Builtin.Int64, %81 : $Builtin.Int64) : $Builtin.Int1, scope 270 // user: %83
  cond_br %82, bb9, bb8, scope 270                // id: %83

bb8:                                              // Preds: bb7
  %84 = alloc_stack $τ_0_0, scope 270             // users: %91, %88, %87, %85
  copy_addr %59 to [init] %84 : $*τ_0_0, scope 270 // id: %85
  %86 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 270 // user: %87
  %87 = apply %86<τ_0_0>(%84) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 270 // user: %89
  destroy_addr %84 : $*τ_0_0, scope 270           // id: %88
  %89 = struct_extract %87 : $UInt, #UInt._value, scope 270 // user: %90
  %90 = builtin "truncOrBitCast_Int64_Int8"(%89 : $Builtin.Int64) : $Builtin.Int8, scope 270 // user: %92
  dealloc_stack %84 : $*τ_0_0, scope 270          // id: %91
  %92 = builtin "cmp_ult_Int8"(%74 : $Builtin.Int8, %90 : $Builtin.Int8) : $Builtin.Int1, scope 270 // user: %93
  br bb16(%92 : $Builtin.Int1), scope 270         // id: %93

bb9:                                              // Preds: bb7
  %94 = alloc_stack $τ_0_0, scope 270             // users: %100, %99, %98, %96
  %95 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 270 // user: %96
  %96 = apply %95<τ_0_0, UInt8>(%94, %73, %3) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 270
  %97 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %98
  %98 = apply %97<τ_0_0>(%94, %59, %3) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %101
  destroy_addr %94 : $*τ_0_0, scope 270           // id: %99
  dealloc_stack %94 : $*τ_0_0, scope 270          // id: %100
  %101 = struct_extract %98 : $Bool, #Bool._value, scope 270 // user: %102
  br bb16(%101 : $Builtin.Int1), scope 270        // id: %102

bb10:                                             // Preds: bb6
  %103 = apply %53<τ_0_0>(%59) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 270 // user: %104
  %104 = struct_extract %103 : $Int, #Int._value, scope 270 // user: %105
  %105 = builtin "cmp_slt_Int64"(%55 : $Builtin.Int64, %104 : $Builtin.Int64) : $Builtin.Int1, scope 270 // user: %106
  cond_br %105, bb15, bb11, scope 270             // id: %106

bb11:                                             // Preds: bb10
  %107 = integer_literal $Builtin.IntLiteral, 0, scope 270 // user: %111
  %108 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 270 // user: %111
  %109 = alloc_stack $τ_0_0.IntegerLiteralType, scope 270 // users: %119, %114, %111
  %110 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 270 // user: %111
  %111 = apply %110<τ_0_0.IntegerLiteralType>(%109, %107, %108) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 270
  %112 = alloc_stack $τ_0_0, scope 270            // users: %118, %117, %116, %114
  %113 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 270 // user: %114
  %114 = apply %113<τ_0_0>(%112, %109, %3) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 270
  %115 = witness_method $τ_0_0, #Comparable.">" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %116
  %116 = apply %115<τ_0_0>(%59, %112, %3) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %122
  destroy_addr %112 : $*τ_0_0, scope 270          // id: %117
  dealloc_stack %112 : $*τ_0_0, scope 270         // id: %118
  dealloc_stack %109 : $*τ_0_0.IntegerLiteralType, scope 270 // id: %119
  %120 = alloc_stack $τ_0_0, scope 270            // users: %135, %129, %128, %124, %121
  copy_addr %59 to [init] %120 : $*τ_0_0, scope 270 // id: %121
  %122 = struct_extract %116 : $Bool, #Bool._value, scope 270 // user: %123
  cond_br %122, bb13, bb12, scope 270             // id: %123

bb12:                                             // Preds: bb11
  destroy_addr %120 : $*τ_0_0, scope 270          // id: %124
  %125 = integer_literal $Builtin.Int1, 0, scope 270 // user: %126
  br bb14(%125 : $Builtin.Int1), scope 270        // id: %126

bb13:                                             // Preds: bb11
  %127 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 270 // user: %128
  %128 = apply %127<τ_0_0>(%120) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 270 // user: %130
  destroy_addr %120 : $*τ_0_0, scope 270          // id: %129
  %130 = struct_extract %128 : $UInt, #UInt._value, scope 270 // user: %131
  %131 = builtin "truncOrBitCast_Int64_Int8"(%130 : $Builtin.Int64) : $Builtin.Int8, scope 270 // user: %132
  %132 = builtin "cmp_ult_Int8"(%74 : $Builtin.Int8, %131 : $Builtin.Int8) : $Builtin.Int1, scope 270 // user: %133
  br bb14(%132 : $Builtin.Int1), scope 270        // id: %133

// %134                                           // user: %136
bb14(%134 : $Builtin.Int1):                       // Preds: bb13 bb12
  dealloc_stack %120 : $*τ_0_0, scope 270         // id: %135
  br bb16(%134 : $Builtin.Int1), scope 270        // id: %136

bb15:                                             // Preds: bb10
  %137 = alloc_stack $τ_0_0, scope 270            // users: %143, %142, %141, %139
  %138 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 270 // user: %139
  %139 = apply %138<τ_0_0, UInt8>(%137, %73, %3) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 270
  %140 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %141
  %141 = apply %140<τ_0_0>(%137, %59, %3) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 270 // user: %144
  destroy_addr %137 : $*τ_0_0, scope 270          // id: %142
  dealloc_stack %137 : $*τ_0_0, scope 270         // id: %143
  %144 = struct_extract %141 : $Bool, #Bool._value, scope 270 // user: %145
  br bb16(%144 : $Builtin.Int1), scope 270        // id: %145

// %146                                           // user: %149
bb16(%146 : $Builtin.Int1):                       // Preds: bb15 bb14 bb9 bb8
  dealloc_stack %73 : $*UInt8, scope 270          // id: %147
  %148 = integer_literal $Builtin.Int1, 0, scope 270 // user: %149
  %149 = builtin "int_expect_Int1"(%146 : $Builtin.Int1, %148 : $Builtin.Int1) : $Builtin.Int1, scope 270 // user: %150
  cond_br %149, bb18, bb17, scope 270             // id: %150

bb17:                                             // Preds: bb16
  destroy_addr %59 : $*τ_0_0, scope 270           // id: %151
  debug_step , scope 270                          // id: %152
  dealloc_stack %59 : $*τ_0_0, scope 270          // id: %153
  br bb20, scope 270                              // id: %154

bb18:                                             // Preds: bb16
  %155 = string_literal utf8 "Fatal error", scope 270 // user: %157
  %156 = integer_literal $Builtin.Word, 11, scope 270 // user: %158
  %157 = builtin "ptrtoint_Word"(%155 : $Builtin.RawPointer) : $Builtin.Word, scope 270 // user: %158
  %158 = struct $StaticString (%157 : $Builtin.Word, %156 : $Builtin.Word, %64 : $Builtin.Int8), scope 270 // user: %162
  %159 = integer_literal $Builtin.Int32, 1, scope 270 // user: %160
  %160 = struct $UInt32 (%159 : $Builtin.Int32), scope 270 // user: %162
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %161 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 270 // user: %162
  %162 = apply %161(%158, %65, %69, %71, %160) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 270
  unreachable , scope 270                         // id: %163

bb19:                                             // Preds: bb5
  br bb20, scope 270                              // id: %164

bb20:                                             // Preds: bb19 bb17
  %165 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 270 // user: %166
  %166 = apply %165<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 270 // user: %168
  destroy_addr %1 : $*τ_0_0, scope 270            // id: %167
  %168 = struct_extract %166 : $UInt, #UInt._value, scope 270 // user: %169
  %169 = builtin "truncOrBitCast_Int64_Int8"(%168 : $Builtin.Int64) : $Builtin.Int8, scope 270 // user: %170
  %170 = struct $UInt8 (%169 : $Builtin.Int8), scope 270 // user: %171
  store %170 to [trivial] %0 : $*UInt8, scope 270 // id: %171
  %172 = tuple (), scope 270                      // user: %173
  return %172 : $(), scope 270                    // id: %173
} // end sil function '$ss5UInt8VSzsSzyxqd__cSzRd__lufCTW'

sil_scope 271 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz18truncatingIfNeededxqd___tcSzRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 271
sil shared [transparent] [serialized] [thunk] [always_inline] [ossa] @$ss5UInt8VSzsSz18truncatingIfNeededxqd___tcSzRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %9
// %1                                             // users: %5, %4
bb0(%0 : $*UInt8, %1 : $*τ_0_0, %2 : $@thick UInt8.Type):
  %3 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 271 // user: %4
  %4 = apply %3<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 271 // user: %6
  destroy_addr %1 : $*τ_0_0, scope 271            // id: %5
  %6 = struct_extract %4 : $UInt, #UInt._value, scope 271 // user: %7
  %7 = builtin "truncOrBitCast_Int64_Int8"(%6 : $Builtin.Int64) : $Builtin.Int8, scope 271 // user: %8
  %8 = struct $UInt8 (%7 : $Builtin.Int8), scope 271 // user: %9
  store %8 to [trivial] %0 : $*UInt8, scope 271   // id: %9
  %10 = tuple (), scope 271                       // user: %11
  return %10 : $(), scope 271                     // id: %11
} // end sil function '$ss5UInt8VSzsSz18truncatingIfNeededxqd___tcSzRd__lufCTW'

sil_scope 272 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz8clampingxqd___tcSzRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for BinaryInteger.init<A>(clamping:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 272
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz8clampingxqd___tcSzRd__lufCTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*UInt8, %1 : $*τ_0_0, %2 : $@thick UInt8.Type):
  // function_ref FixedWidthInteger.init<A>(clamping:)
  %3 = function_ref @$ss17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufC : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 272 // user: %4
  %4 = apply %3<UInt8, τ_0_0>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 272
  %5 = tuple (), scope 272                        // user: %6
  return %5 : $(), scope 272                      // id: %6
} // end sil function '$ss5UInt8VSzsSz8clampingxqd___tcSzRd__lufCTW'

sil_scope 273 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz5words5WordsQzvgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> @out UInt8.Words }

// protocol witness for BinaryInteger.words.getter in conformance UInt8, loc * "<compiler-generated>":0:0, scope 273
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz5words5WordsQzvgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> @out UInt8.Words {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*UInt8.Words, %1 : $*UInt8):
  %2 = load [trivial] %1 : $*UInt8, scope 273     // user: %3
  %3 = struct $UInt8.Words (%2 : $UInt8), scope 273 // user: %4
  store %3 to [trivial] %0 : $*UInt8.Words, scope 273 // id: %4
  %5 = tuple (), scope 273                        // user: %6
  return %5 : $(), scope 273                      // id: %6
} // end sil function '$ss5UInt8VSzsSz5words5WordsQzvgTW'

sil_scope 274 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz8_lowWordSuvgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> UInt }

// protocol witness for BinaryInteger._lowWord.getter in conformance UInt8, loc * "<compiler-generated>":0:0, scope 274
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz8_lowWordSuvgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> UInt {
// %0                                             // user: %1
bb0(%0 : $*UInt8):
  %1 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 274 // user: %2
  %2 = load [trivial] %1 : $*Builtin.Int8, scope 274 // user: %3
  %3 = builtin "zextOrBitCast_Int8_Int64"(%2 : $Builtin.Int8) : $Builtin.Int64, scope 274 // user: %4
  %4 = struct $UInt (%3 : $Builtin.Int64), scope 274 // user: %5
  return %4 : $UInt, scope 274                    // id: %5
} // end sil function '$ss5UInt8VSzsSz8_lowWordSuvgTW'

sil_scope 275 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz8bitWidthSivgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> Int }

// protocol witness for BinaryInteger.bitWidth.getter in conformance UInt8, loc * "<compiler-generated>":0:0, scope 275
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz8bitWidthSivgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> Int {
bb0(%0 : $*UInt8):
  %1 = integer_literal $Builtin.Int64, 8, scope 275 // user: %2
  %2 = struct $Int (%1 : $Builtin.Int64), scope 275 // user: %3
  return %2 : $Int, scope 275                     // id: %3
} // end sil function '$ss5UInt8VSzsSz8bitWidthSivgTW'

sil_scope 276 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz16_binaryLogarithmSiyFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> Int }

// protocol witness for BinaryInteger._binaryLogarithm() in conformance UInt8, loc * "<compiler-generated>":0:0, scope 276
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz16_binaryLogarithmSiyFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> Int {
// %0                                             // user: %2
bb0(%0 : $*UInt8):
  // function_ref specialized FixedWidthInteger._binaryLogarithm()
  %1 = function_ref @$ss17FixedWidthIntegerPsE16_binaryLogarithmSiyFs5UInt8V_Tgq5 : $@convention(method) (UInt8) -> Int, scope 276 // user: %3
  %2 = load [trivial] %0 : $*UInt8, scope 276     // user: %3
  %3 = apply %1(%2) : $@convention(method) (UInt8) -> Int, scope 276 // user: %4
  return %3 : $Int, scope 276                     // id: %4
} // end sil function '$ss5UInt8VSzsSz16_binaryLogarithmSiyFTW'

sil_scope 277 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz20trailingZeroBitCountSivgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> Int }

// protocol witness for BinaryInteger.trailingZeroBitCount.getter in conformance UInt8, loc * "<compiler-generated>":0:0, scope 277
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz20trailingZeroBitCountSivgTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> Int {
// %0                                             // user: %1
bb0(%0 : $*UInt8):
  %1 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 277 // user: %2
  %2 = load [trivial] %1 : $*Builtin.Int8, scope 277 // user: %4
  %3 = integer_literal $Builtin.Int1, 0, scope 277 // user: %4
  %4 = builtin "int_cttz_Int8"(%2 : $Builtin.Int8, %3 : $Builtin.Int1) : $Builtin.Int8, scope 277 // user: %5
  %5 = builtin "zextOrBitCast_Int8_Int64"(%4 : $Builtin.Int8) : $Builtin.Int64, scope 277 // user: %6
  %6 = struct $Int (%5 : $Builtin.Int64), scope 277 // user: %7
  return %6 : $Int, scope 277                     // id: %7
} // end sil function '$ss5UInt8VSzsSz20trailingZeroBitCountSivgTW'

sil_scope 278 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz1doiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger./ infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 278
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz1doiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %15
// %1                                             // user: %4
// %2                                             // user: %6
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*UInt8, %3 : $@thick UInt8.Type):
  %4 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 278 // user: %5
  %5 = load [trivial] %4 : $*Builtin.Int8, scope 278 // user: %13
  %6 = struct_element_addr %2 : $*UInt8, #UInt8._value, scope 278 // user: %7
  %7 = load [trivial] %6 : $*Builtin.Int8, scope 278 // users: %13, %9
  %8 = integer_literal $Builtin.Int8, 0, scope 278 // user: %9
  %9 = builtin "cmp_eq_Int8"(%7 : $Builtin.Int8, %8 : $Builtin.Int8) : $Builtin.Int1, scope 278 // user: %11
  %10 = integer_literal $Builtin.Int1, 0, scope 278 // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1, scope 278 // user: %12
  cond_br %11, bb2, bb1, scope 278                // id: %12

bb1:                                              // Preds: bb0
  %13 = builtin "udiv_Int8"(%5 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int8, scope 278 // user: %14
  %14 = struct $UInt8 (%13 : $Builtin.Int8), scope 278 // user: %15
  store %14 to [trivial] %0 : $*UInt8, scope 278  // id: %15
  %16 = tuple (), scope 278                       // user: %17
  return %16 : $(), scope 278                     // id: %17

bb2:                                              // Preds: bb0
  %18 = string_literal utf8 "Division by zero", scope 278 // user: %20
  %19 = integer_literal $Builtin.Word, 16, scope 278 // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word, scope 278 // user: %22
  %21 = integer_literal $Builtin.Int8, 2, scope 278 // users: %33, %26, %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8), scope 278 // user: %37
  %23 = string_literal utf8 "Swift/IntegerTypes.swift", scope 278 // user: %25
  %24 = integer_literal $Builtin.Word, 24, scope 278 // user: %26
  %25 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word, scope 278 // user: %26
  %26 = struct $StaticString (%25 : $Builtin.Word, %24 : $Builtin.Word, %21 : $Builtin.Int8), scope 278 // user: %37
  %27 = integer_literal $Builtin.Int64, 480, scope 278 // user: %28
  %28 = struct $UInt (%27 : $Builtin.Int64), scope 278 // user: %37
  debug_step , scope 278                          // id: %29
  %30 = string_literal utf8 "Fatal error", scope 278 // user: %32
  %31 = integer_literal $Builtin.Word, 11, scope 278 // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word, scope 278 // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %21 : $Builtin.Int8), scope 278 // user: %37
  %34 = integer_literal $Builtin.Int32, 1, scope 278 // user: %35
  %35 = struct $UInt32 (%34 : $Builtin.Int32), scope 278 // user: %37
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %36 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 278 // user: %37
  %37 = apply %36(%33, %22, %26, %28, %35) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 278
  unreachable , scope 278                         // id: %38
} // end sil function '$ss5UInt8VSzsSz1doiyxx_xtFZTW'

sil_scope 279 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz2deoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () }

// protocol witness for static BinaryInteger./= infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 279
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz2deoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () {
// %0                                             // users: %14, %10
// %1                                             // user: %3
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 279 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 279 // users: %12, %6
  %5 = integer_literal $Builtin.Int8, 0, scope 279 // user: %6
  %6 = builtin "cmp_eq_Int8"(%4 : $Builtin.Int8, %5 : $Builtin.Int8) : $Builtin.Int1, scope 279 // user: %8
  %7 = integer_literal $Builtin.Int1, 0, scope 279 // user: %8
  %8 = builtin "int_expect_Int1"(%6 : $Builtin.Int1, %7 : $Builtin.Int1) : $Builtin.Int1, scope 279 // user: %9
  cond_br %8, bb2, bb1, scope 279                 // id: %9

bb1:                                              // Preds: bb0
  %10 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 279 // user: %11
  %11 = load [trivial] %10 : $*Builtin.Int8, scope 279 // user: %12
  %12 = builtin "udiv_Int8"(%11 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int8, scope 279 // user: %13
  %13 = struct $UInt8 (%12 : $Builtin.Int8), scope 279 // user: %14
  store %13 to [trivial] %0 : $*UInt8, scope 279  // id: %14
  %15 = tuple (), scope 279                       // user: %16
  return %15 : $(), scope 279                     // id: %16

bb2:                                              // Preds: bb0
  %17 = string_literal utf8 "Division by zero", scope 279 // user: %19
  %18 = integer_literal $Builtin.Word, 16, scope 279 // user: %21
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word, scope 279 // user: %21
  %20 = integer_literal $Builtin.Int8, 2, scope 279 // users: %32, %25, %21
  %21 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %20 : $Builtin.Int8), scope 279 // user: %36
  %22 = string_literal utf8 "Swift/IntegerTypes.swift", scope 279 // user: %24
  %23 = integer_literal $Builtin.Word, 24, scope 279 // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word, scope 279 // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %20 : $Builtin.Int8), scope 279 // user: %36
  %26 = integer_literal $Builtin.Int64, 480, scope 279 // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64), scope 279 // user: %36
  debug_step , scope 279                          // id: %28
  %29 = string_literal utf8 "Fatal error", scope 279 // user: %31
  %30 = integer_literal $Builtin.Word, 11, scope 279 // user: %32
  %31 = builtin "ptrtoint_Word"(%29 : $Builtin.RawPointer) : $Builtin.Word, scope 279 // user: %32
  %32 = struct $StaticString (%31 : $Builtin.Word, %30 : $Builtin.Word, %20 : $Builtin.Int8), scope 279 // user: %36
  %33 = integer_literal $Builtin.Int32, 1, scope 279 // user: %34
  %34 = struct $UInt32 (%33 : $Builtin.Int32), scope 279 // user: %36
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %35 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 279 // user: %36
  %36 = apply %35(%32, %21, %25, %27, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 279
  unreachable , scope 279                         // id: %37
} // end sil function '$ss5UInt8VSzsSz2deoiyyxz_xtFZTW'

sil_scope 280 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz1roiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger.% infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 280
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz1roiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %15
// %1                                             // user: %4
// %2                                             // user: %6
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*UInt8, %3 : $@thick UInt8.Type):
  %4 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 280 // user: %5
  %5 = load [trivial] %4 : $*Builtin.Int8, scope 280 // user: %13
  %6 = struct_element_addr %2 : $*UInt8, #UInt8._value, scope 280 // user: %7
  %7 = load [trivial] %6 : $*Builtin.Int8, scope 280 // users: %13, %9
  %8 = integer_literal $Builtin.Int8, 0, scope 280 // user: %9
  %9 = builtin "cmp_eq_Int8"(%7 : $Builtin.Int8, %8 : $Builtin.Int8) : $Builtin.Int1, scope 280 // user: %11
  %10 = integer_literal $Builtin.Int1, 0, scope 280 // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1, scope 280 // user: %12
  cond_br %11, bb2, bb1, scope 280                // id: %12

bb1:                                              // Preds: bb0
  %13 = builtin "urem_Int8"(%5 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int8, scope 280 // user: %14
  %14 = struct $UInt8 (%13 : $Builtin.Int8), scope 280 // user: %15
  store %14 to [trivial] %0 : $*UInt8, scope 280  // id: %15
  %16 = tuple (), scope 280                       // user: %17
  return %16 : $(), scope 280                     // id: %17

bb2:                                              // Preds: bb0
  %18 = string_literal utf8 "Division by zero in remainder operation", scope 280 // user: %20
  %19 = integer_literal $Builtin.Word, 39, scope 280 // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word, scope 280 // user: %22
  %21 = integer_literal $Builtin.Int8, 2, scope 280 // users: %33, %26, %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8), scope 280 // user: %37
  %23 = string_literal utf8 "Swift/IntegerTypes.swift", scope 280 // user: %25
  %24 = integer_literal $Builtin.Word, 24, scope 280 // user: %26
  %25 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word, scope 280 // user: %26
  %26 = struct $StaticString (%25 : $Builtin.Word, %24 : $Builtin.Word, %21 : $Builtin.Int8), scope 280 // user: %37
  %27 = integer_literal $Builtin.Int64, 692, scope 280 // user: %28
  %28 = struct $UInt (%27 : $Builtin.Int64), scope 280 // user: %37
  debug_step , scope 280                          // id: %29
  %30 = string_literal utf8 "Fatal error", scope 280 // user: %32
  %31 = integer_literal $Builtin.Word, 11, scope 280 // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word, scope 280 // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %21 : $Builtin.Int8), scope 280 // user: %37
  %34 = integer_literal $Builtin.Int32, 1, scope 280 // user: %35
  %35 = struct $UInt32 (%34 : $Builtin.Int32), scope 280 // user: %37
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %36 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 280 // user: %37
  %37 = apply %36(%33, %22, %26, %28, %35) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 280
  unreachable , scope 280                         // id: %38
} // end sil function '$ss5UInt8VSzsSz1roiyxx_xtFZTW'

sil_scope 281 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz2reoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () }

// protocol witness for static BinaryInteger.%= infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 281
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz2reoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () {
// %0                                             // users: %14, %10
// %1                                             // user: %3
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 281 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 281 // users: %12, %6
  %5 = integer_literal $Builtin.Int8, 0, scope 281 // user: %6
  %6 = builtin "cmp_eq_Int8"(%4 : $Builtin.Int8, %5 : $Builtin.Int8) : $Builtin.Int1, scope 281 // user: %8
  %7 = integer_literal $Builtin.Int1, 0, scope 281 // user: %8
  %8 = builtin "int_expect_Int1"(%6 : $Builtin.Int1, %7 : $Builtin.Int1) : $Builtin.Int1, scope 281 // user: %9
  cond_br %8, bb2, bb1, scope 281                 // id: %9

bb1:                                              // Preds: bb0
  %10 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 281 // user: %11
  %11 = load [trivial] %10 : $*Builtin.Int8, scope 281 // user: %12
  %12 = builtin "urem_Int8"(%11 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int8, scope 281 // user: %13
  %13 = struct $UInt8 (%12 : $Builtin.Int8), scope 281 // user: %14
  store %13 to [trivial] %0 : $*UInt8, scope 281  // id: %14
  %15 = tuple (), scope 281                       // user: %16
  return %15 : $(), scope 281                     // id: %16

bb2:                                              // Preds: bb0
  %17 = string_literal utf8 "Division by zero in remainder operation", scope 281 // user: %19
  %18 = integer_literal $Builtin.Word, 39, scope 281 // user: %21
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word, scope 281 // user: %21
  %20 = integer_literal $Builtin.Int8, 2, scope 281 // users: %32, %25, %21
  %21 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %20 : $Builtin.Int8), scope 281 // user: %36
  %22 = string_literal utf8 "Swift/IntegerTypes.swift", scope 281 // user: %24
  %23 = integer_literal $Builtin.Word, 24, scope 281 // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word, scope 281 // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %20 : $Builtin.Int8), scope 281 // user: %36
  %26 = integer_literal $Builtin.Int64, 692, scope 281 // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64), scope 281 // user: %36
  debug_step , scope 281                          // id: %28
  %29 = string_literal utf8 "Fatal error", scope 281 // user: %31
  %30 = integer_literal $Builtin.Word, 11, scope 281 // user: %32
  %31 = builtin "ptrtoint_Word"(%29 : $Builtin.RawPointer) : $Builtin.Word, scope 281 // user: %32
  %32 = struct $StaticString (%31 : $Builtin.Word, %30 : $Builtin.Word, %20 : $Builtin.Int8), scope 281 // user: %36
  %33 = integer_literal $Builtin.Int32, 1, scope 281 // user: %34
  %34 = struct $UInt32 (%33 : $Builtin.Int32), scope 281 // user: %36
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %35 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 281 // user: %36
  %36 = apply %35(%32, %21, %25, %27, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 281
  unreachable , scope 281                         // id: %37
} // end sil function '$ss5UInt8VSzsSz2reoiyyxz_xtFZTW'

sil_scope 282 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz1topyxxFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger.~ prefix(_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 282
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz1topyxxFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %15
// %1                                             // user: %4
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = integer_literal $Builtin.Int8, 0, scope 282 // user: %7
  %4 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 282 // user: %5
  %5 = load [trivial] %4 : $*Builtin.Int8, scope 282 // user: %7
  %6 = integer_literal $Builtin.Int1, 0, scope 282 // users: %11, %7
  %7 = builtin "usub_with_overflow_Int8"(%3 : $Builtin.Int8, %5 : $Builtin.Int8, %6 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1), scope 282 // user: %8
  (%8, %9) = destructure_tuple %7 : $(Builtin.Int8, Builtin.Int1), scope 282 // user: %11
  %10 = integer_literal $Builtin.Int8, 1, scope 282 // user: %11
  %11 = builtin "usub_with_overflow_Int8"(%8 : $Builtin.Int8, %10 : $Builtin.Int8, %6 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1), scope 282 // user: %12
  (%12, %13) = destructure_tuple %11 : $(Builtin.Int8, Builtin.Int1), scope 282 // user: %14
  %14 = struct $UInt8 (%12 : $Builtin.Int8), scope 282 // user: %15
  store %14 to [trivial] %0 : $*UInt8, scope 282  // id: %15
  %16 = tuple (), scope 282                       // user: %17
  return %16 : $(), scope 282                     // id: %17
} // end sil function '$ss5UInt8VSzsSz1topyxxFZTW'

sil_scope 283 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz1aoiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger.& infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 283
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz1aoiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %10
// %1                                             // user: %4
// %2                                             // user: %6
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*UInt8, %3 : $@thick UInt8.Type):
  %4 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 283 // user: %5
  %5 = load [trivial] %4 : $*Builtin.Int8, scope 283 // user: %8
  %6 = struct_element_addr %2 : $*UInt8, #UInt8._value, scope 283 // user: %7
  %7 = load [trivial] %6 : $*Builtin.Int8, scope 283 // user: %8
  %8 = builtin "and_Int8"(%5 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int8, scope 283 // user: %9
  %9 = struct $UInt8 (%8 : $Builtin.Int8), scope 283 // user: %10
  store %9 to [trivial] %0 : $*UInt8, scope 283   // id: %10
  %11 = tuple (), scope 283                       // user: %12
  return %11 : $(), scope 283                     // id: %12
} // end sil function '$ss5UInt8VSzsSz1aoiyxx_xtFZTW'

sil_scope 284 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz2aeoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () }

// protocol witness for static BinaryInteger.&= infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 284
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz2aeoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () {
// %0                                             // users: %9, %5
// %1                                             // user: %3
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 284 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 284 // user: %7
  %5 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 284 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int8, scope 284 // user: %7
  %7 = builtin "and_Int8"(%6 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int8, scope 284 // user: %8
  %8 = struct $UInt8 (%7 : $Builtin.Int8), scope 284 // user: %9
  store %8 to [trivial] %0 : $*UInt8, scope 284   // id: %9
  %10 = tuple (), scope 284                       // user: %11
  return %10 : $(), scope 284                     // id: %11
} // end sil function '$ss5UInt8VSzsSz2aeoiyyxz_xtFZTW'

sil_scope 285 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz1ooiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger.| infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 285
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz1ooiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %10
// %1                                             // user: %4
// %2                                             // user: %6
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*UInt8, %3 : $@thick UInt8.Type):
  %4 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 285 // user: %5
  %5 = load [trivial] %4 : $*Builtin.Int8, scope 285 // user: %8
  %6 = struct_element_addr %2 : $*UInt8, #UInt8._value, scope 285 // user: %7
  %7 = load [trivial] %6 : $*Builtin.Int8, scope 285 // user: %8
  %8 = builtin "or_Int8"(%5 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int8, scope 285 // user: %9
  %9 = struct $UInt8 (%8 : $Builtin.Int8), scope 285 // user: %10
  store %9 to [trivial] %0 : $*UInt8, scope 285   // id: %10
  %11 = tuple (), scope 285                       // user: %12
  return %11 : $(), scope 285                     // id: %12
} // end sil function '$ss5UInt8VSzsSz1ooiyxx_xtFZTW'

sil_scope 286 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz2oeoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () }

// protocol witness for static BinaryInteger.|= infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 286
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz2oeoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () {
// %0                                             // users: %9, %5
// %1                                             // user: %3
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 286 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 286 // user: %7
  %5 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 286 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int8, scope 286 // user: %7
  %7 = builtin "or_Int8"(%6 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int8, scope 286 // user: %8
  %8 = struct $UInt8 (%7 : $Builtin.Int8), scope 286 // user: %9
  store %8 to [trivial] %0 : $*UInt8, scope 286   // id: %9
  %10 = tuple (), scope 286                       // user: %11
  return %10 : $(), scope 286                     // id: %11
} // end sil function '$ss5UInt8VSzsSz2oeoiyyxz_xtFZTW'

sil_scope 287 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz1xoiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger.^ infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 287
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz1xoiyxx_xtFZTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %10
// %1                                             // user: %4
// %2                                             // user: %6
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*UInt8, %3 : $@thick UInt8.Type):
  %4 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 287 // user: %5
  %5 = load [trivial] %4 : $*Builtin.Int8, scope 287 // user: %8
  %6 = struct_element_addr %2 : $*UInt8, #UInt8._value, scope 287 // user: %7
  %7 = load [trivial] %6 : $*Builtin.Int8, scope 287 // user: %8
  %8 = builtin "xor_Int8"(%5 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int8, scope 287 // user: %9
  %9 = struct $UInt8 (%8 : $Builtin.Int8), scope 287 // user: %10
  store %9 to [trivial] %0 : $*UInt8, scope 287   // id: %10
  %11 = tuple (), scope 287                       // user: %12
  return %11 : $(), scope 287                     // id: %12
} // end sil function '$ss5UInt8VSzsSz1xoiyxx_xtFZTW'

sil_scope 288 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz2xeoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () }

// protocol witness for static BinaryInteger.^= infix(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 288
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz2xeoiyyxz_xtFZTW : $@convention(witness_method: BinaryInteger) (@inout UInt8, @in_guaranteed UInt8, @thick UInt8.Type) -> () {
// %0                                             // users: %9, %5
// %1                                             // user: %3
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 288 // user: %4
  %4 = load [trivial] %3 : $*Builtin.Int8, scope 288 // user: %7
  %5 = struct_element_addr %0 : $*UInt8, #UInt8._value, scope 288 // user: %6
  %6 = load [trivial] %5 : $*Builtin.Int8, scope 288 // user: %7
  %7 = builtin "xor_Int8"(%6 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int8, scope 288 // user: %8
  %8 = struct $UInt8 (%7 : $Builtin.Int8), scope 288 // user: %9
  store %8 to [trivial] %0 : $*UInt8, scope 288   // id: %9
  %10 = tuple (), scope 288                       // user: %11
  return %10 : $(), scope 288                     // id: %11
} // end sil function '$ss5UInt8VSzsSz2xeoiyyxz_xtFZTW'

sil_scope 289 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz2ggoiyxx_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 289
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz2ggoiyxx_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %461
// %1                                             // user: %4
// %2                                             // users: %170, %162, %147, %142, %132, %126, %115, %97, %91, %79, %73, %51, %46, %32, %23, %16
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*τ_0_0, %3 : $@thick UInt8.Type):
  %4 = load [trivial] %1 : $*UInt8, scope 289     // user: %425
  %5 = integer_literal $Builtin.Int64, -8, scope 289 // users: %445, %103, %58, %29, %6
  %6 = struct $Int (%5 : $Builtin.Int64), scope 289 // users: %423, %86, %68
  %7 = metatype $@thick τ_0_0.Type, scope 289     // users: %381, %379, %351, %349, %338, %313, %276, %274, %263, %261, %239, %237, %207, %204, %171, %162, %159, %126, %123, %110, %91, %88, %73, %70, %46, %44, %12, %9
  %8 = witness_method $τ_0_0, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // users: %338, %313, %207, %204, %171, %110, %12, %9
  %9 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %10
  %10 = struct_extract %9 : $Bool, #Bool._value, scope 289 // user: %11
  cond_br %10, bb11, bb1, scope 289               // id: %11

bb1:                                              // Preds: bb0
  %12 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %13
  %13 = struct_extract %12 : $Bool, #Bool._value, scope 289 // user: %14
  cond_br %13, bb5, bb2, scope 289                // id: %14

bb2:                                              // Preds: bb1
  %15 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %16
  %16 = apply %15<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %18
  %17 = integer_literal $Builtin.Int64, 64, scope 289 // user: %19
  %18 = struct_extract %16 : $Int, #Int._value, scope 289 // user: %19
  %19 = builtin "cmp_slt_Int64"(%18 : $Builtin.Int64, %17 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %20
  cond_br %19, bb4, bb3, scope 289                // id: %20

bb3:                                              // Preds: bb2
  br bb16, scope 289                              // id: %21

bb4:                                              // Preds: bb2
  %22 = alloc_stack $τ_0_0, scope 289             // users: %28, %26, %25, %23
  copy_addr %2 to [init] %22 : $*τ_0_0, scope 289 // id: %23
  %24 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %25
  %25 = apply %24<τ_0_0>(%22) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %27
  destroy_addr %22 : $*τ_0_0, scope 289           // id: %26
  %27 = struct_extract %25 : $UInt, #UInt._value, scope 289 // user: %29
  dealloc_stack %22 : $*τ_0_0, scope 289          // id: %28
  %29 = builtin "cmp_slt_Int64"(%27 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %30
  br bb14(%29 : $Builtin.Int1), scope 289         // id: %30

bb5:                                              // Preds: bb1
  %31 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %32
  %32 = apply %31<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %34
  %33 = integer_literal $Builtin.Int64, 64, scope 289 // user: %35
  %34 = struct_extract %32 : $Int, #Int._value, scope 289 // user: %35
  %35 = builtin "cmp_slt_Int64"(%33 : $Builtin.Int64, %34 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %36
  cond_br %35, bb10, bb6, scope 289               // id: %36

bb6:                                              // Preds: bb5
  %37 = integer_literal $Builtin.IntLiteral, 0, scope 289 // user: %41
  %38 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 289 // user: %41
  %39 = alloc_stack $τ_0_0.IntegerLiteralType, scope 289 // users: %49, %44, %41
  %40 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %41
  %41 = apply %40<τ_0_0.IntegerLiteralType>(%39, %37, %38) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %42 = alloc_stack $τ_0_0, scope 289             // users: %48, %47, %46, %44
  %43 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %44
  %44 = apply %43<τ_0_0>(%42, %39, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %45 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %46
  %46 = apply %45<τ_0_0>(%2, %42, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %52
  destroy_addr %42 : $*τ_0_0, scope 289           // id: %47
  dealloc_stack %42 : $*τ_0_0, scope 289          // id: %48
  dealloc_stack %39 : $*τ_0_0.IntegerLiteralType, scope 289 // id: %49
  %50 = alloc_stack $τ_0_0, scope 289             // users: %64, %60, %56, %55, %51
  copy_addr %2 to [init] %50 : $*τ_0_0, scope 289 // id: %51
  %52 = struct_extract %46 : $Bool, #Bool._value, scope 289 // user: %53
  cond_br %52, bb8, bb7, scope 289                // id: %53

bb7:                                              // Preds: bb6
  %54 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %55
  %55 = apply %54<τ_0_0>(%50) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %57
  destroy_addr %50 : $*τ_0_0, scope 289           // id: %56
  %57 = struct_extract %55 : $UInt, #UInt._value, scope 289 // user: %58
  %58 = builtin "cmp_slt_Int64"(%57 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %59
  br bb9(%58 : $Builtin.Int1), scope 289          // id: %59

bb8:                                              // Preds: bb6
  destroy_addr %50 : $*τ_0_0, scope 289           // id: %60
  %61 = integer_literal $Builtin.Int1, -1, scope 289 // user: %62
  br bb9(%61 : $Builtin.Int1), scope 289          // id: %62

// %63                                            // user: %65
bb9(%63 : $Builtin.Int1):                         // Preds: bb8 bb7
  dealloc_stack %50 : $*τ_0_0, scope 289          // id: %64
  br bb14(%63 : $Builtin.Int1), scope 289         // id: %65

bb10:                                             // Preds: bb5
  %66 = alloc_stack $τ_0_0, scope 289             // users: %75, %74, %73, %70
  %67 = alloc_stack $Int, scope 289               // users: %71, %70, %68
  store %6 to [trivial] %67 : $*Int, scope 289    // id: %68
  %69 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %70
  %70 = apply %69<τ_0_0, Int>(%66, %67, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  dealloc_stack %67 : $*Int, scope 289            // id: %71
  %72 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %73
  %73 = apply %72<τ_0_0>(%2, %66, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %76
  destroy_addr %66 : $*τ_0_0, scope 289           // id: %74
  dealloc_stack %66 : $*τ_0_0, scope 289          // id: %75
  %76 = struct_extract %73 : $Bool, #Bool._value, scope 289 // user: %77
  br bb14(%76 : $Builtin.Int1), scope 289         // id: %77

bb11:                                             // Preds: bb0
  %78 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %79
  %79 = apply %78<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %81
  %80 = integer_literal $Builtin.Int64, 64, scope 289 // user: %82
  %81 = struct_extract %79 : $Int, #Int._value, scope 289 // user: %82
  %82 = builtin "cmp_slt_Int64"(%81 : $Builtin.Int64, %80 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %83
  cond_br %82, bb13, bb12, scope 289              // id: %83

bb12:                                             // Preds: bb11
  %84 = alloc_stack $τ_0_0, scope 289             // users: %93, %92, %91, %88
  %85 = alloc_stack $Int, scope 289               // users: %89, %88, %86
  store %6 to [trivial] %85 : $*Int, scope 289    // id: %86
  %87 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %88
  %88 = apply %87<τ_0_0, Int>(%84, %85, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  dealloc_stack %85 : $*Int, scope 289            // id: %89
  %90 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %91
  %91 = apply %90<τ_0_0>(%2, %84, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %94
  destroy_addr %84 : $*τ_0_0, scope 289           // id: %92
  dealloc_stack %84 : $*τ_0_0, scope 289          // id: %93
  %94 = struct_extract %91 : $Bool, #Bool._value, scope 289 // user: %95
  br bb14(%94 : $Builtin.Int1), scope 289         // id: %95

bb13:                                             // Preds: bb11
  %96 = alloc_stack $τ_0_0, scope 289             // users: %102, %100, %99, %97
  copy_addr %2 to [init] %96 : $*τ_0_0, scope 289 // id: %97
  %98 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %99
  %99 = apply %98<τ_0_0>(%96) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %101
  destroy_addr %96 : $*τ_0_0, scope 289           // id: %100
  %101 = struct_extract %99 : $UInt, #UInt._value, scope 289 // user: %103
  dealloc_stack %96 : $*τ_0_0, scope 289          // id: %102
  %103 = builtin "cmp_slt_Int64"(%101 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %104
  br bb14(%103 : $Builtin.Int1), scope 289        // id: %104

// %105                                           // user: %106
bb14(%105 : $Builtin.Int1):                       // Preds: bb13 bb12 bb10 bb9 bb4
  cond_br %105, bb65, bb15, scope 289             // id: %106

bb15:                                             // Preds: bb14
  br bb16, scope 289                              // id: %107

bb16:                                             // Preds: bb15 bb3
  %108 = integer_literal $Builtin.Int64, 8, scope 289 // users: %153, %138, %109
  %109 = struct $Int (%108 : $Builtin.Int64), scope 289 // users: %422, %157, %121
  %110 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %111
  %111 = struct_extract %110 : $Bool, #Bool._value, scope 289 // user: %112
  cond_br %111, bb20, bb17, scope 289             // id: %112

bb17:                                             // Preds: bb16
  %113 = integer_literal $Builtin.Int64, 64, scope 289 // user: %117
  %114 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %115
  %115 = apply %114<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %116
  %116 = struct_extract %115 : $Int, #Int._value, scope 289 // user: %117
  %117 = builtin "cmp_slt_Int64"(%116 : $Builtin.Int64, %113 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %118
  cond_br %117, bb19, bb18, scope 289             // id: %118

bb18:                                             // Preds: bb17
  %119 = alloc_stack $τ_0_0, scope 289            // users: %128, %127, %126, %123
  %120 = alloc_stack $Int, scope 289              // users: %124, %123, %121
  store %109 to [trivial] %120 : $*Int, scope 289 // id: %121
  %122 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %123
  %123 = apply %122<τ_0_0, Int>(%119, %120, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  dealloc_stack %120 : $*Int, scope 289           // id: %124
  %125 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %126
  %126 = apply %125<τ_0_0>(%119, %2, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %129
  destroy_addr %119 : $*τ_0_0, scope 289          // id: %127
  dealloc_stack %119 : $*τ_0_0, scope 289         // id: %128
  %129 = struct_extract %126 : $Bool, #Bool._value, scope 289 // user: %130
  br bb23(%129 : $Builtin.Int1), scope 289        // id: %130

bb19:                                             // Preds: bb17
  %131 = alloc_stack $τ_0_0, scope 289            // users: %137, %135, %134, %132
  copy_addr %2 to [init] %131 : $*τ_0_0, scope 289 // id: %132
  %133 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %134
  %134 = apply %133<τ_0_0>(%131) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %136
  destroy_addr %131 : $*τ_0_0, scope 289          // id: %135
  %136 = struct_extract %134 : $UInt, #UInt._value, scope 289 // user: %138
  dealloc_stack %131 : $*τ_0_0, scope 289         // id: %137
  %138 = builtin "cmp_slt_Int64"(%108 : $Builtin.Int64, %136 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %139
  br bb23(%138 : $Builtin.Int1), scope 289        // id: %139

bb20:                                             // Preds: bb16
  %140 = integer_literal $Builtin.Int64, 64, scope 289 // user: %144
  %141 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %142
  %142 = apply %141<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %143
  %143 = struct_extract %142 : $Int, #Int._value, scope 289 // user: %144
  %144 = builtin "cmp_slt_Int64"(%140 : $Builtin.Int64, %143 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %145
  cond_br %144, bb22, bb21, scope 289             // id: %145

bb21:                                             // Preds: bb20
  %146 = alloc_stack $τ_0_0, scope 289            // users: %152, %150, %149, %147
  copy_addr %2 to [init] %146 : $*τ_0_0, scope 289 // id: %147
  %148 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %149
  %149 = apply %148<τ_0_0>(%146) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %151
  destroy_addr %146 : $*τ_0_0, scope 289          // id: %150
  %151 = struct_extract %149 : $UInt, #UInt._value, scope 289 // user: %153
  dealloc_stack %146 : $*τ_0_0, scope 289         // id: %152
  %153 = builtin "cmp_slt_Int64"(%108 : $Builtin.Int64, %151 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %154
  br bb23(%153 : $Builtin.Int1), scope 289        // id: %154

bb22:                                             // Preds: bb20
  %155 = alloc_stack $τ_0_0, scope 289            // users: %164, %163, %162, %159
  %156 = alloc_stack $Int, scope 289              // users: %160, %159, %157
  store %109 to [trivial] %156 : $*Int, scope 289 // id: %157
  %158 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %159
  %159 = apply %158<τ_0_0, Int>(%155, %156, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  dealloc_stack %156 : $*Int, scope 289           // id: %160
  %161 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %162
  %162 = apply %161<τ_0_0>(%155, %2, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %165
  destroy_addr %155 : $*τ_0_0, scope 289          // id: %163
  dealloc_stack %155 : $*τ_0_0, scope 289         // id: %164
  %165 = struct_extract %162 : $Bool, #Bool._value, scope 289 // user: %166
  br bb23(%165 : $Builtin.Int1), scope 289        // id: %166

// %167                                           // user: %168
bb23(%167 : $Builtin.Int1):                       // Preds: bb22 bb21 bb19 bb18
  cond_br %167, bb64, bb24, scope 289             // id: %168

bb24:                                             // Preds: bb23
  %169 = alloc_stack $τ_0_0, scope 289            // users: %401, %399, %398, %321, %305, %300, %187, %173, %170
  copy_addr %2 to [init] %169 : $*τ_0_0, scope 289 // id: %170
  %171 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %174
  %172 = alloc_stack $τ_0_0, scope 289            // users: %396, %180, %179, %176, %173
  copy_addr %169 to [init] %172 : $*τ_0_0, scope 289 // id: %173
  %174 = struct_extract %171 : $Bool, #Bool._value, scope 289 // user: %175
  cond_br %174, bb26, bb25, scope 289             // id: %175

bb25:                                             // Preds: bb24
  destroy_addr %172 : $*τ_0_0, scope 289          // id: %176
  br bb45, scope 289                              // id: %177

bb26:                                             // Preds: bb24
  %178 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // users: %268, %226, %210, %179
  %179 = apply %178<τ_0_0>(%172) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %182
  destroy_addr %172 : $*τ_0_0, scope 289          // id: %180
  %181 = integer_literal $Builtin.Int64, 64, scope 289 // users: %270, %228, %212, %183
  %182 = struct_extract %179 : $Int, #Int._value, scope 289 // user: %183
  %183 = builtin "cmp_slt_Int64"(%181 : $Builtin.Int64, %182 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %184
  cond_br %183, bb28, bb27, scope 289             // id: %184

bb27:                                             // Preds: bb26
  br bb45, scope 289                              // id: %185

bb28:                                             // Preds: bb26
  %186 = alloc_stack $τ_0_0, scope 289            // users: %297, %295, %282, %276, %268, %263, %244, %239, %226, %218, %214, %210, %187
  copy_addr %169 to [init] %186 : $*τ_0_0, scope 289 // id: %187
  %188 = string_literal utf8 "Not enough bits to represent a signed value", scope 289 // user: %190
  %189 = integer_literal $Builtin.Word, 43, scope 289 // user: %192
  %190 = builtin "ptrtoint_Word"(%188 : $Builtin.RawPointer) : $Builtin.Word, scope 289 // user: %192
  %191 = integer_literal $Builtin.Int8, 2, scope 289 // users: %416, %196, %192
  %192 = struct $StaticString (%190 : $Builtin.Word, %189 : $Builtin.Word, %191 : $Builtin.Int8), scope 289 // user: %420
  %193 = string_literal utf8 "Swift/Integers.swift", scope 289 // user: %195
  %194 = integer_literal $Builtin.Word, 20, scope 289 // user: %196
  %195 = builtin "ptrtoint_Word"(%193 : $Builtin.RawPointer) : $Builtin.Word, scope 289 // user: %196
  %196 = struct $StaticString (%195 : $Builtin.Word, %194 : $Builtin.Word, %191 : $Builtin.Int8), scope 289 // user: %420
  %197 = integer_literal $Builtin.Int64, 3537, scope 289 // user: %198
  %198 = struct $UInt (%197 : $Builtin.Int64), scope 289 // user: %420
  debug_step , scope 289                          // id: %199
  %200 = alloc_stack $Int, scope 289              // users: %291, %274, %261, %215, %203
  %201 = integer_literal $Builtin.Int64, -9223372036854775808, scope 289 // users: %251, %224, %288, %202
  %202 = struct $Int (%201 : $Builtin.Int64), scope 289 // user: %203
  store %202 to [trivial] %200 : $*Int, scope 289 // id: %203
  %204 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %205
  %205 = struct_extract %204 : $Bool, #Bool._value, scope 289 // user: %206
  cond_br %205, bb39, bb29, scope 289             // id: %206

bb29:                                             // Preds: bb28
  %207 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %208
  %208 = struct_extract %207 : $Bool, #Bool._value, scope 289 // user: %209
  cond_br %208, bb33, bb30, scope 289             // id: %209

bb30:                                             // Preds: bb29
  %210 = apply %178<τ_0_0>(%186) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %211
  %211 = struct_extract %210 : $Int, #Int._value, scope 289 // user: %212
  %212 = builtin "cmp_slt_Int64"(%211 : $Builtin.Int64, %181 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %213
  cond_br %212, bb32, bb31, scope 289             // id: %213

bb31:                                             // Preds: bb30
  destroy_addr %186 : $*τ_0_0, scope 289          // id: %214
  dealloc_stack %200 : $*Int, scope 289           // id: %215
  br bb44, scope 289                              // id: %216

bb32:                                             // Preds: bb30
  %217 = alloc_stack $τ_0_0, scope 289            // users: %223, %221, %220, %218
  copy_addr %186 to [init] %217 : $*τ_0_0, scope 289 // id: %218
  %219 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %220
  %220 = apply %219<τ_0_0>(%217) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %222
  destroy_addr %217 : $*τ_0_0, scope 289          // id: %221
  %222 = struct_extract %220 : $UInt, #UInt._value, scope 289 // user: %224
  dealloc_stack %217 : $*τ_0_0, scope 289         // id: %223
  %224 = builtin "cmp_slt_Int64"(%222 : $Builtin.Int64, %201 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %225
  br bb42(%224 : $Builtin.Int1), scope 289        // id: %225

bb33:                                             // Preds: bb29
  %226 = apply %178<τ_0_0>(%186) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %227
  %227 = struct_extract %226 : $Int, #Int._value, scope 289 // user: %228
  %228 = builtin "cmp_slt_Int64"(%181 : $Builtin.Int64, %227 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %229
  cond_br %228, bb38, bb34, scope 289             // id: %229

bb34:                                             // Preds: bb33
  %230 = integer_literal $Builtin.IntLiteral, 0, scope 289 // user: %234
  %231 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 289 // user: %234
  %232 = alloc_stack $τ_0_0.IntegerLiteralType, scope 289 // users: %242, %237, %234
  %233 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %234
  %234 = apply %233<τ_0_0.IntegerLiteralType>(%232, %230, %231) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %235 = alloc_stack $τ_0_0, scope 289            // users: %241, %240, %239, %237
  %236 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %237
  %237 = apply %236<τ_0_0>(%235, %232, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %238 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %239
  %239 = apply %238<τ_0_0>(%186, %235, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %245
  destroy_addr %235 : $*τ_0_0, scope 289          // id: %240
  dealloc_stack %235 : $*τ_0_0, scope 289         // id: %241
  dealloc_stack %232 : $*τ_0_0.IntegerLiteralType, scope 289 // id: %242
  %243 = alloc_stack $τ_0_0, scope 289            // users: %257, %253, %249, %248, %244
  copy_addr %186 to [init] %243 : $*τ_0_0, scope 289 // id: %244
  %245 = struct_extract %239 : $Bool, #Bool._value, scope 289 // user: %246
  cond_br %245, bb36, bb35, scope 289             // id: %246

bb35:                                             // Preds: bb34
  %247 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %248
  %248 = apply %247<τ_0_0>(%243) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %250
  destroy_addr %243 : $*τ_0_0, scope 289          // id: %249
  %250 = struct_extract %248 : $UInt, #UInt._value, scope 289 // user: %251
  %251 = builtin "cmp_slt_Int64"(%250 : $Builtin.Int64, %201 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %252
  br bb37(%251 : $Builtin.Int1), scope 289        // id: %252

bb36:                                             // Preds: bb34
  destroy_addr %243 : $*τ_0_0, scope 289          // id: %253
  %254 = integer_literal $Builtin.Int1, -1, scope 289 // user: %255
  br bb37(%254 : $Builtin.Int1), scope 289        // id: %255

// %256                                           // user: %258
bb37(%256 : $Builtin.Int1):                       // Preds: bb36 bb35
  dealloc_stack %243 : $*τ_0_0, scope 289         // id: %257
  br bb42(%256 : $Builtin.Int1), scope 289        // id: %258

bb38:                                             // Preds: bb33
  %259 = alloc_stack $τ_0_0, scope 289            // users: %265, %264, %263, %261
  %260 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %261
  %261 = apply %260<τ_0_0, Int>(%259, %200, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %262 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %263
  %263 = apply %262<τ_0_0>(%186, %259, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %266
  destroy_addr %259 : $*τ_0_0, scope 289          // id: %264
  dealloc_stack %259 : $*τ_0_0, scope 289         // id: %265
  %266 = struct_extract %263 : $Bool, #Bool._value, scope 289 // user: %267
  br bb42(%266 : $Builtin.Int1), scope 289        // id: %267

bb39:                                             // Preds: bb28
  %268 = apply %178<τ_0_0>(%186) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %269
  %269 = struct_extract %268 : $Int, #Int._value, scope 289 // user: %270
  %270 = builtin "cmp_slt_Int64"(%269 : $Builtin.Int64, %181 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %271
  cond_br %270, bb41, bb40, scope 289             // id: %271

bb40:                                             // Preds: bb39
  %272 = alloc_stack $τ_0_0, scope 289            // users: %278, %277, %276, %274
  %273 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %274
  %274 = apply %273<τ_0_0, Int>(%272, %200, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %275 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %276
  %276 = apply %275<τ_0_0>(%186, %272, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %279
  destroy_addr %272 : $*τ_0_0, scope 289          // id: %277
  dealloc_stack %272 : $*τ_0_0, scope 289         // id: %278
  %279 = struct_extract %276 : $Bool, #Bool._value, scope 289 // user: %280
  br bb42(%279 : $Builtin.Int1), scope 289        // id: %280

bb41:                                             // Preds: bb39
  %281 = alloc_stack $τ_0_0, scope 289            // users: %287, %285, %284, %282
  copy_addr %186 to [init] %281 : $*τ_0_0, scope 289 // id: %282
  %283 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %284
  %284 = apply %283<τ_0_0>(%281) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %286
  destroy_addr %281 : $*τ_0_0, scope 289          // id: %285
  %286 = struct_extract %284 : $UInt, #UInt._value, scope 289 // user: %288
  dealloc_stack %281 : $*τ_0_0, scope 289         // id: %287
  %288 = builtin "cmp_slt_Int64"(%286 : $Builtin.Int64, %201 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %289
  br bb42(%288 : $Builtin.Int1), scope 289        // id: %289

// %290                                           // user: %293
bb42(%290 : $Builtin.Int1):                       // Preds: bb41 bb40 bb38 bb37 bb32
  dealloc_stack %200 : $*Int, scope 289           // id: %291
  %292 = integer_literal $Builtin.Int1, 0, scope 289 // user: %293
  %293 = builtin "int_expect_Int1"(%290 : $Builtin.Int1, %292 : $Builtin.Int1) : $Builtin.Int1, scope 289 // user: %294
  cond_br %293, bb63, bb43, scope 289             // id: %294

bb43:                                             // Preds: bb42
  destroy_addr %186 : $*τ_0_0, scope 289          // id: %295
  br bb44, scope 289                              // id: %296

bb44:                                             // Preds: bb43 bb31
  dealloc_stack %186 : $*τ_0_0, scope 289         // id: %297
  br bb45, scope 289                              // id: %298

bb45:                                             // Preds: bb44 bb27 bb25
  %299 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // users: %365, %341, %307, %300
  %300 = apply %299<τ_0_0>(%169) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %302
  %301 = integer_literal $Builtin.Int64, 64, scope 289 // users: %367, %343, %310, %303
  %302 = struct_extract %300 : $Int, #Int._value, scope 289 // user: %303
  %303 = builtin "cmp_slt_Int64"(%301 : $Builtin.Int64, %302 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %306
  %304 = alloc_stack $τ_0_0, scope 289            // users: %395, %318, %308, %307, %305
  copy_addr %169 to [init] %304 : $*τ_0_0, scope 289 // id: %305
  cond_br %303, bb51, bb46, scope 289             // id: %306

bb46:                                             // Preds: bb45
  %307 = apply %299<τ_0_0>(%304) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %309
  destroy_addr %304 : $*τ_0_0, scope 289          // id: %308
  %309 = struct_extract %307 : $Int, #Int._value, scope 289 // user: %310
  %310 = builtin "cmp_eq_Int64"(%309 : $Builtin.Int64, %301 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %311
  cond_br %310, bb48, bb47, scope 289             // id: %311

bb47:                                             // Preds: bb46
  br bb61, scope 289                              // id: %312

bb48:                                             // Preds: bb46
  %313 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %314
  %314 = struct_extract %313 : $Bool, #Bool._value, scope 289 // user: %315
  cond_br %314, bb50, bb49, scope 289             // id: %315

bb49:                                             // Preds: bb48
  br bb52, scope 289                              // id: %316

bb50:                                             // Preds: bb48
  br bb61, scope 289                              // id: %317

bb51:                                             // Preds: bb45
  destroy_addr %304 : $*τ_0_0, scope 289          // id: %318
  br bb52, scope 289                              // id: %319

bb52:                                             // Preds: bb51 bb49
  %320 = alloc_stack $τ_0_0, scope 289            // users: %393, %391, %381, %370, %365, %358, %351, %341, %321
  copy_addr %169 to [init] %320 : $*τ_0_0, scope 289 // id: %321
  %322 = string_literal utf8 "Not enough bits to represent the passed value", scope 289 // user: %324
  %323 = integer_literal $Builtin.Word, 45, scope 289 // user: %326
  %324 = builtin "ptrtoint_Word"(%322 : $Builtin.RawPointer) : $Builtin.Word, scope 289 // user: %326
  %325 = integer_literal $Builtin.Int8, 2, scope 289 // users: %407, %330, %326
  %326 = struct $StaticString (%324 : $Builtin.Word, %323 : $Builtin.Word, %325 : $Builtin.Int8), scope 289 // user: %411
  %327 = string_literal utf8 "Swift/Integers.swift", scope 289 // user: %329
  %328 = integer_literal $Builtin.Word, 20, scope 289 // user: %330
  %329 = builtin "ptrtoint_Word"(%327 : $Builtin.RawPointer) : $Builtin.Word, scope 289 // user: %330
  %330 = struct $StaticString (%329 : $Builtin.Word, %328 : $Builtin.Word, %325 : $Builtin.Int8), scope 289 // user: %411
  %331 = integer_literal $Builtin.Int64, 3543, scope 289 // user: %332
  %332 = struct $UInt (%331 : $Builtin.Int64), scope 289 // user: %411
  debug_step , scope 289                          // id: %333
  %334 = alloc_stack $Int, scope 289              // users: %387, %379, %337
  %335 = integer_literal $Builtin.Int64, 9223372036854775807, scope 289 // user: %336
  %336 = struct $Int (%335 : $Builtin.Int64), scope 289 // users: %346, %337
  store %336 to [trivial] %334 : $*Int, scope 289 // id: %337
  %338 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 289 // user: %339
  %339 = struct_extract %338 : $Bool, #Bool._value, scope 289 // user: %340
  cond_br %339, bb56, bb53, scope 289             // id: %340

bb53:                                             // Preds: bb52
  %341 = apply %299<τ_0_0>(%320) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %342
  %342 = struct_extract %341 : $Int, #Int._value, scope 289 // user: %343
  %343 = builtin "cmp_slt_Int64"(%342 : $Builtin.Int64, %301 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %344
  cond_br %343, bb55, bb54, scope 289             // id: %344

bb54:                                             // Preds: bb53
  %345 = alloc_stack $Int, scope 289              // users: %355, %349, %346
  store %336 to [trivial] %345 : $*Int, scope 289 // id: %346
  %347 = alloc_stack $τ_0_0, scope 289            // users: %353, %352, %351, %349
  %348 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %349
  %349 = apply %348<τ_0_0, Int>(%347, %345, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %350 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %351
  %351 = apply %350<τ_0_0>(%347, %320, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %354
  destroy_addr %347 : $*τ_0_0, scope 289          // id: %352
  dealloc_stack %347 : $*τ_0_0, scope 289         // id: %353
  %354 = struct_extract %351 : $Bool, #Bool._value, scope 289 // user: %356
  dealloc_stack %345 : $*Int, scope 289           // id: %355
  br bb59(%354 : $Builtin.Int1), scope 289        // id: %356

bb55:                                             // Preds: bb53
  %357 = alloc_stack $τ_0_0, scope 289            // users: %362, %361, %360, %358
  copy_addr %320 to [init] %357 : $*τ_0_0, scope 289 // id: %358
  %359 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %360
  %360 = apply %359<τ_0_0>(%357) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289
  destroy_addr %357 : $*τ_0_0, scope 289          // id: %361
  dealloc_stack %357 : $*τ_0_0, scope 289         // id: %362
  %363 = integer_literal $Builtin.Int1, 0, scope 289 // user: %364
  br bb59(%363 : $Builtin.Int1), scope 289        // id: %364

bb56:                                             // Preds: bb52
  %365 = apply %299<τ_0_0>(%320) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 289 // user: %366
  %366 = struct_extract %365 : $Int, #Int._value, scope 289 // user: %367
  %367 = builtin "cmp_slt_Int64"(%301 : $Builtin.Int64, %366 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %368
  cond_br %367, bb58, bb57, scope 289             // id: %368

bb57:                                             // Preds: bb56
  %369 = alloc_stack $τ_0_0, scope 289            // users: %374, %373, %372, %370
  copy_addr %320 to [init] %369 : $*τ_0_0, scope 289 // id: %370
  %371 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %372
  %372 = apply %371<τ_0_0>(%369) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289
  destroy_addr %369 : $*τ_0_0, scope 289          // id: %373
  dealloc_stack %369 : $*τ_0_0, scope 289         // id: %374
  %375 = integer_literal $Builtin.Int1, 0, scope 289 // user: %376
  br bb59(%375 : $Builtin.Int1), scope 289        // id: %376

bb58:                                             // Preds: bb56
  %377 = alloc_stack $τ_0_0, scope 289            // users: %383, %382, %381, %379
  %378 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289 // user: %379
  %379 = apply %378<τ_0_0, Int>(%377, %334, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 289
  %380 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %381
  %381 = apply %380<τ_0_0>(%377, %320, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 289 // user: %384
  destroy_addr %377 : $*τ_0_0, scope 289          // id: %382
  dealloc_stack %377 : $*τ_0_0, scope 289         // id: %383
  %384 = struct_extract %381 : $Bool, #Bool._value, scope 289 // user: %385
  br bb59(%384 : $Builtin.Int1), scope 289        // id: %385

// %386                                           // user: %389
bb59(%386 : $Builtin.Int1):                       // Preds: bb58 bb57 bb55 bb54
  dealloc_stack %334 : $*Int, scope 289           // id: %387
  %388 = integer_literal $Builtin.Int1, 0, scope 289 // user: %389
  %389 = builtin "int_expect_Int1"(%386 : $Builtin.Int1, %388 : $Builtin.Int1) : $Builtin.Int1, scope 289 // user: %390
  cond_br %389, bb62, bb60, scope 289             // id: %390

bb60:                                             // Preds: bb59
  destroy_addr %320 : $*τ_0_0, scope 289          // id: %391
  debug_step , scope 289                          // id: %392
  dealloc_stack %320 : $*τ_0_0, scope 289         // id: %393
  br bb61, scope 289                              // id: %394

bb61:                                             // Preds: bb60 bb50 bb47
  dealloc_stack %304 : $*τ_0_0, scope 289         // id: %395
  dealloc_stack %172 : $*τ_0_0, scope 289         // id: %396
  %397 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %398
  %398 = apply %397<τ_0_0>(%169) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 289 // user: %400
  destroy_addr %169 : $*τ_0_0, scope 289          // id: %399
  %400 = struct_extract %398 : $UInt, #UInt._value, scope 289 // user: %402
  dealloc_stack %169 : $*τ_0_0, scope 289         // id: %401
  %402 = struct $Int (%400 : $Builtin.Int64), scope 289 // user: %403
  br bb66(%402 : $Int), scope 289                 // id: %403

bb62:                                             // Preds: bb59
  %404 = string_literal utf8 "Fatal error", scope 289 // user: %406
  %405 = integer_literal $Builtin.Word, 11, scope 289 // user: %407
  %406 = builtin "ptrtoint_Word"(%404 : $Builtin.RawPointer) : $Builtin.Word, scope 289 // user: %407
  %407 = struct $StaticString (%406 : $Builtin.Word, %405 : $Builtin.Word, %325 : $Builtin.Int8), scope 289 // user: %411
  %408 = integer_literal $Builtin.Int32, 1, scope 289 // user: %409
  %409 = struct $UInt32 (%408 : $Builtin.Int32), scope 289 // user: %411
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %410 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 289 // user: %411
  %411 = apply %410(%407, %326, %330, %332, %409) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 289
  unreachable , scope 289                         // id: %412

bb63:                                             // Preds: bb42
  %413 = string_literal utf8 "Fatal error", scope 289 // user: %415
  %414 = integer_literal $Builtin.Word, 11, scope 289 // user: %416
  %415 = builtin "ptrtoint_Word"(%413 : $Builtin.RawPointer) : $Builtin.Word, scope 289 // user: %416
  %416 = struct $StaticString (%415 : $Builtin.Word, %414 : $Builtin.Word, %191 : $Builtin.Int8), scope 289 // user: %420
  %417 = integer_literal $Builtin.Int32, 1, scope 289 // user: %418
  %418 = struct $UInt32 (%417 : $Builtin.Int32), scope 289 // user: %420
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %419 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 289 // user: %420
  %420 = apply %419(%416, %192, %196, %198, %418) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 289
  unreachable , scope 289                         // id: %421

bb64:                                             // Preds: bb23
  br bb66(%109 : $Int), scope 289                 // id: %422

bb65:                                             // Preds: bb14
  br bb66(%6 : $Int), scope 289                   // id: %423

// %424                                           // users: %439, %428
bb66(%424 : $Int):                                // Preds: bb65 bb64 bb61
  %425 = destructure_struct %4 : $UInt8, scope 289 // users: %457, %443
  %426 = integer_literal $Builtin.Int8, 0, scope 289 // users: %449, %438
  %427 = integer_literal $Builtin.Int64, 0, scope 289 // users: %450, %429
  %428 = struct_extract %424 : $Int, #Int._value, scope 289 // users: %450, %445, %434, %429
  %429 = builtin "cmp_slt_Int64"(%428 : $Builtin.Int64, %427 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %431
  %430 = integer_literal $Builtin.Int1, 0, scope 289 // user: %431
  %431 = builtin "int_expect_Int1"(%429 : $Builtin.Int1, %430 : $Builtin.Int1) : $Builtin.Int1, scope 289 // user: %432
  cond_br %431, bb70, bb67, scope 289             // id: %432

bb67:                                             // Preds: bb66
  %433 = integer_literal $Builtin.Int64, 8, scope 289 // user: %434
  %434 = builtin "cmp_slt_Int64"(%428 : $Builtin.Int64, %433 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %436
  %435 = integer_literal $Builtin.Int1, -1, scope 289 // user: %436
  %436 = builtin "int_expect_Int1"(%434 : $Builtin.Int1, %435 : $Builtin.Int1) : $Builtin.Int1, scope 289 // user: %437
  cond_br %436, bb69, bb68, scope 289             // id: %437

bb68:                                             // Preds: bb67
  br bb73(%426 : $Builtin.Int8), scope 289        // id: %438

bb69:                                             // Preds: bb67
  %439 = destructure_struct %424 : $Int, scope 289 // user: %440
  %440 = builtin "truncOrBitCast_Int64_Int8"(%439 : $Builtin.Int64) : $Builtin.Int8, scope 289 // user: %442
  %441 = integer_literal $Builtin.Int8, 7, scope 289 // user: %442
  %442 = builtin "and_Int8"(%440 : $Builtin.Int8, %441 : $Builtin.Int8) : $Builtin.Int8, scope 289 // user: %443
  %443 = builtin "lshr_Int8"(%425 : $Builtin.Int8, %442 : $Builtin.Int8) : $Builtin.Int8, scope 289 // user: %444
  br bb73(%443 : $Builtin.Int8), scope 289        // id: %444

bb70:                                             // Preds: bb66
  %445 = builtin "cmp_slt_Int64"(%5 : $Builtin.Int64, %428 : $Builtin.Int64) : $Builtin.Int1, scope 289 // user: %447
  %446 = integer_literal $Builtin.Int1, -1, scope 289 // users: %450, %447
  %447 = builtin "int_expect_Int1"(%445 : $Builtin.Int1, %446 : $Builtin.Int1) : $Builtin.Int1, scope 289 // user: %448
  cond_br %447, bb72, bb71, scope 289             // id: %448

bb71:                                             // Preds: bb70
  br bb73(%426 : $Builtin.Int8), scope 289        // id: %449

bb72:                                             // Preds: bb70
  %450 = builtin "ssub_with_overflow_Int64"(%427 : $Builtin.Int64, %428 : $Builtin.Int64, %446 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 289 // user: %451
  (%451, %452) = destructure_tuple %450 : $(Builtin.Int64, Builtin.Int1), scope 289 // users: %454, %453
  cond_fail %452 : $Builtin.Int1, "arithmetic overflow", scope 289 // id: %453
  %454 = builtin "truncOrBitCast_Int64_Int8"(%451 : $Builtin.Int64) : $Builtin.Int8, scope 289 // user: %456
  %455 = integer_literal $Builtin.Int8, 7, scope 289 // user: %456
  %456 = builtin "and_Int8"(%454 : $Builtin.Int8, %455 : $Builtin.Int8) : $Builtin.Int8, scope 289 // user: %457
  %457 = builtin "shl_Int8"(%425 : $Builtin.Int8, %456 : $Builtin.Int8) : $Builtin.Int8, scope 289 // user: %458
  br bb73(%457 : $Builtin.Int8), scope 289        // id: %458

// %459                                           // user: %460
bb73(%459 : $Builtin.Int8):                       // Preds: bb72 bb71 bb69 bb68
  %460 = struct $UInt8 (%459 : $Builtin.Int8), scope 289 // user: %461
  store %460 to [trivial] %0 : $*UInt8, scope 289 // id: %461
  %462 = tuple (), scope 289                      // user: %463
  return %462 : $(), scope 289                    // id: %463
} // end sil function '$ss5UInt8VSzsSz2ggoiyxx_qd__tSzRd__lFZTW'

sil_scope 290 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz3ggeoiyyxz_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@inout UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> () }

// protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 290
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz3ggeoiyyxz_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@inout UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> () {
// %0                                             // users: %457, %423
// %1                                             // users: %169, %161, %146, %141, %131, %125, %114, %96, %90, %78, %72, %51, %46, %32, %23, %16
bb0(%0 : $*UInt8, %1 : $*τ_0_0, %2 : $@thick UInt8.Type):
  %3 = integer_literal $Builtin.Int64, 0, scope 290 // users: %446, %427
  %4 = integer_literal $Builtin.Int1, -1, scope 290 // users: %446, %443, %433, %253, %61
  %5 = integer_literal $Builtin.Int64, -8, scope 290 // users: %442, %102, %58, %29, %6
  %6 = struct $Int (%5 : $Builtin.Int64), scope 290 // users: %421, %85, %67
  %7 = metatype $@thick τ_0_0.Type, scope 290     // users: %379, %377, %349, %347, %336, %311, %274, %272, %261, %259, %238, %236, %206, %203, %170, %161, %158, %125, %122, %109, %90, %87, %72, %69, %46, %44, %12, %9
  %8 = witness_method $τ_0_0, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // users: %336, %311, %206, %203, %170, %109, %12, %9
  %9 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %10
  %10 = struct_extract %9 : $Bool, #Bool._value, scope 290 // user: %11
  cond_br %10, bb11, bb1, scope 290               // id: %11

bb1:                                              // Preds: bb0
  %12 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %13
  %13 = struct_extract %12 : $Bool, #Bool._value, scope 290 // user: %14
  cond_br %13, bb5, bb2, scope 290                // id: %14

bb2:                                              // Preds: bb1
  %15 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %16
  %16 = apply %15<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %18
  %17 = integer_literal $Builtin.Int64, 64, scope 290 // user: %19
  %18 = struct_extract %16 : $Int, #Int._value, scope 290 // user: %19
  %19 = builtin "cmp_slt_Int64"(%18 : $Builtin.Int64, %17 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %20
  cond_br %19, bb4, bb3, scope 290                // id: %20

bb3:                                              // Preds: bb2
  br bb16, scope 290                              // id: %21

bb4:                                              // Preds: bb2
  %22 = alloc_stack $τ_0_0, scope 290             // users: %28, %26, %25, %23
  copy_addr %1 to [init] %22 : $*τ_0_0, scope 290 // id: %23
  %24 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %25
  %25 = apply %24<τ_0_0>(%22) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %27
  destroy_addr %22 : $*τ_0_0, scope 290           // id: %26
  %27 = struct_extract %25 : $UInt, #UInt._value, scope 290 // user: %29
  dealloc_stack %22 : $*τ_0_0, scope 290          // id: %28
  %29 = builtin "cmp_slt_Int64"(%27 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %30
  br bb14(%29 : $Builtin.Int1), scope 290         // id: %30

bb5:                                              // Preds: bb1
  %31 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %32
  %32 = apply %31<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %34
  %33 = integer_literal $Builtin.Int64, 64, scope 290 // user: %35
  %34 = struct_extract %32 : $Int, #Int._value, scope 290 // user: %35
  %35 = builtin "cmp_slt_Int64"(%33 : $Builtin.Int64, %34 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %36
  cond_br %35, bb10, bb6, scope 290               // id: %36

bb6:                                              // Preds: bb5
  %37 = integer_literal $Builtin.IntLiteral, 0, scope 290 // user: %41
  %38 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 290 // user: %41
  %39 = alloc_stack $τ_0_0.IntegerLiteralType, scope 290 // users: %49, %44, %41
  %40 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %41
  %41 = apply %40<τ_0_0.IntegerLiteralType>(%39, %37, %38) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %42 = alloc_stack $τ_0_0, scope 290             // users: %48, %47, %46, %44
  %43 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %44
  %44 = apply %43<τ_0_0>(%42, %39, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %45 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %46
  %46 = apply %45<τ_0_0>(%1, %42, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %52
  destroy_addr %42 : $*τ_0_0, scope 290           // id: %47
  dealloc_stack %42 : $*τ_0_0, scope 290          // id: %48
  dealloc_stack %39 : $*τ_0_0.IntegerLiteralType, scope 290 // id: %49
  %50 = alloc_stack $τ_0_0, scope 290             // users: %63, %60, %56, %55, %51
  copy_addr %1 to [init] %50 : $*τ_0_0, scope 290 // id: %51
  %52 = struct_extract %46 : $Bool, #Bool._value, scope 290 // user: %53
  cond_br %52, bb8, bb7, scope 290                // id: %53

bb7:                                              // Preds: bb6
  %54 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %55
  %55 = apply %54<τ_0_0>(%50) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %57
  destroy_addr %50 : $*τ_0_0, scope 290           // id: %56
  %57 = struct_extract %55 : $UInt, #UInt._value, scope 290 // user: %58
  %58 = builtin "cmp_slt_Int64"(%57 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %59
  br bb9(%58 : $Builtin.Int1), scope 290          // id: %59

bb8:                                              // Preds: bb6
  destroy_addr %50 : $*τ_0_0, scope 290           // id: %60
  br bb9(%4 : $Builtin.Int1), scope 290           // id: %61

// %62                                            // user: %64
bb9(%62 : $Builtin.Int1):                         // Preds: bb8 bb7
  dealloc_stack %50 : $*τ_0_0, scope 290          // id: %63
  br bb14(%62 : $Builtin.Int1), scope 290         // id: %64

bb10:                                             // Preds: bb5
  %65 = alloc_stack $τ_0_0, scope 290             // users: %74, %73, %72, %69
  %66 = alloc_stack $Int, scope 290               // users: %70, %69, %67
  store %6 to [trivial] %66 : $*Int, scope 290    // id: %67
  %68 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %69
  %69 = apply %68<τ_0_0, Int>(%65, %66, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  dealloc_stack %66 : $*Int, scope 290            // id: %70
  %71 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %72
  %72 = apply %71<τ_0_0>(%1, %65, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %75
  destroy_addr %65 : $*τ_0_0, scope 290           // id: %73
  dealloc_stack %65 : $*τ_0_0, scope 290          // id: %74
  %75 = struct_extract %72 : $Bool, #Bool._value, scope 290 // user: %76
  br bb14(%75 : $Builtin.Int1), scope 290         // id: %76

bb11:                                             // Preds: bb0
  %77 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %78
  %78 = apply %77<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %80
  %79 = integer_literal $Builtin.Int64, 64, scope 290 // user: %81
  %80 = struct_extract %78 : $Int, #Int._value, scope 290 // user: %81
  %81 = builtin "cmp_slt_Int64"(%80 : $Builtin.Int64, %79 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %82
  cond_br %81, bb13, bb12, scope 290              // id: %82

bb12:                                             // Preds: bb11
  %83 = alloc_stack $τ_0_0, scope 290             // users: %92, %91, %90, %87
  %84 = alloc_stack $Int, scope 290               // users: %88, %87, %85
  store %6 to [trivial] %84 : $*Int, scope 290    // id: %85
  %86 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %87
  %87 = apply %86<τ_0_0, Int>(%83, %84, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  dealloc_stack %84 : $*Int, scope 290            // id: %88
  %89 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %90
  %90 = apply %89<τ_0_0>(%1, %83, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %93
  destroy_addr %83 : $*τ_0_0, scope 290           // id: %91
  dealloc_stack %83 : $*τ_0_0, scope 290          // id: %92
  %93 = struct_extract %90 : $Bool, #Bool._value, scope 290 // user: %94
  br bb14(%93 : $Builtin.Int1), scope 290         // id: %94

bb13:                                             // Preds: bb11
  %95 = alloc_stack $τ_0_0, scope 290             // users: %101, %99, %98, %96
  copy_addr %1 to [init] %95 : $*τ_0_0, scope 290 // id: %96
  %97 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %98
  %98 = apply %97<τ_0_0>(%95) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %100
  destroy_addr %95 : $*τ_0_0, scope 290           // id: %99
  %100 = struct_extract %98 : $UInt, #UInt._value, scope 290 // user: %102
  dealloc_stack %95 : $*τ_0_0, scope 290          // id: %101
  %102 = builtin "cmp_slt_Int64"(%100 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %103
  br bb14(%102 : $Builtin.Int1), scope 290        // id: %103

// %104                                           // user: %105
bb14(%104 : $Builtin.Int1):                       // Preds: bb13 bb12 bb10 bb9 bb4
  cond_br %104, bb65, bb15, scope 290             // id: %105

bb15:                                             // Preds: bb14
  br bb16, scope 290                              // id: %106

bb16:                                             // Preds: bb15 bb3
  %107 = integer_literal $Builtin.Int64, 8, scope 290 // users: %152, %137, %108
  %108 = struct $Int (%107 : $Builtin.Int64), scope 290 // users: %420, %156, %120
  %109 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %110
  %110 = struct_extract %109 : $Bool, #Bool._value, scope 290 // user: %111
  cond_br %110, bb20, bb17, scope 290             // id: %111

bb17:                                             // Preds: bb16
  %112 = integer_literal $Builtin.Int64, 64, scope 290 // user: %116
  %113 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %114
  %114 = apply %113<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %115
  %115 = struct_extract %114 : $Int, #Int._value, scope 290 // user: %116
  %116 = builtin "cmp_slt_Int64"(%115 : $Builtin.Int64, %112 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %117
  cond_br %116, bb19, bb18, scope 290             // id: %117

bb18:                                             // Preds: bb17
  %118 = alloc_stack $τ_0_0, scope 290            // users: %127, %126, %125, %122
  %119 = alloc_stack $Int, scope 290              // users: %123, %122, %120
  store %108 to [trivial] %119 : $*Int, scope 290 // id: %120
  %121 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %122
  %122 = apply %121<τ_0_0, Int>(%118, %119, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  dealloc_stack %119 : $*Int, scope 290           // id: %123
  %124 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %125
  %125 = apply %124<τ_0_0>(%118, %1, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %128
  destroy_addr %118 : $*τ_0_0, scope 290          // id: %126
  dealloc_stack %118 : $*τ_0_0, scope 290         // id: %127
  %128 = struct_extract %125 : $Bool, #Bool._value, scope 290 // user: %129
  br bb23(%128 : $Builtin.Int1), scope 290        // id: %129

bb19:                                             // Preds: bb17
  %130 = alloc_stack $τ_0_0, scope 290            // users: %136, %134, %133, %131
  copy_addr %1 to [init] %130 : $*τ_0_0, scope 290 // id: %131
  %132 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %133
  %133 = apply %132<τ_0_0>(%130) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %135
  destroy_addr %130 : $*τ_0_0, scope 290          // id: %134
  %135 = struct_extract %133 : $UInt, #UInt._value, scope 290 // user: %137
  dealloc_stack %130 : $*τ_0_0, scope 290         // id: %136
  %137 = builtin "cmp_slt_Int64"(%107 : $Builtin.Int64, %135 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %138
  br bb23(%137 : $Builtin.Int1), scope 290        // id: %138

bb20:                                             // Preds: bb16
  %139 = integer_literal $Builtin.Int64, 64, scope 290 // user: %143
  %140 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %141
  %141 = apply %140<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %142
  %142 = struct_extract %141 : $Int, #Int._value, scope 290 // user: %143
  %143 = builtin "cmp_slt_Int64"(%139 : $Builtin.Int64, %142 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %144
  cond_br %143, bb22, bb21, scope 290             // id: %144

bb21:                                             // Preds: bb20
  %145 = alloc_stack $τ_0_0, scope 290            // users: %151, %149, %148, %146
  copy_addr %1 to [init] %145 : $*τ_0_0, scope 290 // id: %146
  %147 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %148
  %148 = apply %147<τ_0_0>(%145) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %150
  destroy_addr %145 : $*τ_0_0, scope 290          // id: %149
  %150 = struct_extract %148 : $UInt, #UInt._value, scope 290 // user: %152
  dealloc_stack %145 : $*τ_0_0, scope 290         // id: %151
  %152 = builtin "cmp_slt_Int64"(%107 : $Builtin.Int64, %150 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %153
  br bb23(%152 : $Builtin.Int1), scope 290        // id: %153

bb22:                                             // Preds: bb20
  %154 = alloc_stack $τ_0_0, scope 290            // users: %163, %162, %161, %158
  %155 = alloc_stack $Int, scope 290              // users: %159, %158, %156
  store %108 to [trivial] %155 : $*Int, scope 290 // id: %156
  %157 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %158
  %158 = apply %157<τ_0_0, Int>(%154, %155, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  dealloc_stack %155 : $*Int, scope 290           // id: %159
  %160 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %161
  %161 = apply %160<τ_0_0>(%154, %1, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %164
  destroy_addr %154 : $*τ_0_0, scope 290          // id: %162
  dealloc_stack %154 : $*τ_0_0, scope 290         // id: %163
  %164 = struct_extract %161 : $Bool, #Bool._value, scope 290 // user: %165
  br bb23(%164 : $Builtin.Int1), scope 290        // id: %165

// %166                                           // user: %167
bb23(%166 : $Builtin.Int1):                       // Preds: bb22 bb21 bb19 bb18
  cond_br %166, bb64, bb24, scope 290             // id: %167

bb24:                                             // Preds: bb23
  %168 = alloc_stack $τ_0_0, scope 290            // users: %399, %397, %396, %319, %303, %298, %186, %172, %169
  copy_addr %1 to [init] %168 : $*τ_0_0, scope 290 // id: %169
  %170 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %173
  %171 = alloc_stack $τ_0_0, scope 290            // users: %394, %179, %178, %175, %172
  copy_addr %168 to [init] %171 : $*τ_0_0, scope 290 // id: %172
  %173 = struct_extract %170 : $Bool, #Bool._value, scope 290 // user: %174
  cond_br %173, bb26, bb25, scope 290             // id: %174

bb25:                                             // Preds: bb24
  destroy_addr %171 : $*τ_0_0, scope 290          // id: %175
  br bb45, scope 290                              // id: %176

bb26:                                             // Preds: bb24
  %177 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // users: %266, %225, %209, %178
  %178 = apply %177<τ_0_0>(%171) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %181
  destroy_addr %171 : $*τ_0_0, scope 290          // id: %179
  %180 = integer_literal $Builtin.Int64, 64, scope 290 // users: %268, %227, %211, %182
  %181 = struct_extract %178 : $Int, #Int._value, scope 290 // user: %182
  %182 = builtin "cmp_slt_Int64"(%180 : $Builtin.Int64, %181 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %183
  cond_br %182, bb28, bb27, scope 290             // id: %183

bb27:                                             // Preds: bb26
  br bb45, scope 290                              // id: %184

bb28:                                             // Preds: bb26
  %185 = alloc_stack $τ_0_0, scope 290            // users: %295, %293, %280, %274, %266, %261, %243, %238, %225, %217, %213, %209, %186
  copy_addr %168 to [init] %185 : $*τ_0_0, scope 290 // id: %186
  %187 = string_literal utf8 "Not enough bits to represent a signed value", scope 290 // user: %189
  %188 = integer_literal $Builtin.Word, 43, scope 290 // user: %191
  %189 = builtin "ptrtoint_Word"(%187 : $Builtin.RawPointer) : $Builtin.Word, scope 290 // user: %191
  %190 = integer_literal $Builtin.Int8, 2, scope 290 // users: %414, %195, %191
  %191 = struct $StaticString (%189 : $Builtin.Word, %188 : $Builtin.Word, %190 : $Builtin.Int8), scope 290 // user: %418
  %192 = string_literal utf8 "Swift/Integers.swift", scope 290 // user: %194
  %193 = integer_literal $Builtin.Word, 20, scope 290 // user: %195
  %194 = builtin "ptrtoint_Word"(%192 : $Builtin.RawPointer) : $Builtin.Word, scope 290 // user: %195
  %195 = struct $StaticString (%194 : $Builtin.Word, %193 : $Builtin.Word, %190 : $Builtin.Int8), scope 290 // user: %418
  %196 = integer_literal $Builtin.Int64, 3537, scope 290 // user: %197
  %197 = struct $UInt (%196 : $Builtin.Int64), scope 290 // user: %418
  debug_step , scope 290                          // id: %198
  %199 = alloc_stack $Int, scope 290              // users: %289, %272, %259, %214, %202
  %200 = integer_literal $Builtin.Int64, -9223372036854775808, scope 290 // users: %250, %223, %286, %201
  %201 = struct $Int (%200 : $Builtin.Int64), scope 290 // user: %202
  store %201 to [trivial] %199 : $*Int, scope 290 // id: %202
  %203 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %204
  %204 = struct_extract %203 : $Bool, #Bool._value, scope 290 // user: %205
  cond_br %204, bb39, bb29, scope 290             // id: %205

bb29:                                             // Preds: bb28
  %206 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %207
  %207 = struct_extract %206 : $Bool, #Bool._value, scope 290 // user: %208
  cond_br %207, bb33, bb30, scope 290             // id: %208

bb30:                                             // Preds: bb29
  %209 = apply %177<τ_0_0>(%185) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %210
  %210 = struct_extract %209 : $Int, #Int._value, scope 290 // user: %211
  %211 = builtin "cmp_slt_Int64"(%210 : $Builtin.Int64, %180 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %212
  cond_br %211, bb32, bb31, scope 290             // id: %212

bb31:                                             // Preds: bb30
  destroy_addr %185 : $*τ_0_0, scope 290          // id: %213
  dealloc_stack %199 : $*Int, scope 290           // id: %214
  br bb44, scope 290                              // id: %215

bb32:                                             // Preds: bb30
  %216 = alloc_stack $τ_0_0, scope 290            // users: %222, %220, %219, %217
  copy_addr %185 to [init] %216 : $*τ_0_0, scope 290 // id: %217
  %218 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %219
  %219 = apply %218<τ_0_0>(%216) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %221
  destroy_addr %216 : $*τ_0_0, scope 290          // id: %220
  %221 = struct_extract %219 : $UInt, #UInt._value, scope 290 // user: %223
  dealloc_stack %216 : $*τ_0_0, scope 290         // id: %222
  %223 = builtin "cmp_slt_Int64"(%221 : $Builtin.Int64, %200 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %224
  br bb42(%223 : $Builtin.Int1), scope 290        // id: %224

bb33:                                             // Preds: bb29
  %225 = apply %177<τ_0_0>(%185) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %226
  %226 = struct_extract %225 : $Int, #Int._value, scope 290 // user: %227
  %227 = builtin "cmp_slt_Int64"(%180 : $Builtin.Int64, %226 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %228
  cond_br %227, bb38, bb34, scope 290             // id: %228

bb34:                                             // Preds: bb33
  %229 = integer_literal $Builtin.IntLiteral, 0, scope 290 // user: %233
  %230 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 290 // user: %233
  %231 = alloc_stack $τ_0_0.IntegerLiteralType, scope 290 // users: %241, %236, %233
  %232 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %233
  %233 = apply %232<τ_0_0.IntegerLiteralType>(%231, %229, %230) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %234 = alloc_stack $τ_0_0, scope 290            // users: %240, %239, %238, %236
  %235 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %236
  %236 = apply %235<τ_0_0>(%234, %231, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %237 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %238
  %238 = apply %237<τ_0_0>(%185, %234, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %244
  destroy_addr %234 : $*τ_0_0, scope 290          // id: %239
  dealloc_stack %234 : $*τ_0_0, scope 290         // id: %240
  dealloc_stack %231 : $*τ_0_0.IntegerLiteralType, scope 290 // id: %241
  %242 = alloc_stack $τ_0_0, scope 290            // users: %255, %252, %248, %247, %243
  copy_addr %185 to [init] %242 : $*τ_0_0, scope 290 // id: %243
  %244 = struct_extract %238 : $Bool, #Bool._value, scope 290 // user: %245
  cond_br %244, bb36, bb35, scope 290             // id: %245

bb35:                                             // Preds: bb34
  %246 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %247
  %247 = apply %246<τ_0_0>(%242) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %249
  destroy_addr %242 : $*τ_0_0, scope 290          // id: %248
  %249 = struct_extract %247 : $UInt, #UInt._value, scope 290 // user: %250
  %250 = builtin "cmp_slt_Int64"(%249 : $Builtin.Int64, %200 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %251
  br bb37(%250 : $Builtin.Int1), scope 290        // id: %251

bb36:                                             // Preds: bb34
  destroy_addr %242 : $*τ_0_0, scope 290          // id: %252
  br bb37(%4 : $Builtin.Int1), scope 290          // id: %253

// %254                                           // user: %256
bb37(%254 : $Builtin.Int1):                       // Preds: bb36 bb35
  dealloc_stack %242 : $*τ_0_0, scope 290         // id: %255
  br bb42(%254 : $Builtin.Int1), scope 290        // id: %256

bb38:                                             // Preds: bb33
  %257 = alloc_stack $τ_0_0, scope 290            // users: %263, %262, %261, %259
  %258 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %259
  %259 = apply %258<τ_0_0, Int>(%257, %199, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %260 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %261
  %261 = apply %260<τ_0_0>(%185, %257, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %264
  destroy_addr %257 : $*τ_0_0, scope 290          // id: %262
  dealloc_stack %257 : $*τ_0_0, scope 290         // id: %263
  %264 = struct_extract %261 : $Bool, #Bool._value, scope 290 // user: %265
  br bb42(%264 : $Builtin.Int1), scope 290        // id: %265

bb39:                                             // Preds: bb28
  %266 = apply %177<τ_0_0>(%185) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %267
  %267 = struct_extract %266 : $Int, #Int._value, scope 290 // user: %268
  %268 = builtin "cmp_slt_Int64"(%267 : $Builtin.Int64, %180 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %269
  cond_br %268, bb41, bb40, scope 290             // id: %269

bb40:                                             // Preds: bb39
  %270 = alloc_stack $τ_0_0, scope 290            // users: %276, %275, %274, %272
  %271 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %272
  %272 = apply %271<τ_0_0, Int>(%270, %199, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %273 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %274
  %274 = apply %273<τ_0_0>(%185, %270, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %277
  destroy_addr %270 : $*τ_0_0, scope 290          // id: %275
  dealloc_stack %270 : $*τ_0_0, scope 290         // id: %276
  %277 = struct_extract %274 : $Bool, #Bool._value, scope 290 // user: %278
  br bb42(%277 : $Builtin.Int1), scope 290        // id: %278

bb41:                                             // Preds: bb39
  %279 = alloc_stack $τ_0_0, scope 290            // users: %285, %283, %282, %280
  copy_addr %185 to [init] %279 : $*τ_0_0, scope 290 // id: %280
  %281 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %282
  %282 = apply %281<τ_0_0>(%279) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %284
  destroy_addr %279 : $*τ_0_0, scope 290          // id: %283
  %284 = struct_extract %282 : $UInt, #UInt._value, scope 290 // user: %286
  dealloc_stack %279 : $*τ_0_0, scope 290         // id: %285
  %286 = builtin "cmp_slt_Int64"(%284 : $Builtin.Int64, %200 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %287
  br bb42(%286 : $Builtin.Int1), scope 290        // id: %287

// %288                                           // user: %291
bb42(%288 : $Builtin.Int1):                       // Preds: bb41 bb40 bb38 bb37 bb32
  dealloc_stack %199 : $*Int, scope 290           // id: %289
  %290 = integer_literal $Builtin.Int1, 0, scope 290 // user: %291
  %291 = builtin "int_expect_Int1"(%288 : $Builtin.Int1, %290 : $Builtin.Int1) : $Builtin.Int1, scope 290 // user: %292
  cond_br %291, bb63, bb43, scope 290             // id: %292

bb43:                                             // Preds: bb42
  destroy_addr %185 : $*τ_0_0, scope 290          // id: %293
  br bb44, scope 290                              // id: %294

bb44:                                             // Preds: bb43 bb31
  dealloc_stack %185 : $*τ_0_0, scope 290         // id: %295
  br bb45, scope 290                              // id: %296

bb45:                                             // Preds: bb44 bb27 bb25
  %297 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // users: %363, %339, %305, %298
  %298 = apply %297<τ_0_0>(%168) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %300
  %299 = integer_literal $Builtin.Int64, 64, scope 290 // users: %365, %341, %308, %301
  %300 = struct_extract %298 : $Int, #Int._value, scope 290 // user: %301
  %301 = builtin "cmp_slt_Int64"(%299 : $Builtin.Int64, %300 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %304
  %302 = alloc_stack $τ_0_0, scope 290            // users: %393, %316, %306, %305, %303
  copy_addr %168 to [init] %302 : $*τ_0_0, scope 290 // id: %303
  cond_br %301, bb51, bb46, scope 290             // id: %304

bb46:                                             // Preds: bb45
  %305 = apply %297<τ_0_0>(%302) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %307
  destroy_addr %302 : $*τ_0_0, scope 290          // id: %306
  %307 = struct_extract %305 : $Int, #Int._value, scope 290 // user: %308
  %308 = builtin "cmp_eq_Int64"(%307 : $Builtin.Int64, %299 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %309
  cond_br %308, bb48, bb47, scope 290             // id: %309

bb47:                                             // Preds: bb46
  br bb61, scope 290                              // id: %310

bb48:                                             // Preds: bb46
  %311 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %312
  %312 = struct_extract %311 : $Bool, #Bool._value, scope 290 // user: %313
  cond_br %312, bb50, bb49, scope 290             // id: %313

bb49:                                             // Preds: bb48
  br bb52, scope 290                              // id: %314

bb50:                                             // Preds: bb48
  br bb61, scope 290                              // id: %315

bb51:                                             // Preds: bb45
  destroy_addr %302 : $*τ_0_0, scope 290          // id: %316
  br bb52, scope 290                              // id: %317

bb52:                                             // Preds: bb51 bb49
  %318 = alloc_stack $τ_0_0, scope 290            // users: %391, %389, %379, %368, %363, %356, %349, %339, %319
  copy_addr %168 to [init] %318 : $*τ_0_0, scope 290 // id: %319
  %320 = string_literal utf8 "Not enough bits to represent the passed value", scope 290 // user: %322
  %321 = integer_literal $Builtin.Word, 45, scope 290 // user: %324
  %322 = builtin "ptrtoint_Word"(%320 : $Builtin.RawPointer) : $Builtin.Word, scope 290 // user: %324
  %323 = integer_literal $Builtin.Int8, 2, scope 290 // users: %405, %328, %324
  %324 = struct $StaticString (%322 : $Builtin.Word, %321 : $Builtin.Word, %323 : $Builtin.Int8), scope 290 // user: %409
  %325 = string_literal utf8 "Swift/Integers.swift", scope 290 // user: %327
  %326 = integer_literal $Builtin.Word, 20, scope 290 // user: %328
  %327 = builtin "ptrtoint_Word"(%325 : $Builtin.RawPointer) : $Builtin.Word, scope 290 // user: %328
  %328 = struct $StaticString (%327 : $Builtin.Word, %326 : $Builtin.Word, %323 : $Builtin.Int8), scope 290 // user: %409
  %329 = integer_literal $Builtin.Int64, 3543, scope 290 // user: %330
  %330 = struct $UInt (%329 : $Builtin.Int64), scope 290 // user: %409
  debug_step , scope 290                          // id: %331
  %332 = alloc_stack $Int, scope 290              // users: %385, %377, %335
  %333 = integer_literal $Builtin.Int64, 9223372036854775807, scope 290 // user: %334
  %334 = struct $Int (%333 : $Builtin.Int64), scope 290 // users: %344, %335
  store %334 to [trivial] %332 : $*Int, scope 290 // id: %335
  %336 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 290 // user: %337
  %337 = struct_extract %336 : $Bool, #Bool._value, scope 290 // user: %338
  cond_br %337, bb56, bb53, scope 290             // id: %338

bb53:                                             // Preds: bb52
  %339 = apply %297<τ_0_0>(%318) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %340
  %340 = struct_extract %339 : $Int, #Int._value, scope 290 // user: %341
  %341 = builtin "cmp_slt_Int64"(%340 : $Builtin.Int64, %299 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %342
  cond_br %341, bb55, bb54, scope 290             // id: %342

bb54:                                             // Preds: bb53
  %343 = alloc_stack $Int, scope 290              // users: %353, %347, %344
  store %334 to [trivial] %343 : $*Int, scope 290 // id: %344
  %345 = alloc_stack $τ_0_0, scope 290            // users: %351, %350, %349, %347
  %346 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %347
  %347 = apply %346<τ_0_0, Int>(%345, %343, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %348 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %349
  %349 = apply %348<τ_0_0>(%345, %318, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %352
  destroy_addr %345 : $*τ_0_0, scope 290          // id: %350
  dealloc_stack %345 : $*τ_0_0, scope 290         // id: %351
  %352 = struct_extract %349 : $Bool, #Bool._value, scope 290 // user: %354
  dealloc_stack %343 : $*Int, scope 290           // id: %353
  br bb59(%352 : $Builtin.Int1), scope 290        // id: %354

bb55:                                             // Preds: bb53
  %355 = alloc_stack $τ_0_0, scope 290            // users: %360, %359, %358, %356
  copy_addr %318 to [init] %355 : $*τ_0_0, scope 290 // id: %356
  %357 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %358
  %358 = apply %357<τ_0_0>(%355) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290
  destroy_addr %355 : $*τ_0_0, scope 290          // id: %359
  dealloc_stack %355 : $*τ_0_0, scope 290         // id: %360
  %361 = integer_literal $Builtin.Int1, 0, scope 290 // user: %362
  br bb59(%361 : $Builtin.Int1), scope 290        // id: %362

bb56:                                             // Preds: bb52
  %363 = apply %297<τ_0_0>(%318) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 290 // user: %364
  %364 = struct_extract %363 : $Int, #Int._value, scope 290 // user: %365
  %365 = builtin "cmp_slt_Int64"(%299 : $Builtin.Int64, %364 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %366
  cond_br %365, bb58, bb57, scope 290             // id: %366

bb57:                                             // Preds: bb56
  %367 = alloc_stack $τ_0_0, scope 290            // users: %372, %371, %370, %368
  copy_addr %318 to [init] %367 : $*τ_0_0, scope 290 // id: %368
  %369 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %370
  %370 = apply %369<τ_0_0>(%367) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290
  destroy_addr %367 : $*τ_0_0, scope 290          // id: %371
  dealloc_stack %367 : $*τ_0_0, scope 290         // id: %372
  %373 = integer_literal $Builtin.Int1, 0, scope 290 // user: %374
  br bb59(%373 : $Builtin.Int1), scope 290        // id: %374

bb58:                                             // Preds: bb56
  %375 = alloc_stack $τ_0_0, scope 290            // users: %381, %380, %379, %377
  %376 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290 // user: %377
  %377 = apply %376<τ_0_0, Int>(%375, %332, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 290
  %378 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %379
  %379 = apply %378<τ_0_0>(%375, %318, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 290 // user: %382
  destroy_addr %375 : $*τ_0_0, scope 290          // id: %380
  dealloc_stack %375 : $*τ_0_0, scope 290         // id: %381
  %382 = struct_extract %379 : $Bool, #Bool._value, scope 290 // user: %383
  br bb59(%382 : $Builtin.Int1), scope 290        // id: %383

// %384                                           // user: %387
bb59(%384 : $Builtin.Int1):                       // Preds: bb58 bb57 bb55 bb54
  dealloc_stack %332 : $*Int, scope 290           // id: %385
  %386 = integer_literal $Builtin.Int1, 0, scope 290 // user: %387
  %387 = builtin "int_expect_Int1"(%384 : $Builtin.Int1, %386 : $Builtin.Int1) : $Builtin.Int1, scope 290 // user: %388
  cond_br %387, bb62, bb60, scope 290             // id: %388

bb60:                                             // Preds: bb59
  destroy_addr %318 : $*τ_0_0, scope 290          // id: %389
  debug_step , scope 290                          // id: %390
  dealloc_stack %318 : $*τ_0_0, scope 290         // id: %391
  br bb61, scope 290                              // id: %392

bb61:                                             // Preds: bb60 bb50 bb47
  dealloc_stack %302 : $*τ_0_0, scope 290         // id: %393
  dealloc_stack %171 : $*τ_0_0, scope 290         // id: %394
  %395 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %396
  %396 = apply %395<τ_0_0>(%168) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 290 // user: %398
  destroy_addr %168 : $*τ_0_0, scope 290          // id: %397
  %398 = struct_extract %396 : $UInt, #UInt._value, scope 290 // user: %400
  dealloc_stack %168 : $*τ_0_0, scope 290         // id: %399
  %400 = struct $Int (%398 : $Builtin.Int64), scope 290 // user: %401
  br bb66(%400 : $Int), scope 290                 // id: %401

bb62:                                             // Preds: bb59
  %402 = string_literal utf8 "Fatal error", scope 290 // user: %404
  %403 = integer_literal $Builtin.Word, 11, scope 290 // user: %405
  %404 = builtin "ptrtoint_Word"(%402 : $Builtin.RawPointer) : $Builtin.Word, scope 290 // user: %405
  %405 = struct $StaticString (%404 : $Builtin.Word, %403 : $Builtin.Word, %323 : $Builtin.Int8), scope 290 // user: %409
  %406 = integer_literal $Builtin.Int32, 1, scope 290 // user: %407
  %407 = struct $UInt32 (%406 : $Builtin.Int32), scope 290 // user: %409
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %408 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 290 // user: %409
  %409 = apply %408(%405, %324, %328, %330, %407) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 290
  unreachable , scope 290                         // id: %410

bb63:                                             // Preds: bb42
  %411 = string_literal utf8 "Fatal error", scope 290 // user: %413
  %412 = integer_literal $Builtin.Word, 11, scope 290 // user: %414
  %413 = builtin "ptrtoint_Word"(%411 : $Builtin.RawPointer) : $Builtin.Word, scope 290 // user: %414
  %414 = struct $StaticString (%413 : $Builtin.Word, %412 : $Builtin.Word, %190 : $Builtin.Int8), scope 290 // user: %418
  %415 = integer_literal $Builtin.Int32, 1, scope 290 // user: %416
  %416 = struct $UInt32 (%415 : $Builtin.Int32), scope 290 // user: %418
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %417 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 290 // user: %418
  %418 = apply %417(%414, %191, %195, %197, %416) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 290
  unreachable , scope 290                         // id: %419

bb64:                                             // Preds: bb23
  br bb66(%108 : $Int), scope 290                 // id: %420

bb65:                                             // Preds: bb14
  br bb66(%6 : $Int), scope 290                   // id: %421

// %422                                           // users: %436, %426
bb66(%422 : $Int):                                // Preds: bb65 bb64 bb61
  %423 = load [trivial] %0 : $*UInt8, scope 290   // user: %424
  %424 = destructure_struct %423 : $UInt8, scope 290 // users: %453, %440
  %425 = integer_literal $Builtin.Int8, 0, scope 290 // users: %445, %435
  %426 = struct_extract %422 : $Int, #Int._value, scope 290 // users: %446, %442, %432, %427
  %427 = builtin "cmp_slt_Int64"(%426 : $Builtin.Int64, %3 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %429
  %428 = integer_literal $Builtin.Int1, 0, scope 290 // user: %429
  %429 = builtin "int_expect_Int1"(%427 : $Builtin.Int1, %428 : $Builtin.Int1) : $Builtin.Int1, scope 290 // user: %430
  cond_br %429, bb70, bb67, scope 290             // id: %430

bb67:                                             // Preds: bb66
  %431 = integer_literal $Builtin.Int64, 8, scope 290 // user: %432
  %432 = builtin "cmp_slt_Int64"(%426 : $Builtin.Int64, %431 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %433
  %433 = builtin "int_expect_Int1"(%432 : $Builtin.Int1, %4 : $Builtin.Int1) : $Builtin.Int1, scope 290 // user: %434
  cond_br %433, bb69, bb68, scope 290             // id: %434

bb68:                                             // Preds: bb67
  br bb73(%425 : $Builtin.Int8), scope 290        // id: %435

bb69:                                             // Preds: bb67
  %436 = destructure_struct %422 : $Int, scope 290 // user: %437
  %437 = builtin "truncOrBitCast_Int64_Int8"(%436 : $Builtin.Int64) : $Builtin.Int8, scope 290 // user: %439
  %438 = integer_literal $Builtin.Int8, 7, scope 290 // user: %439
  %439 = builtin "and_Int8"(%437 : $Builtin.Int8, %438 : $Builtin.Int8) : $Builtin.Int8, scope 290 // user: %440
  %440 = builtin "lshr_Int8"(%424 : $Builtin.Int8, %439 : $Builtin.Int8) : $Builtin.Int8, scope 290 // user: %441
  br bb73(%440 : $Builtin.Int8), scope 290        // id: %441

bb70:                                             // Preds: bb66
  %442 = builtin "cmp_slt_Int64"(%5 : $Builtin.Int64, %426 : $Builtin.Int64) : $Builtin.Int1, scope 290 // user: %443
  %443 = builtin "int_expect_Int1"(%442 : $Builtin.Int1, %4 : $Builtin.Int1) : $Builtin.Int1, scope 290 // user: %444
  cond_br %443, bb72, bb71, scope 290             // id: %444

bb71:                                             // Preds: bb70
  br bb73(%425 : $Builtin.Int8), scope 290        // id: %445

bb72:                                             // Preds: bb70
  %446 = builtin "ssub_with_overflow_Int64"(%3 : $Builtin.Int64, %426 : $Builtin.Int64, %4 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 290 // user: %447
  (%447, %448) = destructure_tuple %446 : $(Builtin.Int64, Builtin.Int1), scope 290 // users: %450, %449
  cond_fail %448 : $Builtin.Int1, "arithmetic overflow", scope 290 // id: %449
  %450 = builtin "truncOrBitCast_Int64_Int8"(%447 : $Builtin.Int64) : $Builtin.Int8, scope 290 // user: %452
  %451 = integer_literal $Builtin.Int8, 7, scope 290 // user: %452
  %452 = builtin "and_Int8"(%450 : $Builtin.Int8, %451 : $Builtin.Int8) : $Builtin.Int8, scope 290 // user: %453
  %453 = builtin "shl_Int8"(%424 : $Builtin.Int8, %452 : $Builtin.Int8) : $Builtin.Int8, scope 290 // user: %454
  br bb73(%453 : $Builtin.Int8), scope 290        // id: %454

// %455                                           // user: %456
bb73(%455 : $Builtin.Int8):                       // Preds: bb72 bb71 bb69 bb68
  %456 = struct $UInt8 (%455 : $Builtin.Int8), scope 290 // user: %457
  store %456 to [trivial] %0 : $*UInt8, scope 290 // id: %457
  %458 = tuple (), scope 290                      // user: %459
  return %458 : $(), scope 290                    // id: %459
} // end sil function '$ss5UInt8VSzsSz3ggeoiyyxz_qd__tSzRd__lFZTW'

sil_scope 291 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz2lloiyxx_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for static BinaryInteger.<< infix<A>(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 291
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz2lloiyxx_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %469
// %1                                             // user: %4
// %2                                             // users: %170, %162, %147, %142, %132, %126, %115, %97, %91, %79, %73, %51, %46, %32, %23, %16
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*τ_0_0, %3 : $@thick UInt8.Type):
  %4 = load [trivial] %1 : $*UInt8, scope 291     // user: %433
  %5 = integer_literal $Builtin.Int64, -8, scope 291 // users: %453, %103, %58, %29, %6
  %6 = struct $Int (%5 : $Builtin.Int64), scope 291 // users: %431, %86, %68
  %7 = metatype $@thick τ_0_0.Type, scope 291     // users: %389, %387, %357, %355, %342, %317, %279, %277, %266, %264, %242, %240, %207, %204, %171, %162, %159, %126, %123, %110, %91, %88, %73, %70, %46, %44, %12, %9
  %8 = witness_method $τ_0_0, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // users: %342, %317, %207, %204, %171, %110, %12, %9
  %9 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %10
  %10 = struct_extract %9 : $Bool, #Bool._value, scope 291 // user: %11
  cond_br %10, bb11, bb1, scope 291               // id: %11

bb1:                                              // Preds: bb0
  %12 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %13
  %13 = struct_extract %12 : $Bool, #Bool._value, scope 291 // user: %14
  cond_br %13, bb5, bb2, scope 291                // id: %14

bb2:                                              // Preds: bb1
  %15 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %16
  %16 = apply %15<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %18
  %17 = integer_literal $Builtin.Int64, 64, scope 291 // user: %19
  %18 = struct_extract %16 : $Int, #Int._value, scope 291 // user: %19
  %19 = builtin "cmp_slt_Int64"(%18 : $Builtin.Int64, %17 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %20
  cond_br %19, bb4, bb3, scope 291                // id: %20

bb3:                                              // Preds: bb2
  br bb16, scope 291                              // id: %21

bb4:                                              // Preds: bb2
  %22 = alloc_stack $τ_0_0, scope 291             // users: %28, %26, %25, %23
  copy_addr %2 to [init] %22 : $*τ_0_0, scope 291 // id: %23
  %24 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %25
  %25 = apply %24<τ_0_0>(%22) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %27
  destroy_addr %22 : $*τ_0_0, scope 291           // id: %26
  %27 = struct_extract %25 : $UInt, #UInt._value, scope 291 // user: %29
  dealloc_stack %22 : $*τ_0_0, scope 291          // id: %28
  %29 = builtin "cmp_slt_Int64"(%27 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %30
  br bb14(%29 : $Builtin.Int1), scope 291         // id: %30

bb5:                                              // Preds: bb1
  %31 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %32
  %32 = apply %31<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %34
  %33 = integer_literal $Builtin.Int64, 64, scope 291 // user: %35
  %34 = struct_extract %32 : $Int, #Int._value, scope 291 // user: %35
  %35 = builtin "cmp_slt_Int64"(%33 : $Builtin.Int64, %34 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %36
  cond_br %35, bb10, bb6, scope 291               // id: %36

bb6:                                              // Preds: bb5
  %37 = integer_literal $Builtin.IntLiteral, 0, scope 291 // user: %41
  %38 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 291 // user: %41
  %39 = alloc_stack $τ_0_0.IntegerLiteralType, scope 291 // users: %49, %44, %41
  %40 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %41
  %41 = apply %40<τ_0_0.IntegerLiteralType>(%39, %37, %38) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %42 = alloc_stack $τ_0_0, scope 291             // users: %48, %47, %46, %44
  %43 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %44
  %44 = apply %43<τ_0_0>(%42, %39, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %45 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %46
  %46 = apply %45<τ_0_0>(%2, %42, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %52
  destroy_addr %42 : $*τ_0_0, scope 291           // id: %47
  dealloc_stack %42 : $*τ_0_0, scope 291          // id: %48
  dealloc_stack %39 : $*τ_0_0.IntegerLiteralType, scope 291 // id: %49
  %50 = alloc_stack $τ_0_0, scope 291             // users: %64, %60, %56, %55, %51
  copy_addr %2 to [init] %50 : $*τ_0_0, scope 291 // id: %51
  %52 = struct_extract %46 : $Bool, #Bool._value, scope 291 // user: %53
  cond_br %52, bb8, bb7, scope 291                // id: %53

bb7:                                              // Preds: bb6
  %54 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %55
  %55 = apply %54<τ_0_0>(%50) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %57
  destroy_addr %50 : $*τ_0_0, scope 291           // id: %56
  %57 = struct_extract %55 : $UInt, #UInt._value, scope 291 // user: %58
  %58 = builtin "cmp_slt_Int64"(%57 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %59
  br bb9(%58 : $Builtin.Int1), scope 291          // id: %59

bb8:                                              // Preds: bb6
  destroy_addr %50 : $*τ_0_0, scope 291           // id: %60
  %61 = integer_literal $Builtin.Int1, -1, scope 291 // user: %62
  br bb9(%61 : $Builtin.Int1), scope 291          // id: %62

// %63                                            // user: %65
bb9(%63 : $Builtin.Int1):                         // Preds: bb8 bb7
  dealloc_stack %50 : $*τ_0_0, scope 291          // id: %64
  br bb14(%63 : $Builtin.Int1), scope 291         // id: %65

bb10:                                             // Preds: bb5
  %66 = alloc_stack $τ_0_0, scope 291             // users: %75, %74, %73, %70
  %67 = alloc_stack $Int, scope 291               // users: %71, %70, %68
  store %6 to [trivial] %67 : $*Int, scope 291    // id: %68
  %69 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %70
  %70 = apply %69<τ_0_0, Int>(%66, %67, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  dealloc_stack %67 : $*Int, scope 291            // id: %71
  %72 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %73
  %73 = apply %72<τ_0_0>(%2, %66, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %76
  destroy_addr %66 : $*τ_0_0, scope 291           // id: %74
  dealloc_stack %66 : $*τ_0_0, scope 291          // id: %75
  %76 = struct_extract %73 : $Bool, #Bool._value, scope 291 // user: %77
  br bb14(%76 : $Builtin.Int1), scope 291         // id: %77

bb11:                                             // Preds: bb0
  %78 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %79
  %79 = apply %78<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %81
  %80 = integer_literal $Builtin.Int64, 64, scope 291 // user: %82
  %81 = struct_extract %79 : $Int, #Int._value, scope 291 // user: %82
  %82 = builtin "cmp_slt_Int64"(%81 : $Builtin.Int64, %80 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %83
  cond_br %82, bb13, bb12, scope 291              // id: %83

bb12:                                             // Preds: bb11
  %84 = alloc_stack $τ_0_0, scope 291             // users: %93, %92, %91, %88
  %85 = alloc_stack $Int, scope 291               // users: %89, %88, %86
  store %6 to [trivial] %85 : $*Int, scope 291    // id: %86
  %87 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %88
  %88 = apply %87<τ_0_0, Int>(%84, %85, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  dealloc_stack %85 : $*Int, scope 291            // id: %89
  %90 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %91
  %91 = apply %90<τ_0_0>(%2, %84, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %94
  destroy_addr %84 : $*τ_0_0, scope 291           // id: %92
  dealloc_stack %84 : $*τ_0_0, scope 291          // id: %93
  %94 = struct_extract %91 : $Bool, #Bool._value, scope 291 // user: %95
  br bb14(%94 : $Builtin.Int1), scope 291         // id: %95

bb13:                                             // Preds: bb11
  %96 = alloc_stack $τ_0_0, scope 291             // users: %102, %100, %99, %97
  copy_addr %2 to [init] %96 : $*τ_0_0, scope 291 // id: %97
  %98 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %99
  %99 = apply %98<τ_0_0>(%96) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %101
  destroy_addr %96 : $*τ_0_0, scope 291           // id: %100
  %101 = struct_extract %99 : $UInt, #UInt._value, scope 291 // user: %103
  dealloc_stack %96 : $*τ_0_0, scope 291          // id: %102
  %103 = builtin "cmp_slt_Int64"(%101 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %104
  br bb14(%103 : $Builtin.Int1), scope 291        // id: %104

// %105                                           // user: %106
bb14(%105 : $Builtin.Int1):                       // Preds: bb13 bb12 bb10 bb9 bb4
  cond_br %105, bb65, bb15, scope 291             // id: %106

bb15:                                             // Preds: bb14
  br bb16, scope 291                              // id: %107

bb16:                                             // Preds: bb15 bb3
  %108 = integer_literal $Builtin.Int64, 8, scope 291 // users: %153, %138, %109
  %109 = struct $Int (%108 : $Builtin.Int64), scope 291 // users: %430, %157, %121
  %110 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %111
  %111 = struct_extract %110 : $Bool, #Bool._value, scope 291 // user: %112
  cond_br %111, bb20, bb17, scope 291             // id: %112

bb17:                                             // Preds: bb16
  %113 = integer_literal $Builtin.Int64, 64, scope 291 // user: %117
  %114 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %115
  %115 = apply %114<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %116
  %116 = struct_extract %115 : $Int, #Int._value, scope 291 // user: %117
  %117 = builtin "cmp_slt_Int64"(%116 : $Builtin.Int64, %113 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %118
  cond_br %117, bb19, bb18, scope 291             // id: %118

bb18:                                             // Preds: bb17
  %119 = alloc_stack $τ_0_0, scope 291            // users: %128, %127, %126, %123
  %120 = alloc_stack $Int, scope 291              // users: %124, %123, %121
  store %109 to [trivial] %120 : $*Int, scope 291 // id: %121
  %122 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %123
  %123 = apply %122<τ_0_0, Int>(%119, %120, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  dealloc_stack %120 : $*Int, scope 291           // id: %124
  %125 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %126
  %126 = apply %125<τ_0_0>(%119, %2, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %129
  destroy_addr %119 : $*τ_0_0, scope 291          // id: %127
  dealloc_stack %119 : $*τ_0_0, scope 291         // id: %128
  %129 = struct_extract %126 : $Bool, #Bool._value, scope 291 // user: %130
  br bb23(%129 : $Builtin.Int1), scope 291        // id: %130

bb19:                                             // Preds: bb17
  %131 = alloc_stack $τ_0_0, scope 291            // users: %137, %135, %134, %132
  copy_addr %2 to [init] %131 : $*τ_0_0, scope 291 // id: %132
  %133 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %134
  %134 = apply %133<τ_0_0>(%131) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %136
  destroy_addr %131 : $*τ_0_0, scope 291          // id: %135
  %136 = struct_extract %134 : $UInt, #UInt._value, scope 291 // user: %138
  dealloc_stack %131 : $*τ_0_0, scope 291         // id: %137
  %138 = builtin "cmp_slt_Int64"(%108 : $Builtin.Int64, %136 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %139
  br bb23(%138 : $Builtin.Int1), scope 291        // id: %139

bb20:                                             // Preds: bb16
  %140 = integer_literal $Builtin.Int64, 64, scope 291 // user: %144
  %141 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %142
  %142 = apply %141<τ_0_0>(%2) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %143
  %143 = struct_extract %142 : $Int, #Int._value, scope 291 // user: %144
  %144 = builtin "cmp_slt_Int64"(%140 : $Builtin.Int64, %143 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %145
  cond_br %144, bb22, bb21, scope 291             // id: %145

bb21:                                             // Preds: bb20
  %146 = alloc_stack $τ_0_0, scope 291            // users: %152, %150, %149, %147
  copy_addr %2 to [init] %146 : $*τ_0_0, scope 291 // id: %147
  %148 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %149
  %149 = apply %148<τ_0_0>(%146) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %151
  destroy_addr %146 : $*τ_0_0, scope 291          // id: %150
  %151 = struct_extract %149 : $UInt, #UInt._value, scope 291 // user: %153
  dealloc_stack %146 : $*τ_0_0, scope 291         // id: %152
  %153 = builtin "cmp_slt_Int64"(%108 : $Builtin.Int64, %151 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %154
  br bb23(%153 : $Builtin.Int1), scope 291        // id: %154

bb22:                                             // Preds: bb20
  %155 = alloc_stack $τ_0_0, scope 291            // users: %164, %163, %162, %159
  %156 = alloc_stack $Int, scope 291              // users: %160, %159, %157
  store %109 to [trivial] %156 : $*Int, scope 291 // id: %157
  %158 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %159
  %159 = apply %158<τ_0_0, Int>(%155, %156, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  dealloc_stack %156 : $*Int, scope 291           // id: %160
  %161 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %162
  %162 = apply %161<τ_0_0>(%155, %2, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %165
  destroy_addr %155 : $*τ_0_0, scope 291          // id: %163
  dealloc_stack %155 : $*τ_0_0, scope 291         // id: %164
  %165 = struct_extract %162 : $Bool, #Bool._value, scope 291 // user: %166
  br bb23(%165 : $Builtin.Int1), scope 291        // id: %166

// %167                                           // user: %168
bb23(%167 : $Builtin.Int1):                       // Preds: bb22 bb21 bb19 bb18
  cond_br %167, bb64, bb24, scope 291             // id: %168

bb24:                                             // Preds: bb23
  %169 = alloc_stack $τ_0_0, scope 291            // users: %409, %407, %406, %325, %309, %304, %187, %173, %170
  copy_addr %2 to [init] %169 : $*τ_0_0, scope 291 // id: %170
  %171 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %174
  %172 = alloc_stack $τ_0_0, scope 291            // users: %404, %180, %179, %176, %173
  copy_addr %169 to [init] %172 : $*τ_0_0, scope 291 // id: %173
  %174 = struct_extract %171 : $Bool, #Bool._value, scope 291 // user: %175
  cond_br %174, bb26, bb25, scope 291             // id: %175

bb25:                                             // Preds: bb24
  destroy_addr %172 : $*τ_0_0, scope 291          // id: %176
  br bb45, scope 291                              // id: %177

bb26:                                             // Preds: bb24
  %178 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // users: %271, %229, %210, %179
  %179 = apply %178<τ_0_0>(%172) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %182
  destroy_addr %172 : $*τ_0_0, scope 291          // id: %180
  %181 = integer_literal $Builtin.Int64, 64, scope 291 // users: %273, %231, %212, %183
  %182 = struct_extract %179 : $Int, #Int._value, scope 291 // user: %183
  %183 = builtin "cmp_slt_Int64"(%181 : $Builtin.Int64, %182 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %184
  cond_br %183, bb28, bb27, scope 291             // id: %184

bb27:                                             // Preds: bb26
  br bb45, scope 291                              // id: %185

bb28:                                             // Preds: bb26
  %186 = alloc_stack $τ_0_0, scope 291            // users: %301, %299, %285, %279, %271, %266, %247, %242, %229, %221, %215, %210, %187
  copy_addr %169 to [init] %186 : $*τ_0_0, scope 291 // id: %187
  %188 = string_literal utf8 "Not enough bits to represent a signed value", scope 291 // user: %190
  %189 = integer_literal $Builtin.Word, 43, scope 291 // user: %192
  %190 = builtin "ptrtoint_Word"(%188 : $Builtin.RawPointer) : $Builtin.Word, scope 291 // user: %192
  %191 = integer_literal $Builtin.Int8, 2, scope 291 // users: %424, %196, %192
  %192 = struct $StaticString (%190 : $Builtin.Word, %189 : $Builtin.Word, %191 : $Builtin.Int8), scope 291 // user: %428
  %193 = string_literal utf8 "Swift/Integers.swift", scope 291 // user: %195
  %194 = integer_literal $Builtin.Word, 20, scope 291 // user: %196
  %195 = builtin "ptrtoint_Word"(%193 : $Builtin.RawPointer) : $Builtin.Word, scope 291 // user: %196
  %196 = struct $StaticString (%195 : $Builtin.Word, %194 : $Builtin.Word, %191 : $Builtin.Int8), scope 291 // user: %428
  %197 = integer_literal $Builtin.Int64, 3537, scope 291 // user: %198
  %198 = struct $UInt (%197 : $Builtin.Int64), scope 291 // user: %428
  debug_step , scope 291                          // id: %199
  %200 = alloc_stack $Int, scope 291              // users: %294, %277, %264, %218, %203
  %201 = integer_literal $Builtin.Int64, -9223372036854775808, scope 291 // users: %254, %227, %291, %202
  %202 = struct $Int (%201 : $Builtin.Int64), scope 291 // user: %203
  store %202 to [trivial] %200 : $*Int, scope 291 // id: %203
  %204 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %205
  %205 = struct_extract %204 : $Bool, #Bool._value, scope 291 // user: %206
  cond_br %205, bb39, bb29, scope 291             // id: %206

bb29:                                             // Preds: bb28
  %207 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %208
  %208 = struct_extract %207 : $Bool, #Bool._value, scope 291 // user: %209
  cond_br %208, bb33, bb30, scope 291             // id: %209

bb30:                                             // Preds: bb29
  %210 = apply %178<τ_0_0>(%186) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %211
  %211 = struct_extract %210 : $Int, #Int._value, scope 291 // user: %212
  %212 = builtin "cmp_slt_Int64"(%211 : $Builtin.Int64, %181 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %213
  cond_br %212, bb32, bb31, scope 291             // id: %213

bb31:                                             // Preds: bb30
  %214 = alloc_stack $τ_0_0, scope 291            // users: %217, %216, %215
  copy_addr %186 to [init] %214 : $*τ_0_0, scope 291 // id: %215
  destroy_addr %214 : $*τ_0_0, scope 291          // id: %216
  dealloc_stack %214 : $*τ_0_0, scope 291         // id: %217
  dealloc_stack %200 : $*Int, scope 291           // id: %218
  br bb44, scope 291                              // id: %219

bb32:                                             // Preds: bb30
  %220 = alloc_stack $τ_0_0, scope 291            // users: %226, %224, %223, %221
  copy_addr %186 to [init] %220 : $*τ_0_0, scope 291 // id: %221
  %222 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %223
  %223 = apply %222<τ_0_0>(%220) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %225
  destroy_addr %220 : $*τ_0_0, scope 291          // id: %224
  %225 = struct_extract %223 : $UInt, #UInt._value, scope 291 // user: %227
  dealloc_stack %220 : $*τ_0_0, scope 291         // id: %226
  %227 = builtin "cmp_slt_Int64"(%225 : $Builtin.Int64, %201 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %228
  br bb42(%227 : $Builtin.Int1), scope 291        // id: %228

bb33:                                             // Preds: bb29
  %229 = apply %178<τ_0_0>(%186) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %230
  %230 = struct_extract %229 : $Int, #Int._value, scope 291 // user: %231
  %231 = builtin "cmp_slt_Int64"(%181 : $Builtin.Int64, %230 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %232
  cond_br %231, bb38, bb34, scope 291             // id: %232

bb34:                                             // Preds: bb33
  %233 = integer_literal $Builtin.IntLiteral, 0, scope 291 // user: %237
  %234 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 291 // user: %237
  %235 = alloc_stack $τ_0_0.IntegerLiteralType, scope 291 // users: %245, %240, %237
  %236 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %237
  %237 = apply %236<τ_0_0.IntegerLiteralType>(%235, %233, %234) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %238 = alloc_stack $τ_0_0, scope 291            // users: %244, %243, %242, %240
  %239 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %240
  %240 = apply %239<τ_0_0>(%238, %235, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %241 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %242
  %242 = apply %241<τ_0_0>(%186, %238, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %248
  destroy_addr %238 : $*τ_0_0, scope 291          // id: %243
  dealloc_stack %238 : $*τ_0_0, scope 291         // id: %244
  dealloc_stack %235 : $*τ_0_0.IntegerLiteralType, scope 291 // id: %245
  %246 = alloc_stack $τ_0_0, scope 291            // users: %260, %256, %252, %251, %247
  copy_addr %186 to [init] %246 : $*τ_0_0, scope 291 // id: %247
  %248 = struct_extract %242 : $Bool, #Bool._value, scope 291 // user: %249
  cond_br %248, bb36, bb35, scope 291             // id: %249

bb35:                                             // Preds: bb34
  %250 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %251
  %251 = apply %250<τ_0_0>(%246) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %253
  destroy_addr %246 : $*τ_0_0, scope 291          // id: %252
  %253 = struct_extract %251 : $UInt, #UInt._value, scope 291 // user: %254
  %254 = builtin "cmp_slt_Int64"(%253 : $Builtin.Int64, %201 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %255
  br bb37(%254 : $Builtin.Int1), scope 291        // id: %255

bb36:                                             // Preds: bb34
  destroy_addr %246 : $*τ_0_0, scope 291          // id: %256
  %257 = integer_literal $Builtin.Int1, -1, scope 291 // user: %258
  br bb37(%257 : $Builtin.Int1), scope 291        // id: %258

// %259                                           // user: %261
bb37(%259 : $Builtin.Int1):                       // Preds: bb36 bb35
  dealloc_stack %246 : $*τ_0_0, scope 291         // id: %260
  br bb42(%259 : $Builtin.Int1), scope 291        // id: %261

bb38:                                             // Preds: bb33
  %262 = alloc_stack $τ_0_0, scope 291            // users: %268, %267, %266, %264
  %263 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %264
  %264 = apply %263<τ_0_0, Int>(%262, %200, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %265 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %266
  %266 = apply %265<τ_0_0>(%186, %262, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %269
  destroy_addr %262 : $*τ_0_0, scope 291          // id: %267
  dealloc_stack %262 : $*τ_0_0, scope 291         // id: %268
  %269 = struct_extract %266 : $Bool, #Bool._value, scope 291 // user: %270
  br bb42(%269 : $Builtin.Int1), scope 291        // id: %270

bb39:                                             // Preds: bb28
  %271 = apply %178<τ_0_0>(%186) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %272
  %272 = struct_extract %271 : $Int, #Int._value, scope 291 // user: %273
  %273 = builtin "cmp_slt_Int64"(%272 : $Builtin.Int64, %181 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %274
  cond_br %273, bb41, bb40, scope 291             // id: %274

bb40:                                             // Preds: bb39
  %275 = alloc_stack $τ_0_0, scope 291            // users: %281, %280, %279, %277
  %276 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %277
  %277 = apply %276<τ_0_0, Int>(%275, %200, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %278 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %279
  %279 = apply %278<τ_0_0>(%186, %275, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %282
  destroy_addr %275 : $*τ_0_0, scope 291          // id: %280
  dealloc_stack %275 : $*τ_0_0, scope 291         // id: %281
  %282 = struct_extract %279 : $Bool, #Bool._value, scope 291 // user: %283
  br bb42(%282 : $Builtin.Int1), scope 291        // id: %283

bb41:                                             // Preds: bb39
  %284 = alloc_stack $τ_0_0, scope 291            // users: %290, %288, %287, %285
  copy_addr %186 to [init] %284 : $*τ_0_0, scope 291 // id: %285
  %286 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %287
  %287 = apply %286<τ_0_0>(%284) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %289
  destroy_addr %284 : $*τ_0_0, scope 291          // id: %288
  %289 = struct_extract %287 : $UInt, #UInt._value, scope 291 // user: %291
  dealloc_stack %284 : $*τ_0_0, scope 291         // id: %290
  %291 = builtin "cmp_slt_Int64"(%289 : $Builtin.Int64, %201 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %292
  br bb42(%291 : $Builtin.Int1), scope 291        // id: %292

// %293                                           // user: %296
bb42(%293 : $Builtin.Int1):                       // Preds: bb41 bb40 bb38 bb37 bb32
  dealloc_stack %200 : $*Int, scope 291           // id: %294
  %295 = integer_literal $Builtin.Int1, 0, scope 291 // user: %296
  %296 = builtin "int_expect_Int1"(%293 : $Builtin.Int1, %295 : $Builtin.Int1) : $Builtin.Int1, scope 291 // user: %297
  cond_br %296, bb63, bb43, scope 291             // id: %297

bb43:                                             // Preds: bb42
  br bb44, scope 291                              // id: %298

bb44:                                             // Preds: bb43 bb31
  destroy_addr %186 : $*τ_0_0, scope 291          // id: %299
  debug_step , scope 291                          // id: %300
  dealloc_stack %186 : $*τ_0_0, scope 291         // id: %301
  br bb45, scope 291                              // id: %302

bb45:                                             // Preds: bb44 bb27 bb25
  %303 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // users: %373, %345, %311, %304
  %304 = apply %303<τ_0_0>(%169) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %306
  %305 = integer_literal $Builtin.Int64, 64, scope 291 // users: %375, %347, %314, %307
  %306 = struct_extract %304 : $Int, #Int._value, scope 291 // user: %307
  %307 = builtin "cmp_slt_Int64"(%305 : $Builtin.Int64, %306 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %310
  %308 = alloc_stack $τ_0_0, scope 291            // users: %403, %322, %312, %311, %309
  copy_addr %169 to [init] %308 : $*τ_0_0, scope 291 // id: %309
  cond_br %307, bb51, bb46, scope 291             // id: %310

bb46:                                             // Preds: bb45
  %311 = apply %303<τ_0_0>(%308) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %313
  destroy_addr %308 : $*τ_0_0, scope 291          // id: %312
  %313 = struct_extract %311 : $Int, #Int._value, scope 291 // user: %314
  %314 = builtin "cmp_eq_Int64"(%313 : $Builtin.Int64, %305 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %315
  cond_br %314, bb48, bb47, scope 291             // id: %315

bb47:                                             // Preds: bb46
  br bb61, scope 291                              // id: %316

bb48:                                             // Preds: bb46
  %317 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %318
  %318 = struct_extract %317 : $Bool, #Bool._value, scope 291 // user: %319
  cond_br %318, bb50, bb49, scope 291             // id: %319

bb49:                                             // Preds: bb48
  br bb52, scope 291                              // id: %320

bb50:                                             // Preds: bb48
  br bb61, scope 291                              // id: %321

bb51:                                             // Preds: bb45
  destroy_addr %308 : $*τ_0_0, scope 291          // id: %322
  br bb52, scope 291                              // id: %323

bb52:                                             // Preds: bb51 bb49
  %324 = alloc_stack $τ_0_0, scope 291            // users: %401, %399, %389, %378, %373, %366, %352, %345, %325
  copy_addr %169 to [init] %324 : $*τ_0_0, scope 291 // id: %325
  %326 = string_literal utf8 "Not enough bits to represent the passed value", scope 291 // user: %328
  %327 = integer_literal $Builtin.Word, 45, scope 291 // user: %330
  %328 = builtin "ptrtoint_Word"(%326 : $Builtin.RawPointer) : $Builtin.Word, scope 291 // user: %330
  %329 = integer_literal $Builtin.Int8, 2, scope 291 // users: %415, %334, %330
  %330 = struct $StaticString (%328 : $Builtin.Word, %327 : $Builtin.Word, %329 : $Builtin.Int8), scope 291 // user: %419
  %331 = string_literal utf8 "Swift/Integers.swift", scope 291 // user: %333
  %332 = integer_literal $Builtin.Word, 20, scope 291 // user: %334
  %333 = builtin "ptrtoint_Word"(%331 : $Builtin.RawPointer) : $Builtin.Word, scope 291 // user: %334
  %334 = struct $StaticString (%333 : $Builtin.Word, %332 : $Builtin.Word, %329 : $Builtin.Int8), scope 291 // user: %419
  %335 = integer_literal $Builtin.Int64, 3543, scope 291 // user: %336
  %336 = struct $UInt (%335 : $Builtin.Int64), scope 291 // user: %419
  debug_step , scope 291                          // id: %337
  %338 = alloc_stack $Int, scope 291              // users: %395, %387, %341
  %339 = integer_literal $Builtin.Int64, 9223372036854775807, scope 291 // user: %340
  %340 = struct $Int (%339 : $Builtin.Int64), scope 291 // users: %350, %341
  store %340 to [trivial] %338 : $*Int, scope 291 // id: %341
  %342 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 291 // user: %343
  %343 = struct_extract %342 : $Bool, #Bool._value, scope 291 // user: %344
  cond_br %343, bb56, bb53, scope 291             // id: %344

bb53:                                             // Preds: bb52
  %345 = apply %303<τ_0_0>(%324) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %346
  %346 = struct_extract %345 : $Int, #Int._value, scope 291 // user: %347
  %347 = builtin "cmp_slt_Int64"(%346 : $Builtin.Int64, %305 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %348
  cond_br %347, bb55, bb54, scope 291             // id: %348

bb54:                                             // Preds: bb53
  %349 = alloc_stack $Int, scope 291              // users: %363, %355, %350
  store %340 to [trivial] %349 : $*Int, scope 291 // id: %350
  %351 = alloc_stack $τ_0_0, scope 291            // users: %362, %359, %357, %352
  copy_addr %324 to [init] %351 : $*τ_0_0, scope 291 // id: %352
  %353 = alloc_stack $τ_0_0, scope 291            // users: %360, %358, %357, %355
  %354 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %355
  %355 = apply %354<τ_0_0, Int>(%353, %349, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %356 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %357
  %357 = apply %356<τ_0_0>(%353, %351, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %361
  destroy_addr %353 : $*τ_0_0, scope 291          // id: %358
  destroy_addr %351 : $*τ_0_0, scope 291          // id: %359
  dealloc_stack %353 : $*τ_0_0, scope 291         // id: %360
  %361 = struct_extract %357 : $Bool, #Bool._value, scope 291 // user: %364
  dealloc_stack %351 : $*τ_0_0, scope 291         // id: %362
  dealloc_stack %349 : $*Int, scope 291           // id: %363
  br bb59(%361 : $Builtin.Int1), scope 291        // id: %364

bb55:                                             // Preds: bb53
  %365 = alloc_stack $τ_0_0, scope 291            // users: %370, %369, %368, %366
  copy_addr %324 to [init] %365 : $*τ_0_0, scope 291 // id: %366
  %367 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %368
  %368 = apply %367<τ_0_0>(%365) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291
  destroy_addr %365 : $*τ_0_0, scope 291          // id: %369
  dealloc_stack %365 : $*τ_0_0, scope 291         // id: %370
  %371 = integer_literal $Builtin.Int1, 0, scope 291 // user: %372
  br bb59(%371 : $Builtin.Int1), scope 291        // id: %372

bb56:                                             // Preds: bb52
  %373 = apply %303<τ_0_0>(%324) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 291 // user: %374
  %374 = struct_extract %373 : $Int, #Int._value, scope 291 // user: %375
  %375 = builtin "cmp_slt_Int64"(%305 : $Builtin.Int64, %374 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %376
  cond_br %375, bb58, bb57, scope 291             // id: %376

bb57:                                             // Preds: bb56
  %377 = alloc_stack $τ_0_0, scope 291            // users: %382, %381, %380, %378
  copy_addr %324 to [init] %377 : $*τ_0_0, scope 291 // id: %378
  %379 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %380
  %380 = apply %379<τ_0_0>(%377) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291
  destroy_addr %377 : $*τ_0_0, scope 291          // id: %381
  dealloc_stack %377 : $*τ_0_0, scope 291         // id: %382
  %383 = integer_literal $Builtin.Int1, 0, scope 291 // user: %384
  br bb59(%383 : $Builtin.Int1), scope 291        // id: %384

bb58:                                             // Preds: bb56
  %385 = alloc_stack $τ_0_0, scope 291            // users: %391, %390, %389, %387
  %386 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291 // user: %387
  %387 = apply %386<τ_0_0, Int>(%385, %338, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 291
  %388 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %389
  %389 = apply %388<τ_0_0>(%385, %324, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 291 // user: %392
  destroy_addr %385 : $*τ_0_0, scope 291          // id: %390
  dealloc_stack %385 : $*τ_0_0, scope 291         // id: %391
  %392 = struct_extract %389 : $Bool, #Bool._value, scope 291 // user: %393
  br bb59(%392 : $Builtin.Int1), scope 291        // id: %393

// %394                                           // user: %397
bb59(%394 : $Builtin.Int1):                       // Preds: bb58 bb57 bb55 bb54
  dealloc_stack %338 : $*Int, scope 291           // id: %395
  %396 = integer_literal $Builtin.Int1, 0, scope 291 // user: %397
  %397 = builtin "int_expect_Int1"(%394 : $Builtin.Int1, %396 : $Builtin.Int1) : $Builtin.Int1, scope 291 // user: %398
  cond_br %397, bb62, bb60, scope 291             // id: %398

bb60:                                             // Preds: bb59
  destroy_addr %324 : $*τ_0_0, scope 291          // id: %399
  debug_step , scope 291                          // id: %400
  dealloc_stack %324 : $*τ_0_0, scope 291         // id: %401
  br bb61, scope 291                              // id: %402

bb61:                                             // Preds: bb60 bb50 bb47
  dealloc_stack %308 : $*τ_0_0, scope 291         // id: %403
  dealloc_stack %172 : $*τ_0_0, scope 291         // id: %404
  %405 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %406
  %406 = apply %405<τ_0_0>(%169) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 291 // user: %408
  destroy_addr %169 : $*τ_0_0, scope 291          // id: %407
  %408 = struct_extract %406 : $UInt, #UInt._value, scope 291 // user: %410
  dealloc_stack %169 : $*τ_0_0, scope 291         // id: %409
  %410 = struct $Int (%408 : $Builtin.Int64), scope 291 // user: %411
  br bb66(%410 : $Int), scope 291                 // id: %411

bb62:                                             // Preds: bb59
  %412 = string_literal utf8 "Fatal error", scope 291 // user: %414
  %413 = integer_literal $Builtin.Word, 11, scope 291 // user: %415
  %414 = builtin "ptrtoint_Word"(%412 : $Builtin.RawPointer) : $Builtin.Word, scope 291 // user: %415
  %415 = struct $StaticString (%414 : $Builtin.Word, %413 : $Builtin.Word, %329 : $Builtin.Int8), scope 291 // user: %419
  %416 = integer_literal $Builtin.Int32, 1, scope 291 // user: %417
  %417 = struct $UInt32 (%416 : $Builtin.Int32), scope 291 // user: %419
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %418 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 291 // user: %419
  %419 = apply %418(%415, %330, %334, %336, %417) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 291
  unreachable , scope 291                         // id: %420

bb63:                                             // Preds: bb42
  %421 = string_literal utf8 "Fatal error", scope 291 // user: %423
  %422 = integer_literal $Builtin.Word, 11, scope 291 // user: %424
  %423 = builtin "ptrtoint_Word"(%421 : $Builtin.RawPointer) : $Builtin.Word, scope 291 // user: %424
  %424 = struct $StaticString (%423 : $Builtin.Word, %422 : $Builtin.Word, %191 : $Builtin.Int8), scope 291 // user: %428
  %425 = integer_literal $Builtin.Int32, 1, scope 291 // user: %426
  %426 = struct $UInt32 (%425 : $Builtin.Int32), scope 291 // user: %428
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %427 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 291 // user: %428
  %428 = apply %427(%424, %192, %196, %198, %426) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 291
  unreachable , scope 291                         // id: %429

bb64:                                             // Preds: bb23
  br bb66(%109 : $Int), scope 291                 // id: %430

bb65:                                             // Preds: bb14
  br bb66(%6 : $Int), scope 291                   // id: %431

// %432                                           // users: %447, %436
bb66(%432 : $Int):                                // Preds: bb65 bb64 bb61
  %433 = destructure_struct %4 : $UInt8, scope 291 // users: %465, %451
  %434 = integer_literal $Builtin.Int8, 0, scope 291 // users: %457, %446
  %435 = integer_literal $Builtin.Int64, 0, scope 291 // users: %458, %437
  %436 = struct_extract %432 : $Int, #Int._value, scope 291 // users: %458, %453, %442, %437
  %437 = builtin "cmp_slt_Int64"(%436 : $Builtin.Int64, %435 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %439
  %438 = integer_literal $Builtin.Int1, 0, scope 291 // user: %439
  %439 = builtin "int_expect_Int1"(%437 : $Builtin.Int1, %438 : $Builtin.Int1) : $Builtin.Int1, scope 291 // user: %440
  cond_br %439, bb70, bb67, scope 291             // id: %440

bb67:                                             // Preds: bb66
  %441 = integer_literal $Builtin.Int64, 8, scope 291 // user: %442
  %442 = builtin "cmp_slt_Int64"(%436 : $Builtin.Int64, %441 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %444
  %443 = integer_literal $Builtin.Int1, -1, scope 291 // user: %444
  %444 = builtin "int_expect_Int1"(%442 : $Builtin.Int1, %443 : $Builtin.Int1) : $Builtin.Int1, scope 291 // user: %445
  cond_br %444, bb69, bb68, scope 291             // id: %445

bb68:                                             // Preds: bb67
  br bb73(%434 : $Builtin.Int8), scope 291        // id: %446

bb69:                                             // Preds: bb67
  %447 = destructure_struct %432 : $Int, scope 291 // user: %448
  %448 = builtin "truncOrBitCast_Int64_Int8"(%447 : $Builtin.Int64) : $Builtin.Int8, scope 291 // user: %450
  %449 = integer_literal $Builtin.Int8, 7, scope 291 // user: %450
  %450 = builtin "and_Int8"(%448 : $Builtin.Int8, %449 : $Builtin.Int8) : $Builtin.Int8, scope 291 // user: %451
  %451 = builtin "shl_Int8"(%433 : $Builtin.Int8, %450 : $Builtin.Int8) : $Builtin.Int8, scope 291 // user: %452
  br bb73(%451 : $Builtin.Int8), scope 291        // id: %452

bb70:                                             // Preds: bb66
  %453 = builtin "cmp_slt_Int64"(%5 : $Builtin.Int64, %436 : $Builtin.Int64) : $Builtin.Int1, scope 291 // user: %455
  %454 = integer_literal $Builtin.Int1, -1, scope 291 // users: %458, %455
  %455 = builtin "int_expect_Int1"(%453 : $Builtin.Int1, %454 : $Builtin.Int1) : $Builtin.Int1, scope 291 // user: %456
  cond_br %455, bb72, bb71, scope 291             // id: %456

bb71:                                             // Preds: bb70
  br bb73(%434 : $Builtin.Int8), scope 291        // id: %457

bb72:                                             // Preds: bb70
  %458 = builtin "ssub_with_overflow_Int64"(%435 : $Builtin.Int64, %436 : $Builtin.Int64, %454 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 291 // user: %459
  (%459, %460) = destructure_tuple %458 : $(Builtin.Int64, Builtin.Int1), scope 291 // users: %462, %461
  cond_fail %460 : $Builtin.Int1, "arithmetic overflow", scope 291 // id: %461
  %462 = builtin "truncOrBitCast_Int64_Int8"(%459 : $Builtin.Int64) : $Builtin.Int8, scope 291 // user: %464
  %463 = integer_literal $Builtin.Int8, 7, scope 291 // user: %464
  %464 = builtin "and_Int8"(%462 : $Builtin.Int8, %463 : $Builtin.Int8) : $Builtin.Int8, scope 291 // user: %465
  %465 = builtin "lshr_Int8"(%433 : $Builtin.Int8, %464 : $Builtin.Int8) : $Builtin.Int8, scope 291 // user: %466
  br bb73(%465 : $Builtin.Int8), scope 291        // id: %466

// %467                                           // user: %468
bb73(%467 : $Builtin.Int8):                       // Preds: bb72 bb71 bb69 bb68
  %468 = struct $UInt8 (%467 : $Builtin.Int8), scope 291 // user: %469
  store %468 to [trivial] %0 : $*UInt8, scope 291 // id: %469
  %470 = tuple (), scope 291                      // user: %471
  return %470 : $(), scope 291                    // id: %471
} // end sil function '$ss5UInt8VSzsSz2lloiyxx_qd__tSzRd__lFZTW'

sil_scope 292 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz3lleoiyyxz_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@inout UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> () }

// protocol witness for static BinaryInteger.<<= infix<A>(_:_:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 292
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz3lleoiyyxz_qd__tSzRd__lFZTW : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@inout UInt8, @in_guaranteed τ_0_0, @thick UInt8.Type) -> () {
// %0                                             // users: %457, %423
// %1                                             // users: %169, %161, %146, %141, %131, %125, %114, %96, %90, %78, %72, %51, %46, %32, %23, %16
bb0(%0 : $*UInt8, %1 : $*τ_0_0, %2 : $@thick UInt8.Type):
  %3 = integer_literal $Builtin.Int64, 0, scope 292 // users: %446, %427
  %4 = integer_literal $Builtin.Int1, -1, scope 292 // users: %446, %443, %433, %253, %61
  %5 = integer_literal $Builtin.Int64, -8, scope 292 // users: %442, %102, %58, %29, %6
  %6 = struct $Int (%5 : $Builtin.Int64), scope 292 // users: %421, %85, %67
  %7 = metatype $@thick τ_0_0.Type, scope 292     // users: %379, %377, %349, %347, %336, %311, %274, %272, %261, %259, %238, %236, %206, %203, %170, %161, %158, %125, %122, %109, %90, %87, %72, %69, %46, %44, %12, %9
  %8 = witness_method $τ_0_0, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // users: %336, %311, %206, %203, %170, %109, %12, %9
  %9 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %10
  %10 = struct_extract %9 : $Bool, #Bool._value, scope 292 // user: %11
  cond_br %10, bb11, bb1, scope 292               // id: %11

bb1:                                              // Preds: bb0
  %12 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %13
  %13 = struct_extract %12 : $Bool, #Bool._value, scope 292 // user: %14
  cond_br %13, bb5, bb2, scope 292                // id: %14

bb2:                                              // Preds: bb1
  %15 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %16
  %16 = apply %15<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %18
  %17 = integer_literal $Builtin.Int64, 64, scope 292 // user: %19
  %18 = struct_extract %16 : $Int, #Int._value, scope 292 // user: %19
  %19 = builtin "cmp_slt_Int64"(%18 : $Builtin.Int64, %17 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %20
  cond_br %19, bb4, bb3, scope 292                // id: %20

bb3:                                              // Preds: bb2
  br bb16, scope 292                              // id: %21

bb4:                                              // Preds: bb2
  %22 = alloc_stack $τ_0_0, scope 292             // users: %28, %26, %25, %23
  copy_addr %1 to [init] %22 : $*τ_0_0, scope 292 // id: %23
  %24 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %25
  %25 = apply %24<τ_0_0>(%22) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %27
  destroy_addr %22 : $*τ_0_0, scope 292           // id: %26
  %27 = struct_extract %25 : $UInt, #UInt._value, scope 292 // user: %29
  dealloc_stack %22 : $*τ_0_0, scope 292          // id: %28
  %29 = builtin "cmp_slt_Int64"(%27 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %30
  br bb14(%29 : $Builtin.Int1), scope 292         // id: %30

bb5:                                              // Preds: bb1
  %31 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %32
  %32 = apply %31<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %34
  %33 = integer_literal $Builtin.Int64, 64, scope 292 // user: %35
  %34 = struct_extract %32 : $Int, #Int._value, scope 292 // user: %35
  %35 = builtin "cmp_slt_Int64"(%33 : $Builtin.Int64, %34 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %36
  cond_br %35, bb10, bb6, scope 292               // id: %36

bb6:                                              // Preds: bb5
  %37 = integer_literal $Builtin.IntLiteral, 0, scope 292 // user: %41
  %38 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 292 // user: %41
  %39 = alloc_stack $τ_0_0.IntegerLiteralType, scope 292 // users: %49, %44, %41
  %40 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %41
  %41 = apply %40<τ_0_0.IntegerLiteralType>(%39, %37, %38) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %42 = alloc_stack $τ_0_0, scope 292             // users: %48, %47, %46, %44
  %43 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %44
  %44 = apply %43<τ_0_0>(%42, %39, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %45 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %46
  %46 = apply %45<τ_0_0>(%1, %42, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %52
  destroy_addr %42 : $*τ_0_0, scope 292           // id: %47
  dealloc_stack %42 : $*τ_0_0, scope 292          // id: %48
  dealloc_stack %39 : $*τ_0_0.IntegerLiteralType, scope 292 // id: %49
  %50 = alloc_stack $τ_0_0, scope 292             // users: %63, %60, %56, %55, %51
  copy_addr %1 to [init] %50 : $*τ_0_0, scope 292 // id: %51
  %52 = struct_extract %46 : $Bool, #Bool._value, scope 292 // user: %53
  cond_br %52, bb8, bb7, scope 292                // id: %53

bb7:                                              // Preds: bb6
  %54 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %55
  %55 = apply %54<τ_0_0>(%50) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %57
  destroy_addr %50 : $*τ_0_0, scope 292           // id: %56
  %57 = struct_extract %55 : $UInt, #UInt._value, scope 292 // user: %58
  %58 = builtin "cmp_slt_Int64"(%57 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %59
  br bb9(%58 : $Builtin.Int1), scope 292          // id: %59

bb8:                                              // Preds: bb6
  destroy_addr %50 : $*τ_0_0, scope 292           // id: %60
  br bb9(%4 : $Builtin.Int1), scope 292           // id: %61

// %62                                            // user: %64
bb9(%62 : $Builtin.Int1):                         // Preds: bb8 bb7
  dealloc_stack %50 : $*τ_0_0, scope 292          // id: %63
  br bb14(%62 : $Builtin.Int1), scope 292         // id: %64

bb10:                                             // Preds: bb5
  %65 = alloc_stack $τ_0_0, scope 292             // users: %74, %73, %72, %69
  %66 = alloc_stack $Int, scope 292               // users: %70, %69, %67
  store %6 to [trivial] %66 : $*Int, scope 292    // id: %67
  %68 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %69
  %69 = apply %68<τ_0_0, Int>(%65, %66, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  dealloc_stack %66 : $*Int, scope 292            // id: %70
  %71 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %72
  %72 = apply %71<τ_0_0>(%1, %65, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %75
  destroy_addr %65 : $*τ_0_0, scope 292           // id: %73
  dealloc_stack %65 : $*τ_0_0, scope 292          // id: %74
  %75 = struct_extract %72 : $Bool, #Bool._value, scope 292 // user: %76
  br bb14(%75 : $Builtin.Int1), scope 292         // id: %76

bb11:                                             // Preds: bb0
  %77 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %78
  %78 = apply %77<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %80
  %79 = integer_literal $Builtin.Int64, 64, scope 292 // user: %81
  %80 = struct_extract %78 : $Int, #Int._value, scope 292 // user: %81
  %81 = builtin "cmp_slt_Int64"(%80 : $Builtin.Int64, %79 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %82
  cond_br %81, bb13, bb12, scope 292              // id: %82

bb12:                                             // Preds: bb11
  %83 = alloc_stack $τ_0_0, scope 292             // users: %92, %91, %90, %87
  %84 = alloc_stack $Int, scope 292               // users: %88, %87, %85
  store %6 to [trivial] %84 : $*Int, scope 292    // id: %85
  %86 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %87
  %87 = apply %86<τ_0_0, Int>(%83, %84, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  dealloc_stack %84 : $*Int, scope 292            // id: %88
  %89 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %90
  %90 = apply %89<τ_0_0>(%1, %83, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %93
  destroy_addr %83 : $*τ_0_0, scope 292           // id: %91
  dealloc_stack %83 : $*τ_0_0, scope 292          // id: %92
  %93 = struct_extract %90 : $Bool, #Bool._value, scope 292 // user: %94
  br bb14(%93 : $Builtin.Int1), scope 292         // id: %94

bb13:                                             // Preds: bb11
  %95 = alloc_stack $τ_0_0, scope 292             // users: %101, %99, %98, %96
  copy_addr %1 to [init] %95 : $*τ_0_0, scope 292 // id: %96
  %97 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %98
  %98 = apply %97<τ_0_0>(%95) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %100
  destroy_addr %95 : $*τ_0_0, scope 292           // id: %99
  %100 = struct_extract %98 : $UInt, #UInt._value, scope 292 // user: %102
  dealloc_stack %95 : $*τ_0_0, scope 292          // id: %101
  %102 = builtin "cmp_slt_Int64"(%100 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %103
  br bb14(%102 : $Builtin.Int1), scope 292        // id: %103

// %104                                           // user: %105
bb14(%104 : $Builtin.Int1):                       // Preds: bb13 bb12 bb10 bb9 bb4
  cond_br %104, bb65, bb15, scope 292             // id: %105

bb15:                                             // Preds: bb14
  br bb16, scope 292                              // id: %106

bb16:                                             // Preds: bb15 bb3
  %107 = integer_literal $Builtin.Int64, 8, scope 292 // users: %152, %137, %108
  %108 = struct $Int (%107 : $Builtin.Int64), scope 292 // users: %420, %156, %120
  %109 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %110
  %110 = struct_extract %109 : $Bool, #Bool._value, scope 292 // user: %111
  cond_br %110, bb20, bb17, scope 292             // id: %111

bb17:                                             // Preds: bb16
  %112 = integer_literal $Builtin.Int64, 64, scope 292 // user: %116
  %113 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %114
  %114 = apply %113<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %115
  %115 = struct_extract %114 : $Int, #Int._value, scope 292 // user: %116
  %116 = builtin "cmp_slt_Int64"(%115 : $Builtin.Int64, %112 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %117
  cond_br %116, bb19, bb18, scope 292             // id: %117

bb18:                                             // Preds: bb17
  %118 = alloc_stack $τ_0_0, scope 292            // users: %127, %126, %125, %122
  %119 = alloc_stack $Int, scope 292              // users: %123, %122, %120
  store %108 to [trivial] %119 : $*Int, scope 292 // id: %120
  %121 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %122
  %122 = apply %121<τ_0_0, Int>(%118, %119, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  dealloc_stack %119 : $*Int, scope 292           // id: %123
  %124 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %125
  %125 = apply %124<τ_0_0>(%118, %1, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %128
  destroy_addr %118 : $*τ_0_0, scope 292          // id: %126
  dealloc_stack %118 : $*τ_0_0, scope 292         // id: %127
  %128 = struct_extract %125 : $Bool, #Bool._value, scope 292 // user: %129
  br bb23(%128 : $Builtin.Int1), scope 292        // id: %129

bb19:                                             // Preds: bb17
  %130 = alloc_stack $τ_0_0, scope 292            // users: %136, %134, %133, %131
  copy_addr %1 to [init] %130 : $*τ_0_0, scope 292 // id: %131
  %132 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %133
  %133 = apply %132<τ_0_0>(%130) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %135
  destroy_addr %130 : $*τ_0_0, scope 292          // id: %134
  %135 = struct_extract %133 : $UInt, #UInt._value, scope 292 // user: %137
  dealloc_stack %130 : $*τ_0_0, scope 292         // id: %136
  %137 = builtin "cmp_slt_Int64"(%107 : $Builtin.Int64, %135 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %138
  br bb23(%137 : $Builtin.Int1), scope 292        // id: %138

bb20:                                             // Preds: bb16
  %139 = integer_literal $Builtin.Int64, 64, scope 292 // user: %143
  %140 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %141
  %141 = apply %140<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %142
  %142 = struct_extract %141 : $Int, #Int._value, scope 292 // user: %143
  %143 = builtin "cmp_slt_Int64"(%139 : $Builtin.Int64, %142 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %144
  cond_br %143, bb22, bb21, scope 292             // id: %144

bb21:                                             // Preds: bb20
  %145 = alloc_stack $τ_0_0, scope 292            // users: %151, %149, %148, %146
  copy_addr %1 to [init] %145 : $*τ_0_0, scope 292 // id: %146
  %147 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %148
  %148 = apply %147<τ_0_0>(%145) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %150
  destroy_addr %145 : $*τ_0_0, scope 292          // id: %149
  %150 = struct_extract %148 : $UInt, #UInt._value, scope 292 // user: %152
  dealloc_stack %145 : $*τ_0_0, scope 292         // id: %151
  %152 = builtin "cmp_slt_Int64"(%107 : $Builtin.Int64, %150 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %153
  br bb23(%152 : $Builtin.Int1), scope 292        // id: %153

bb22:                                             // Preds: bb20
  %154 = alloc_stack $τ_0_0, scope 292            // users: %163, %162, %161, %158
  %155 = alloc_stack $Int, scope 292              // users: %159, %158, %156
  store %108 to [trivial] %155 : $*Int, scope 292 // id: %156
  %157 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %158
  %158 = apply %157<τ_0_0, Int>(%154, %155, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  dealloc_stack %155 : $*Int, scope 292           // id: %159
  %160 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %161
  %161 = apply %160<τ_0_0>(%154, %1, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %164
  destroy_addr %154 : $*τ_0_0, scope 292          // id: %162
  dealloc_stack %154 : $*τ_0_0, scope 292         // id: %163
  %164 = struct_extract %161 : $Bool, #Bool._value, scope 292 // user: %165
  br bb23(%164 : $Builtin.Int1), scope 292        // id: %165

// %166                                           // user: %167
bb23(%166 : $Builtin.Int1):                       // Preds: bb22 bb21 bb19 bb18
  cond_br %166, bb64, bb24, scope 292             // id: %167

bb24:                                             // Preds: bb23
  %168 = alloc_stack $τ_0_0, scope 292            // users: %399, %397, %396, %319, %303, %298, %186, %172, %169
  copy_addr %1 to [init] %168 : $*τ_0_0, scope 292 // id: %169
  %170 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %173
  %171 = alloc_stack $τ_0_0, scope 292            // users: %394, %179, %178, %175, %172
  copy_addr %168 to [init] %171 : $*τ_0_0, scope 292 // id: %172
  %173 = struct_extract %170 : $Bool, #Bool._value, scope 292 // user: %174
  cond_br %173, bb26, bb25, scope 292             // id: %174

bb25:                                             // Preds: bb24
  destroy_addr %171 : $*τ_0_0, scope 292          // id: %175
  br bb45, scope 292                              // id: %176

bb26:                                             // Preds: bb24
  %177 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // users: %266, %225, %209, %178
  %178 = apply %177<τ_0_0>(%171) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %181
  destroy_addr %171 : $*τ_0_0, scope 292          // id: %179
  %180 = integer_literal $Builtin.Int64, 64, scope 292 // users: %268, %227, %211, %182
  %181 = struct_extract %178 : $Int, #Int._value, scope 292 // user: %182
  %182 = builtin "cmp_slt_Int64"(%180 : $Builtin.Int64, %181 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %183
  cond_br %182, bb28, bb27, scope 292             // id: %183

bb27:                                             // Preds: bb26
  br bb45, scope 292                              // id: %184

bb28:                                             // Preds: bb26
  %185 = alloc_stack $τ_0_0, scope 292            // users: %295, %293, %280, %274, %266, %261, %243, %238, %225, %217, %213, %209, %186
  copy_addr %168 to [init] %185 : $*τ_0_0, scope 292 // id: %186
  %187 = string_literal utf8 "Not enough bits to represent a signed value", scope 292 // user: %189
  %188 = integer_literal $Builtin.Word, 43, scope 292 // user: %191
  %189 = builtin "ptrtoint_Word"(%187 : $Builtin.RawPointer) : $Builtin.Word, scope 292 // user: %191
  %190 = integer_literal $Builtin.Int8, 2, scope 292 // users: %414, %195, %191
  %191 = struct $StaticString (%189 : $Builtin.Word, %188 : $Builtin.Word, %190 : $Builtin.Int8), scope 292 // user: %418
  %192 = string_literal utf8 "Swift/Integers.swift", scope 292 // user: %194
  %193 = integer_literal $Builtin.Word, 20, scope 292 // user: %195
  %194 = builtin "ptrtoint_Word"(%192 : $Builtin.RawPointer) : $Builtin.Word, scope 292 // user: %195
  %195 = struct $StaticString (%194 : $Builtin.Word, %193 : $Builtin.Word, %190 : $Builtin.Int8), scope 292 // user: %418
  %196 = integer_literal $Builtin.Int64, 3537, scope 292 // user: %197
  %197 = struct $UInt (%196 : $Builtin.Int64), scope 292 // user: %418
  debug_step , scope 292                          // id: %198
  %199 = alloc_stack $Int, scope 292              // users: %289, %272, %259, %214, %202
  %200 = integer_literal $Builtin.Int64, -9223372036854775808, scope 292 // users: %250, %223, %286, %201
  %201 = struct $Int (%200 : $Builtin.Int64), scope 292 // user: %202
  store %201 to [trivial] %199 : $*Int, scope 292 // id: %202
  %203 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %204
  %204 = struct_extract %203 : $Bool, #Bool._value, scope 292 // user: %205
  cond_br %204, bb39, bb29, scope 292             // id: %205

bb29:                                             // Preds: bb28
  %206 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %207
  %207 = struct_extract %206 : $Bool, #Bool._value, scope 292 // user: %208
  cond_br %207, bb33, bb30, scope 292             // id: %208

bb30:                                             // Preds: bb29
  %209 = apply %177<τ_0_0>(%185) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %210
  %210 = struct_extract %209 : $Int, #Int._value, scope 292 // user: %211
  %211 = builtin "cmp_slt_Int64"(%210 : $Builtin.Int64, %180 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %212
  cond_br %211, bb32, bb31, scope 292             // id: %212

bb31:                                             // Preds: bb30
  destroy_addr %185 : $*τ_0_0, scope 292          // id: %213
  dealloc_stack %199 : $*Int, scope 292           // id: %214
  br bb44, scope 292                              // id: %215

bb32:                                             // Preds: bb30
  %216 = alloc_stack $τ_0_0, scope 292            // users: %222, %220, %219, %217
  copy_addr %185 to [init] %216 : $*τ_0_0, scope 292 // id: %217
  %218 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %219
  %219 = apply %218<τ_0_0>(%216) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %221
  destroy_addr %216 : $*τ_0_0, scope 292          // id: %220
  %221 = struct_extract %219 : $UInt, #UInt._value, scope 292 // user: %223
  dealloc_stack %216 : $*τ_0_0, scope 292         // id: %222
  %223 = builtin "cmp_slt_Int64"(%221 : $Builtin.Int64, %200 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %224
  br bb42(%223 : $Builtin.Int1), scope 292        // id: %224

bb33:                                             // Preds: bb29
  %225 = apply %177<τ_0_0>(%185) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %226
  %226 = struct_extract %225 : $Int, #Int._value, scope 292 // user: %227
  %227 = builtin "cmp_slt_Int64"(%180 : $Builtin.Int64, %226 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %228
  cond_br %227, bb38, bb34, scope 292             // id: %228

bb34:                                             // Preds: bb33
  %229 = integer_literal $Builtin.IntLiteral, 0, scope 292 // user: %233
  %230 = metatype $@thick τ_0_0.IntegerLiteralType.Type, scope 292 // user: %233
  %231 = alloc_stack $τ_0_0.IntegerLiteralType, scope 292 // users: %241, %236, %233
  %232 = witness_method $τ_0_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %233
  %233 = apply %232<τ_0_0.IntegerLiteralType>(%231, %229, %230) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %234 = alloc_stack $τ_0_0, scope 292            // users: %240, %239, %238, %236
  %235 = witness_method $τ_0_0, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %236
  %236 = apply %235<τ_0_0>(%234, %231, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %237 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %238
  %238 = apply %237<τ_0_0>(%185, %234, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %244
  destroy_addr %234 : $*τ_0_0, scope 292          // id: %239
  dealloc_stack %234 : $*τ_0_0, scope 292         // id: %240
  dealloc_stack %231 : $*τ_0_0.IntegerLiteralType, scope 292 // id: %241
  %242 = alloc_stack $τ_0_0, scope 292            // users: %255, %252, %248, %247, %243
  copy_addr %185 to [init] %242 : $*τ_0_0, scope 292 // id: %243
  %244 = struct_extract %238 : $Bool, #Bool._value, scope 292 // user: %245
  cond_br %244, bb36, bb35, scope 292             // id: %245

bb35:                                             // Preds: bb34
  %246 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %247
  %247 = apply %246<τ_0_0>(%242) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %249
  destroy_addr %242 : $*τ_0_0, scope 292          // id: %248
  %249 = struct_extract %247 : $UInt, #UInt._value, scope 292 // user: %250
  %250 = builtin "cmp_slt_Int64"(%249 : $Builtin.Int64, %200 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %251
  br bb37(%250 : $Builtin.Int1), scope 292        // id: %251

bb36:                                             // Preds: bb34
  destroy_addr %242 : $*τ_0_0, scope 292          // id: %252
  br bb37(%4 : $Builtin.Int1), scope 292          // id: %253

// %254                                           // user: %256
bb37(%254 : $Builtin.Int1):                       // Preds: bb36 bb35
  dealloc_stack %242 : $*τ_0_0, scope 292         // id: %255
  br bb42(%254 : $Builtin.Int1), scope 292        // id: %256

bb38:                                             // Preds: bb33
  %257 = alloc_stack $τ_0_0, scope 292            // users: %263, %262, %261, %259
  %258 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %259
  %259 = apply %258<τ_0_0, Int>(%257, %199, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %260 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %261
  %261 = apply %260<τ_0_0>(%185, %257, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %264
  destroy_addr %257 : $*τ_0_0, scope 292          // id: %262
  dealloc_stack %257 : $*τ_0_0, scope 292         // id: %263
  %264 = struct_extract %261 : $Bool, #Bool._value, scope 292 // user: %265
  br bb42(%264 : $Builtin.Int1), scope 292        // id: %265

bb39:                                             // Preds: bb28
  %266 = apply %177<τ_0_0>(%185) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %267
  %267 = struct_extract %266 : $Int, #Int._value, scope 292 // user: %268
  %268 = builtin "cmp_slt_Int64"(%267 : $Builtin.Int64, %180 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %269
  cond_br %268, bb41, bb40, scope 292             // id: %269

bb40:                                             // Preds: bb39
  %270 = alloc_stack $τ_0_0, scope 292            // users: %276, %275, %274, %272
  %271 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %272
  %272 = apply %271<τ_0_0, Int>(%270, %199, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %273 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %274
  %274 = apply %273<τ_0_0>(%185, %270, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %277
  destroy_addr %270 : $*τ_0_0, scope 292          // id: %275
  dealloc_stack %270 : $*τ_0_0, scope 292         // id: %276
  %277 = struct_extract %274 : $Bool, #Bool._value, scope 292 // user: %278
  br bb42(%277 : $Builtin.Int1), scope 292        // id: %278

bb41:                                             // Preds: bb39
  %279 = alloc_stack $τ_0_0, scope 292            // users: %285, %283, %282, %280
  copy_addr %185 to [init] %279 : $*τ_0_0, scope 292 // id: %280
  %281 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %282
  %282 = apply %281<τ_0_0>(%279) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %284
  destroy_addr %279 : $*τ_0_0, scope 292          // id: %283
  %284 = struct_extract %282 : $UInt, #UInt._value, scope 292 // user: %286
  dealloc_stack %279 : $*τ_0_0, scope 292         // id: %285
  %286 = builtin "cmp_slt_Int64"(%284 : $Builtin.Int64, %200 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %287
  br bb42(%286 : $Builtin.Int1), scope 292        // id: %287

// %288                                           // user: %291
bb42(%288 : $Builtin.Int1):                       // Preds: bb41 bb40 bb38 bb37 bb32
  dealloc_stack %199 : $*Int, scope 292           // id: %289
  %290 = integer_literal $Builtin.Int1, 0, scope 292 // user: %291
  %291 = builtin "int_expect_Int1"(%288 : $Builtin.Int1, %290 : $Builtin.Int1) : $Builtin.Int1, scope 292 // user: %292
  cond_br %291, bb63, bb43, scope 292             // id: %292

bb43:                                             // Preds: bb42
  destroy_addr %185 : $*τ_0_0, scope 292          // id: %293
  br bb44, scope 292                              // id: %294

bb44:                                             // Preds: bb43 bb31
  dealloc_stack %185 : $*τ_0_0, scope 292         // id: %295
  br bb45, scope 292                              // id: %296

bb45:                                             // Preds: bb44 bb27 bb25
  %297 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // users: %363, %339, %305, %298
  %298 = apply %297<τ_0_0>(%168) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %300
  %299 = integer_literal $Builtin.Int64, 64, scope 292 // users: %365, %341, %308, %301
  %300 = struct_extract %298 : $Int, #Int._value, scope 292 // user: %301
  %301 = builtin "cmp_slt_Int64"(%299 : $Builtin.Int64, %300 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %304
  %302 = alloc_stack $τ_0_0, scope 292            // users: %393, %316, %306, %305, %303
  copy_addr %168 to [init] %302 : $*τ_0_0, scope 292 // id: %303
  cond_br %301, bb51, bb46, scope 292             // id: %304

bb46:                                             // Preds: bb45
  %305 = apply %297<τ_0_0>(%302) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %307
  destroy_addr %302 : $*τ_0_0, scope 292          // id: %306
  %307 = struct_extract %305 : $Int, #Int._value, scope 292 // user: %308
  %308 = builtin "cmp_eq_Int64"(%307 : $Builtin.Int64, %299 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %309
  cond_br %308, bb48, bb47, scope 292             // id: %309

bb47:                                             // Preds: bb46
  br bb61, scope 292                              // id: %310

bb48:                                             // Preds: bb46
  %311 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %312
  %312 = struct_extract %311 : $Bool, #Bool._value, scope 292 // user: %313
  cond_br %312, bb50, bb49, scope 292             // id: %313

bb49:                                             // Preds: bb48
  br bb52, scope 292                              // id: %314

bb50:                                             // Preds: bb48
  br bb61, scope 292                              // id: %315

bb51:                                             // Preds: bb45
  destroy_addr %302 : $*τ_0_0, scope 292          // id: %316
  br bb52, scope 292                              // id: %317

bb52:                                             // Preds: bb51 bb49
  %318 = alloc_stack $τ_0_0, scope 292            // users: %391, %389, %379, %368, %363, %356, %349, %339, %319
  copy_addr %168 to [init] %318 : $*τ_0_0, scope 292 // id: %319
  %320 = string_literal utf8 "Not enough bits to represent the passed value", scope 292 // user: %322
  %321 = integer_literal $Builtin.Word, 45, scope 292 // user: %324
  %322 = builtin "ptrtoint_Word"(%320 : $Builtin.RawPointer) : $Builtin.Word, scope 292 // user: %324
  %323 = integer_literal $Builtin.Int8, 2, scope 292 // users: %405, %328, %324
  %324 = struct $StaticString (%322 : $Builtin.Word, %321 : $Builtin.Word, %323 : $Builtin.Int8), scope 292 // user: %409
  %325 = string_literal utf8 "Swift/Integers.swift", scope 292 // user: %327
  %326 = integer_literal $Builtin.Word, 20, scope 292 // user: %328
  %327 = builtin "ptrtoint_Word"(%325 : $Builtin.RawPointer) : $Builtin.Word, scope 292 // user: %328
  %328 = struct $StaticString (%327 : $Builtin.Word, %326 : $Builtin.Word, %323 : $Builtin.Int8), scope 292 // user: %409
  %329 = integer_literal $Builtin.Int64, 3543, scope 292 // user: %330
  %330 = struct $UInt (%329 : $Builtin.Int64), scope 292 // user: %409
  debug_step , scope 292                          // id: %331
  %332 = alloc_stack $Int, scope 292              // users: %385, %377, %335
  %333 = integer_literal $Builtin.Int64, 9223372036854775807, scope 292 // user: %334
  %334 = struct $Int (%333 : $Builtin.Int64), scope 292 // users: %344, %335
  store %334 to [trivial] %332 : $*Int, scope 292 // id: %335
  %336 = apply %8<τ_0_0>(%7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 292 // user: %337
  %337 = struct_extract %336 : $Bool, #Bool._value, scope 292 // user: %338
  cond_br %337, bb56, bb53, scope 292             // id: %338

bb53:                                             // Preds: bb52
  %339 = apply %297<τ_0_0>(%318) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %340
  %340 = struct_extract %339 : $Int, #Int._value, scope 292 // user: %341
  %341 = builtin "cmp_slt_Int64"(%340 : $Builtin.Int64, %299 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %342
  cond_br %341, bb55, bb54, scope 292             // id: %342

bb54:                                             // Preds: bb53
  %343 = alloc_stack $Int, scope 292              // users: %353, %347, %344
  store %334 to [trivial] %343 : $*Int, scope 292 // id: %344
  %345 = alloc_stack $τ_0_0, scope 292            // users: %351, %350, %349, %347
  %346 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %347
  %347 = apply %346<τ_0_0, Int>(%345, %343, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %348 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %349
  %349 = apply %348<τ_0_0>(%345, %318, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %352
  destroy_addr %345 : $*τ_0_0, scope 292          // id: %350
  dealloc_stack %345 : $*τ_0_0, scope 292         // id: %351
  %352 = struct_extract %349 : $Bool, #Bool._value, scope 292 // user: %354
  dealloc_stack %343 : $*Int, scope 292           // id: %353
  br bb59(%352 : $Builtin.Int1), scope 292        // id: %354

bb55:                                             // Preds: bb53
  %355 = alloc_stack $τ_0_0, scope 292            // users: %360, %359, %358, %356
  copy_addr %318 to [init] %355 : $*τ_0_0, scope 292 // id: %356
  %357 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %358
  %358 = apply %357<τ_0_0>(%355) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292
  destroy_addr %355 : $*τ_0_0, scope 292          // id: %359
  dealloc_stack %355 : $*τ_0_0, scope 292         // id: %360
  %361 = integer_literal $Builtin.Int1, 0, scope 292 // user: %362
  br bb59(%361 : $Builtin.Int1), scope 292        // id: %362

bb56:                                             // Preds: bb52
  %363 = apply %297<τ_0_0>(%318) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 292 // user: %364
  %364 = struct_extract %363 : $Int, #Int._value, scope 292 // user: %365
  %365 = builtin "cmp_slt_Int64"(%299 : $Builtin.Int64, %364 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %366
  cond_br %365, bb58, bb57, scope 292             // id: %366

bb57:                                             // Preds: bb56
  %367 = alloc_stack $τ_0_0, scope 292            // users: %372, %371, %370, %368
  copy_addr %318 to [init] %367 : $*τ_0_0, scope 292 // id: %368
  %369 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %370
  %370 = apply %369<τ_0_0>(%367) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292
  destroy_addr %367 : $*τ_0_0, scope 292          // id: %371
  dealloc_stack %367 : $*τ_0_0, scope 292         // id: %372
  %373 = integer_literal $Builtin.Int1, 0, scope 292 // user: %374
  br bb59(%373 : $Builtin.Int1), scope 292        // id: %374

bb58:                                             // Preds: bb56
  %375 = alloc_stack $τ_0_0, scope 292            // users: %381, %380, %379, %377
  %376 = witness_method $τ_0_0, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292 // user: %377
  %377 = apply %376<τ_0_0, Int>(%375, %332, %7) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 292
  %378 = witness_method $τ_0_0, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %379
  %379 = apply %378<τ_0_0>(%375, %318, %7) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 292 // user: %382
  destroy_addr %375 : $*τ_0_0, scope 292          // id: %380
  dealloc_stack %375 : $*τ_0_0, scope 292         // id: %381
  %382 = struct_extract %379 : $Bool, #Bool._value, scope 292 // user: %383
  br bb59(%382 : $Builtin.Int1), scope 292        // id: %383

// %384                                           // user: %387
bb59(%384 : $Builtin.Int1):                       // Preds: bb58 bb57 bb55 bb54
  dealloc_stack %332 : $*Int, scope 292           // id: %385
  %386 = integer_literal $Builtin.Int1, 0, scope 292 // user: %387
  %387 = builtin "int_expect_Int1"(%384 : $Builtin.Int1, %386 : $Builtin.Int1) : $Builtin.Int1, scope 292 // user: %388
  cond_br %387, bb62, bb60, scope 292             // id: %388

bb60:                                             // Preds: bb59
  destroy_addr %318 : $*τ_0_0, scope 292          // id: %389
  debug_step , scope 292                          // id: %390
  dealloc_stack %318 : $*τ_0_0, scope 292         // id: %391
  br bb61, scope 292                              // id: %392

bb61:                                             // Preds: bb60 bb50 bb47
  dealloc_stack %302 : $*τ_0_0, scope 292         // id: %393
  dealloc_stack %171 : $*τ_0_0, scope 292         // id: %394
  %395 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %396
  %396 = apply %395<τ_0_0>(%168) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 292 // user: %398
  destroy_addr %168 : $*τ_0_0, scope 292          // id: %397
  %398 = struct_extract %396 : $UInt, #UInt._value, scope 292 // user: %400
  dealloc_stack %168 : $*τ_0_0, scope 292         // id: %399
  %400 = struct $Int (%398 : $Builtin.Int64), scope 292 // user: %401
  br bb66(%400 : $Int), scope 292                 // id: %401

bb62:                                             // Preds: bb59
  %402 = string_literal utf8 "Fatal error", scope 292 // user: %404
  %403 = integer_literal $Builtin.Word, 11, scope 292 // user: %405
  %404 = builtin "ptrtoint_Word"(%402 : $Builtin.RawPointer) : $Builtin.Word, scope 292 // user: %405
  %405 = struct $StaticString (%404 : $Builtin.Word, %403 : $Builtin.Word, %323 : $Builtin.Int8), scope 292 // user: %409
  %406 = integer_literal $Builtin.Int32, 1, scope 292 // user: %407
  %407 = struct $UInt32 (%406 : $Builtin.Int32), scope 292 // user: %409
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %408 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 292 // user: %409
  %409 = apply %408(%405, %324, %328, %330, %407) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 292
  unreachable , scope 292                         // id: %410

bb63:                                             // Preds: bb42
  %411 = string_literal utf8 "Fatal error", scope 292 // user: %413
  %412 = integer_literal $Builtin.Word, 11, scope 292 // user: %414
  %413 = builtin "ptrtoint_Word"(%411 : $Builtin.RawPointer) : $Builtin.Word, scope 292 // user: %414
  %414 = struct $StaticString (%413 : $Builtin.Word, %412 : $Builtin.Word, %190 : $Builtin.Int8), scope 292 // user: %418
  %415 = integer_literal $Builtin.Int32, 1, scope 292 // user: %416
  %416 = struct $UInt32 (%415 : $Builtin.Int32), scope 292 // user: %418
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %417 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 292 // user: %418
  %418 = apply %417(%414, %191, %195, %197, %416) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 292
  unreachable , scope 292                         // id: %419

bb64:                                             // Preds: bb23
  br bb66(%108 : $Int), scope 292                 // id: %420

bb65:                                             // Preds: bb14
  br bb66(%6 : $Int), scope 292                   // id: %421

// %422                                           // users: %436, %426
bb66(%422 : $Int):                                // Preds: bb65 bb64 bb61
  %423 = load [trivial] %0 : $*UInt8, scope 292   // user: %424
  %424 = destructure_struct %423 : $UInt8, scope 292 // users: %453, %440
  %425 = integer_literal $Builtin.Int8, 0, scope 292 // users: %445, %435
  %426 = struct_extract %422 : $Int, #Int._value, scope 292 // users: %446, %442, %432, %427
  %427 = builtin "cmp_slt_Int64"(%426 : $Builtin.Int64, %3 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %429
  %428 = integer_literal $Builtin.Int1, 0, scope 292 // user: %429
  %429 = builtin "int_expect_Int1"(%427 : $Builtin.Int1, %428 : $Builtin.Int1) : $Builtin.Int1, scope 292 // user: %430
  cond_br %429, bb70, bb67, scope 292             // id: %430

bb67:                                             // Preds: bb66
  %431 = integer_literal $Builtin.Int64, 8, scope 292 // user: %432
  %432 = builtin "cmp_slt_Int64"(%426 : $Builtin.Int64, %431 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %433
  %433 = builtin "int_expect_Int1"(%432 : $Builtin.Int1, %4 : $Builtin.Int1) : $Builtin.Int1, scope 292 // user: %434
  cond_br %433, bb69, bb68, scope 292             // id: %434

bb68:                                             // Preds: bb67
  br bb73(%425 : $Builtin.Int8), scope 292        // id: %435

bb69:                                             // Preds: bb67
  %436 = destructure_struct %422 : $Int, scope 292 // user: %437
  %437 = builtin "truncOrBitCast_Int64_Int8"(%436 : $Builtin.Int64) : $Builtin.Int8, scope 292 // user: %439
  %438 = integer_literal $Builtin.Int8, 7, scope 292 // user: %439
  %439 = builtin "and_Int8"(%437 : $Builtin.Int8, %438 : $Builtin.Int8) : $Builtin.Int8, scope 292 // user: %440
  %440 = builtin "shl_Int8"(%424 : $Builtin.Int8, %439 : $Builtin.Int8) : $Builtin.Int8, scope 292 // user: %441
  br bb73(%440 : $Builtin.Int8), scope 292        // id: %441

bb70:                                             // Preds: bb66
  %442 = builtin "cmp_slt_Int64"(%5 : $Builtin.Int64, %426 : $Builtin.Int64) : $Builtin.Int1, scope 292 // user: %443
  %443 = builtin "int_expect_Int1"(%442 : $Builtin.Int1, %4 : $Builtin.Int1) : $Builtin.Int1, scope 292 // user: %444
  cond_br %443, bb72, bb71, scope 292             // id: %444

bb71:                                             // Preds: bb70
  br bb73(%425 : $Builtin.Int8), scope 292        // id: %445

bb72:                                             // Preds: bb70
  %446 = builtin "ssub_with_overflow_Int64"(%3 : $Builtin.Int64, %426 : $Builtin.Int64, %4 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 292 // user: %447
  (%447, %448) = destructure_tuple %446 : $(Builtin.Int64, Builtin.Int1), scope 292 // users: %450, %449
  cond_fail %448 : $Builtin.Int1, "arithmetic overflow", scope 292 // id: %449
  %450 = builtin "truncOrBitCast_Int64_Int8"(%447 : $Builtin.Int64) : $Builtin.Int8, scope 292 // user: %452
  %451 = integer_literal $Builtin.Int8, 7, scope 292 // user: %452
  %452 = builtin "and_Int8"(%450 : $Builtin.Int8, %451 : $Builtin.Int8) : $Builtin.Int8, scope 292 // user: %453
  %453 = builtin "lshr_Int8"(%424 : $Builtin.Int8, %452 : $Builtin.Int8) : $Builtin.Int8, scope 292 // user: %454
  br bb73(%453 : $Builtin.Int8), scope 292        // id: %454

// %455                                           // user: %456
bb73(%455 : $Builtin.Int8):                       // Preds: bb72 bb71 bb69 bb68
  %456 = struct $UInt8 (%455 : $Builtin.Int8), scope 292 // user: %457
  store %456 to [trivial] %0 : $*UInt8, scope 292 // id: %457
  %458 = tuple (), scope 292                      // user: %459
  return %458 : $(), scope 292                    // id: %459
} // end sil function '$ss5UInt8VSzsSz3lleoiyyxz_qd__tSzRd__lFZTW'

sil_scope 293 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz20quotientAndRemainder10dividingByx0B0_x9remaindertx_tFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8) -> (@out UInt8, @out UInt8) }

// protocol witness for BinaryInteger.quotientAndRemainder(dividingBy:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 293
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz20quotientAndRemainder10dividingByx0B0_x9remaindertx_tFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8) -> (@out UInt8, @out UInt8) {
// %0                                             // user: %18
// %1                                             // user: %16
// %2                                             // user: %4
// %3                                             // user: %5
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $*UInt8, %3 : $*UInt8):
  %4 = load [trivial] %2 : $*UInt8, scope 293     // user: %6
  %5 = load [trivial] %3 : $*UInt8, scope 293     // user: %7
  %6 = destructure_struct %4 : $UInt8, scope 293  // users: %14, %13, %9
  %7 = destructure_struct %5 : $UInt8, scope 293  // users: %14, %13
  %8 = integer_literal $Builtin.Int8, 0, scope 293 // user: %9
  %9 = builtin "cmp_eq_Int8"(%6 : $Builtin.Int8, %8 : $Builtin.Int8) : $Builtin.Int1, scope 293 // user: %11
  %10 = integer_literal $Builtin.Int1, 0, scope 293 // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1, scope 293 // user: %12
  cond_br %11, bb2, bb1, scope 293                // id: %12

bb1:                                              // Preds: bb0
  %13 = builtin "udiv_Int8"(%7 : $Builtin.Int8, %6 : $Builtin.Int8) : $Builtin.Int8, scope 293 // user: %17
  %14 = builtin "urem_Int8"(%7 : $Builtin.Int8, %6 : $Builtin.Int8) : $Builtin.Int8, scope 293 // user: %15
  %15 = struct $UInt8 (%14 : $Builtin.Int8), scope 293 // user: %16
  store %15 to [trivial] %1 : $*UInt8, scope 293  // id: %16
  %17 = struct $UInt8 (%13 : $Builtin.Int8), scope 293 // user: %18
  store %17 to [trivial] %0 : $*UInt8, scope 293  // id: %18
  %19 = tuple (), scope 293                       // user: %20
  return %19 : $(), scope 293                     // id: %20

bb2:                                              // Preds: bb0
  %21 = string_literal utf8 "Division by zero", scope 293 // user: %23
  %22 = integer_literal $Builtin.Word, 16, scope 293 // user: %25
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word, scope 293 // user: %25
  %24 = integer_literal $Builtin.Int8, 2, scope 293 // users: %36, %29, %25
  %25 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %24 : $Builtin.Int8), scope 293 // user: %40
  %26 = string_literal utf8 "Swift/IntegerTypes.swift", scope 293 // user: %28
  %27 = integer_literal $Builtin.Word, 24, scope 293 // user: %29
  %28 = builtin "ptrtoint_Word"(%26 : $Builtin.RawPointer) : $Builtin.Word, scope 293 // user: %29
  %29 = struct $StaticString (%28 : $Builtin.Word, %27 : $Builtin.Word, %24 : $Builtin.Int8), scope 293 // user: %40
  %30 = integer_literal $Builtin.Int64, 480, scope 293 // user: %31
  %31 = struct $UInt (%30 : $Builtin.Int64), scope 293 // user: %40
  debug_step , scope 293                          // id: %32
  %33 = string_literal utf8 "Fatal error", scope 293 // user: %35
  %34 = integer_literal $Builtin.Word, 11, scope 293 // user: %36
  %35 = builtin "ptrtoint_Word"(%33 : $Builtin.RawPointer) : $Builtin.Word, scope 293 // user: %36
  %36 = struct $StaticString (%35 : $Builtin.Word, %34 : $Builtin.Word, %24 : $Builtin.Int8), scope 293 // user: %40
  %37 = integer_literal $Builtin.Int32, 1, scope 293 // user: %38
  %38 = struct $UInt32 (%37 : $Builtin.Int32), scope 293 // user: %40
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %39 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 293 // user: %40
  %40 = apply %39(%36, %25, %29, %31, %38) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 293
  unreachable , scope 293                         // id: %41
} // end sil function '$ss5UInt8VSzsSz20quotientAndRemainder10dividingByx0B0_x9remaindertx_tFTW'

sil_scope 294 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz10isMultiple2ofSbx_tFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8) -> Bool }

// protocol witness for BinaryInteger.isMultiple(of:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 294
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8VSzsSz10isMultiple2ofSbx_tFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8, @in_guaranteed UInt8) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*UInt8, %1 : $*UInt8):
  // function_ref specialized BinaryInteger.isMultiple(of:)
  %2 = function_ref @$sSzsE10isMultiple2ofSbx_tFs5UInt8V_Tgq5 : $@convention(method) (UInt8, UInt8) -> Bool, scope 294 // user: %5
  %3 = load [trivial] %0 : $*UInt8, scope 294     // user: %5
  %4 = load [trivial] %1 : $*UInt8, scope 294     // user: %5
  %5 = apply %2(%3, %4) : $@convention(method) (UInt8, UInt8) -> Bool, scope 294 // user: %6
  return %5 : $Bool, scope 294                    // id: %6
} // end sil function '$ss5UInt8VSzsSz10isMultiple2ofSbx_tFTW'

sil_scope 295 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8VSzsSz6signumxyFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> @out UInt8 }

// protocol witness for BinaryInteger.signum() in conformance UInt8, loc * "<compiler-generated>":0:0, scope 295
sil shared [transparent] [serialized] [thunk] [always_inline] [ossa] @$ss5UInt8VSzsSz6signumxyFTW : $@convention(witness_method: BinaryInteger) (@in_guaranteed UInt8) -> @out UInt8 {
// %0                                             // user: %11
// %1                                             // user: %2
bb0(%0 : $*UInt8, %1 : $*UInt8):
  %2 = struct_element_addr %1 : $*UInt8, #UInt8._value, scope 295 // user: %3
  %3 = load [trivial] %2 : $*Builtin.Int8, scope 295 // users: %8, %5
  %4 = integer_literal $Builtin.Int8, 0, scope 295 // user: %5
  %5 = builtin "cmp_ult_Int8"(%4 : $Builtin.Int8, %3 : $Builtin.Int8) : $Builtin.Int1, scope 295 // user: %6
  %6 = builtin "zext_Int1_Int8"(%5 : $Builtin.Int1) : $Builtin.Int8, scope 295 // user: %9
  %7 = integer_literal $Builtin.Int8, 7, scope 295 // user: %8
  %8 = builtin "lshr_Int8"(%3 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int8, scope 295 // user: %9
  %9 = builtin "or_Int8"(%6 : $Builtin.Int8, %8 : $Builtin.Int8) : $Builtin.Int8, scope 295 // user: %10
  %10 = struct $UInt8 (%9 : $Builtin.Int8), scope 295 // user: %11
  store %10 to [trivial] %0 : $*UInt8, scope 295  // id: %11
  %12 = tuple (), scope 295                       // user: %13
  return %12 : $(), scope 295                     // id: %13
} // end sil function '$ss5UInt8VSzsSz6signumxyFTW'

sil_scope 296 { loc * "<compiler-generated>":0:0 parent @$ss17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufC : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in τ_1_0, @thick τ_0_0.Type) -> @out Optional<τ_0_0> }

// FixedWidthInteger.init<A>(exactly:), loc * "<compiler-generated>":0:0, scope 296
sil public_external [serialized] [_semantics "optimize.sil.specialize.generic.partial.never"] [ossa] @$ss17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufC : $@convention(method) <Self where Self : FixedWidthInteger><T where T : BinaryFloatingPoint> (@in T, @thick Self.Type) -> @out Optional<Self> {
// %0                                             // users: %26, %22, %19
// %1                                             // users: %7, %6
bb0(%0 : $*Optional<Self>, %1 : $*T, %2 : $@thick Self.Type):
  %3 = alloc_stack $Optional<Self>, scope 296     // users: %25, %18, %13, %10, %6
  %4 = metatype $@thick Self.Type, scope 296      // user: %6
  // function_ref static FixedWidthInteger._convert<A>(from:)
  %5 = function_ref @$ss17FixedWidthIntegerPsE8_convert4fromxSg5value_Sb5exacttqd___tSBRd__lFZ : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in_guaranteed τ_1_0, @thick τ_0_0.Type) -> (@out Optional<τ_0_0>, Bool), scope 296 // user: %6
  %6 = apply %5<Self, T>(%3, %1, %4) : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in_guaranteed τ_1_0, @thick τ_0_0.Type) -> (@out Optional<τ_0_0>, Bool), scope 296 // user: %8
  destroy_addr %1 : $*T, scope 296                // id: %7
  %8 = struct_extract %6 : $Bool, #Bool._value, scope 296 // user: %9
  cond_br %8, bb2, bb1, scope 296                 // id: %9

bb1:                                              // Preds: bb0
  destroy_addr %3 : $*Optional<Self>, scope 296   // id: %10
  br bb4, scope 296                               // id: %11

bb2:                                              // Preds: bb0
  %12 = alloc_stack $Optional<Self>, scope 296    // users: %24, %21, %16, %15, %14, %13
  copy_addr [take] %3 to [init] %12 : $*Optional<Self>, scope 296 // id: %13
  switch_enum_addr %12 : $*Optional<Self>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb3, scope 296 // id: %14

bb3:                                              // Preds: bb2
  destroy_addr %12 : $*Optional<Self>, scope 296  // id: %15
  dealloc_stack %12 : $*Optional<Self>, scope 296 // id: %16
  br bb4, scope 296                               // id: %17

bb4:                                              // Preds: bb3 bb1
  dealloc_stack %3 : $*Optional<Self>, scope 296  // id: %18
  inject_enum_addr %0 : $*Optional<Self>, #Optional.none!enumelt, scope 296 // id: %19
  br bb6, scope 296                               // id: %20

bb5:                                              // Preds: bb2
  %21 = unchecked_take_enum_data_addr %12 : $*Optional<Self>, #Optional.some!enumelt, scope 296 // user: %23
  %22 = init_enum_data_addr %0 : $*Optional<Self>, #Optional.some!enumelt, scope 296 // user: %23
  copy_addr [take] %21 to [init] %22 : $*Self, scope 296 // id: %23
  dealloc_stack %12 : $*Optional<Self>, scope 296 // id: %24
  dealloc_stack %3 : $*Optional<Self>, scope 296  // id: %25
  inject_enum_addr %0 : $*Optional<Self>, #Optional.some!enumelt, scope 296 // id: %26
  br bb6, scope 296                               // id: %27

bb6:                                              // Preds: bb5 bb4
  %28 = tuple (), scope 296                       // user: %29
  return %28 : $(), scope 296                     // id: %29
} // end sil function '$ss17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufC'

sil_scope 297 { loc * "<compiler-generated>":0:0 parent @$ss17FixedWidthIntegerPsE8_convert4fromxSg5value_Sb5exacttqd___tSBRd__lFZ : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryFloatingPoint> (@in_guaranteed τ_1_0, @thick τ_0_0.Type) -> (@out Optional<τ_0_0>, Bool) }

// static FixedWidthInteger._convert<A>(from:), loc * "<compiler-generated>":0:0, scope 297
sil public_external [serialized] [_semantics "optimize.sil.specialize.generic.partial.never"] [ossa] @$ss17FixedWidthIntegerPsE8_convert4fromxSg5value_Sb5exacttqd___tSBRd__lFZ : $@convention(method) <Self where Self : FixedWidthInteger><Source where Source : BinaryFloatingPoint> (@in_guaranteed Source, @thick Self.Type) -> (@out Optional<Self>, Bool) {
// %0                                             // users: %696, %687, %678, %522, %471, %181, %43, %15
// %1                                             // users: %543, %474, %314, %187, %51, %22, %10, %4
bb0(%0 : $*Optional<Self>, %1 : $*Source, %2 : $@thick Self.Type):
  %3 = witness_method $Source, #FloatingPoint.isZero!getter : <Self where Self : FloatingPoint> (Self) -> () -> Bool : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> Bool, scope 297 // user: %4
  %4 = apply %3<Source>(%1) : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> Bool, scope 297 // user: %5
  %5 = struct_extract %4 : $Bool, #Bool._value, scope 297 // user: %7
  %6 = integer_literal $Builtin.Int1, 0, scope 297 // users: %664, %610, %447, %405, %373, %319, %207, %182, %75, %44, %16, %7
  %7 = builtin "int_expect_Int1"(%5 : $Builtin.Int1, %6 : $Builtin.Int1) : $Builtin.Int1, scope 297 // user: %8
  cond_br %7, bb89, bb1, scope 297                // id: %8

bb1:                                              // Preds: bb0
  %9 = witness_method $Source, #FloatingPoint.isFinite!getter : <Self where Self : FloatingPoint> (Self) -> () -> Bool : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> Bool, scope 297 // user: %10
  %10 = apply %9<Source>(%1) : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> Bool, scope 297 // user: %11
  %11 = struct_extract %10 : $Bool, #Bool._value, scope 297 // user: %13
  %12 = integer_literal $Builtin.Int1, -1, scope 297 // users: %310, %265, %178, %133, %13
  %13 = builtin "int_expect_Int1"(%11 : $Builtin.Int1, %12 : $Builtin.Int1) : $Builtin.Int1, scope 297 // user: %14
  cond_br %13, bb3, bb2, scope 297                // id: %14

bb2:                                              // Preds: bb1
  inject_enum_addr %0 : $*Optional<Self>, #Optional.none!enumelt, scope 297 // id: %15
  %16 = struct $Bool (%6 : $Builtin.Int1), scope 297 // user: %17
  br bb90(%16 : $Bool), scope 297                 // id: %17

bb3:                                              // Preds: bb1
  %18 = metatype $@thick Self.Type, scope 297     // users: %671, %509, %506, %498, %472, %370, %363, %53, %20
  %19 = witness_method $Self, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // users: %472, %363, %20
  %20 = apply %19<Self>(%18) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %23
  %21 = alloc_stack $Source, scope 297            // users: %685, %529, %184, %47, %42, %37, %35, %22
  copy_addr %1 to [init] %21 : $*Source, scope 297 // id: %22
  %23 = struct_extract %20 : $Bool, #Bool._value, scope 297 // user: %24
  cond_br %23, bb7, bb4, scope 297                // id: %24

bb4:                                              // Preds: bb3
  %25 = metatype $@thick Source.Type, scope 297   // users: %35, %33
  %26 = integer_literal $Builtin.IntLiteral, -1, scope 297 // user: %30
  %27 = metatype $@thick Source.IntegerLiteralType.Type, scope 297 // user: %30
  %28 = alloc_stack $Source.IntegerLiteralType, scope 297 // users: %39, %33, %30
  %29 = witness_method $Source.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %30
  %30 = apply %29<Source.IntegerLiteralType>(%28, %26, %27) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %31 = alloc_stack $Source, scope 297            // users: %38, %36, %35, %33
  %32 = witness_method $Source, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %33
  %33 = apply %32<Source>(%31, %28, %25) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %34 = witness_method $Source, #Comparable.">" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %35
  %35 = apply %34<Source>(%21, %31, %25) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %40
  destroy_addr %31 : $*Source, scope 297          // id: %36
  destroy_addr %21 : $*Source, scope 297          // id: %37
  dealloc_stack %31 : $*Source, scope 297         // id: %38
  dealloc_stack %28 : $*Source.IntegerLiteralType, scope 297 // id: %39
  %40 = struct_extract %35 : $Bool, #Bool._value, scope 297 // user: %41
  cond_br %40, bb6, bb5, scope 297                // id: %41

bb5:                                              // Preds: bb4
  dealloc_stack %21 : $*Source, scope 297         // id: %42
  inject_enum_addr %0 : $*Optional<Self>, #Optional.none!enumelt, scope 297 // id: %43
  %44 = struct $Bool (%6 : $Builtin.Int1), scope 297 // user: %45
  br bb90(%44 : $Bool), scope 297                 // id: %45

bb6:                                              // Preds: bb4
  br bb8, scope 297                               // id: %46

bb7:                                              // Preds: bb3
  destroy_addr %21 : $*Source, scope 297          // id: %47
  br bb8, scope 297                               // id: %48

bb8:                                              // Preds: bb7 bb6
  %49 = alloc_stack $Source.Exponent, scope 297   // users: %684, %531, %528, %463, %461, %365, %331, %300, %294, %282, %276, %254, %249, %235, %225, %204, %195, %183, %180, %168, %162, %150, %144, %122, %117, %103, %93, %72, %63, %51
  %50 = witness_method $Source, #FloatingPoint.exponent!getter : <Self where Self : FloatingPoint> (Self) -> () -> Self.Exponent : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0.Exponent, scope 297 // user: %51
  %51 = apply %50<Source>(%49, %1) : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0.Exponent, scope 297
  %52 = witness_method $Self, #FixedWidthInteger.bitWidth!getter : <Self where Self : FixedWidthInteger> (Self.Type) -> () -> Int : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> Int, scope 297 // users: %370, %53
  %53 = apply %52<Self>(%18) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> Int, scope 297 // users: %174, %157, %139, %129, %99, %78, %69
  %54 = metatype $@thick Source.Exponent.Type, scope 297 // users: %440, %437, %398, %395, %377, %331, %328, %294, %291, %276, %273, %249, %247, %215, %212, %191, %188, %162, %159, %144, %141, %117, %115, %83, %80, %59, %56
  %55 = witness_method $Source.Exponent, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // users: %377, %191, %188, %59, %56
  %56 = apply %55<Source.Exponent>(%54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %57
  %57 = struct_extract %56 : $Bool, #Bool._value, scope 297 // user: %58
  cond_br %57, bb22, bb9, scope 297               // id: %58

bb9:                                              // Preds: bb8
  %59 = apply %55<Source.Exponent>(%54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %60
  %60 = struct_extract %59 : $Bool, #Bool._value, scope 297 // user: %61
  cond_br %60, bb16, bb10, scope 297              // id: %61

bb10:                                             // Preds: bb9
  %62 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %63
  %63 = apply %62<Source.Exponent>(%49) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %65
  %64 = integer_literal $Builtin.Int64, 64, scope 297 // user: %66
  %65 = struct_extract %63 : $Int, #Int._value, scope 297 // user: %66
  %66 = builtin "cmp_slt_Int64"(%65 : $Builtin.Int64, %64 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %67
  cond_br %66, bb15, bb11, scope 297              // id: %67

bb11:                                             // Preds: bb10
  %68 = integer_literal $Builtin.Int64, 0, scope 297 // user: %70
  %69 = struct_extract %53 : $Int, #Int._value, scope 297 // user: %70
  %70 = builtin "cmp_slt_Int64"(%68 : $Builtin.Int64, %69 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %73
  %71 = alloc_stack $Source.Exponent, scope 297   // users: %90, %85, %83, %74, %72
  copy_addr %49 to [init] %71 : $*Source.Exponent, scope 297 // id: %72
  cond_br %70, bb13, bb12, scope 297              // id: %73

bb12:                                             // Preds: bb11
  destroy_addr %71 : $*Source.Exponent, scope 297 // id: %74
  br bb14(%6 : $Builtin.Int1), scope 297          // id: %75

bb13:                                             // Preds: bb11
  %76 = alloc_stack $Source.Exponent, scope 297   // users: %86, %84, %83, %80
  %77 = alloc_stack $Int, scope 297               // users: %81, %80, %78
  store %53 to [trivial] %77 : $*Int, scope 297   // id: %78
  %79 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %80
  %80 = apply %79<Source.Exponent, Int>(%76, %77, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %77 : $*Int, scope 297            // id: %81
  %82 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %83
  %83 = apply %82<Source.Exponent>(%71, %76, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %87
  destroy_addr %76 : $*Source.Exponent, scope 297 // id: %84
  destroy_addr %71 : $*Source.Exponent, scope 297 // id: %85
  dealloc_stack %76 : $*Source.Exponent, scope 297 // id: %86
  %87 = struct_extract %83 : $Bool, #Bool._value, scope 297 // user: %88
  br bb14(%87 : $Builtin.Int1), scope 297         // id: %88

// %89                                            // user: %91
bb14(%89 : $Builtin.Int1):                        // Preds: bb13 bb12
  dealloc_stack %71 : $*Source.Exponent, scope 297 // id: %90
  br bb25(%89 : $Builtin.Int1), scope 297         // id: %91

bb15:                                             // Preds: bb10
  %92 = alloc_stack $Source.Exponent, scope 297   // users: %98, %96, %95, %93
  copy_addr %49 to [init] %92 : $*Source.Exponent, scope 297 // id: %93
  %94 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %95
  %95 = apply %94<Source.Exponent>(%92) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %97
  destroy_addr %92 : $*Source.Exponent, scope 297 // id: %96
  %97 = struct_extract %95 : $UInt, #UInt._value, scope 297 // user: %100
  dealloc_stack %92 : $*Source.Exponent, scope 297 // id: %98
  %99 = struct_extract %53 : $Int, #Int._value, scope 297 // user: %100
  %100 = builtin "cmp_slt_Int64"(%97 : $Builtin.Int64, %99 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %101
  br bb25(%100 : $Builtin.Int1), scope 297        // id: %101

bb16:                                             // Preds: bb9
  %102 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %103
  %103 = apply %102<Source.Exponent>(%49) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %105
  %104 = integer_literal $Builtin.Int64, 64, scope 297 // user: %106
  %105 = struct_extract %103 : $Int, #Int._value, scope 297 // user: %106
  %106 = builtin "cmp_slt_Int64"(%104 : $Builtin.Int64, %105 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %107
  cond_br %106, bb21, bb17, scope 297             // id: %107

bb17:                                             // Preds: bb16
  %108 = integer_literal $Builtin.IntLiteral, 0, scope 297 // user: %112
  %109 = metatype $@thick Source.Exponent.IntegerLiteralType.Type, scope 297 // user: %112
  %110 = alloc_stack $Source.Exponent.IntegerLiteralType, scope 297 // users: %120, %115, %112
  %111 = witness_method $Source.Exponent.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %112
  %112 = apply %111<Source.Exponent.IntegerLiteralType>(%110, %108, %109) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %113 = alloc_stack $Source.Exponent, scope 297  // users: %119, %118, %117, %115
  %114 = witness_method $Source.Exponent, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %115
  %115 = apply %114<Source.Exponent>(%113, %110, %54) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %116 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %117
  %117 = apply %116<Source.Exponent>(%49, %113, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %123
  destroy_addr %113 : $*Source.Exponent, scope 297 // id: %118
  dealloc_stack %113 : $*Source.Exponent, scope 297 // id: %119
  dealloc_stack %110 : $*Source.Exponent.IntegerLiteralType, scope 297 // id: %120
  %121 = alloc_stack $Source.Exponent, scope 297  // users: %135, %132, %127, %126, %122
  copy_addr %49 to [init] %121 : $*Source.Exponent, scope 297 // id: %122
  %123 = struct_extract %117 : $Bool, #Bool._value, scope 297 // user: %124
  cond_br %123, bb19, bb18, scope 297             // id: %124

bb18:                                             // Preds: bb17
  %125 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %126
  %126 = apply %125<Source.Exponent>(%121) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %128
  destroy_addr %121 : $*Source.Exponent, scope 297 // id: %127
  %128 = struct_extract %126 : $UInt, #UInt._value, scope 297 // user: %130
  %129 = struct_extract %53 : $Int, #Int._value, scope 297 // user: %130
  %130 = builtin "cmp_slt_Int64"(%128 : $Builtin.Int64, %129 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %131
  br bb20(%130 : $Builtin.Int1), scope 297        // id: %131

bb19:                                             // Preds: bb17
  destroy_addr %121 : $*Source.Exponent, scope 297 // id: %132
  br bb20(%12 : $Builtin.Int1), scope 297         // id: %133

// %134                                           // user: %136
bb20(%134 : $Builtin.Int1):                       // Preds: bb19 bb18
  dealloc_stack %121 : $*Source.Exponent, scope 297 // id: %135
  br bb25(%134 : $Builtin.Int1), scope 297        // id: %136

bb21:                                             // Preds: bb16
  %137 = alloc_stack $Source.Exponent, scope 297  // users: %146, %145, %144, %141
  %138 = alloc_stack $Int, scope 297              // users: %142, %141, %139
  store %53 to [trivial] %138 : $*Int, scope 297  // id: %139
  %140 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %141
  %141 = apply %140<Source.Exponent, Int>(%137, %138, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %138 : $*Int, scope 297           // id: %142
  %143 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %144
  %144 = apply %143<Source.Exponent>(%49, %137, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %147
  destroy_addr %137 : $*Source.Exponent, scope 297 // id: %145
  dealloc_stack %137 : $*Source.Exponent, scope 297 // id: %146
  %147 = struct_extract %144 : $Bool, #Bool._value, scope 297 // user: %148
  br bb25(%147 : $Builtin.Int1), scope 297        // id: %148

bb22:                                             // Preds: bb8
  %149 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %150
  %150 = apply %149<Source.Exponent>(%49) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %152
  %151 = integer_literal $Builtin.Int64, 64, scope 297 // user: %153
  %152 = struct_extract %150 : $Int, #Int._value, scope 297 // user: %153
  %153 = builtin "cmp_slt_Int64"(%152 : $Builtin.Int64, %151 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %154
  cond_br %153, bb24, bb23, scope 297             // id: %154

bb23:                                             // Preds: bb22
  %155 = alloc_stack $Source.Exponent, scope 297  // users: %164, %163, %162, %159
  %156 = alloc_stack $Int, scope 297              // users: %160, %159, %157
  store %53 to [trivial] %156 : $*Int, scope 297  // id: %157
  %158 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %159
  %159 = apply %158<Source.Exponent, Int>(%155, %156, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %156 : $*Int, scope 297           // id: %160
  %161 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %162
  %162 = apply %161<Source.Exponent>(%49, %155, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %165
  destroy_addr %155 : $*Source.Exponent, scope 297 // id: %163
  dealloc_stack %155 : $*Source.Exponent, scope 297 // id: %164
  %165 = struct_extract %162 : $Bool, #Bool._value, scope 297 // user: %166
  br bb25(%165 : $Builtin.Int1), scope 297        // id: %166

bb24:                                             // Preds: bb22
  %167 = alloc_stack $Source.Exponent, scope 297  // users: %173, %171, %170, %168
  copy_addr %49 to [init] %167 : $*Source.Exponent, scope 297 // id: %168
  %169 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %170
  %170 = apply %169<Source.Exponent>(%167) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %172
  destroy_addr %167 : $*Source.Exponent, scope 297 // id: %171
  %172 = struct_extract %170 : $UInt, #UInt._value, scope 297 // user: %175
  dealloc_stack %167 : $*Source.Exponent, scope 297 // id: %173
  %174 = struct_extract %53 : $Int, #Int._value, scope 297 // user: %175
  %175 = builtin "cmp_slt_Int64"(%172 : $Builtin.Int64, %174 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %176
  br bb25(%175 : $Builtin.Int1), scope 297        // id: %176

// %177                                           // user: %178
bb25(%177 : $Builtin.Int1):                       // Preds: bb24 bb23 bb21 bb20 bb15 bb14
  %178 = builtin "int_expect_Int1"(%177 : $Builtin.Int1, %12 : $Builtin.Int1) : $Builtin.Int1, scope 297 // user: %179
  cond_br %178, bb27, bb26, scope 297             // id: %179

bb26:                                             // Preds: bb25
  destroy_addr %49 : $*Source.Exponent, scope 297 // id: %180
  inject_enum_addr %0 : $*Optional<Self>, #Optional.none!enumelt, scope 297 // id: %181
  %182 = struct $Bool (%6 : $Builtin.Int1), scope 297 // user: %185
  dealloc_stack %49 : $*Source.Exponent, scope 297 // id: %183
  dealloc_stack %21 : $*Source, scope 297         // id: %184
  br bb90(%182 : $Bool), scope 297                // id: %185

bb27:                                             // Preds: bb25
  %186 = witness_method $Source, #BinaryFloatingPoint.significandWidth!getter : <Self where Self : BinaryFloatingPoint> (Self) -> () -> Int : $@convention(witness_method: BinaryFloatingPoint) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %187
  %187 = apply %186<Source>(%1) : $@convention(witness_method: BinaryFloatingPoint) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in_guaranteed τ_0_0) -> Int, scope 297 // users: %317, %306, %289, %271, %261, %231, %210, %201
  %188 = apply %55<Source.Exponent>(%54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %189
  %189 = struct_extract %188 : $Bool, #Bool._value, scope 297 // user: %190
  cond_br %189, bb41, bb28, scope 297             // id: %190

bb28:                                             // Preds: bb27
  %191 = apply %55<Source.Exponent>(%54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %192
  %192 = struct_extract %191 : $Bool, #Bool._value, scope 297 // user: %193
  cond_br %192, bb35, bb29, scope 297             // id: %193

bb29:                                             // Preds: bb28
  %194 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %195
  %195 = apply %194<Source.Exponent>(%49) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %197
  %196 = integer_literal $Builtin.Int64, 64, scope 297 // user: %198
  %197 = struct_extract %195 : $Int, #Int._value, scope 297 // user: %198
  %198 = builtin "cmp_slt_Int64"(%197 : $Builtin.Int64, %196 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %199
  cond_br %198, bb34, bb30, scope 297             // id: %199

bb30:                                             // Preds: bb29
  %200 = integer_literal $Builtin.Int64, 0, scope 297 // user: %202
  %201 = struct_extract %187 : $Int, #Int._value, scope 297 // user: %202
  %202 = builtin "cmp_slt_Int64"(%200 : $Builtin.Int64, %201 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %205
  %203 = alloc_stack $Source.Exponent, scope 297  // users: %222, %217, %215, %206, %204
  copy_addr %49 to [init] %203 : $*Source.Exponent, scope 297 // id: %204
  cond_br %202, bb32, bb31, scope 297             // id: %205

bb31:                                             // Preds: bb30
  destroy_addr %203 : $*Source.Exponent, scope 297 // id: %206
  br bb33(%6 : $Builtin.Int1), scope 297          // id: %207

bb32:                                             // Preds: bb30
  %208 = alloc_stack $Source.Exponent, scope 297  // users: %218, %216, %215, %212
  %209 = alloc_stack $Int, scope 297              // users: %213, %212, %210
  store %187 to [trivial] %209 : $*Int, scope 297 // id: %210
  %211 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %212
  %212 = apply %211<Source.Exponent, Int>(%208, %209, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %209 : $*Int, scope 297           // id: %213
  %214 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %215
  %215 = apply %214<Source.Exponent>(%203, %208, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %219
  destroy_addr %208 : $*Source.Exponent, scope 297 // id: %216
  destroy_addr %203 : $*Source.Exponent, scope 297 // id: %217
  dealloc_stack %208 : $*Source.Exponent, scope 297 // id: %218
  %219 = struct_extract %215 : $Bool, #Bool._value, scope 297 // user: %220
  br bb33(%219 : $Builtin.Int1), scope 297        // id: %220

// %221                                           // user: %223
bb33(%221 : $Builtin.Int1):                       // Preds: bb32 bb31
  dealloc_stack %203 : $*Source.Exponent, scope 297 // id: %222
  br bb44(%221 : $Builtin.Int1), scope 297        // id: %223

bb34:                                             // Preds: bb29
  %224 = alloc_stack $Source.Exponent, scope 297  // users: %230, %228, %227, %225
  copy_addr %49 to [init] %224 : $*Source.Exponent, scope 297 // id: %225
  %226 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %227
  %227 = apply %226<Source.Exponent>(%224) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %229
  destroy_addr %224 : $*Source.Exponent, scope 297 // id: %228
  %229 = struct_extract %227 : $UInt, #UInt._value, scope 297 // user: %232
  dealloc_stack %224 : $*Source.Exponent, scope 297 // id: %230
  %231 = struct_extract %187 : $Int, #Int._value, scope 297 // user: %232
  %232 = builtin "cmp_slt_Int64"(%229 : $Builtin.Int64, %231 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %233
  br bb44(%232 : $Builtin.Int1), scope 297        // id: %233

bb35:                                             // Preds: bb28
  %234 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %235
  %235 = apply %234<Source.Exponent>(%49) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %237
  %236 = integer_literal $Builtin.Int64, 64, scope 297 // user: %238
  %237 = struct_extract %235 : $Int, #Int._value, scope 297 // user: %238
  %238 = builtin "cmp_slt_Int64"(%236 : $Builtin.Int64, %237 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %239
  cond_br %238, bb40, bb36, scope 297             // id: %239

bb36:                                             // Preds: bb35
  %240 = integer_literal $Builtin.IntLiteral, 0, scope 297 // user: %244
  %241 = metatype $@thick Source.Exponent.IntegerLiteralType.Type, scope 297 // user: %244
  %242 = alloc_stack $Source.Exponent.IntegerLiteralType, scope 297 // users: %252, %247, %244
  %243 = witness_method $Source.Exponent.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %244
  %244 = apply %243<Source.Exponent.IntegerLiteralType>(%242, %240, %241) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %245 = alloc_stack $Source.Exponent, scope 297  // users: %251, %250, %249, %247
  %246 = witness_method $Source.Exponent, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %247
  %247 = apply %246<Source.Exponent>(%245, %242, %54) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %248 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %249
  %249 = apply %248<Source.Exponent>(%49, %245, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %255
  destroy_addr %245 : $*Source.Exponent, scope 297 // id: %250
  dealloc_stack %245 : $*Source.Exponent, scope 297 // id: %251
  dealloc_stack %242 : $*Source.Exponent.IntegerLiteralType, scope 297 // id: %252
  %253 = alloc_stack $Source.Exponent, scope 297  // users: %267, %264, %259, %258, %254
  copy_addr %49 to [init] %253 : $*Source.Exponent, scope 297 // id: %254
  %255 = struct_extract %249 : $Bool, #Bool._value, scope 297 // user: %256
  cond_br %255, bb38, bb37, scope 297             // id: %256

bb37:                                             // Preds: bb36
  %257 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %258
  %258 = apply %257<Source.Exponent>(%253) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %260
  destroy_addr %253 : $*Source.Exponent, scope 297 // id: %259
  %260 = struct_extract %258 : $UInt, #UInt._value, scope 297 // user: %262
  %261 = struct_extract %187 : $Int, #Int._value, scope 297 // user: %262
  %262 = builtin "cmp_slt_Int64"(%260 : $Builtin.Int64, %261 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %263
  br bb39(%262 : $Builtin.Int1), scope 297        // id: %263

bb38:                                             // Preds: bb36
  destroy_addr %253 : $*Source.Exponent, scope 297 // id: %264
  br bb39(%12 : $Builtin.Int1), scope 297         // id: %265

// %266                                           // user: %268
bb39(%266 : $Builtin.Int1):                       // Preds: bb38 bb37
  dealloc_stack %253 : $*Source.Exponent, scope 297 // id: %267
  br bb44(%266 : $Builtin.Int1), scope 297        // id: %268

bb40:                                             // Preds: bb35
  %269 = alloc_stack $Source.Exponent, scope 297  // users: %278, %277, %276, %273
  %270 = alloc_stack $Int, scope 297              // users: %274, %273, %271
  store %187 to [trivial] %270 : $*Int, scope 297 // id: %271
  %272 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %273
  %273 = apply %272<Source.Exponent, Int>(%269, %270, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %270 : $*Int, scope 297           // id: %274
  %275 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %276
  %276 = apply %275<Source.Exponent>(%49, %269, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %279
  destroy_addr %269 : $*Source.Exponent, scope 297 // id: %277
  dealloc_stack %269 : $*Source.Exponent, scope 297 // id: %278
  %279 = struct_extract %276 : $Bool, #Bool._value, scope 297 // user: %280
  br bb44(%279 : $Builtin.Int1), scope 297        // id: %280

bb41:                                             // Preds: bb27
  %281 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %282
  %282 = apply %281<Source.Exponent>(%49) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %284
  %283 = integer_literal $Builtin.Int64, 64, scope 297 // user: %285
  %284 = struct_extract %282 : $Int, #Int._value, scope 297 // user: %285
  %285 = builtin "cmp_slt_Int64"(%284 : $Builtin.Int64, %283 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %286
  cond_br %285, bb43, bb42, scope 297             // id: %286

bb42:                                             // Preds: bb41
  %287 = alloc_stack $Source.Exponent, scope 297  // users: %296, %295, %294, %291
  %288 = alloc_stack $Int, scope 297              // users: %292, %291, %289
  store %187 to [trivial] %288 : $*Int, scope 297 // id: %289
  %290 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %291
  %291 = apply %290<Source.Exponent, Int>(%287, %288, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %288 : $*Int, scope 297           // id: %292
  %293 = witness_method $Source.Exponent, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %294
  %294 = apply %293<Source.Exponent>(%49, %287, %54) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %297
  destroy_addr %287 : $*Source.Exponent, scope 297 // id: %295
  dealloc_stack %287 : $*Source.Exponent, scope 297 // id: %296
  %297 = struct_extract %294 : $Bool, #Bool._value, scope 297 // user: %298
  br bb44(%297 : $Builtin.Int1), scope 297        // id: %298

bb43:                                             // Preds: bb41
  %299 = alloc_stack $Source.Exponent, scope 297  // users: %305, %303, %302, %300
  copy_addr %49 to [init] %299 : $*Source.Exponent, scope 297 // id: %300
  %301 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %302
  %302 = apply %301<Source.Exponent>(%299) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %304
  destroy_addr %299 : $*Source.Exponent, scope 297 // id: %303
  %304 = struct_extract %302 : $UInt, #UInt._value, scope 297 // user: %307
  dealloc_stack %299 : $*Source.Exponent, scope 297 // id: %305
  %306 = struct_extract %187 : $Int, #Int._value, scope 297 // user: %307
  %307 = builtin "cmp_slt_Int64"(%304 : $Builtin.Int64, %306 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %308
  br bb44(%307 : $Builtin.Int1), scope 297        // id: %308

// %309                                           // user: %310
bb44(%309 : $Builtin.Int1):                       // Preds: bb43 bb42 bb40 bb39 bb34 bb33
  %310 = builtin "xor_Int1"(%309 : $Builtin.Int1, %12 : $Builtin.Int1) : $Builtin.Int1, scope 297 // user: %311
  %311 = struct $Bool (%310 : $Builtin.Int1), scope 297 // users: %674, %673, %530
  %312 = alloc_stack $Source.RawSignificand, scope 297 // users: %683, %527, %353, %346, %344, %316, %314
  %313 = witness_method $Source, #BinaryFloatingPoint.significandBitPattern!getter : <Self where Self : BinaryFloatingPoint> (Self) -> () -> Self.RawSignificand : $@convention(witness_method: BinaryFloatingPoint) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0.RawSignificand, scope 297 // user: %314
  %314 = apply %313<Source>(%312, %1) : $@convention(witness_method: BinaryFloatingPoint) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0.RawSignificand, scope 297
  %315 = witness_method $Source.RawSignificand, #BinaryInteger.trailingZeroBitCount!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %316
  %316 = apply %315<Source.RawSignificand>(%312) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %318
  %317 = struct_extract %187 : $Int, #Int._value, scope 297 // user: %319
  %318 = struct_extract %316 : $Int, #Int._value, scope 297 // user: %319
  %319 = builtin "sadd_with_overflow_Int64"(%317 : $Builtin.Int64, %318 : $Builtin.Int64, %6 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 297 // user: %320
  (%320, %321) = destructure_tuple %319 : $(Builtin.Int64, Builtin.Int1), scope 297 // users: %339, %322
  %322 = struct $Int (%320 : $Builtin.Int64), scope 297 // user: %326
  %323 = alloc_stack $Source.Exponent, scope 297  // users: %682, %526, %360, %358, %345, %344, %331
  %324 = alloc_stack $Source.Exponent, scope 297  // users: %333, %332, %331, %328
  %325 = alloc_stack $Int, scope 297              // users: %329, %328, %326
  store %322 to [trivial] %325 : $*Int, scope 297 // id: %326
  %327 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %328
  %328 = apply %327<Source.Exponent, Int>(%324, %325, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %325 : $*Int, scope 297           // id: %329
  %330 = witness_method $Source.Exponent, #AdditiveArithmetic."-" : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self : $@convention(witness_method: AdditiveArithmetic) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %331
  %331 = apply %330<Source.Exponent>(%323, %49, %324, %54) : $@convention(witness_method: AdditiveArithmetic) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  destroy_addr %324 : $*Source.Exponent, scope 297 // id: %332
  dealloc_stack %324 : $*Source.Exponent, scope 297 // id: %333
  %334 = alloc_stack $Self.Magnitude, scope 297   // users: %681, %548, %525, %469, %467, %358, %348
  %335 = metatype $@thick Self.Magnitude.Type, scope 297 // users: %646, %643, %627, %624, %601, %599, %575, %572, %559, %556, %467, %461, %459, %358, %355, %348, %337
  %336 = witness_method $Self.Magnitude, #FixedWidthInteger.bitWidth!getter : <Self where Self : FixedWidthInteger> (Self.Type) -> () -> Int : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> Int, scope 297 // user: %337
  %337 = apply %336<Self.Magnitude>(%335) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> Int, scope 297 // user: %338
  %338 = struct_extract %337 : $Int, #Int._value, scope 297 // user: %339
  %339 = builtin "cmp_slt_Int64"(%320 : $Builtin.Int64, %338 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %340
  cond_br %339, bb46, bb45, scope 297             // id: %340

bb45:                                             // Preds: bb44
  %341 = alloc_stack $Source.RawSignificand, scope 297 // users: %349, %348, %344
  %342 = metatype $@thick Source.RawSignificand.Type, scope 297 // user: %344
  %343 = witness_method $Source.RawSignificand, #BinaryInteger."<<" : <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (Self, RHS) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %344
  %344 = apply %343<Source.RawSignificand, Source.Exponent>(%341, %312, %323, %342) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  destroy_addr %323 : $*Source.Exponent, scope 297 // id: %345
  destroy_addr %312 : $*Source.RawSignificand, scope 297 // id: %346
  %347 = witness_method $Self.Magnitude, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %348
  %348 = apply %347<Self.Magnitude, Source.RawSignificand>(%334, %341, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %341 : $*Source.RawSignificand, scope 297 // id: %349
  br bb47, scope 297                              // id: %350

bb46:                                             // Preds: bb44
  %351 = alloc_stack $Self.Magnitude, scope 297   // users: %361, %359, %358, %355
  %352 = alloc_stack $Source.RawSignificand, scope 297 // users: %356, %355, %353
  copy_addr [take] %312 to [init] %352 : $*Source.RawSignificand, scope 297 // id: %353
  %354 = witness_method $Self.Magnitude, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %355
  %355 = apply %354<Self.Magnitude, Source.RawSignificand>(%351, %352, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %352 : $*Source.RawSignificand, scope 297 // id: %356
  %357 = witness_method $Self.Magnitude, #BinaryInteger."<<" : <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (Self, RHS) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %358
  %358 = apply %357<Self.Magnitude, Source.Exponent>(%334, %351, %323, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  destroy_addr %351 : $*Self.Magnitude, scope 297 // id: %359
  destroy_addr %323 : $*Source.Exponent, scope 297 // id: %360
  dealloc_stack %351 : $*Self.Magnitude, scope 297 // id: %361
  br bb47, scope 297                              // id: %362

bb47:                                             // Preds: bb46 bb45
  %363 = apply %19<Self>(%18) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %366
  %364 = alloc_stack $Source.Exponent, scope 297  // users: %680, %524, %442, %440, %425, %420, %410, %389, %382, %368, %365
  copy_addr %49 to [init] %364 : $*Source.Exponent, scope 297 // id: %365
  %366 = struct_extract %363 : $Bool, #Bool._value, scope 297 // user: %367
  cond_br %366, bb49, bb48, scope 297             // id: %367

bb48:                                             // Preds: bb47
  destroy_addr %364 : $*Source.Exponent, scope 297 // id: %368
  br bb61, scope 297                              // id: %369

bb49:                                             // Preds: bb47
  %370 = apply %52<Self>(%18) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> Int, scope 297 // user: %372
  %371 = integer_literal $Builtin.Int64, 1, scope 297 // user: %373
  %372 = struct_extract %370 : $Int, #Int._value, scope 297 // user: %373
  %373 = builtin "ssub_with_overflow_Int64"(%372 : $Builtin.Int64, %371 : $Builtin.Int64, %6 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 297 // user: %374
  (%374, %375) = destructure_tuple %373 : $(Builtin.Int64, Builtin.Int1), scope 297 // users: %431, %416, %387, %376
  %376 = struct $Int (%374 : $Builtin.Int64), scope 297 // users: %435, %393
  %377 = apply %55<Source.Exponent>(%54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %378
  %378 = struct_extract %377 : $Bool, #Bool._value, scope 297 // user: %379
  cond_br %378, bb56, bb50, scope 297             // id: %379

bb50:                                             // Preds: bb49
  %380 = integer_literal $Builtin.Int64, 64, scope 297 // user: %384
  %381 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %382
  %382 = apply %381<Source.Exponent>(%364) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %383
  %383 = struct_extract %382 : $Int, #Int._value, scope 297 // user: %384
  %384 = builtin "cmp_slt_Int64"(%383 : $Builtin.Int64, %380 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %385
  cond_br %384, bb55, bb51, scope 297             // id: %385

bb51:                                             // Preds: bb50
  %386 = integer_literal $Builtin.Int64, 0, scope 297 // user: %387
  %387 = builtin "cmp_slt_Int64"(%374 : $Builtin.Int64, %386 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %390
  %388 = alloc_stack $Source.Exponent, scope 297  // users: %407, %404, %400, %398, %389
  copy_addr [take] %364 to [init] %388 : $*Source.Exponent, scope 297 // id: %389
  cond_br %387, bb53, bb52, scope 297             // id: %390

bb52:                                             // Preds: bb51
  %391 = alloc_stack $Source.Exponent, scope 297  // users: %401, %399, %398, %395
  %392 = alloc_stack $Int, scope 297              // users: %396, %395, %393
  store %376 to [trivial] %392 : $*Int, scope 297 // id: %393
  %394 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %395
  %395 = apply %394<Source.Exponent, Int>(%391, %392, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %392 : $*Int, scope 297           // id: %396
  %397 = witness_method $Source.Exponent, #Equatable."==" : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %398
  %398 = apply %397<Source.Exponent>(%391, %388, %54) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %402
  destroy_addr %391 : $*Source.Exponent, scope 297 // id: %399
  destroy_addr %388 : $*Source.Exponent, scope 297 // id: %400
  dealloc_stack %391 : $*Source.Exponent, scope 297 // id: %401
  %402 = struct_extract %398 : $Bool, #Bool._value, scope 297 // user: %403
  br bb54(%402 : $Builtin.Int1), scope 297        // id: %403

bb53:                                             // Preds: bb51
  destroy_addr %388 : $*Source.Exponent, scope 297 // id: %404
  br bb54(%6 : $Builtin.Int1), scope 297          // id: %405

// %406                                           // user: %408
bb54(%406 : $Builtin.Int1):                       // Preds: bb53 bb52
  dealloc_stack %388 : $*Source.Exponent, scope 297 // id: %407
  br bb59(%406 : $Builtin.Int1), scope 297        // id: %408

bb55:                                             // Preds: bb50
  %409 = alloc_stack $Source.Exponent, scope 297  // users: %415, %413, %412, %410
  copy_addr [take] %364 to [init] %409 : $*Source.Exponent, scope 297 // id: %410
  %411 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %412
  %412 = apply %411<Source.Exponent>(%409) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %414
  destroy_addr %409 : $*Source.Exponent, scope 297 // id: %413
  %414 = struct_extract %412 : $UInt, #UInt._value, scope 297 // user: %416
  dealloc_stack %409 : $*Source.Exponent, scope 297 // id: %415
  %416 = builtin "cmp_eq_Int64"(%374 : $Builtin.Int64, %414 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %417
  br bb59(%416 : $Builtin.Int1), scope 297        // id: %417

bb56:                                             // Preds: bb49
  %418 = integer_literal $Builtin.Int64, 64, scope 297 // user: %422
  %419 = witness_method $Source.Exponent, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %420
  %420 = apply %419<Source.Exponent>(%364) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %421
  %421 = struct_extract %420 : $Int, #Int._value, scope 297 // user: %422
  %422 = builtin "cmp_slt_Int64"(%418 : $Builtin.Int64, %421 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %423
  cond_br %422, bb58, bb57, scope 297             // id: %423

bb57:                                             // Preds: bb56
  %424 = alloc_stack $Source.Exponent, scope 297  // users: %430, %428, %427, %425
  copy_addr [take] %364 to [init] %424 : $*Source.Exponent, scope 297 // id: %425
  %426 = witness_method $Source.Exponent, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %427
  %427 = apply %426<Source.Exponent>(%424) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %429
  destroy_addr %424 : $*Source.Exponent, scope 297 // id: %428
  %429 = struct_extract %427 : $UInt, #UInt._value, scope 297 // user: %431
  dealloc_stack %424 : $*Source.Exponent, scope 297 // id: %430
  %431 = builtin "cmp_eq_Int64"(%374 : $Builtin.Int64, %429 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %432
  br bb59(%431 : $Builtin.Int1), scope 297        // id: %432

bb58:                                             // Preds: bb56
  %433 = alloc_stack $Source.Exponent, scope 297  // users: %443, %441, %440, %437
  %434 = alloc_stack $Int, scope 297              // users: %438, %437, %435
  store %376 to [trivial] %434 : $*Int, scope 297 // id: %435
  %436 = witness_method $Source.Exponent, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %437
  %437 = apply %436<Source.Exponent, Int>(%433, %434, %54) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %434 : $*Int, scope 297           // id: %438
  %439 = witness_method $Source.Exponent, #Equatable."==" : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %440
  %440 = apply %439<Source.Exponent>(%433, %364, %54) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %444
  destroy_addr %433 : $*Source.Exponent, scope 297 // id: %441
  destroy_addr %364 : $*Source.Exponent, scope 297 // id: %442
  dealloc_stack %433 : $*Source.Exponent, scope 297 // id: %443
  %444 = struct_extract %440 : $Bool, #Bool._value, scope 297 // user: %445
  br bb59(%444 : $Builtin.Int1), scope 297        // id: %445

// %446                                           // user: %447
bb59(%446 : $Builtin.Int1):                       // Preds: bb58 bb57 bb55 bb54
  %447 = builtin "int_expect_Int1"(%446 : $Builtin.Int1, %6 : $Builtin.Int1) : $Builtin.Int1, scope 297 // user: %448
  cond_br %447, bb68, bb60, scope 297             // id: %448

bb60:                                             // Preds: bb59
  br bb61, scope 297                              // id: %449

bb61:                                             // Preds: bb60 bb48
  %450 = alloc_stack $Self.Magnitude, scope 297   // users: %523, %509, %498, %467
  %451 = alloc_stack $Self.Magnitude, scope 297   // users: %470, %468, %467, %461
  %452 = integer_literal $Builtin.IntLiteral, 1, scope 297 // user: %456
  %453 = metatype $@thick Self.Magnitude.IntegerLiteralType.Type, scope 297 // user: %456
  %454 = alloc_stack $Self.Magnitude.IntegerLiteralType, scope 297 // users: %465, %459, %456
  %455 = witness_method $Self.Magnitude.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %456
  %456 = apply %455<Self.Magnitude.IntegerLiteralType>(%454, %452, %453) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %457 = alloc_stack $Self.Magnitude, scope 297   // users: %464, %462, %461, %459
  %458 = witness_method $Self.Magnitude, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %459
  %459 = apply %458<Self.Magnitude>(%457, %454, %335) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %460 = witness_method $Self.Magnitude, #BinaryInteger."<<" : <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (Self, RHS) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %461
  %461 = apply %460<Self.Magnitude, Source.Exponent>(%451, %457, %49, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  destroy_addr %457 : $*Self.Magnitude, scope 297 // id: %462
  destroy_addr %49 : $*Source.Exponent, scope 297 // id: %463
  dealloc_stack %457 : $*Self.Magnitude, scope 297 // id: %464
  dealloc_stack %454 : $*Self.Magnitude.IntegerLiteralType, scope 297 // id: %465
  %466 = witness_method $Self.Magnitude, #BinaryInteger."|" : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %467
  %467 = apply %466<Self.Magnitude>(%450, %451, %334, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  destroy_addr %451 : $*Self.Magnitude, scope 297 // id: %468
  destroy_addr %334 : $*Self.Magnitude, scope 297 // id: %469
  dealloc_stack %451 : $*Self.Magnitude, scope 297 // id: %470
  %471 = init_enum_data_addr %0 : $*Optional<Self>, #Optional.some!enumelt, scope 297 // users: %515, %498
  %472 = apply %19<Self>(%18) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %475
  %473 = alloc_stack $Source, scope 297           // users: %521, %491, %489, %477, %474
  copy_addr %1 to [init] %473 : $*Source, scope 297 // id: %474
  %475 = struct_extract %472 : $Bool, #Bool._value, scope 297 // user: %476
  cond_br %475, bb63, bb62, scope 297             // id: %476

bb62:                                             // Preds: bb61
  destroy_addr %473 : $*Source, scope 297         // id: %477
  br bb65, scope 297                              // id: %478

bb63:                                             // Preds: bb61
  %479 = metatype $@thick Source.Type, scope 297  // users: %489, %487
  %480 = integer_literal $Builtin.IntLiteral, 0, scope 297 // users: %503, %484
  %481 = metatype $@thick Source.IntegerLiteralType.Type, scope 297 // user: %484
  %482 = alloc_stack $Source.IntegerLiteralType, scope 297 // users: %493, %487, %484
  %483 = witness_method $Source.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %484
  %484 = apply %483<Source.IntegerLiteralType>(%482, %480, %481) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %485 = alloc_stack $Source, scope 297           // users: %492, %490, %489, %487
  %486 = witness_method $Source, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %487
  %487 = apply %486<Source>(%485, %482, %479) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %488 = witness_method $Source, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %489
  %489 = apply %488<Source>(%473, %485, %479) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %494
  destroy_addr %485 : $*Source, scope 297         // id: %490
  destroy_addr %473 : $*Source, scope 297         // id: %491
  dealloc_stack %485 : $*Source, scope 297        // id: %492
  dealloc_stack %482 : $*Source.IntegerLiteralType, scope 297 // id: %493
  %494 = struct_extract %489 : $Bool, #Bool._value, scope 297 // user: %495
  cond_br %494, bb66, bb64, scope 297             // id: %495

bb64:                                             // Preds: bb63
  br bb65, scope 297                              // id: %496

bb65:                                             // Preds: bb64 bb62
  %497 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %498
  %498 = apply %497<Self, Self.Magnitude>(%471, %450, %18) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  br bb67, scope 297                              // id: %499

bb66:                                             // Preds: bb63
  %500 = metatype $@thick Self.IntegerLiteralType.Type, scope 297 // user: %503
  %501 = alloc_stack $Self.IntegerLiteralType, scope 297 // users: %519, %506, %503
  %502 = witness_method $Self.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %503
  %503 = apply %502<Self.IntegerLiteralType>(%501, %480, %500) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %504 = alloc_stack $Self, scope 297             // users: %518, %514, %512, %506
  %505 = witness_method $Self, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %506
  %506 = apply %505<Self>(%504, %501, %18) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %507 = alloc_stack $Self, scope 297             // users: %517, %513, %512, %509
  %508 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %509
  %509 = apply %508<Self, Self.Magnitude>(%507, %450, %18) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %510 = alloc_stack $Self, scope 297             // users: %516, %515, %512
  %511 = witness_method $Self, #FixedWidthInteger.subtractingReportingOverflow : <Self where Self : FixedWidthInteger> (Self) -> (Self) -> (partialValue: Self, overflow: Bool) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> (@out τ_0_0, Bool), scope 297 // user: %512
  %512 = apply %511<Self>(%510, %507, %504) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> (@out τ_0_0, Bool), scope 297
  destroy_addr %507 : $*Self, scope 297           // id: %513
  destroy_addr %504 : $*Self, scope 297           // id: %514
  copy_addr [take] %510 to [init] %471 : $*Self, scope 297 // id: %515
  dealloc_stack %510 : $*Self, scope 297          // id: %516
  dealloc_stack %507 : $*Self, scope 297          // id: %517
  dealloc_stack %504 : $*Self, scope 297          // id: %518
  dealloc_stack %501 : $*Self.IntegerLiteralType, scope 297 // id: %519
  br bb67, scope 297                              // id: %520

bb67:                                             // Preds: bb66 bb65
  dealloc_stack %473 : $*Source, scope 297        // id: %521
  inject_enum_addr %0 : $*Optional<Self>, #Optional.some!enumelt, scope 297 // id: %522
  dealloc_stack %450 : $*Self.Magnitude, scope 297 // id: %523
  dealloc_stack %364 : $*Source.Exponent, scope 297 // id: %524
  dealloc_stack %334 : $*Self.Magnitude, scope 297 // id: %525
  dealloc_stack %323 : $*Source.Exponent, scope 297 // id: %526
  dealloc_stack %312 : $*Source.RawSignificand, scope 297 // id: %527
  dealloc_stack %49 : $*Source.Exponent, scope 297 // id: %528
  dealloc_stack %21 : $*Source, scope 297         // id: %529
  br bb90(%311 : $Bool), scope 297                // id: %530

bb68:                                             // Preds: bb59
  destroy_addr %49 : $*Source.Exponent, scope 297 // id: %531
  %532 = alloc_stack $(Optional<Self>, Bool), scope 297 // users: %679, %677, %668, %667, %662, %661
  %533 = metatype $@thick Source.Type, scope 297  // users: %543, %541
  %534 = integer_literal $Builtin.IntLiteral, 0, scope 297 // users: %596, %538
  %535 = metatype $@thick Source.IntegerLiteralType.Type, scope 297 // user: %538
  %536 = alloc_stack $Source.IntegerLiteralType, scope 297 // users: %546, %541, %538
  %537 = witness_method $Source.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %538
  %538 = apply %537<Source.IntegerLiteralType>(%536, %534, %535) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %539 = alloc_stack $Source, scope 297           // users: %545, %544, %543, %541
  %540 = witness_method $Source, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %541
  %541 = apply %540<Source>(%539, %536, %533) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %542 = witness_method $Source, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %543
  %543 = apply %542<Source>(%1, %539, %533) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %549
  destroy_addr %539 : $*Source, scope 297         // id: %544
  dealloc_stack %539 : $*Source, scope 297        // id: %545
  dealloc_stack %536 : $*Source.IntegerLiteralType, scope 297 // id: %546
  %547 = alloc_stack $Self.Magnitude, scope 297   // users: %676, %654, %653, %648, %646, %634, %629, %627, %606, %601, %588, %583, %582, %577, %575, %563, %551, %548
  copy_addr [take] %334 to [init] %547 : $*Self.Magnitude, scope 297 // id: %548
  %549 = struct_extract %543 : $Bool, #Bool._value, scope 297 // user: %550
  cond_br %549, bb70, bb69, scope 297             // id: %550

bb69:                                             // Preds: bb68
  destroy_addr %547 : $*Self.Magnitude, scope 297 // id: %551
  br bb86, scope 297                              // id: %552

bb70:                                             // Preds: bb68
  %553 = integer_literal $Builtin.Int64, 0, scope 297 // users: %656, %615, %585, %554
  %554 = struct $Int (%553 : $Builtin.Int64), scope 297 // users: %641, %622, %570
  %555 = witness_method $Self.Magnitude, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // users: %559, %556
  %556 = apply %555<Self.Magnitude>(%335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %557
  %557 = struct_extract %556 : $Bool, #Bool._value, scope 297 // user: %558
  cond_br %557, bb81, bb71, scope 297             // id: %558

bb71:                                             // Preds: bb70
  %559 = apply %555<Self.Magnitude>(%335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 297 // user: %560
  %560 = struct_extract %559 : $Bool, #Bool._value, scope 297 // user: %561
  cond_br %560, bb75, bb72, scope 297             // id: %561

bb72:                                             // Preds: bb71
  %562 = witness_method $Self.Magnitude, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %563
  %563 = apply %562<Self.Magnitude>(%547) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %565
  %564 = integer_literal $Builtin.Int64, 64, scope 297 // user: %566
  %565 = struct_extract %563 : $Int, #Int._value, scope 297 // user: %566
  %566 = builtin "cmp_slt_Int64"(%565 : $Builtin.Int64, %564 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %567
  cond_br %566, bb74, bb73, scope 297             // id: %567

bb73:                                             // Preds: bb72
  %568 = alloc_stack $Self.Magnitude, scope 297   // users: %578, %576, %575, %572
  %569 = alloc_stack $Int, scope 297              // users: %573, %572, %570
  store %554 to [trivial] %569 : $*Int, scope 297 // id: %570
  %571 = witness_method $Self.Magnitude, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %572
  %572 = apply %571<Self.Magnitude, Int>(%568, %569, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %569 : $*Int, scope 297           // id: %573
  %574 = witness_method $Self.Magnitude, #Equatable."==" : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %575
  %575 = apply %574<Self.Magnitude>(%547, %568, %335) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %579
  destroy_addr %568 : $*Self.Magnitude, scope 297 // id: %576
  destroy_addr %547 : $*Self.Magnitude, scope 297 // id: %577
  dealloc_stack %568 : $*Self.Magnitude, scope 297 // id: %578
  %579 = struct_extract %575 : $Bool, #Bool._value, scope 297 // user: %580
  br bb84(%579 : $Builtin.Int1), scope 297        // id: %580

bb74:                                             // Preds: bb72
  %581 = witness_method $Self.Magnitude, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %582
  %582 = apply %581<Self.Magnitude>(%547) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %584
  destroy_addr %547 : $*Self.Magnitude, scope 297 // id: %583
  %584 = struct_extract %582 : $UInt, #UInt._value, scope 297 // user: %585
  %585 = builtin "cmp_eq_Int64"(%584 : $Builtin.Int64, %553 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %586
  br bb84(%585 : $Builtin.Int1), scope 297        // id: %586

bb75:                                             // Preds: bb71
  %587 = witness_method $Self.Magnitude, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %588
  %588 = apply %587<Self.Magnitude>(%547) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %590
  %589 = integer_literal $Builtin.Int64, 64, scope 297 // user: %591
  %590 = struct_extract %588 : $Int, #Int._value, scope 297 // user: %591
  %591 = builtin "cmp_slt_Int64"(%589 : $Builtin.Int64, %590 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %592
  cond_br %591, bb80, bb76, scope 297             // id: %592

bb76:                                             // Preds: bb75
  %593 = metatype $@thick Self.Magnitude.IntegerLiteralType.Type, scope 297 // user: %596
  %594 = alloc_stack $Self.Magnitude.IntegerLiteralType, scope 297 // users: %604, %599, %596
  %595 = witness_method $Self.Magnitude.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %596
  %596 = apply %595<Self.Magnitude.IntegerLiteralType>(%594, %534, %593) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %597 = alloc_stack $Self.Magnitude, scope 297   // users: %603, %602, %601, %599
  %598 = witness_method $Self.Magnitude, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %599
  %599 = apply %598<Self.Magnitude>(%597, %594, %335) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %600 = witness_method $Self.Magnitude, #Comparable.">=" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %601
  %601 = apply %600<Self.Magnitude>(%547, %597, %335) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %607
  destroy_addr %597 : $*Self.Magnitude, scope 297 // id: %602
  dealloc_stack %597 : $*Self.Magnitude, scope 297 // id: %603
  dealloc_stack %594 : $*Self.Magnitude.IntegerLiteralType, scope 297 // id: %604
  %605 = alloc_stack $Self.Magnitude, scope 297   // users: %618, %613, %612, %609, %606
  copy_addr [take] %547 to [init] %605 : $*Self.Magnitude, scope 297 // id: %606
  %607 = struct_extract %601 : $Bool, #Bool._value, scope 297 // user: %608
  cond_br %607, bb78, bb77, scope 297             // id: %608

bb77:                                             // Preds: bb76
  destroy_addr %605 : $*Self.Magnitude, scope 297 // id: %609
  br bb79(%6 : $Builtin.Int1), scope 297          // id: %610

bb78:                                             // Preds: bb76
  %611 = witness_method $Self.Magnitude, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %612
  %612 = apply %611<Self.Magnitude>(%605) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %614
  destroy_addr %605 : $*Self.Magnitude, scope 297 // id: %613
  %614 = struct_extract %612 : $UInt, #UInt._value, scope 297 // user: %615
  %615 = builtin "cmp_eq_Int64"(%614 : $Builtin.Int64, %553 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %616
  br bb79(%615 : $Builtin.Int1), scope 297        // id: %616

// %617                                           // user: %619
bb79(%617 : $Builtin.Int1):                       // Preds: bb78 bb77
  dealloc_stack %605 : $*Self.Magnitude, scope 297 // id: %618
  br bb84(%617 : $Builtin.Int1), scope 297        // id: %619

bb80:                                             // Preds: bb75
  %620 = alloc_stack $Self.Magnitude, scope 297   // users: %630, %628, %627, %624
  %621 = alloc_stack $Int, scope 297              // users: %625, %624, %622
  store %554 to [trivial] %621 : $*Int, scope 297 // id: %622
  %623 = witness_method $Self.Magnitude, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %624
  %624 = apply %623<Self.Magnitude, Int>(%620, %621, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %621 : $*Int, scope 297           // id: %625
  %626 = witness_method $Self.Magnitude, #Equatable."==" : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %627
  %627 = apply %626<Self.Magnitude>(%547, %620, %335) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %631
  destroy_addr %620 : $*Self.Magnitude, scope 297 // id: %628
  destroy_addr %547 : $*Self.Magnitude, scope 297 // id: %629
  dealloc_stack %620 : $*Self.Magnitude, scope 297 // id: %630
  %631 = struct_extract %627 : $Bool, #Bool._value, scope 297 // user: %632
  br bb84(%631 : $Builtin.Int1), scope 297        // id: %632

bb81:                                             // Preds: bb70
  %633 = witness_method $Self.Magnitude, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %634
  %634 = apply %633<Self.Magnitude>(%547) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 297 // user: %636
  %635 = integer_literal $Builtin.Int64, 64, scope 297 // user: %637
  %636 = struct_extract %634 : $Int, #Int._value, scope 297 // user: %637
  %637 = builtin "cmp_slt_Int64"(%636 : $Builtin.Int64, %635 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %638
  cond_br %637, bb83, bb82, scope 297             // id: %638

bb82:                                             // Preds: bb81
  %639 = alloc_stack $Self.Magnitude, scope 297   // users: %649, %647, %646, %643
  %640 = alloc_stack $Int, scope 297              // users: %644, %643, %641
  store %554 to [trivial] %640 : $*Int, scope 297 // id: %641
  %642 = witness_method $Self.Magnitude, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %643
  %643 = apply %642<Self.Magnitude, Int>(%639, %640, %335) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  dealloc_stack %640 : $*Int, scope 297           // id: %644
  %645 = witness_method $Self.Magnitude, #Equatable."==" : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %646
  %646 = apply %645<Self.Magnitude>(%547, %639, %335) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 297 // user: %650
  destroy_addr %639 : $*Self.Magnitude, scope 297 // id: %647
  destroy_addr %547 : $*Self.Magnitude, scope 297 // id: %648
  dealloc_stack %639 : $*Self.Magnitude, scope 297 // id: %649
  %650 = struct_extract %646 : $Bool, #Bool._value, scope 297 // user: %651
  br bb84(%650 : $Builtin.Int1), scope 297        // id: %651

bb83:                                             // Preds: bb81
  %652 = witness_method $Self.Magnitude, #BinaryInteger._lowWord!getter : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %653
  %653 = apply %652<Self.Magnitude>(%547) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt, scope 297 // user: %655
  destroy_addr %547 : $*Self.Magnitude, scope 297 // id: %654
  %655 = struct_extract %653 : $UInt, #UInt._value, scope 297 // user: %656
  %656 = builtin "cmp_eq_Int64"(%655 : $Builtin.Int64, %553 : $Builtin.Int64) : $Builtin.Int1, scope 297 // user: %657
  br bb84(%656 : $Builtin.Int1), scope 297        // id: %657

// %658                                           // user: %659
bb84(%658 : $Builtin.Int1):                       // Preds: bb83 bb82 bb80 bb79 bb74 bb73
  cond_br %658, bb87, bb85, scope 297             // id: %659

bb85:                                             // Preds: bb84
  br bb86, scope 297                              // id: %660

bb86:                                             // Preds: bb85 bb69
  %661 = tuple_element_addr %532 : $*(Optional<Self>, Bool), 0, scope 297 // user: %663
  %662 = tuple_element_addr %532 : $*(Optional<Self>, Bool), 1, scope 297 // user: %665
  inject_enum_addr %661 : $*Optional<Self>, #Optional.none!enumelt, scope 297 // id: %663
  %664 = struct $Bool (%6 : $Builtin.Int1), scope 297 // users: %666, %665
  store %664 to [trivial] %662 : $*Bool, scope 297 // id: %665
  br bb88(%664 : $Bool), scope 297                // id: %666

bb87:                                             // Preds: bb84
  %667 = tuple_element_addr %532 : $*(Optional<Self>, Bool), 0, scope 297 // users: %672, %669
  %668 = tuple_element_addr %532 : $*(Optional<Self>, Bool), 1, scope 297 // user: %673
  %669 = init_enum_data_addr %667 : $*Optional<Self>, #Optional.some!enumelt, scope 297 // user: %671
  %670 = witness_method $Self, #FixedWidthInteger.min!getter : <Self where Self : FixedWidthInteger> (Self.Type) -> () -> Self : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %671
  %671 = apply %670<Self>(%669, %18) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 297
  inject_enum_addr %667 : $*Optional<Self>, #Optional.some!enumelt, scope 297 // id: %672
  store %311 to [trivial] %668 : $*Bool, scope 297 // id: %673
  br bb88(%311 : $Bool), scope 297                // id: %674

// %675                                           // user: %686
bb88(%675 : $Bool):                               // Preds: bb87 bb86
  dealloc_stack %547 : $*Self.Magnitude, scope 297 // id: %676
  %677 = tuple_element_addr %532 : $*(Optional<Self>, Bool), 0, scope 297 // user: %678
  copy_addr [take] %677 to [init] %0 : $*Optional<Self>, scope 297 // id: %678
  dealloc_stack %532 : $*(Optional<Self>, Bool), scope 297 // id: %679
  dealloc_stack %364 : $*Source.Exponent, scope 297 // id: %680
  dealloc_stack %334 : $*Self.Magnitude, scope 297 // id: %681
  dealloc_stack %323 : $*Source.Exponent, scope 297 // id: %682
  dealloc_stack %312 : $*Source.RawSignificand, scope 297 // id: %683
  dealloc_stack %49 : $*Source.Exponent, scope 297 // id: %684
  dealloc_stack %21 : $*Source, scope 297         // id: %685
  br bb90(%675 : $Bool), scope 297                // id: %686

bb89:                                             // Preds: bb0
  %687 = init_enum_data_addr %0 : $*Optional<Self>, #Optional.some!enumelt, scope 297 // user: %695
  %688 = integer_literal $Builtin.IntLiteral, 0, scope 297 // user: %692
  %689 = metatype $@thick Self.IntegerLiteralType.Type, scope 297 // user: %692
  %690 = alloc_stack $Self.IntegerLiteralType, scope 297 // users: %699, %695, %692
  %691 = witness_method $Self.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %692
  %692 = apply %691<Self.IntegerLiteralType>(%690, %688, %689) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  %693 = metatype $@thick Self.Type, scope 297    // user: %695
  %694 = witness_method $Self, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297 // user: %695
  %695 = apply %694<Self>(%687, %690, %693) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 297
  inject_enum_addr %0 : $*Optional<Self>, #Optional.some!enumelt, scope 297 // id: %696
  %697 = integer_literal $Builtin.Int1, -1, scope 297 // user: %698
  %698 = struct $Bool (%697 : $Builtin.Int1), scope 297 // user: %700
  dealloc_stack %690 : $*Self.IntegerLiteralType, scope 297 // id: %699
  br bb90(%698 : $Bool), scope 297                // id: %700

// %701                                           // user: %702
bb90(%701 : $Bool):                               // Preds: bb89 bb88 bb67 bb26 bb5 bb2
  return %701 : $Bool, scope 297                  // id: %702
} // end sil function '$ss17FixedWidthIntegerPsE8_convert4fromxSg5value_Sb5exacttqd___tSBRd__lFZ'

sil_scope 298 { loc * "<compiler-generated>":0:0 parent @$sSS12_createEmpty19withInitialCapacitySSSi_tFZ : $@convention(method) (Int, @thin String.Type) -> @owned String }

// static String._createEmpty(withInitialCapacity:), loc * "<compiler-generated>":0:0, scope 298
sil shared [serialized] [_semantics "inline_late"] [_semantics "string.init_empty_with_capacity"] [ossa] @$sSS12_createEmpty19withInitialCapacitySSSi_tFZ : $@convention(method) (Int, @thin String.Type) -> @owned String {
// %0                                             // users: %19, %12
bb0(%0 : $Int, %1 : $@thin String.Type):
  %2 = alloc_stack $_StringGuts, scope 298        // users: %22, %21, %19, %10
  %3 = integer_literal $Builtin.Int64, 0, scope 298 // user: %7
  %4 = integer_literal $Builtin.Int64, -2305843009213693952, scope 298 // user: %5
  %5 = value_to_bridge_object %4 : $Builtin.Int64, scope 298 // user: %6
  %6 = copy_value %5 : $Builtin.BridgeObject, scope 298 // user: %8
  %7 = struct $UInt64 (%3 : $Builtin.Int64), scope 298 // user: %8
  %8 = struct $_StringObject (%7 : $UInt64, %6 : $Builtin.BridgeObject), scope 298 // user: %9
  %9 = struct $_StringGuts (%8 : $_StringObject), scope 298 // user: %10
  store %9 to [init] %2 : $*_StringGuts, scope 298 // id: %10
  %11 = integer_literal $Builtin.Int64, 15, scope 298 // user: %13
  %12 = struct_extract %0 : $Int, #Int._value, scope 298 // user: %13
  %13 = builtin "cmp_slt_Int64"(%11 : $Builtin.Int64, %12 : $Builtin.Int64) : $Builtin.Int1, scope 298 // user: %15
  %14 = integer_literal $Builtin.Int1, 0, scope 298 // user: %15
  %15 = builtin "int_expect_Int1"(%13 : $Builtin.Int1, %14 : $Builtin.Int1) : $Builtin.Int1, scope 298 // user: %16
  cond_br %15, bb2, bb1, scope 298                // id: %16

bb1:                                              // Preds: bb0
  br bb3, scope 298                               // id: %17

bb2:                                              // Preds: bb0
  // function_ref _StringGuts.grow(_:)
  %18 = function_ref @$ss11_StringGutsV4growyySiF : $@convention(method) (Int, @inout _StringGuts) -> (), scope 298 // user: %19
  %19 = apply %18(%0, %2) : $@convention(method) (Int, @inout _StringGuts) -> (), scope 298
  br bb3, scope 298                               // id: %20

bb3:                                              // Preds: bb2 bb1
  %21 = load [take] %2 : $*_StringGuts, scope 298 // user: %23
  dealloc_stack %2 : $*_StringGuts, scope 298     // id: %22
  %23 = struct $String (%21 : $_StringGuts), scope 298 // user: %24
  return %23 : $String, scope 298                 // id: %24
} // end sil function '$sSS12_createEmpty19withInitialCapacitySSSi_tFZ'


// String.append(_:), loc * "<compiler-generated>":0:0, scope 0
sil [_semantics "string.append"] @$sSS6appendyySSF : $@convention(method) (@guaranteed String, @inout String) -> ()


// _typeName(_:qualified:), loc * "<compiler-generated>":0:0, scope 0
sil [_semantics "typeName"] @$ss9_typeName_9qualifiedSSypXp_SbtF : $@convention(thin) (@thick any Any.Type, Bool) -> @owned String

sil_scope 299 { loc * "<compiler-generated>":0:0 parent @$sSS19stringInterpolationSSs013DefaultStringB0V_tcfC : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String }

// String.init(stringInterpolation:), loc * "<compiler-generated>":0:0, scope 299
sil public_external [serialized] [readonly] [ossa] @$sSS19stringInterpolationSSs013DefaultStringB0V_tcfC : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String {
// %0                                             // users: %6, %2
bb0(%0 : @owned $DefaultStringInterpolation, %1 : $@thin String.Type):
  %2 = begin_borrow %0 : $DefaultStringInterpolation, scope 299 // users: %5, %3
  %3 = struct_extract %2 : $DefaultStringInterpolation, #DefaultStringInterpolation._storage, scope 299 // user: %4
  %4 = copy_value %3 : $String, scope 299         // user: %7
  end_borrow %2 : $DefaultStringInterpolation, scope 299 // id: %5
  destroy_value %0 : $DefaultStringInterpolation, scope 299 // id: %6
  return %4 : $String, scope 299                  // id: %7
} // end sil function '$sSS19stringInterpolationSSs013DefaultStringB0V_tcfC'


// _assertionFailure(_:_:file:line:flags:), loc * "<compiler-generated>":0:0, scope 0
sil [noinline] [_semantics "programtermination_point"] @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never

sil_scope 300 { loc * "<compiler-generated>":0:0 parent @$ss17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufC : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 }

// FixedWidthInteger.init<A>(clamping:), loc * "<compiler-generated>":0:0, scope 300
sil public_external [serialized] [_semantics "optimize.sil.specialize.generic.partial.never"] [ossa] @$ss17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufC : $@convention(method) <Self where Self : FixedWidthInteger><Other where Other : BinaryInteger> (@in Other, @thick Self.Type) -> @out Self {
// %0                                             // user: %333
// %1                                             // users: %330, %327, %325, %315, %300, %293, %279, %256, %235, %227, %203, %196, %182, %151, %144, %133, %127, %100, %95, %79, %67, %42, %21
bb0(%0 : $*Self, %1 : $*Other, %2 : $@thick Self.Type):
  %3 = alloc_stack $Self, scope 300               // users: %334, %333, %331, %328, %325
  %4 = metatype $@thick Self.Type, scope 300      // users: %331, %328, %325, %305, %302, %284, %281, %249, %247, %213, %211, %176, %170, %169, %156, %153, %109, %107, %72, %69, %37, %35, %12, %7
  %5 = alloc_stack $Self, scope 300               // users: %163, %158, %156, %142, %135, %125, %102, %81, %74, %72, %44, %37, %23, %7
  %6 = witness_method $Self, #FixedWidthInteger.min!getter : <Self where Self : FixedWidthInteger> (Self.Type) -> () -> Self : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 300 // users: %331, %7
  %7 = apply %6<Self>(%5, %4) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %8 = metatype $@thick Other.Type, scope 300     // users: %315, %313, %263, %261, %227, %225, %196, %194, %171, %144, %142, %127, %125, %95, %93, %55, %53, %17, %10
  %9 = witness_method $Other, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // users: %171, %17, %10
  %10 = apply %9<Other>(%8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // user: %13
  %11 = witness_method $Self, #BinaryInteger.isSigned!getter : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // users: %176, %170, %12
  %12 = apply %11<Self>(%4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // user: %14
  %13 = struct_extract %10 : $Bool, #Bool._value, scope 300 // user: %15
  %14 = struct_extract %12 : $Bool, #Bool._value, scope 300 // user: %15
  %15 = builtin "cmp_eq_Int1"(%13 : $Builtin.Int1, %14 : $Builtin.Int1) : $Builtin.Int1, scope 300 // user: %16
  cond_br %15, bb14, bb1, scope 300               // id: %16

bb1:                                              // Preds: bb0
  %17 = apply %9<Other>(%8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // user: %18
  %18 = struct_extract %17 : $Bool, #Bool._value, scope 300 // user: %19
  cond_br %18, bb8, bb2, scope 300                // id: %19

bb2:                                              // Preds: bb1
  %20 = witness_method $Other, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %21
  %21 = apply %20<Other>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %24
  %22 = witness_method $Self, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %23
  %23 = apply %22<Self>(%5) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %25
  %24 = struct_extract %21 : $Int, #Int._value, scope 300 // user: %26
  %25 = struct_extract %23 : $Int, #Int._value, scope 300 // user: %26
  %26 = builtin "cmp_slt_Int64"(%24 : $Builtin.Int64, %25 : $Builtin.Int64) : $Builtin.Int1, scope 300 // user: %27
  cond_br %26, bb7, bb3, scope 300                // id: %27

bb3:                                              // Preds: bb2
  %28 = integer_literal $Builtin.IntLiteral, 0, scope 300 // user: %32
  %29 = metatype $@thick Self.IntegerLiteralType.Type, scope 300 // user: %32
  %30 = alloc_stack $Self.IntegerLiteralType, scope 300 // users: %40, %35, %32
  %31 = witness_method $Self.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %32
  %32 = apply %31<Self.IntegerLiteralType>(%30, %28, %29) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %33 = alloc_stack $Self, scope 300              // users: %39, %38, %37, %35
  %34 = witness_method $Self, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %35
  %35 = apply %34<Self>(%33, %30, %4) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %36 = witness_method $Self, #Comparable.">" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %37
  %37 = apply %36<Self>(%5, %33, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %45
  destroy_addr %33 : $*Self, scope 300            // id: %38
  dealloc_stack %33 : $*Self, scope 300           // id: %39
  dealloc_stack %30 : $*Self.IntegerLiteralType, scope 300 // id: %40
  %41 = alloc_stack $Other, scope 300             // users: %63, %57, %55, %48, %42
  copy_addr %1 to [init] %41 : $*Other, scope 300 // id: %42
  %43 = alloc_stack $Self, scope 300              // users: %62, %53, %47, %44
  copy_addr [take] %5 to [init] %43 : $*Self, scope 300 // id: %44
  %45 = struct_extract %37 : $Bool, #Bool._value, scope 300 // user: %46
  cond_br %45, bb5, bb4, scope 300                // id: %46

bb4:                                              // Preds: bb3
  destroy_addr %43 : $*Self, scope 300            // id: %47
  destroy_addr %41 : $*Other, scope 300           // id: %48
  %49 = integer_literal $Builtin.Int1, 0, scope 300 // user: %50
  br bb6(%49 : $Builtin.Int1), scope 300          // id: %50

bb5:                                              // Preds: bb3
  %51 = alloc_stack $Other, scope 300             // users: %58, %56, %55, %53
  %52 = witness_method $Other, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %53
  %53 = apply %52<Other, Self>(%51, %43, %8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %54 = witness_method $Other, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %55
  %55 = apply %54<Other>(%41, %51, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %59
  destroy_addr %51 : $*Other, scope 300           // id: %56
  destroy_addr %41 : $*Other, scope 300           // id: %57
  dealloc_stack %51 : $*Other, scope 300          // id: %58
  %59 = struct_extract %55 : $Bool, #Bool._value, scope 300 // user: %60
  br bb6(%59 : $Builtin.Int1), scope 300          // id: %60

// %61                                            // user: %64
bb6(%61 : $Builtin.Int1):                         // Preds: bb5 bb4
  dealloc_stack %43 : $*Self, scope 300           // id: %62
  dealloc_stack %41 : $*Other, scope 300          // id: %63
  br bb17(%61 : $Builtin.Int1), scope 300         // id: %64

bb7:                                              // Preds: bb2
  %65 = alloc_stack $Self, scope 300              // users: %75, %73, %72, %69
  %66 = alloc_stack $Other, scope 300             // users: %70, %69, %67
  copy_addr %1 to [init] %66 : $*Other, scope 300 // id: %67
  %68 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %69
  %69 = apply %68<Self, Other>(%65, %66, %4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  dealloc_stack %66 : $*Other, scope 300          // id: %70
  %71 = witness_method $Self, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %72
  %72 = apply %71<Self>(%65, %5, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %76
  destroy_addr %65 : $*Self, scope 300            // id: %73
  destroy_addr %5 : $*Self, scope 300             // id: %74
  dealloc_stack %65 : $*Self, scope 300           // id: %75
  %76 = struct_extract %72 : $Bool, #Bool._value, scope 300 // user: %77
  br bb17(%76 : $Builtin.Int1), scope 300         // id: %77

bb8:                                              // Preds: bb1
  %78 = witness_method $Other, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %79
  %79 = apply %78<Other>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %83
  %80 = witness_method $Self, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %81
  %81 = apply %80<Self>(%5) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %82
  %82 = struct_extract %81 : $Int, #Int._value, scope 300 // user: %84
  %83 = struct_extract %79 : $Int, #Int._value, scope 300 // user: %84
  %84 = builtin "cmp_slt_Int64"(%82 : $Builtin.Int64, %83 : $Builtin.Int64) : $Builtin.Int1, scope 300 // user: %85
  cond_br %84, bb13, bb9, scope 300               // id: %85

bb9:                                              // Preds: bb8
  %86 = integer_literal $Builtin.IntLiteral, 0, scope 300 // user: %90
  %87 = metatype $@thick Other.IntegerLiteralType.Type, scope 300 // user: %90
  %88 = alloc_stack $Other.IntegerLiteralType, scope 300 // users: %98, %93, %90
  %89 = witness_method $Other.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %90
  %90 = apply %89<Other.IntegerLiteralType>(%88, %86, %87) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %91 = alloc_stack $Other, scope 300             // users: %97, %96, %95, %93
  %92 = witness_method $Other, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %93
  %93 = apply %92<Other>(%91, %88, %8) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %94 = witness_method $Other, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %95
  %95 = apply %94<Other>(%1, %91, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %103
  destroy_addr %91 : $*Other, scope 300           // id: %96
  dealloc_stack %91 : $*Other, scope 300          // id: %97
  dealloc_stack %88 : $*Other.IntegerLiteralType, scope 300 // id: %98
  %99 = alloc_stack $Other, scope 300             // users: %121, %116, %107, %100
  copy_addr %1 to [init] %99 : $*Other, scope 300 // id: %100
  %101 = alloc_stack $Self, scope 300             // users: %120, %115, %111, %109, %102
  copy_addr [take] %5 to [init] %101 : $*Self, scope 300 // id: %102
  %103 = struct_extract %95 : $Bool, #Bool._value, scope 300 // user: %104
  cond_br %103, bb11, bb10, scope 300             // id: %104

bb10:                                             // Preds: bb9
  %105 = alloc_stack $Self, scope 300             // users: %112, %110, %109, %107
  %106 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %107
  %107 = apply %106<Self, Other>(%105, %99, %4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %108 = witness_method $Self, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %109
  %109 = apply %108<Self>(%105, %101, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %113
  destroy_addr %105 : $*Self, scope 300           // id: %110
  destroy_addr %101 : $*Self, scope 300           // id: %111
  dealloc_stack %105 : $*Self, scope 300          // id: %112
  %113 = struct_extract %109 : $Bool, #Bool._value, scope 300 // user: %114
  br bb12(%113 : $Builtin.Int1), scope 300        // id: %114

bb11:                                             // Preds: bb9
  destroy_addr %101 : $*Self, scope 300           // id: %115
  destroy_addr %99 : $*Other, scope 300           // id: %116
  %117 = integer_literal $Builtin.Int1, -1, scope 300 // user: %118
  br bb12(%117 : $Builtin.Int1), scope 300        // id: %118

// %119                                           // user: %122
bb12(%119 : $Builtin.Int1):                       // Preds: bb11 bb10
  dealloc_stack %101 : $*Self, scope 300          // id: %120
  dealloc_stack %99 : $*Other, scope 300          // id: %121
  br bb17(%119 : $Builtin.Int1), scope 300        // id: %122

bb13:                                             // Preds: bb8
  %123 = alloc_stack $Other, scope 300            // users: %129, %128, %127, %125
  %124 = witness_method $Other, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %125
  %125 = apply %124<Other, Self>(%123, %5, %8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %126 = witness_method $Other, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %127
  %127 = apply %126<Other>(%1, %123, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %130
  destroy_addr %123 : $*Other, scope 300          // id: %128
  dealloc_stack %123 : $*Other, scope 300         // id: %129
  %130 = struct_extract %127 : $Bool, #Bool._value, scope 300 // user: %131
  br bb17(%130 : $Builtin.Int1), scope 300        // id: %131

bb14:                                             // Preds: bb0
  %132 = witness_method $Other, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %133
  %133 = apply %132<Other>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %136
  %134 = witness_method $Self, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %135
  %135 = apply %134<Self>(%5) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %137
  %136 = struct_extract %133 : $Int, #Int._value, scope 300 // user: %138
  %137 = struct_extract %135 : $Int, #Int._value, scope 300 // user: %138
  %138 = builtin "cmp_slt_Int64"(%136 : $Builtin.Int64, %137 : $Builtin.Int64) : $Builtin.Int1, scope 300 // user: %139
  cond_br %138, bb16, bb15, scope 300             // id: %139

bb15:                                             // Preds: bb14
  %140 = alloc_stack $Other, scope 300            // users: %146, %145, %144, %142
  %141 = witness_method $Other, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %142
  %142 = apply %141<Other, Self>(%140, %5, %8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %143 = witness_method $Other, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %144
  %144 = apply %143<Other>(%1, %140, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %147
  destroy_addr %140 : $*Other, scope 300          // id: %145
  dealloc_stack %140 : $*Other, scope 300         // id: %146
  %147 = struct_extract %144 : $Bool, #Bool._value, scope 300 // user: %148
  br bb17(%147 : $Builtin.Int1), scope 300        // id: %148

bb16:                                             // Preds: bb14
  %149 = alloc_stack $Self, scope 300             // users: %159, %157, %156, %153
  %150 = alloc_stack $Other, scope 300            // users: %154, %153, %151
  copy_addr %1 to [init] %150 : $*Other, scope 300 // id: %151
  %152 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %153
  %153 = apply %152<Self, Other>(%149, %150, %4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  dealloc_stack %150 : $*Other, scope 300         // id: %154
  %155 = witness_method $Self, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %156
  %156 = apply %155<Self>(%149, %5, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %160
  destroy_addr %149 : $*Self, scope 300           // id: %157
  destroy_addr %5 : $*Self, scope 300             // id: %158
  dealloc_stack %149 : $*Self, scope 300          // id: %159
  %160 = struct_extract %156 : $Bool, #Bool._value, scope 300 // user: %161
  br bb17(%160 : $Builtin.Int1), scope 300        // id: %161

// %162                                           // user: %165
bb17(%162 : $Builtin.Int1):                       // Preds: bb16 bb15 bb13 bb12 bb7 bb6
  dealloc_stack %5 : $*Self, scope 300            // id: %163
  %164 = integer_literal $Builtin.Int1, 0, scope 300 // users: %322, %208, %165
  %165 = builtin "int_expect_Int1"(%162 : $Builtin.Int1, %164 : $Builtin.Int1) : $Builtin.Int1, scope 300 // user: %166
  cond_br %165, bb38, bb18, scope 300             // id: %166

bb18:                                             // Preds: bb17
  %167 = alloc_stack $Self, scope 300             // users: %321, %313, %307, %305, %291, %286, %284, %254, %249, %233, %225, %201, %180, %169
  %168 = witness_method $Self, #FixedWidthInteger.max!getter : <Self where Self : FixedWidthInteger> (Self.Type) -> () -> Self : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 300 // users: %328, %169
  %169 = apply %168<Self>(%167, %4) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %170 = apply %11<Self>(%4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // user: %172
  %171 = apply %9<Other>(%8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // user: %173
  %172 = struct_extract %170 : $Bool, #Bool._value, scope 300 // user: %174
  %173 = struct_extract %171 : $Bool, #Bool._value, scope 300 // user: %174
  %174 = builtin "cmp_eq_Int1"(%172 : $Builtin.Int1, %173 : $Builtin.Int1) : $Builtin.Int1, scope 300 // user: %175
  cond_br %174, bb32, bb19, scope 300             // id: %175

bb19:                                             // Preds: bb18
  %176 = apply %11<Self>(%4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool, scope 300 // user: %177
  %177 = struct_extract %176 : $Bool, #Bool._value, scope 300 // user: %178
  cond_br %177, bb26, bb20, scope 300             // id: %178

bb20:                                             // Preds: bb19
  %179 = witness_method $Self, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %180
  %180 = apply %179<Self>(%167) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %183
  %181 = witness_method $Other, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %182
  %182 = apply %181<Other>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %184
  %183 = struct_extract %180 : $Int, #Int._value, scope 300 // user: %185
  %184 = struct_extract %182 : $Int, #Int._value, scope 300 // user: %185
  %185 = builtin "cmp_slt_Int64"(%183 : $Builtin.Int64, %184 : $Builtin.Int64) : $Builtin.Int1, scope 300 // user: %186
  cond_br %185, bb25, bb21, scope 300             // id: %186

bb21:                                             // Preds: bb20
  %187 = integer_literal $Builtin.IntLiteral, 0, scope 300 // user: %191
  %188 = metatype $@thick Other.IntegerLiteralType.Type, scope 300 // user: %191
  %189 = alloc_stack $Other.IntegerLiteralType, scope 300 // users: %199, %194, %191
  %190 = witness_method $Other.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %191
  %191 = apply %190<Other.IntegerLiteralType>(%189, %187, %188) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %192 = alloc_stack $Other, scope 300            // users: %198, %197, %196, %194
  %193 = witness_method $Other, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %194
  %194 = apply %193<Other>(%192, %189, %8) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %195 = witness_method $Other, #Comparable.">" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %196
  %196 = apply %195<Other>(%1, %192, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %204
  destroy_addr %192 : $*Other, scope 300          // id: %197
  dealloc_stack %192 : $*Other, scope 300         // id: %198
  dealloc_stack %189 : $*Other.IntegerLiteralType, scope 300 // id: %199
  %200 = alloc_stack $Self, scope 300             // users: %221, %215, %213, %207, %201
  copy_addr [take] %167 to [init] %200 : $*Self, scope 300 // id: %201
  %202 = alloc_stack $Other, scope 300            // users: %220, %211, %206, %203
  copy_addr %1 to [init] %202 : $*Other, scope 300 // id: %203
  %204 = struct_extract %196 : $Bool, #Bool._value, scope 300 // user: %205
  cond_br %204, bb23, bb22, scope 300             // id: %205

bb22:                                             // Preds: bb21
  destroy_addr %202 : $*Other, scope 300          // id: %206
  destroy_addr %200 : $*Self, scope 300           // id: %207
  br bb24(%164 : $Builtin.Int1), scope 300        // id: %208

bb23:                                             // Preds: bb21
  %209 = alloc_stack $Self, scope 300             // users: %216, %214, %213, %211
  %210 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %211
  %211 = apply %210<Self, Other>(%209, %202, %4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %212 = witness_method $Self, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %213
  %213 = apply %212<Self>(%200, %209, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %217
  destroy_addr %209 : $*Self, scope 300           // id: %214
  destroy_addr %200 : $*Self, scope 300           // id: %215
  dealloc_stack %209 : $*Self, scope 300          // id: %216
  %217 = struct_extract %213 : $Bool, #Bool._value, scope 300 // user: %218
  br bb24(%217 : $Builtin.Int1), scope 300        // id: %218

// %219                                           // user: %222
bb24(%219 : $Builtin.Int1):                       // Preds: bb23 bb22
  dealloc_stack %202 : $*Other, scope 300         // id: %220
  dealloc_stack %200 : $*Self, scope 300          // id: %221
  br bb35(%219 : $Builtin.Int1), scope 300        // id: %222

bb25:                                             // Preds: bb20
  %223 = alloc_stack $Other, scope 300            // users: %229, %228, %227, %225
  %224 = witness_method $Other, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %225
  %225 = apply %224<Other, Self>(%223, %167, %8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %226 = witness_method $Other, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %227
  %227 = apply %226<Other>(%223, %1, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %230
  destroy_addr %223 : $*Other, scope 300          // id: %228
  dealloc_stack %223 : $*Other, scope 300         // id: %229
  %230 = struct_extract %227 : $Bool, #Bool._value, scope 300 // user: %231
  br bb35(%230 : $Builtin.Int1), scope 300        // id: %231

bb26:                                             // Preds: bb19
  %232 = witness_method $Self, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %233
  %233 = apply %232<Self>(%167) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %237
  %234 = witness_method $Other, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %235
  %235 = apply %234<Other>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %236
  %236 = struct_extract %235 : $Int, #Int._value, scope 300 // user: %238
  %237 = struct_extract %233 : $Int, #Int._value, scope 300 // user: %238
  %238 = builtin "cmp_slt_Int64"(%236 : $Builtin.Int64, %237 : $Builtin.Int64) : $Builtin.Int1, scope 300 // user: %239
  cond_br %238, bb31, bb27, scope 300             // id: %239

bb27:                                             // Preds: bb26
  %240 = integer_literal $Builtin.IntLiteral, 0, scope 300 // user: %244
  %241 = metatype $@thick Self.IntegerLiteralType.Type, scope 300 // user: %244
  %242 = alloc_stack $Self.IntegerLiteralType, scope 300 // users: %252, %247, %244
  %243 = witness_method $Self.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %244
  %244 = apply %243<Self.IntegerLiteralType>(%242, %240, %241) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %245 = alloc_stack $Self, scope 300             // users: %251, %250, %249, %247
  %246 = witness_method $Self, #ExpressibleByIntegerLiteral.init!allocator : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %247
  %247 = apply %246<Self>(%245, %242, %4) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %248 = witness_method $Self, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %249
  %249 = apply %248<Self>(%167, %245, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %257
  destroy_addr %245 : $*Self, scope 300           // id: %250
  dealloc_stack %245 : $*Self, scope 300          // id: %251
  dealloc_stack %242 : $*Self.IntegerLiteralType, scope 300 // id: %252
  %253 = alloc_stack $Self, scope 300             // users: %275, %270, %261, %254
  copy_addr [take] %167 to [init] %253 : $*Self, scope 300 // id: %254
  %255 = alloc_stack $Other, scope 300            // users: %274, %269, %265, %263, %256
  copy_addr %1 to [init] %255 : $*Other, scope 300 // id: %256
  %257 = struct_extract %249 : $Bool, #Bool._value, scope 300 // user: %258
  cond_br %257, bb29, bb28, scope 300             // id: %258

bb28:                                             // Preds: bb27
  %259 = alloc_stack $Other, scope 300            // users: %266, %264, %263, %261
  %260 = witness_method $Other, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %261
  %261 = apply %260<Other, Self>(%259, %253, %8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %262 = witness_method $Other, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %263
  %263 = apply %262<Other>(%259, %255, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %267
  destroy_addr %259 : $*Other, scope 300          // id: %264
  destroy_addr %255 : $*Other, scope 300          // id: %265
  dealloc_stack %259 : $*Other, scope 300         // id: %266
  %267 = struct_extract %263 : $Bool, #Bool._value, scope 300 // user: %268
  br bb30(%267 : $Builtin.Int1), scope 300        // id: %268

bb29:                                             // Preds: bb27
  destroy_addr %255 : $*Other, scope 300          // id: %269
  destroy_addr %253 : $*Self, scope 300           // id: %270
  %271 = integer_literal $Builtin.Int1, -1, scope 300 // user: %272
  br bb30(%271 : $Builtin.Int1), scope 300        // id: %272

// %273                                           // user: %276
bb30(%273 : $Builtin.Int1):                       // Preds: bb29 bb28
  dealloc_stack %255 : $*Other, scope 300         // id: %274
  dealloc_stack %253 : $*Self, scope 300          // id: %275
  br bb35(%273 : $Builtin.Int1), scope 300        // id: %276

bb31:                                             // Preds: bb26
  %277 = alloc_stack $Self, scope 300             // users: %287, %285, %284, %281
  %278 = alloc_stack $Other, scope 300            // users: %282, %281, %279
  copy_addr %1 to [init] %278 : $*Other, scope 300 // id: %279
  %280 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %281
  %281 = apply %280<Self, Other>(%277, %278, %4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  dealloc_stack %278 : $*Other, scope 300         // id: %282
  %283 = witness_method $Self, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %284
  %284 = apply %283<Self>(%167, %277, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %288
  destroy_addr %277 : $*Self, scope 300           // id: %285
  destroy_addr %167 : $*Self, scope 300           // id: %286
  dealloc_stack %277 : $*Self, scope 300          // id: %287
  %288 = struct_extract %284 : $Bool, #Bool._value, scope 300 // user: %289
  br bb35(%288 : $Builtin.Int1), scope 300        // id: %289

bb32:                                             // Preds: bb18
  %290 = witness_method $Self, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %291
  %291 = apply %290<Self>(%167) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %294
  %292 = witness_method $Other, #BinaryInteger.bitWidth!getter : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %293
  %293 = apply %292<Other>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int, scope 300 // user: %295
  %294 = struct_extract %291 : $Int, #Int._value, scope 300 // user: %296
  %295 = struct_extract %293 : $Int, #Int._value, scope 300 // user: %296
  %296 = builtin "cmp_slt_Int64"(%294 : $Builtin.Int64, %295 : $Builtin.Int64) : $Builtin.Int1, scope 300 // user: %297
  cond_br %296, bb34, bb33, scope 300             // id: %297

bb33:                                             // Preds: bb32
  %298 = alloc_stack $Self, scope 300             // users: %308, %306, %305, %302
  %299 = alloc_stack $Other, scope 300            // users: %303, %302, %300
  copy_addr %1 to [init] %299 : $*Other, scope 300 // id: %300
  %301 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %302
  %302 = apply %301<Self, Other>(%298, %299, %4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  dealloc_stack %299 : $*Other, scope 300         // id: %303
  %304 = witness_method $Self, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %305
  %305 = apply %304<Self>(%167, %298, %4) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %309
  destroy_addr %298 : $*Self, scope 300           // id: %306
  destroy_addr %167 : $*Self, scope 300           // id: %307
  dealloc_stack %298 : $*Self, scope 300          // id: %308
  %309 = struct_extract %305 : $Bool, #Bool._value, scope 300 // user: %310
  br bb35(%309 : $Builtin.Int1), scope 300        // id: %310

bb34:                                             // Preds: bb32
  %311 = alloc_stack $Other, scope 300            // users: %317, %316, %315, %313
  %312 = witness_method $Other, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %313
  %313 = apply %312<Other, Self>(%311, %167, %8) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  %314 = witness_method $Other, #Comparable."<" : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %315
  %315 = apply %314<Other>(%311, %1, %8) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool, scope 300 // user: %318
  destroy_addr %311 : $*Other, scope 300          // id: %316
  dealloc_stack %311 : $*Other, scope 300         // id: %317
  %318 = struct_extract %315 : $Bool, #Bool._value, scope 300 // user: %319
  br bb35(%318 : $Builtin.Int1), scope 300        // id: %319

// %320                                           // user: %322
bb35(%320 : $Builtin.Int1):                       // Preds: bb34 bb33 bb31 bb30 bb25 bb24
  dealloc_stack %167 : $*Self, scope 300          // id: %321
  %322 = builtin "int_expect_Int1"(%320 : $Builtin.Int1, %164 : $Builtin.Int1) : $Builtin.Int1, scope 300 // user: %323
  cond_br %322, bb37, bb36, scope 300             // id: %323

bb36:                                             // Preds: bb35
  %324 = witness_method $Self, #BinaryInteger.init!allocator : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300 // user: %325
  %325 = apply %324<Self, Other>(%3, %1, %4) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0, scope 300
  br bb39, scope 300                              // id: %326

bb37:                                             // Preds: bb35
  destroy_addr %1 : $*Other, scope 300            // id: %327
  %328 = apply %168<Self>(%3, %4) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 300
  br bb39, scope 300                              // id: %329

bb38:                                             // Preds: bb17
  destroy_addr %1 : $*Other, scope 300            // id: %330
  %331 = apply %6<Self>(%3, %4) : $@convention(witness_method: FixedWidthInteger) <τ_0_0 where τ_0_0 : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0, scope 300
  br bb39, scope 300                              // id: %332

bb39:                                             // Preds: bb38 bb37 bb36
  copy_addr [take] %3 to [init] %0 : $*Self, scope 300 // id: %333
  dealloc_stack %3 : $*Self, scope 300            // id: %334
  %335 = tuple (), scope 300                      // user: %336
  return %335 : $(), scope 300                    // id: %336
} // end sil function '$ss17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufC'

sil_scope 301 { loc * "<compiler-generated>":0:0 parent @$ss17FixedWidthIntegerPsE16_binaryLogarithmSiyFs5UInt8V_Tgq5 : $@convention(method) (UInt8) -> Int }

// specialized FixedWidthInteger._binaryLogarithm(), loc * "<compiler-generated>":0:0, scope 301
sil shared [serialized] [ossa] @$ss17FixedWidthIntegerPsE16_binaryLogarithmSiyFs5UInt8V_Tgq5 : $@convention(method) (UInt8) -> Int {
// %0                                             // user: %1
bb0(%0 : $UInt8):
  %1 = destructure_struct %0 : $UInt8, scope 301  // users: %31, %15
  %2 = string_literal utf8 "Swift/Integers.swift", scope 301 // user: %4
  %3 = integer_literal $Builtin.Word, 20, scope 301 // user: %6
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word, scope 301 // user: %6
  %5 = integer_literal $Builtin.Int8, 2, scope 301 // users: %22, %12, %6
  %6 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %5 : $Builtin.Int8), scope 301 // user: %26
  %7 = integer_literal $Builtin.Int64, 2252, scope 301 // user: %8
  %8 = struct $UInt (%7 : $Builtin.Int64), scope 301 // user: %26
  %9 = string_literal utf8 "", scope 301          // user: %11
  %10 = integer_literal $Builtin.Word, 0, scope 301 // user: %12
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word, scope 301 // user: %12
  %12 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %5 : $Builtin.Int8), scope 301 // user: %26
  debug_step , scope 301                          // id: %13
  %14 = integer_literal $Builtin.Int8, 0, scope 301 // user: %15
  %15 = builtin "cmp_ult_Int8"(%14 : $Builtin.Int8, %1 : $Builtin.Int8) : $Builtin.Int1, scope 301 // user: %17
  %16 = integer_literal $Builtin.Int1, -1, scope 301 // user: %17
  %17 = builtin "int_expect_Int1"(%15 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1, scope 301 // user: %18
  cond_br %17, bb2, bb1, scope 301                // id: %18

bb1:                                              // Preds: bb0
  %19 = string_literal utf8 "Fatal error", scope 301 // user: %21
  %20 = integer_literal $Builtin.Word, 11, scope 301 // user: %22
  %21 = builtin "ptrtoint_Word"(%19 : $Builtin.RawPointer) : $Builtin.Word, scope 301 // user: %22
  %22 = struct $StaticString (%21 : $Builtin.Word, %20 : $Builtin.Word, %5 : $Builtin.Int8), scope 301 // user: %26
  %23 = integer_literal $Builtin.Int32, 1, scope 301 // user: %24
  %24 = struct $UInt32 (%23 : $Builtin.Int32), scope 301 // user: %26
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %25 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 301 // user: %26
  %26 = apply %25(%22, %12, %6, %8, %24) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 301
  unreachable , scope 301                         // id: %27

bb2:                                              // Preds: bb0
  debug_step , scope 301                          // id: %28
  %29 = integer_literal $Builtin.Int64, 8, scope 301 // user: %37
  %30 = integer_literal $Builtin.Int1, 0, scope 301 // users: %37, %34, %31
  %31 = builtin "int_ctlz_Int8"(%1 : $Builtin.Int8, %30 : $Builtin.Int1) : $Builtin.Int8, scope 301 // user: %32
  %32 = builtin "zextOrBitCast_Int8_Int64"(%31 : $Builtin.Int8) : $Builtin.Int64, scope 301 // user: %34
  %33 = integer_literal $Builtin.Int64, 1, scope 301 // user: %34
  %34 = builtin "sadd_with_overflow_Int64"(%32 : $Builtin.Int64, %33 : $Builtin.Int64, %30 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 301 // user: %35
  (%35, %36) = destructure_tuple %34 : $(Builtin.Int64, Builtin.Int1), scope 301 // user: %37
  %37 = builtin "ssub_with_overflow_Int64"(%29 : $Builtin.Int64, %35 : $Builtin.Int64, %30 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1), scope 301 // user: %38
  (%38, %39) = destructure_tuple %37 : $(Builtin.Int64, Builtin.Int1), scope 301 // user: %40
  %40 = struct $Int (%38 : $Builtin.Int64), scope 301 // user: %41
  return %40 : $Int, scope 301                    // id: %41
} // end sil function '$ss17FixedWidthIntegerPsE16_binaryLogarithmSiyFs5UInt8V_Tgq5'

sil_scope 302 { loc * "<compiler-generated>":0:0 parent @$sSzsE10isMultiple2ofSbx_tFs5UInt8V_Tgq5 : $@convention(method) (UInt8, UInt8) -> Bool }

// specialized BinaryInteger.isMultiple(of:), loc * "<compiler-generated>":0:0, scope 302
sil shared [serialized] [ossa] @$sSzsE10isMultiple2ofSbx_tFs5UInt8V_Tgq5 : $@convention(method) (UInt8, UInt8) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $UInt8, %1 : $UInt8):
  %2 = destructure_struct %0 : $UInt8, scope 302  // users: %13, %9, %5
  %3 = destructure_struct %1 : $UInt8, scope 302  // users: %39, %13
  %4 = integer_literal $Builtin.Int64, 0, scope 302 // users: %40, %15, %6
  %5 = builtin "zextOrBitCast_Int8_Int64"(%2 : $Builtin.Int8) : $Builtin.Int64, scope 302 // user: %6
  %6 = builtin "cmp_eq_Int64"(%5 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 302 // user: %7
  cond_br %6, bb4, bb1, scope 302                 // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int8, 0, scope 302 // user: %9
  %9 = builtin "cmp_eq_Int8"(%2 : $Builtin.Int8, %8 : $Builtin.Int8) : $Builtin.Int1, scope 302 // user: %11
  %10 = integer_literal $Builtin.Int1, 0, scope 302 // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1, scope 302 // user: %12
  cond_br %11, bb3, bb2, scope 302                // id: %12

bb2:                                              // Preds: bb1
  %13 = builtin "urem_Int8"(%3 : $Builtin.Int8, %2 : $Builtin.Int8) : $Builtin.Int8, scope 302 // user: %14
  %14 = builtin "zextOrBitCast_Int8_Int64"(%13 : $Builtin.Int8) : $Builtin.Int64, scope 302 // user: %15
  %15 = builtin "cmp_eq_Int64"(%14 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 302 // user: %16
  %16 = struct $Bool (%15 : $Builtin.Int1), scope 302 // user: %17
  br bb5(%16 : $Bool), scope 302                  // id: %17

bb3:                                              // Preds: bb1
  %18 = string_literal utf8 "Division by zero in remainder operation", scope 302 // user: %20
  %19 = integer_literal $Builtin.Word, 39, scope 302 // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word, scope 302 // user: %22
  %21 = integer_literal $Builtin.Int8, 2, scope 302 // users: %33, %26, %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8), scope 302 // user: %37
  %23 = string_literal utf8 "Swift/IntegerTypes.swift", scope 302 // user: %25
  %24 = integer_literal $Builtin.Word, 24, scope 302 // user: %26
  %25 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word, scope 302 // user: %26
  %26 = struct $StaticString (%25 : $Builtin.Word, %24 : $Builtin.Word, %21 : $Builtin.Int8), scope 302 // user: %37
  %27 = integer_literal $Builtin.Int64, 692, scope 302 // user: %28
  %28 = struct $UInt (%27 : $Builtin.Int64), scope 302 // user: %37
  debug_step , scope 302                          // id: %29
  %30 = string_literal utf8 "Fatal error", scope 302 // user: %32
  %31 = integer_literal $Builtin.Word, 11, scope 302 // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word, scope 302 // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %21 : $Builtin.Int8), scope 302 // user: %37
  %34 = integer_literal $Builtin.Int32, 1, scope 302 // user: %35
  %35 = struct $UInt32 (%34 : $Builtin.Int32), scope 302 // user: %37
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %36 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 302 // user: %37
  %37 = apply %36(%33, %22, %26, %28, %35) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never, scope 302
  unreachable , scope 302                         // id: %38

bb4:                                              // Preds: bb0
  %39 = builtin "zextOrBitCast_Int8_Int64"(%3 : $Builtin.Int8) : $Builtin.Int64, scope 302 // user: %40
  %40 = builtin "cmp_eq_Int64"(%39 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1, scope 302 // user: %41
  %41 = struct $Bool (%40 : $Builtin.Int1), scope 302 // user: %42
  br bb5(%41 : $Bool), scope 302                  // id: %42

// %43                                            // user: %44
bb5(%43 : $Bool):                                 // Preds: bb4 bb2
  return %43 : $Bool, scope 302                   // id: %44
} // end sil function '$sSzsE10isMultiple2ofSbx_tFs5UInt8V_Tgq5'


// _StringGuts.grow(_:), loc * "<compiler-generated>":0:0, scope 0
sil @$ss11_StringGutsV4growyySiF : $@convention(method) (Int, @inout _StringGuts) -> ()


// _fatalErrorMessage(_:_:file:line:flags:), loc * "<compiler-generated>":0:0, scope 0
sil [noinline] [_semantics "programtermination_point"] @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

sil_scope 303 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8Vs27ExpressibleByIntegerLiteralssACP07integerE0x0dE4TypeQz_tcfCTW : $@convention(witness_method: ExpressibleByIntegerLiteral) (@in UInt8, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 303
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8Vs27ExpressibleByIntegerLiteralssACP07integerE0x0dE4TypeQz_tcfCTW : $@convention(witness_method: ExpressibleByIntegerLiteral) (@in UInt8, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %4
// %1                                             // user: %3
bb0(%0 : $*UInt8, %1 : $*UInt8, %2 : $@thick UInt8.Type):
  %3 = load [trivial] %1 : $*UInt8, scope 303     // user: %4
  store %3 to [trivial] %0 : $*UInt8, scope 303   // id: %4
  %5 = tuple (), scope 303                        // user: %6
  return %5 : $(), scope 303                      // id: %6
} // end sil function '$ss5UInt8Vs27ExpressibleByIntegerLiteralssACP07integerE0x0dE4TypeQz_tcfCTW'

sil_scope 304 { loc * "<compiler-generated>":0:0 parent @$ss5UInt8Vs35_ExpressibleByBuiltinIntegerLiteralssACP08_builtineF0xBI_tcfCTW : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) (Builtin.IntLiteral, @thick UInt8.Type) -> @out UInt8 }

// protocol witness for _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:) in conformance UInt8, loc * "<compiler-generated>":0:0, scope 304
sil shared [transparent] [serialized] [thunk] [ossa] @$ss5UInt8Vs35_ExpressibleByBuiltinIntegerLiteralssACP08_builtineF0xBI_tcfCTW : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) (Builtin.IntLiteral, @thick UInt8.Type) -> @out UInt8 {
// %0                                             // user: %7
// %1                                             // user: %3
bb0(%0 : $*UInt8, %1 : $Builtin.IntLiteral, %2 : $@thick UInt8.Type):
  %3 = builtin "s_to_u_checked_trunc_IntLiteral_Int8"(%1 : $Builtin.IntLiteral) : $(Builtin.Int8, Builtin.Int1), scope 304 // user: %4
  (%4, %5) = destructure_tuple %3 : $(Builtin.Int8, Builtin.Int1), scope 304 // user: %6
  %6 = struct $UInt8 (%4 : $Builtin.Int8), scope 304 // user: %7
  store %6 to [trivial] %0 : $*UInt8, scope 304   // id: %7
  %8 = tuple (), scope 304                        // user: %9
  return %8 : $(), scope 304                      // id: %9
} // end sil function '$ss5UInt8Vs35_ExpressibleByBuiltinIntegerLiteralssACP08_builtineF0xBI_tcfCTW'

sil_scope 305 { loc * "<compiler-generated>":0:0 parent @$sSa12_endMutationyyF : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> () }

// Array._endMutation(), loc * "<compiler-generated>":0:0, scope 305
sil shared [serialized] [_semantics "array.end_mutation"] [ossa] @$sSa12_endMutationyyF : $@convention(method) <Element> (@inout Array<Element>) -> () {
[%0: noescape! **]
// %0                                             // users: %7, %1
bb0(%0 : $*Array<Element>):
  %1 = struct_element_addr %0 : $*Array<Element>, #Array._buffer, scope 305 // user: %2
  %2 = struct_element_addr %1 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage, scope 305 // user: %3
  %3 = load [take] %2 : $*__ContiguousArrayStorageBase, scope 305 // user: %4
  %4 = end_cow_mutation %3 : $__ContiguousArrayStorageBase, scope 305 // user: %5
  %5 = struct $_ContiguousArrayBuffer<Element> (%4 : $__ContiguousArrayStorageBase), scope 305 // user: %6
  %6 = struct $Array<Element> (%5 : $_ContiguousArrayBuffer<Element>), scope 305 // user: %7
  store %6 to [init] %0 : $*Array<Element>, scope 305 // id: %7
  %8 = tuple (), scope 305                        // user: %9
  return %8 : $(), scope 305                      // id: %9
} // end sil function '$sSa12_endMutationyyF'


// static String._fromUTF8Repairing(_:), loc * "<compiler-generated>":0:0, scope 0
sil @$sSS18_fromUTF8RepairingySS6result_Sb11repairsMadetSRys5UInt8VGFZ : $@convention(method) (UnsafeBufferPointer<UInt8>, @thin String.Type) -> (@owned String, Bool)

sil_vtable AES {
  #AES.init!allocator: (AES.Type) -> (Array<UInt8>, any BlockMode, Padding) -> AES : @$s4test3AESC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC	// AES.__allocating_init(key:blockMode:padding:)
  #AES.init!allocator: (AES.Type) -> (Array<UInt8>, any BlockMode) -> AES : @$s4test3AESC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC	// AES.__allocating_init(key:blockMode:)
  #AES.init!allocator: (AES.Type) -> (String, String) -> AES : @$s4test3AESC3key2ivACSS_SStcfC	// AES.__allocating_init(key:iv:)
  #AES.init!allocator: (AES.Type) -> (String, String, Padding) -> AES : @$s4test3AESC3key2iv7paddingACSS_SSAA7PaddingOtcfC	// AES.__allocating_init(key:iv:padding:)
  #AES.deinit!deallocator: @$s4test3AESCfD	// AES.__deallocating_deinit
}

sil_vtable Blowfish {
  #Blowfish.init!allocator: (Blowfish.Type) -> (Array<UInt8>, any BlockMode, Padding) -> Blowfish : @$s4test8BlowfishC3key9blockMode7paddingACSays5UInt8VG_AA05BlockE0_pAA7PaddingOtcfC	// Blowfish.__allocating_init(key:blockMode:padding:)
  #Blowfish.init!allocator: (Blowfish.Type) -> (Array<UInt8>, Padding) -> Blowfish : @$s4test8BlowfishC3key7paddingACSays5UInt8VG_AA7PaddingOtcfC	// Blowfish.__allocating_init(key:padding:)
  #Blowfish.init!allocator: (Blowfish.Type) -> (Array<UInt8>, any BlockMode) -> Blowfish : @$s4test8BlowfishC3key9blockModeACSays5UInt8VG_AA05BlockE0_ptcfC	// Blowfish.__allocating_init(key:blockMode:)
  #Blowfish.init!allocator: (Blowfish.Type) -> (String, String) -> Blowfish : @$s4test8BlowfishC3key2ivACSS_SStcfC	// Blowfish.__allocating_init(key:iv:)
  #Blowfish.init!allocator: (Blowfish.Type) -> (String, String, Padding) -> Blowfish : @$s4test8BlowfishC3key2iv7paddingACSS_SSAA7PaddingOtcfC	// Blowfish.__allocating_init(key:iv:padding:)
  #Blowfish.deinit!deallocator: @$s4test8BlowfishCfD	// Blowfish.__deallocating_deinit
}

sil_vtable HMAC {
  #HMAC.init!allocator: (HMAC.Type) -> (Array<UInt8>) -> HMAC : @$s4test4HMACC3keyACSays5UInt8VG_tcfC	// HMAC.__allocating_init(key:)
  #HMAC.init!allocator: (HMAC.Type) -> (Array<UInt8>, HMAC.Variant) -> HMAC : @$s4test4HMACC3key7variantACSays5UInt8VG_AC7VariantOtcfC	// HMAC.__allocating_init(key:variant:)
  #HMAC.init!allocator: (HMAC.Type) -> (String) -> HMAC : @$s4test4HMACC3keyACSS_tcfC	// HMAC.__allocating_init(key:)
  #HMAC.init!allocator: (HMAC.Type) -> (String, HMAC.Variant) -> HMAC : @$s4test4HMACC3key7variantACSS_AC7VariantOtcfC	// HMAC.__allocating_init(key:variant:)
  #HMAC.deinit!deallocator: @$s4test4HMACCfD	// HMAC.__deallocating_deinit
}

sil_vtable ChaCha20 {
  #ChaCha20.init!allocator: (ChaCha20.Type) -> (Array<UInt8>, Array<UInt8>) -> ChaCha20 : @$s4test8ChaCha20C3key2ivACSays5UInt8VG_AHtcfC	// ChaCha20.__allocating_init(key:iv:)
  #ChaCha20.init!allocator: (ChaCha20.Type) -> (String, String) -> ChaCha20 : @$s4test8ChaCha20C3key2ivACSS_SStcfC	// ChaCha20.__allocating_init(key:iv:)
  #ChaCha20.deinit!deallocator: @$s4test8ChaCha20CfD	// ChaCha20.__deallocating_deinit
}

sil_vtable Rabbit {
  #Rabbit.init!allocator: (Rabbit.Type) -> (Array<UInt8>) -> Rabbit : @$s4test6RabbitC3keyACSays5UInt8VG_tcfC	// Rabbit.__allocating_init(key:)
  #Rabbit.init!allocator: (Rabbit.Type) -> (String) -> Rabbit : @$s4test6RabbitC3keyACSS_tcfC	// Rabbit.__allocating_init(key:)
  #Rabbit.init!allocator: (Rabbit.Type) -> (Array<UInt8>, Array<UInt8>?) -> Rabbit : @$s4test6RabbitC3key2ivACSays5UInt8VG_AHSgtcfC	// Rabbit.__allocating_init(key:iv:)
  #Rabbit.init!allocator: (Rabbit.Type) -> (String, String) -> Rabbit : @$s4test6RabbitC3key2ivACSS_SStcfC	// Rabbit.__allocating_init(key:iv:)
  #Rabbit.deinit!deallocator: @$s4test6RabbitCfD	// Rabbit.__deallocating_deinit
}

sil_vtable CBCMAC {
  #CBCMAC.init!allocator: (CBCMAC.Type) -> (Array<UInt8>) -> CBCMAC : @$s4test6CBCMACC3keyACSays5UInt8VG_tcfC	// CBCMAC.__allocating_init(key:)
  #CBCMAC.deinit!deallocator: @$s4test6CBCMACCfD	// CBCMAC.__deallocating_deinit
}

sil_vtable CMAC {
  #CMAC.init!allocator: (CMAC.Type) -> (Array<UInt8>) -> CMAC : @$s4test4CMACC3keyACSays5UInt8VG_tcfC	// CMAC.__allocating_init(key:)
  #CMAC.deinit!deallocator: @$s4test4CMACCfD	// CMAC.__deallocating_deinit
}

sil_vtable Poly1305 {
  #Poly1305.init!allocator: (Poly1305.Type) -> (Array<UInt8>) -> Poly1305 : @$s4test8Poly1305C3keyACSays5UInt8VG_tcfC	// Poly1305.__allocating_init(key:)
  #Poly1305.deinit!deallocator: @$s4test8Poly1305CfD	// Poly1305.__deallocating_deinit
}

sil_vtable SHA2 {
  #SHA2.init!allocator: (SHA2.Type) -> () -> SHA2 : @$s4test4SHA2CACycfC	// SHA2.__allocating_init()
  #SHA2.deinit!deallocator: @$s4test4SHA2CfD	// SHA2.__deallocating_deinit
}

sil_vtable SHA3 {
  #SHA3.init!allocator: (SHA3.Type) -> () -> SHA3 : @$s4test4SHA3CACycfC	// SHA3.__allocating_init()
  #SHA3.deinit!deallocator: @$s4test4SHA3CfD	// SHA3.__deallocating_deinit
}

sil_witness_table hidden AES: Cryptors module test {
  method #Cryptors.randomIV: <Self where Self : Cryptors> (Self.Type) -> (Int) -> Array<UInt8> : @$s4test3AESCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW	// protocol witness for static Cryptors.randomIV(_:) in conformance AES
}

sil_witness_table hidden Blowfish: Cryptors module test {
  method #Cryptors.randomIV: <Self where Self : Cryptors> (Self.Type) -> (Int) -> Array<UInt8> : @$s4test8BlowfishCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW	// protocol witness for static Cryptors.randomIV(_:) in conformance Blowfish
}

sil_witness_table hidden HMAC: Cryptors module test {
  method #Cryptors.randomIV: <Self where Self : Cryptors> (Self.Type) -> (Int) -> Array<UInt8> : @$s4test4HMACCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW	// protocol witness for static Cryptors.randomIV(_:) in conformance HMAC
}

sil_witness_table hidden ChaCha20: Cryptors module test {
  method #Cryptors.randomIV: <Self where Self : Cryptors> (Self.Type) -> (Int) -> Array<UInt8> : @$s4test8ChaCha20CAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW	// protocol witness for static Cryptors.randomIV(_:) in conformance ChaCha20
}

sil_witness_table hidden Rabbit: Cryptors module test {
  method #Cryptors.randomIV: <Self where Self : Cryptors> (Self.Type) -> (Int) -> Array<UInt8> : @$s4test6RabbitCAA8CryptorsA2aDP8randomIVySays5UInt8VGSiFZTW	// protocol witness for static Cryptors.randomIV(_:) in conformance Rabbit
}

sil_witness_table hidden SHA2.Variant: Equatable module test {
  method #Equatable."==": <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s4test4SHA2C7VariantOSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance SHA2.Variant
}

sil_witness_table hidden SHA2.Variant: Hashable module test {
  base_protocol Equatable: SHA2.Variant: Equatable module test
  method #Hashable.hashValue!getter: <Self where Self : Hashable> (Self) -> () -> Int : @$s4test4SHA2C7VariantOSHAASH9hashValueSivgTW	// protocol witness for Hashable.hashValue.getter in conformance SHA2.Variant
  method #Hashable.hash: <Self where Self : Hashable> (Self) -> (inout Hasher) -> () : @$s4test4SHA2C7VariantOSHAASH4hash4intoys6HasherVz_tFTW	// protocol witness for Hashable.hash(into:) in conformance SHA2.Variant
  method #Hashable._rawHashValue: <Self where Self : Hashable> (Self) -> (Int) -> Int : @$s4test4SHA2C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW	// protocol witness for Hashable._rawHashValue(seed:) in conformance SHA2.Variant
}

sil_witness_table hidden SHA2: DigestType module test {
}

sil_witness_table hidden SHA3.Variant: Equatable module test {
  method #Equatable."==": <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s4test4SHA3C7VariantOSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance SHA3.Variant
}

sil_witness_table hidden SHA3.Variant: Hashable module test {
  base_protocol Equatable: SHA3.Variant: Equatable module test
  method #Hashable.hashValue!getter: <Self where Self : Hashable> (Self) -> () -> Int : @$s4test4SHA3C7VariantOSHAASH9hashValueSivgTW	// protocol witness for Hashable.hashValue.getter in conformance SHA3.Variant
  method #Hashable.hash: <Self where Self : Hashable> (Self) -> (inout Hasher) -> () : @$s4test4SHA3C7VariantOSHAASH4hash4intoys6HasherVz_tFTW	// protocol witness for Hashable.hash(into:) in conformance SHA3.Variant
  method #Hashable._rawHashValue: <Self where Self : Hashable> (Self) -> (Int) -> Int : @$s4test4SHA3C7VariantOSHAASH13_rawHashValue4seedS2i_tFTW	// protocol witness for Hashable._rawHashValue(seed:) in conformance SHA3.Variant
}

sil_witness_table hidden SHA3: DigestType module test {
}

sil_witness_table hidden CBC: BlockMode module test {
}

sil_witness_table hidden Padding: Equatable module test {
  method #Equatable."==": <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s4test7PaddingOSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance Padding
}

sil_witness_table hidden Padding: Hashable module test {
  base_protocol Equatable: Padding: Equatable module test
  method #Hashable.hashValue!getter: <Self where Self : Hashable> (Self) -> () -> Int : @$s4test7PaddingOSHAASH9hashValueSivgTW	// protocol witness for Hashable.hashValue.getter in conformance Padding
  method #Hashable.hash: <Self where Self : Hashable> (Self) -> (inout Hasher) -> () : @$s4test7PaddingOSHAASH4hash4intoys6HasherVz_tFTW	// protocol witness for Hashable.hash(into:) in conformance Padding
  method #Hashable._rawHashValue: <Self where Self : Hashable> (Self) -> (Int) -> Int : @$s4test7PaddingOSHAASH13_rawHashValue4seedS2i_tFTW	// protocol witness for Hashable._rawHashValue(seed:) in conformance Padding
}

sil_witness_table hidden Padding: PaddingProtocol module test {
}

sil_witness_table public_external [serialized] Int: Comparable module Swift {
  base_protocol Equatable: Int: Equatable module Swift
  method #Comparable."<": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$sSiSLsSL1loiySbx_xtFZTW	// protocol witness for static Comparable.< infix(_:_:) in conformance Int
  method #Comparable."<=": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$sSiSLsSL2leoiySbx_xtFZTW	// protocol witness for static Comparable.<= infix(_:_:) in conformance Int
  method #Comparable.">=": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$sSiSLsSL2geoiySbx_xtFZTW	// protocol witness for static Comparable.>= infix(_:_:) in conformance Int
  method #Comparable.">": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$sSiSLsSL1goiySbx_xtFZTW	// protocol witness for static Comparable.> infix(_:_:) in conformance Int
}

sil_witness_table public_external [serialized] UInt8: Comparable module Swift {
  base_protocol Equatable: UInt8: Equatable module Swift
  method #Comparable."<": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$ss5UInt8VSLsSL1loiySbx_xtFZTW	// protocol witness for static Comparable.< infix(_:_:) in conformance UInt8
  method #Comparable."<=": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$ss5UInt8VSLsSL2leoiySbx_xtFZTW	// protocol witness for static Comparable.<= infix(_:_:) in conformance UInt8
  method #Comparable.">=": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$ss5UInt8VSLsSL2geoiySbx_xtFZTW	// protocol witness for static Comparable.>= infix(_:_:) in conformance UInt8
  method #Comparable.">": <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : @$ss5UInt8VSLsSL1goiySbx_xtFZTW	// protocol witness for static Comparable.> infix(_:_:) in conformance UInt8
}

sil_witness_table public_external [serialized] UInt8: BinaryInteger module Swift {
  base_protocol CustomStringConvertible: UInt8: CustomStringConvertible module Swift
  base_protocol Hashable: UInt8: Hashable module Swift
  base_protocol Numeric: UInt8: Numeric module Swift
  base_protocol Strideable: UInt8: Strideable module Swift
  associated_type_protocol (Magnitude: BinaryInteger): UInt8: BinaryInteger module Swift
  associated_type_protocol (Words: RandomAccessCollection): UInt8.Words: RandomAccessCollection module Swift
  associated_type Words: UInt8.Words
  method #BinaryInteger.isSigned!getter: <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : @$ss5UInt8VSzsSz8isSignedSbvgZTW	// protocol witness for static BinaryInteger.isSigned.getter in conformance UInt8
  method #BinaryInteger.init!allocator: <Self where Self : BinaryInteger><T where T : BinaryFloatingPoint> (Self.Type) -> (T) -> Self? : @$ss5UInt8VSzsSz7exactlyxSgqd___tcSBRd__lufCTW	// protocol witness for BinaryInteger.init<A>(exactly:) in conformance UInt8
  method #BinaryInteger.init!allocator: <Self where Self : BinaryInteger><T where T : BinaryFloatingPoint> (Self.Type) -> (T) -> Self : @$ss5UInt8VSzsSzyxqd__cSBRd__lufCTW	// protocol witness for BinaryInteger.init<A>(_:) in conformance UInt8
  method #BinaryInteger.init!allocator: <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : @$ss5UInt8VSzsSzyxqd__cSzRd__lufCTW	// protocol witness for BinaryInteger.init<A>(_:) in conformance UInt8
  method #BinaryInteger.init!allocator: <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : @$ss5UInt8VSzsSz18truncatingIfNeededxqd___tcSzRd__lufCTW	// protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance UInt8
  method #BinaryInteger.init!allocator: <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : @$ss5UInt8VSzsSz8clampingxqd___tcSzRd__lufCTW	// protocol witness for BinaryInteger.init<A>(clamping:) in conformance UInt8
  method #BinaryInteger.words!getter: <Self where Self : BinaryInteger> (Self) -> () -> Self.Words : @$ss5UInt8VSzsSz5words5WordsQzvgTW	// protocol witness for BinaryInteger.words.getter in conformance UInt8
  method #BinaryInteger._lowWord!getter: <Self where Self : BinaryInteger> (Self) -> () -> UInt : @$ss5UInt8VSzsSz8_lowWordSuvgTW	// protocol witness for BinaryInteger._lowWord.getter in conformance UInt8
  method #BinaryInteger.bitWidth!getter: <Self where Self : BinaryInteger> (Self) -> () -> Int : @$ss5UInt8VSzsSz8bitWidthSivgTW	// protocol witness for BinaryInteger.bitWidth.getter in conformance UInt8
  method #BinaryInteger._binaryLogarithm: <Self where Self : BinaryInteger> (Self) -> () -> Int : @$ss5UInt8VSzsSz16_binaryLogarithmSiyFTW	// protocol witness for BinaryInteger._binaryLogarithm() in conformance UInt8
  method #BinaryInteger.trailingZeroBitCount!getter: <Self where Self : BinaryInteger> (Self) -> () -> Int : @$ss5UInt8VSzsSz20trailingZeroBitCountSivgTW	// protocol witness for BinaryInteger.trailingZeroBitCount.getter in conformance UInt8
  method #BinaryInteger."/": <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self : @$ss5UInt8VSzsSz1doiyxx_xtFZTW	// protocol witness for static BinaryInteger./ infix(_:_:) in conformance UInt8
  method #BinaryInteger."/=": <Self where Self : BinaryInteger> (Self.Type) -> (inout Self, Self) -> () : @$ss5UInt8VSzsSz2deoiyyxz_xtFZTW	// protocol witness for static BinaryInteger./= infix(_:_:) in conformance UInt8
  method #BinaryInteger."%": <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self : @$ss5UInt8VSzsSz1roiyxx_xtFZTW	// protocol witness for static BinaryInteger.% infix(_:_:) in conformance UInt8
  method #BinaryInteger."%=": <Self where Self : BinaryInteger> (Self.Type) -> (inout Self, Self) -> () : @$ss5UInt8VSzsSz2reoiyyxz_xtFZTW	// protocol witness for static BinaryInteger.%= infix(_:_:) in conformance UInt8
  method #BinaryInteger."~": <Self where Self : BinaryInteger> (Self.Type) -> (Self) -> Self : @$ss5UInt8VSzsSz1topyxxFZTW	// protocol witness for static BinaryInteger.~ prefix(_:) in conformance UInt8
  method #BinaryInteger."&": <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self : @$ss5UInt8VSzsSz1aoiyxx_xtFZTW	// protocol witness for static BinaryInteger.& infix(_:_:) in conformance UInt8
  method #BinaryInteger."&=": <Self where Self : BinaryInteger> (Self.Type) -> (inout Self, Self) -> () : @$ss5UInt8VSzsSz2aeoiyyxz_xtFZTW	// protocol witness for static BinaryInteger.&= infix(_:_:) in conformance UInt8
  method #BinaryInteger."|": <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self : @$ss5UInt8VSzsSz1ooiyxx_xtFZTW	// protocol witness for static BinaryInteger.| infix(_:_:) in conformance UInt8
  method #BinaryInteger."|=": <Self where Self : BinaryInteger> (Self.Type) -> (inout Self, Self) -> () : @$ss5UInt8VSzsSz2oeoiyyxz_xtFZTW	// protocol witness for static BinaryInteger.|= infix(_:_:) in conformance UInt8
  method #BinaryInteger."^": <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self : @$ss5UInt8VSzsSz1xoiyxx_xtFZTW	// protocol witness for static BinaryInteger.^ infix(_:_:) in conformance UInt8
  method #BinaryInteger."^=": <Self where Self : BinaryInteger> (Self.Type) -> (inout Self, Self) -> () : @$ss5UInt8VSzsSz2xeoiyyxz_xtFZTW	// protocol witness for static BinaryInteger.^= infix(_:_:) in conformance UInt8
  method #BinaryInteger.">>": <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (Self, RHS) -> Self : @$ss5UInt8VSzsSz2ggoiyxx_qd__tSzRd__lFZTW	// protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance UInt8
  method #BinaryInteger.">>=": <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (inout Self, RHS) -> () : @$ss5UInt8VSzsSz3ggeoiyyxz_qd__tSzRd__lFZTW	// protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance UInt8
  method #BinaryInteger."<<": <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (Self, RHS) -> Self : @$ss5UInt8VSzsSz2lloiyxx_qd__tSzRd__lFZTW	// protocol witness for static BinaryInteger.<< infix<A>(_:_:) in conformance UInt8
  method #BinaryInteger."<<=": <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (inout Self, RHS) -> () : @$ss5UInt8VSzsSz3lleoiyyxz_qd__tSzRd__lFZTW	// protocol witness for static BinaryInteger.<<= infix<A>(_:_:) in conformance UInt8
  method #BinaryInteger.quotientAndRemainder: <Self where Self : BinaryInteger> (Self) -> (Self) -> (quotient: Self, remainder: Self) : @$ss5UInt8VSzsSz20quotientAndRemainder10dividingByx0B0_x9remaindertx_tFTW	// protocol witness for BinaryInteger.quotientAndRemainder(dividingBy:) in conformance UInt8
  method #BinaryInteger.isMultiple: <Self where Self : BinaryInteger> (Self) -> (Self) -> Bool : @$ss5UInt8VSzsSz10isMultiple2ofSbx_tFTW	// protocol witness for BinaryInteger.isMultiple(of:) in conformance UInt8
  method #BinaryInteger.signum: <Self where Self : BinaryInteger> (Self) -> () -> Self : @$ss5UInt8VSzsSz6signumxyFTW	// protocol witness for BinaryInteger.signum() in conformance UInt8
}

sil_witness_table public_external [serialized] UInt8: ExpressibleByIntegerLiteral module Swift {
  associated_type_protocol (IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral): UInt8: _ExpressibleByBuiltinIntegerLiteral module Swift
  associated_type IntegerLiteralType: UInt8
  method #ExpressibleByIntegerLiteral.init!allocator: <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : @$ss5UInt8Vs27ExpressibleByIntegerLiteralssACP07integerE0x0dE4TypeQz_tcfCTW	// protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance UInt8
}

sil_witness_table public_external [serialized] UInt8: _ExpressibleByBuiltinIntegerLiteral module Swift {
  method #_ExpressibleByBuiltinIntegerLiteral.init!allocator: <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : @$ss5UInt8Vs35_ExpressibleByBuiltinIntegerLiteralssACP08_builtineF0xBI_tcfCTW	// protocol witness for _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:) in conformance UInt8
}




