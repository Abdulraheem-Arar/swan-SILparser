swirl_stage raw

func @`SwiftyJSON.SwiftyJSONError.init(rawValue: Swift.Int) -> SwiftyJSON.SwiftyJSONError?` : $`Optional<SwiftyJSONError>` {
bb0($match : $`Int`, %1 : $`@thin SwiftyJSONError.Type`):
  %2 = new $`*SwiftyJSONError`
  %5 = literal [int] 999, $`Builtin.Int64`
  %6 = field_read $match, _value, $`Any`
  %7i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %7 = apply %7i0(%5, %6), $`Builtin.Int1`
  cond_br %7, true bb1, false bb2

bb1:
  %9 = new $`@thin SwiftyJSONError.Type`
  %10 = new $`SwiftyJSONError`
  %10i0 = literal [string] "#SwiftyJSONError.unsupportedType!enumelt", $`Builtin.RawPointer`
  field_write %10i0 to %10, type
  pointer_write %10 to %2
  br bb13

bb2:
  %16 = literal [int] 900, $`Builtin.Int64`
  %17 = field_read $match, _value, $`Any`
  %18i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %18 = apply %18i0(%16, %17), $`Builtin.Int1`
  cond_br %18, true bb3, false bb4

bb3:
  %20 = new $`@thin SwiftyJSONError.Type`
  %21 = new $`SwiftyJSONError`
  %21i0 = literal [string] "#SwiftyJSONError.indexOutOfBounds!enumelt", $`Builtin.RawPointer`
  field_write %21i0 to %21, type
  pointer_write %21 to %2
  br bb13

bb4:
  %27 = literal [int] 902, $`Builtin.Int64`
  %28 = field_read $match, _value, $`Any`
  %29i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %29 = apply %29i0(%27, %28), $`Builtin.Int1`
  cond_br %29, true bb5, false bb6

bb5:
  %31 = new $`@thin SwiftyJSONError.Type`
  %32 = new $`SwiftyJSONError`
  %32i0 = literal [string] "#SwiftyJSONError.elementTooDeep!enumelt", $`Builtin.RawPointer`
  field_write %32i0 to %32, type
  pointer_write %32 to %2
  br bb13

bb6:
  %38 = literal [int] 901, $`Builtin.Int64`
  %39 = field_read $match, _value, $`Any`
  %40i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %40 = apply %40i0(%38, %39), $`Builtin.Int1`
  cond_br %40, true bb7, false bb8

bb7:
  %42 = new $`@thin SwiftyJSONError.Type`
  %43 = new $`SwiftyJSONError`
  %43i0 = literal [string] "#SwiftyJSONError.wrongType!enumelt", $`Builtin.RawPointer`
  field_write %43i0 to %43, type
  pointer_write %43 to %2
  br bb13

bb8:
  %49 = literal [int] 500, $`Builtin.Int64`
  %50 = field_read $match, _value, $`Any`
  %51i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %51 = apply %51i0(%49, %50), $`Builtin.Int1`
  cond_br %51, true bb9, false bb10

bb9:
  %53 = new $`@thin SwiftyJSONError.Type`
  %54 = new $`SwiftyJSONError`
  %54i0 = literal [string] "#SwiftyJSONError.notExist!enumelt", $`Builtin.RawPointer`
  field_write %54i0 to %54, type
  pointer_write %54 to %2
  br bb13

bb10:
  %60 = literal [int] 490, $`Builtin.Int64`
  %61 = field_read $match, _value, $`Any`
  %62i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %62 = apply %62i0(%60, %61), $`Builtin.Int1`
  cond_br %62, true bb11, false bb12

bb11:
  %64 = new $`@thin SwiftyJSONError.Type`
  %65 = new $`SwiftyJSONError`
  %65i0 = literal [string] "#SwiftyJSONError.invalidJSON!enumelt", $`Builtin.RawPointer`
  field_write %65i0 to %65, type
  pointer_write %65 to %2
  br bb13

bb12:
  %71 = new $`Optional<SwiftyJSONError>`
  %71i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %71i0 to %71, type
  br bb14(%71)

bb13:
  %73 = pointer_read %2, $`SwiftyJSONError`
  %74 = new $`Optional<SwiftyJSONError>`
  %74i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %74i0 to %74, type
  field_write %73 to %74, data
  br bb14(%74)

bb14(%77 : $`Optional<SwiftyJSONError>`):
  return %77
}

func @`Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int` : $`Int` {
bb0(%0 : $`Builtin.IntLiteral`, %1 : $`@thin Int.Type`):
  %2i0 = builtin_ref @`s_to_s_checked_trunc_IntLiteral_Int64`, $`Any`
  %2 = apply %2i0(%0), $`(Builtin.Int64, Builtin.Int1)`
  %3 = field_read %2, 0, $`Builtin.Int64`
  %4 = field_read %2, 1, $`Builtin.Int1`
  %5 = new $`Int`
  field_write %3 to %5, _value
  return %5
}

func @`Swift.~= infix<A where A: Swift.Equatable>(A, A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`*T`, %1 : $`*T`):
  %2 = new $`@thick T.Type`
  %3 = dynamic_ref @`#Equatable."=="`, $`@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %4 = apply %3(%0, %1, %2), $`Bool`
  return %4
}

func @`SwiftyJSON.SwiftyJSONError.rawValue.getter : Swift.Int` : $`Int` {
bb0(self : $`SwiftyJSONError`):
  switch_enum self, case "#SwiftyJSONError.unsupportedType!enumelt" : bb1, case "#SwiftyJSONError.indexOutOfBounds!enumelt" : bb2, case "#SwiftyJSONError.elementTooDeep!enumelt" : bb3, case "#SwiftyJSONError.wrongType!enumelt" : bb4, case "#SwiftyJSONError.notExist!enumelt" : bb5, case "#SwiftyJSONError.invalidJSON!enumelt" : bb6

bb1:
  %3 = literal [int] 999, $`Builtin.Int64`
  %4 = new $`Int`
  field_write %3 to %4, _value
  br bb7(%4)

bb2:
  %6 = literal [int] 900, $`Builtin.Int64`
  %7 = new $`Int`
  field_write %6 to %7, _value
  br bb7(%7)

bb3:
  %9 = literal [int] 902, $`Builtin.Int64`
  %10 = new $`Int`
  field_write %9 to %10, _value
  br bb7(%10)

bb4:
  %12 = literal [int] 901, $`Builtin.Int64`
  %13 = new $`Int`
  field_write %12 to %13, _value
  br bb7(%13)

bb5:
  %15 = literal [int] 500, $`Builtin.Int64`
  %16 = new $`Int`
  field_write %15 to %16, _value
  br bb7(%16)

bb6:
  %18 = literal [int] 490, $`Builtin.Int64`
  %19 = new $`Int`
  field_write %18 to %19, _value
  br bb7(%19)

bb7(%21 : $`Int`):
  return %21
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance SwiftyJSON.SwiftyJSONError : Swift.Equatable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*SwiftyJSONError`, %1 : $`*SwiftyJSONError`, %2 : $`@thick SwiftyJSONError.Type`):
  %3 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %4 = apply %3(%0, %1), $`Bool`
  return %4
}

func [stub] @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for Swift.Hashable.hashValue.getter : Swift.Int in conformance SwiftyJSON.SwiftyJSONError : Swift.Hashable in SwiftyJSON` : $`Int` {
bb0(%0 : $`*SwiftyJSONError`):
  %1 = function_ref @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>.hashValue.getter : Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable, τ_0_0 : RawRepresentable, τ_0_0.RawValue : Hashable> (@in_guaranteed τ_0_0) -> Int`
  %2 = apply %1(%0), $`Int`
  return %2
}

func [stub] @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>.hashValue.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`protocol witness for Swift.Hashable.hash(into: inout Swift.Hasher) -> () in conformance SwiftyJSON.SwiftyJSONError : Swift.Hashable in SwiftyJSON` : $`()` {
bb0(%0 : $`*Hasher`, %1 : $`*SwiftyJSONError`):
  %2 = function_ref @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>.hash(into: inout Swift.Hasher) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable, τ_0_0 : RawRepresentable, τ_0_0.RawValue : Hashable> (@inout Hasher, @in_guaranteed τ_0_0) -> ()`
  %3 = apply %2(%0, %1), $`()`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>.hash(into: inout Swift.Hasher) -> ()` : $`()` {
bb0(%0 : $`@inout Hasher`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.Hashable._rawHashValue(seed: Swift.Int) -> Swift.Int in conformance SwiftyJSON.SwiftyJSONError : Swift.Hashable in SwiftyJSON` : $`Int` {
bb0(%0 : $`Int`, %1 : $`*SwiftyJSONError`):
  %2 = function_ref @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>._rawHashValue(seed: Swift.Int) -> Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable, τ_0_0 : RawRepresentable, τ_0_0.RawValue : Hashable> (Int, @in_guaranteed τ_0_0) -> Int`
  %3 = apply %2(%0, %1), $`Int`
  return %3
}

func [stub] @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>._rawHashValue(seed: Swift.Int) -> Swift.Int` : $`Int` {
bb0(%0 : $`Int`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`protocol witness for Swift.RawRepresentable.init(rawValue: A.RawValue) -> A? in conformance SwiftyJSON.SwiftyJSONError : Swift.RawRepresentable in SwiftyJSON` : $`@out Optional<SwiftyJSONError>` {
bb0(%0 : $`*Optional<SwiftyJSONError>`, %1 : $`*Int`, %2 : $`@thick SwiftyJSONError.Type`):
  %3 = pointer_read %1, $`Int`
  %4 = new $`@thin SwiftyJSONError.Type`
  %5 = function_ref @`SwiftyJSON.SwiftyJSONError.init(rawValue: Swift.Int) -> SwiftyJSON.SwiftyJSONError?`, $`@convention(method) (Int, @thin SwiftyJSONError.Type) -> Optional<SwiftyJSONError>`
  %6 = apply %5(%3, %4), $`Optional<SwiftyJSONError>`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`protocol witness for Swift.RawRepresentable.rawValue.getter : A.RawValue in conformance SwiftyJSON.SwiftyJSONError : Swift.RawRepresentable in SwiftyJSON` : $`@out Int` {
bb0(%0 : $`*Int`, %1 : $`*SwiftyJSONError`):
  %2 = pointer_read %1, $`SwiftyJSONError`
  %3 = function_ref @`SwiftyJSON.SwiftyJSONError.rawValue.getter : Swift.Int`, $`@convention(method) (SwiftyJSONError) -> Int`
  %4 = apply %3(%2), $`Int`
  pointer_write %4 to %0
  %6 = new $`()`
  return %6
}

func @`protocol witness for Swift.Error._domain.getter : Swift.String in conformance SwiftyJSON.SwiftyJSONError : Swift.Error in SwiftyJSON` : $`@owned String` {
bb0(%0 : $`*SwiftyJSONError`):
  %1 = function_ref @`(extension in Foundation):Swift.Error< where A: Foundation.CustomNSError>._domain.getter : Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomNSError> (@in_guaranteed τ_0_0) -> @owned String`
  %2 = apply %1(%0), $`@owned String`
  return %2
}

func [stub] @`(extension in Foundation):Swift.Error< where A: Foundation.CustomNSError>._domain.getter : Swift.String` : $`@owned String` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned String`
  return %ret
}

func @`protocol witness for Swift.Error._code.getter : Swift.Int in conformance SwiftyJSON.SwiftyJSONError : Swift.Error in SwiftyJSON` : $`Int` {
bb0(%0 : $`*SwiftyJSONError`):
  %1 = function_ref @`(extension in Foundation):Swift.Error< where A: Foundation.CustomNSError, A: Swift.RawRepresentable, A.Swift.RawRepresentable.RawValue: Swift.FixedWidthInteger>._code.getter : Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomNSError, τ_0_0 : RawRepresentable, τ_0_0.RawValue : FixedWidthInteger> (@in_guaranteed τ_0_0) -> Int`
  %2 = apply %1(%0), $`Int`
  return %2
}

func [stub] @`(extension in Foundation):Swift.Error< where A: Foundation.CustomNSError, A: Swift.RawRepresentable, A.Swift.RawRepresentable.RawValue: Swift.FixedWidthInteger>._code.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`protocol witness for Swift.Error._userInfo.getter : Swift.AnyObject? in conformance SwiftyJSON.SwiftyJSONError : Swift.Error in SwiftyJSON` : $`@owned Optional<AnyObject>` {
bb0(%0 : $`*SwiftyJSONError`):
  %1 = function_ref @`(extension in Swift):Swift.Error._userInfo.getter : Swift.AnyObject?`, $`@convention(method) <τ_0_0 where τ_0_0 : Error> (@in_guaranteed τ_0_0) -> @owned Optional<AnyObject>`
  %2 = apply %1(%0), $`@owned Optional<AnyObject>`
  return %2
}

func [stub] @`(extension in Swift):Swift.Error._userInfo.getter : Swift.AnyObject?` : $`@owned Optional<AnyObject>` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned Optional<AnyObject>`
  return %ret
}

func @`protocol witness for Swift.Error._getEmbeddedNSError() -> Swift.AnyObject? in conformance SwiftyJSON.SwiftyJSONError : Swift.Error in SwiftyJSON` : $`@owned Optional<AnyObject>` {
bb0(%0 : $`*SwiftyJSONError`):
  %1 = function_ref @`(extension in Swift):Swift.Error._getEmbeddedNSError() -> Swift.AnyObject?`, $`@convention(method) <τ_0_0 where τ_0_0 : Error> (@in_guaranteed τ_0_0) -> @owned Optional<AnyObject>`
  %2 = apply %1(%0), $`@owned Optional<AnyObject>`
  return %2
}

func [stub] @`(extension in Swift):Swift.Error._getEmbeddedNSError() -> Swift.AnyObject?` : $`@owned Optional<AnyObject>` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned Optional<AnyObject>`
  return %ret
}

func @`static SwiftyJSON.SwiftyJSONError.errorDomain.getter : Swift.String` : $`@owned String` {
bb0(self : $`@thin SwiftyJSONError.Type`):
  %2 = literal [string] "com.swiftyjson.SwiftyJSON", $`$Builtin.RawPointer`
  %3 = literal [int] 25, $`Builtin.Word`
  %4 = literal [int] -1, $`Builtin.Int1`
  %5 = new $`@thin String.Type`
  %6 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %7 = apply %6(%2, %3, %4, %5), $`@owned String`
  return %7
}

func [stub] @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String` : $`@owned String` {
bb0(%0 : $`Builtin.RawPointer`, %1 : $`Builtin.Word`, %2 : $`Builtin.Int1`, %3 : $`@thin String.Type`):
  %ret = new $`@owned String`
  return %ret
}

func @`SwiftyJSON.SwiftyJSONError.errorCode.getter : Swift.Int` : $`Int` {
bb0(self : $`SwiftyJSONError`):
  %2 = function_ref @`SwiftyJSON.SwiftyJSONError.rawValue.getter : Swift.Int`, $`@convention(method) (SwiftyJSONError) -> Int`
  %3 = apply %2(self), $`Int`
  return %3
}

func @`SwiftyJSON.SwiftyJSONError.errorUserInfo.getter : [Swift.String : Any]` : $`@owned Dictionary<String, Any>` {
bb0(self : $`SwiftyJSONError`):
  %1 = singleton_read `NSLocalizedDescriptionKey` from Globals_SwiftyJSON.Pods.sil, $`*NSString`
  switch_enum self, case "#SwiftyJSONError.unsupportedType!enumelt" : bb1, case "#SwiftyJSONError.indexOutOfBounds!enumelt" : bb2, case "#SwiftyJSONError.wrongType!enumelt" : bb3, case "#SwiftyJSONError.notExist!enumelt" : bb4, case "#SwiftyJSONError.invalidJSON!enumelt" : bb5, case "#SwiftyJSONError.elementTooDeep!enumelt" : bb6

bb1:
  %4 = literal [int] 1, $`Builtin.Word`
  %5 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %6 = apply %5(%4), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %7 = field_read %6, 0, $`Array<(String, Any)>`
  %8 = field_read %6, 1, $`Builtin.RawPointer`
  %10 = new $`*String`
  %10i0 = field_read [alias %10] %8, 0, $`String`
  pointer_write %10i0 to %10
  %11 = new $`*Any`
  %11i0 = field_read [alias %11] %8, 1, $`Any`
  pointer_write %11i0 to %11
  %12 = pointer_read %1, $`NSString`
  %13 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %14 = new $`Optional<NSString>`
  %14i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %14i0 to %14, type
  field_write %12 to %14, data
  %15 = new $`@thin String.Type`
  %16 = apply %13(%14, %15), $`@owned String`
  pointer_write %16 to %10
  %18 = literal [string] "It is an unsupported type.", $`$Builtin.RawPointer`
  %19 = literal [int] 26, $`Builtin.Word`
  %20 = literal [int] -1, $`Builtin.Int1`
  %21 = new $`@thin String.Type`
  %22 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %23 = apply %22(%18, %19, %20, %21), $`@owned String`
  pointer_write %23 to %11
  %27 = new $`@thin Dictionary<String, Any>.Type`
  %28 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %29 = apply %28(%7, %27), $`@owned Dictionary<τ_0_0, τ_0_1>`
  br bb7(%29)

bb2:
  %31 = literal [int] 1, $`Builtin.Word`
  %32 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %33 = apply %32(%31), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %34 = field_read %33, 0, $`Array<(String, Any)>`
  %35 = field_read %33, 1, $`Builtin.RawPointer`
  %37 = new $`*String`
  %37i0 = field_read [alias %37] %35, 0, $`String`
  pointer_write %37i0 to %37
  %38 = new $`*Any`
  %38i0 = field_read [alias %38] %35, 1, $`Any`
  pointer_write %38i0 to %38
  %39 = pointer_read %1, $`NSString`
  %40 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %41 = new $`Optional<NSString>`
  %41i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %41i0 to %41, type
  field_write %39 to %41, data
  %42 = new $`@thin String.Type`
  %43 = apply %40(%41, %42), $`@owned String`
  pointer_write %43 to %37
  %45 = literal [string] "Array Index is out of bounds.", $`$Builtin.RawPointer`
  %46 = literal [int] 29, $`Builtin.Word`
  %47 = literal [int] -1, $`Builtin.Int1`
  %48 = new $`@thin String.Type`
  %49 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %50 = apply %49(%45, %46, %47, %48), $`@owned String`
  pointer_write %50 to %38
  %54 = new $`@thin Dictionary<String, Any>.Type`
  %55 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %56 = apply %55(%34, %54), $`@owned Dictionary<τ_0_0, τ_0_1>`
  br bb7(%56)

bb3:
  %58 = literal [int] 1, $`Builtin.Word`
  %59 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %60 = apply %59(%58), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %61 = field_read %60, 0, $`Array<(String, Any)>`
  %62 = field_read %60, 1, $`Builtin.RawPointer`
  %64 = new $`*String`
  %64i0 = field_read [alias %64] %62, 0, $`String`
  pointer_write %64i0 to %64
  %65 = new $`*Any`
  %65i0 = field_read [alias %65] %62, 1, $`Any`
  pointer_write %65i0 to %65
  %66 = pointer_read %1, $`NSString`
  %67 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %68 = new $`Optional<NSString>`
  %68i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %68i0 to %68, type
  field_write %66 to %68, data
  %69 = new $`@thin String.Type`
  %70 = apply %67(%68, %69), $`@owned String`
  pointer_write %70 to %64
  %72 = literal [string] "Couldn't merge, because the JSONs differ in type on top level.", $`$Builtin.RawPointer`
  %73 = literal [int] 62, $`Builtin.Word`
  %74 = literal [int] -1, $`Builtin.Int1`
  %75 = new $`@thin String.Type`
  %76 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %77 = apply %76(%72, %73, %74, %75), $`@owned String`
  pointer_write %77 to %65
  %81 = new $`@thin Dictionary<String, Any>.Type`
  %82 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %83 = apply %82(%61, %81), $`@owned Dictionary<τ_0_0, τ_0_1>`
  br bb7(%83)

bb4:
  %85 = literal [int] 1, $`Builtin.Word`
  %86 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %87 = apply %86(%85), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %88 = field_read %87, 0, $`Array<(String, Any)>`
  %89 = field_read %87, 1, $`Builtin.RawPointer`
  %91 = new $`*String`
  %91i0 = field_read [alias %91] %89, 0, $`String`
  pointer_write %91i0 to %91
  %92 = new $`*Any`
  %92i0 = field_read [alias %92] %89, 1, $`Any`
  pointer_write %92i0 to %92
  %93 = pointer_read %1, $`NSString`
  %94 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %95 = new $`Optional<NSString>`
  %95i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %95i0 to %95, type
  field_write %93 to %95, data
  %96 = new $`@thin String.Type`
  %97 = apply %94(%95, %96), $`@owned String`
  pointer_write %97 to %91
  %99 = literal [string] "Dictionary key does not exist.", $`$Builtin.RawPointer`
  %100 = literal [int] 30, $`Builtin.Word`
  %101 = literal [int] -1, $`Builtin.Int1`
  %102 = new $`@thin String.Type`
  %103 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %104 = apply %103(%99, %100, %101, %102), $`@owned String`
  pointer_write %104 to %92
  %108 = new $`@thin Dictionary<String, Any>.Type`
  %109 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %110 = apply %109(%88, %108), $`@owned Dictionary<τ_0_0, τ_0_1>`
  br bb7(%110)

bb5:
  %112 = literal [int] 1, $`Builtin.Word`
  %113 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %114 = apply %113(%112), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %115 = field_read %114, 0, $`Array<(String, Any)>`
  %116 = field_read %114, 1, $`Builtin.RawPointer`
  %118 = new $`*String`
  %118i0 = field_read [alias %118] %116, 0, $`String`
  pointer_write %118i0 to %118
  %119 = new $`*Any`
  %119i0 = field_read [alias %119] %116, 1, $`Any`
  pointer_write %119i0 to %119
  %120 = pointer_read %1, $`NSString`
  %121 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %122 = new $`Optional<NSString>`
  %122i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %122i0 to %122, type
  field_write %120 to %122, data
  %123 = new $`@thin String.Type`
  %124 = apply %121(%122, %123), $`@owned String`
  pointer_write %124 to %118
  %126 = literal [string] "JSON is invalid.", $`$Builtin.RawPointer`
  %127 = literal [int] 16, $`Builtin.Word`
  %128 = literal [int] -1, $`Builtin.Int1`
  %129 = new $`@thin String.Type`
  %130 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %131 = apply %130(%126, %127, %128, %129), $`@owned String`
  pointer_write %131 to %119
  %135 = new $`@thin Dictionary<String, Any>.Type`
  %136 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %137 = apply %136(%115, %135), $`@owned Dictionary<τ_0_0, τ_0_1>`
  br bb7(%137)

bb6:
  %139 = literal [int] 1, $`Builtin.Word`
  %140 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %141 = apply %140(%139), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %142 = field_read %141, 0, $`Array<(String, Any)>`
  %143 = field_read %141, 1, $`Builtin.RawPointer`
  %145 = new $`*String`
  %145i0 = field_read [alias %145] %143, 0, $`String`
  pointer_write %145i0 to %145
  %146 = new $`*Any`
  %146i0 = field_read [alias %146] %143, 1, $`Any`
  pointer_write %146i0 to %146
  %147 = pointer_read %1, $`NSString`
  %148 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %149 = new $`Optional<NSString>`
  %149i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %149i0 to %149, type
  field_write %147 to %149, data
  %150 = new $`@thin String.Type`
  %151 = apply %148(%149, %150), $`@owned String`
  pointer_write %151 to %145
  %153 = literal [string] "Element too deep. Increase maxObjectDepth and make sure there is no reference loop.", $`$Builtin.RawPointer`
  %154 = literal [int] 83, $`Builtin.Word`
  %155 = literal [int] -1, $`Builtin.Int1`
  %156 = new $`@thin String.Type`
  %157 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %158 = apply %157(%153, %154, %155, %156), $`@owned String`
  pointer_write %158 to %146
  %162 = new $`@thin Dictionary<String, Any>.Type`
  %163 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %164 = apply %163(%142, %162), $`@owned Dictionary<τ_0_0, τ_0_1>`
  br bb7(%164)

bb7(%166 : $`@owned $Dictionary<String, Any>`):
  return %166
}

func [stub] @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)` : $`(@owned Array<τ_0_0>, Builtin.RawPointer)` {
bb0(%0 : $`Builtin.Word`):
  %ret = new $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  return %ret
}

func [stub] @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String` : $`@owned String` {
bb0(%0 : $`@guaranteed Optional<NSString>`, %1 : $`@thin String.Type`):
  %ret = new $`@owned String`
  return %ret
}

func [stub] @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]` : $`@owned Dictionary<τ_0_0, τ_0_1>` {
bb0(%0 : $`@owned Array<(τ_0_0, τ_0_1)>`, %1 : $`@thin Dictionary<τ_0_0, τ_0_1>.Type`):
  %ret = new $`@owned Dictionary<τ_0_0, τ_0_1>`
  return %ret
}

func @`protocol witness for static Foundation.CustomNSError.errorDomain.getter : Swift.String in conformance SwiftyJSON.SwiftyJSONError : Foundation.CustomNSError in SwiftyJSON` : $`@owned String` {
bb0(%0 : $`@thick SwiftyJSONError.Type`):
  %1 = new $`@thin SwiftyJSONError.Type`
  %2 = function_ref @`static SwiftyJSON.SwiftyJSONError.errorDomain.getter : Swift.String`, $`@convention(method) (@thin SwiftyJSONError.Type) -> @owned String`
  %3 = apply %2(%1), $`@owned String`
  return %3
}

func @`protocol witness for Foundation.CustomNSError.errorCode.getter : Swift.Int in conformance SwiftyJSON.SwiftyJSONError : Foundation.CustomNSError in SwiftyJSON` : $`Int` {
bb0(%0 : $`*SwiftyJSONError`):
  %1 = pointer_read %0, $`SwiftyJSONError`
  %2 = function_ref @`SwiftyJSON.SwiftyJSONError.errorCode.getter : Swift.Int`, $`@convention(method) (SwiftyJSONError) -> Int`
  %3 = apply %2(%1), $`Int`
  return %3
}

func @`protocol witness for Foundation.CustomNSError.errorUserInfo.getter : [Swift.String : Any] in conformance SwiftyJSON.SwiftyJSONError : Foundation.CustomNSError in SwiftyJSON` : $`@owned Dictionary<String, Any>` {
bb0(%0 : $`*SwiftyJSONError`):
  %1 = pointer_read %0, $`SwiftyJSONError`
  %2 = function_ref @`SwiftyJSON.SwiftyJSONError.errorUserInfo.getter : [Swift.String : Any]`, $`@convention(method) (SwiftyJSONError) -> @owned Dictionary<String, Any>`
  %3 = apply %2(%1), $`@owned Dictionary<String, Any>`
  return %3
}

func @`SwiftyJSON.Type.init(rawValue: Swift.Int) -> SwiftyJSON.Type?` : $`Optional<Type>` {
bb0($match : $`Int`, %1 : $`@thin Type.Type`):
  %2 = new $`*Type`
  %5 = literal [int] 0, $`Builtin.Int64`
  %6 = field_read $match, _value, $`Any`
  %7i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %7 = apply %7i0(%5, %6), $`Builtin.Int1`
  cond_br %7, true bb1, false bb2

bb1:
  %9 = new $`@thin Type.Type`
  %10 = new $`Type`
  %10i0 = literal [string] "#Type.number!enumelt", $`Builtin.RawPointer`
  field_write %10i0 to %10, type
  pointer_write %10 to %2
  br bb15

bb2:
  %16 = literal [int] 1, $`Builtin.Int64`
  %17 = field_read $match, _value, $`Any`
  %18i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %18 = apply %18i0(%16, %17), $`Builtin.Int1`
  cond_br %18, true bb3, false bb4

bb3:
  %20 = new $`@thin Type.Type`
  %21 = new $`Type`
  %21i0 = literal [string] "#Type.string!enumelt", $`Builtin.RawPointer`
  field_write %21i0 to %21, type
  pointer_write %21 to %2
  br bb15

bb4:
  %27 = literal [int] 2, $`Builtin.Int64`
  %28 = field_read $match, _value, $`Any`
  %29i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %29 = apply %29i0(%27, %28), $`Builtin.Int1`
  cond_br %29, true bb5, false bb6

bb5:
  %31 = new $`@thin Type.Type`
  %32 = new $`Type`
  %32i0 = literal [string] "#Type.bool!enumelt", $`Builtin.RawPointer`
  field_write %32i0 to %32, type
  pointer_write %32 to %2
  br bb15

bb6:
  %38 = literal [int] 3, $`Builtin.Int64`
  %39 = field_read $match, _value, $`Any`
  %40i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %40 = apply %40i0(%38, %39), $`Builtin.Int1`
  cond_br %40, true bb7, false bb8

bb7:
  %42 = new $`@thin Type.Type`
  %43 = new $`Type`
  %43i0 = literal [string] "#Type.array!enumelt", $`Builtin.RawPointer`
  field_write %43i0 to %43, type
  pointer_write %43 to %2
  br bb15

bb8:
  %49 = literal [int] 4, $`Builtin.Int64`
  %50 = field_read $match, _value, $`Any`
  %51i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %51 = apply %51i0(%49, %50), $`Builtin.Int1`
  cond_br %51, true bb9, false bb10

bb9:
  %53 = new $`@thin Type.Type`
  %54 = new $`Type`
  %54i0 = literal [string] "#Type.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %54i0 to %54, type
  pointer_write %54 to %2
  br bb15

bb10:
  %60 = literal [int] 5, $`Builtin.Int64`
  %61 = field_read $match, _value, $`Any`
  %62i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %62 = apply %62i0(%60, %61), $`Builtin.Int1`
  cond_br %62, true bb11, false bb12

bb11:
  %64 = new $`@thin Type.Type`
  %65 = new $`Type`
  %65i0 = literal [string] "#Type.null!enumelt", $`Builtin.RawPointer`
  field_write %65i0 to %65, type
  pointer_write %65 to %2
  br bb15

bb12:
  %71 = literal [int] 6, $`Builtin.Int64`
  %72 = field_read $match, _value, $`Any`
  %73i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %73 = apply %73i0(%71, %72), $`Builtin.Int1`
  cond_br %73, true bb13, false bb14

bb13:
  %75 = new $`@thin Type.Type`
  %76 = new $`Type`
  %76i0 = literal [string] "#Type.unknown!enumelt", $`Builtin.RawPointer`
  field_write %76i0 to %76, type
  pointer_write %76 to %2
  br bb15

bb14:
  %82 = new $`Optional<Type>`
  %82i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %82i0 to %82, type
  br bb16(%82)

bb15:
  %84 = pointer_read %2, $`Type`
  %85 = new $`Optional<Type>`
  %85i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %85i0 to %85, type
  field_write %84 to %85, data
  br bb16(%85)

bb16(%88 : $`Optional<Type>`):
  return %88
}

func @`SwiftyJSON.Type.rawValue.getter : Swift.Int` : $`Int` {
bb0(self : $`Type`):
  switch_enum self, case "#Type.number!enumelt" : bb1, case "#Type.string!enumelt" : bb2, case "#Type.bool!enumelt" : bb3, case "#Type.array!enumelt" : bb4, case "#Type.dictionary!enumelt" : bb5, case "#Type.null!enumelt" : bb6, case "#Type.unknown!enumelt" : bb7

bb1:
  %3 = literal [int] 0, $`Builtin.Int64`
  %4 = new $`Int`
  field_write %3 to %4, _value
  br bb8(%4)

bb2:
  %6 = literal [int] 1, $`Builtin.Int64`
  %7 = new $`Int`
  field_write %6 to %7, _value
  br bb8(%7)

bb3:
  %9 = literal [int] 2, $`Builtin.Int64`
  %10 = new $`Int`
  field_write %9 to %10, _value
  br bb8(%10)

bb4:
  %12 = literal [int] 3, $`Builtin.Int64`
  %13 = new $`Int`
  field_write %12 to %13, _value
  br bb8(%13)

bb5:
  %15 = literal [int] 4, $`Builtin.Int64`
  %16 = new $`Int`
  field_write %15 to %16, _value
  br bb8(%16)

bb6:
  %18 = literal [int] 5, $`Builtin.Int64`
  %19 = new $`Int`
  field_write %18 to %19, _value
  br bb8(%19)

bb7:
  %21 = literal [int] 6, $`Builtin.Int64`
  %22 = new $`Int`
  field_write %21 to %22, _value
  br bb8(%22)

bb8(%24 : $`Int`):
  return %24
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance SwiftyJSON.Type : Swift.Equatable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*Type`, %1 : $`*Type`, %2 : $`@thick Type.Type`):
  %3 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %4 = apply %3(%0, %1), $`Bool`
  return %4
}

func @`protocol witness for Swift.Hashable.hashValue.getter : Swift.Int in conformance SwiftyJSON.Type : Swift.Hashable in SwiftyJSON` : $`Int` {
bb0(%0 : $`*Type`):
  %1 = function_ref @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>.hashValue.getter : Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable, τ_0_0 : RawRepresentable, τ_0_0.RawValue : Hashable> (@in_guaranteed τ_0_0) -> Int`
  %2 = apply %1(%0), $`Int`
  return %2
}

func @`protocol witness for Swift.Hashable.hash(into: inout Swift.Hasher) -> () in conformance SwiftyJSON.Type : Swift.Hashable in SwiftyJSON` : $`()` {
bb0(%0 : $`*Hasher`, %1 : $`*Type`):
  %2 = function_ref @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>.hash(into: inout Swift.Hasher) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable, τ_0_0 : RawRepresentable, τ_0_0.RawValue : Hashable> (@inout Hasher, @in_guaranteed τ_0_0) -> ()`
  %3 = apply %2(%0, %1), $`()`
  %4 = new $`()`
  return %4
}

func @`protocol witness for Swift.Hashable._rawHashValue(seed: Swift.Int) -> Swift.Int in conformance SwiftyJSON.Type : Swift.Hashable in SwiftyJSON` : $`Int` {
bb0(%0 : $`Int`, %1 : $`*Type`):
  %2 = function_ref @`(extension in Swift):Swift.RawRepresentable< where A: Swift.Hashable, A.Swift.RawRepresentable.RawValue: Swift.Hashable>._rawHashValue(seed: Swift.Int) -> Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable, τ_0_0 : RawRepresentable, τ_0_0.RawValue : Hashable> (Int, @in_guaranteed τ_0_0) -> Int`
  %3 = apply %2(%0, %1), $`Int`
  return %3
}

func @`protocol witness for Swift.RawRepresentable.init(rawValue: A.RawValue) -> A? in conformance SwiftyJSON.Type : Swift.RawRepresentable in SwiftyJSON` : $`@out Optional<Type>` {
bb0(%0 : $`*Optional<Type>`, %1 : $`*Int`, %2 : $`@thick Type.Type`):
  %3 = pointer_read %1, $`Int`
  %4 = new $`@thin Type.Type`
  %5 = function_ref @`SwiftyJSON.Type.init(rawValue: Swift.Int) -> SwiftyJSON.Type?`, $`@convention(method) (Int, @thin Type.Type) -> Optional<Type>`
  %6 = apply %5(%3, %4), $`Optional<Type>`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`protocol witness for Swift.RawRepresentable.rawValue.getter : A.RawValue in conformance SwiftyJSON.Type : Swift.RawRepresentable in SwiftyJSON` : $`@out Int` {
bb0(%0 : $`*Int`, %1 : $`*Type`):
  %2 = pointer_read %1, $`Type`
  %3 = function_ref @`SwiftyJSON.Type.rawValue.getter : Swift.Int`, $`@convention(method) (Type) -> Int`
  %4 = apply %3(%2), $`Int`
  pointer_write %4 to %0
  %6 = new $`()`
  return %6
}

func @`default argument 1 of SwiftyJSON.JSON.init(data: Foundation.Data, options: __C.NSJSONReadingOptions) throws -> SwiftyJSON.JSON` : $`JSONSerialization.ReadingOptions` {
bb0:
  %0 = literal [int] 0, $`Builtin.Word`
  %1 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %2 = apply %1(%0), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %3 = field_read %2, 0, $`Array<JSONSerialization.ReadingOptions>`
  %4 = field_read %2, 1, $`Builtin.RawPointer`
  %6 = new $`@thick JSONSerialization.ReadingOptions.Type`
  %7 = new $`*JSONSerialization.ReadingOptions`
  %8 = function_ref @`(extension in Swift):Swift.SetAlgebra< where A.ArrayLiteralElement == A.Element>.init(arrayLiteral: A.ArrayLiteralElement...) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra, τ_0_0.ArrayLiteralElement == τ_0_0.Element> (@owned Array<τ_0_0.ArrayLiteralElement>, @thick τ_0_0.Type) -> @out τ_0_0`
  %9 = apply %8(%7, %3, %6), $`@out τ_0_0`
  %10 = pointer_read %7, $`JSONSerialization.ReadingOptions`
  return %10
}

func [stub] @`(extension in Swift):Swift.SetAlgebra< where A.ArrayLiteralElement == A.Element>.init(arrayLiteral: A.ArrayLiteralElement...) -> A` : $`@out τ_0_0` {
bb0(%0 : $`@owned Array<τ_0_0.ArrayLiteralElement>`, %1 : $`@thick τ_0_0.Type`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func @`SwiftyJSON.JSON.init(data: Foundation.Data, options: __C.NSJSONReadingOptions) throws -> SwiftyJSON.JSON` : $`(@owned JSON, @error Error)` {
bb0(data : $`@owned $Data`, opt : $`JSONSerialization.ReadingOptions`, %2 : $`@thin JSON.Type`):
  %3 = new $`*JSON`
  %7 = new $`*Any`
  %8 = new $`*Optional<NSError>`
  %8i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %8i0 to %8, type
  %10 = new $`@objc_metatype JSONSerialization.Type`
  %12 = assign data, $`Data`
  %13 = function_ref @`Foundation.Data._bridgeToObjectiveC() -> __C.NSData`, $`@convention(method) (@guaranteed Data) -> @owned NSData`
  %15 = apply %13(%12), $`@owned NSData`
  %19 = builtin_ref @`#JSONSerialization.jsonObject!foreign`, $`@convention(objc_method) (NSData, JSONSerialization.ReadingOptions, Optional<AutoreleasingUnsafeMutablePointer<Optional<NSError>>>, @objc_metatype JSONSerialization.Type) -> @autoreleased Optional<AnyObject>`
  %20 = new $`*@sil_unmanaged Optional<NSError>`
  %21 = pointer_read %8, $`Optional<NSError>`
  pointer_write %21 to %20
  %26 = new $`AutoreleasingUnsafeMutablePointer<Optional<NSError>>`
  %27 = new $`()`
  %28 = new $`()`
  %29 = new $`Optional<AutoreleasingUnsafeMutablePointer<Optional<NSError>>>`
  %29i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %29i0 to %29, type
  field_write %26 to %29, data
  %30 = apply %19(%15, opt, %29, %10), $`@autoreleased Optional<AnyObject>`
  %31 = pointer_read %20, $`@sil_unmanaged Optional<NSError>`
  %33 = assign %31, $`Optional<NSError>`
  pointer_write %33 to %8
  switch_enum %30, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%38 : $`@owned $AnyObject`):
  %40 = function_ref @`Swift._bridgeAnyObjectToAny(Swift.AnyObject?) -> Any`, $`@convention(thin) (@guaranteed Optional<AnyObject>) -> @out Any`
  %41 = apply %40(%7, %38), $`@out Any`
  %44 = new $`*Any`
  %7i0 = pointer_read %7, $`Any`
  pointer_write %7i0 to %44
  %46 = function_ref @`SwiftyJSON.JSON.init(jsonObject: Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %47 = apply %46(%44, %2), $`@owned JSON`
  %49 = assign %47, $`JSON`
  pointer_write %47 to %3
  %53 = assign %49, $`JSON`
  return %53

bb2:
  %59 = pointer_read %8, $`Optional<NSError>`
  %60 = function_ref @`Foundation._convertNSErrorToError(__C.NSError?) -> Swift.Error`, $`@convention(thin) (@guaranteed Optional<NSError>) -> @owned Error`
  %61 = apply %60(%59), $`@owned Error`
  %63i0 = builtin_ref @`willThrow`, $`Any`
  %63 = apply %63i0(%61), $`()`
  return %61
}

func [stub] @`Foundation.Data._bridgeToObjectiveC() -> __C.NSData` : $`@owned NSData` {
bb0(%0 : $`@guaranteed Data`):
  %ret = new $`@owned NSData`
  return %ret
}

func @`Swift._convertInOutToPointerArgument<A where A: Swift._Pointer>(Builtin.RawPointer) -> A` : $`@out ToPointer` {
bb0(%0 : $`*ToPointer`, %1 : $`Builtin.RawPointer`):
  %2 = new $`@thick ToPointer.Type`
  %3 = dynamic_ref @`#_Pointer.init!allocator`, $`@convention(witness_method: _Pointer) <τ_0_0 where τ_0_0 : _Pointer> (Builtin.RawPointer, @thick τ_0_0.Type) -> @out τ_0_0`
  %4 = apply %3(%0, %1, %2), $`@out τ_0_0`
  %5 = new $`()`
  return %5
}

func [stub] @`Foundation._convertNSErrorToError(__C.NSError?) -> Swift.Error` : $`@owned Error` {
bb0(%0 : $`@guaranteed Optional<NSError>`):
  %ret = new $`@owned Error`
  return %ret
}

func [stub] @`Swift._bridgeAnyObjectToAny(Swift.AnyObject?) -> Any` : $`@out Any` {
bb0(%0 : $`@guaranteed Optional<AnyObject>`):
  %ret = new $`@out Any`
  return %ret
}

func @`SwiftyJSON.JSON.init(jsonObject: Any) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(jsonObject : $`*Any`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = literal [int] 0, $`Builtin.Word`
  %5 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %6 = apply %5(%4), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %7 = field_read %6, 0, $`Array<Any>`
  %8 = field_read %6, 1, $`Builtin.RawPointer`
  %10 = new $`*Any`
  %10i0 = pointer_read %2, $`*Any`
  %10i1 = field_read [alias %10] %10i0, rawArray, $`Any`
  pointer_write %10i1 to %10
  pointer_write %7 to %10
  %12 = literal [int] 0, $`Builtin.Word`
  %13 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %14 = apply %13(%12), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %15 = field_read %14, 0, $`Array<(String, Any)>`
  %16 = field_read %14, 1, $`Builtin.RawPointer`
  %18 = new $`@thin Dictionary<String, Any>.Type`
  %19 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %20 = apply %19(%15, %18), $`@owned Dictionary<τ_0_0, τ_0_1>`
  %21 = new $`*Any`
  %21i0 = pointer_read %2, $`*Any`
  %21i1 = field_read [alias %21] %21i0, rawDictionary, $`Any`
  pointer_write %21i1 to %21
  pointer_write %20 to %21
  %23 = literal [string] "", $`$Builtin.RawPointer`
  %24 = literal [int] 0, $`Builtin.Word`
  %25 = literal [int] -1, $`Builtin.Int1`
  %26 = new $`@thin String.Type`
  %27 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %28 = apply %27(%23, %24, %25, %26), $`@owned String`
  %29 = new $`*Any`
  %29i0 = pointer_read %2, $`*Any`
  %29i1 = field_read [alias %29] %29i0, rawString, $`Any`
  pointer_write %29i1 to %29
  pointer_write %28 to %29
  %31 = literal [int] 0, $`Builtin.Int64`
  %32 = new $`Int`
  field_write %31 to %32, _value
  %33 = new $`@thick NSNumber.Type`
  %34 = function_ref @`(extension in Foundation):__C.NSNumber.init(integerLiteral: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %35 = apply %34(%32, %33), $`@owned NSNumber`
  %36 = new $`*Any`
  %36i0 = pointer_read %2, $`*Any`
  %36i1 = field_read [alias %36] %36i0, rawNumber, $`Any`
  pointer_write %36i1 to %36
  pointer_write %35 to %36
  %38 = new $`@thick NSNull.Type`
  %39 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %40 = apply %39(%38), $`@owned NSNull`
  %41 = new $`*Any`
  %41i0 = pointer_read %2, $`*Any`
  %41i1 = field_read [alias %41] %41i0, rawNull, $`Any`
  pointer_write %41i1 to %41
  pointer_write %40 to %41
  %43 = literal [int] 0, $`Builtin.Int1`
  %44 = new $`Bool`
  %45 = new $`*Any`
  %45i0 = pointer_read %2, $`*Any`
  %45i1 = field_read [alias %45] %45i0, rawBool, $`Any`
  pointer_write %45i1 to %45
  pointer_write %44 to %45
  %47 = new $`@thin Type.Type`
  %48 = new $`Type`
  %48i0 = literal [string] "#Type.null!enumelt", $`Builtin.RawPointer`
  field_write %48i0 to %48, type
  %49 = new $`*Any`
  %49i0 = pointer_read %2, $`*Any`
  %49i1 = field_read [alias %49] %49i0, type, $`Any`
  pointer_write %49i1 to %49
  pointer_write %48 to %49
  %51 = new $`Optional<SwiftyJSONError>`
  %51i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %51i0 to %51, type
  %52 = new $`*Any`
  %52i0 = pointer_read %2, $`*Any`
  %52i1 = field_read [alias %52] %52i0, error, $`Any`
  pointer_write %52i1 to %52
  pointer_write %51 to %52
  %54 = new $`*Any`
  %0i0 = pointer_read jsonObject, $`Any`
  pointer_write %0i0 to %54
  %57 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %58 = apply %57(%54, %2), $`()`
  %61 = pointer_read %2, $`JSON`
  return %61
}

func @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(object : $`*Any`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  %0i0 = pointer_read object, $`Any`
  pointer_write %0i0 to %4
  %6 = new $`*Data`
  %4i0 = binary_op %4 [arb] %6, $`Builtin.Int1`
  cond_br %4i0, true bb1, false bb4

bb1:
  %8 = pointer_read %6, $`Data`
  %11 = assign %8, $`Data`
  %12 = function_ref @`default argument 1 of SwiftyJSON.JSON.init(data: Foundation.Data, options: __C.NSJSONReadingOptions) throws -> SwiftyJSON.JSON`, $`@convention(thin) () -> JSONSerialization.ReadingOptions`
  %13 = apply %12(), $`JSONSerialization.ReadingOptions`
  %14 = function_ref @`SwiftyJSON.JSON.init(data: Foundation.Data, options: __C.NSJSONReadingOptions) throws -> SwiftyJSON.JSON`, $`@convention(method) (@owned Data, JSONSerialization.ReadingOptions, @thin JSON.Type) -> (@owned JSON, @error Error)`
  %14i0 = apply %14(%11, %13, %1), $`JSON`
  %14i1 = new $`Builtin.Int1`
  cond_br %14i1, true bb2(%14i0), false bb6(%14i0)

bb2(%16 : $`@owned $JSON`):
  pointer_write %16 to %2
  br bb3

bb3:
  br bb5

bb4:
  %26 = new $`*Any`
  %0i1 = pointer_read object, $`Any`
  pointer_write %0i1 to %26
  %28 = function_ref @`SwiftyJSON.JSON.init(jsonObject: Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %29 = apply %28(%26, %1), $`@owned JSON`
  pointer_write %29 to %2
  br bb5

bb5:
  %35 = pointer_read %2, $`JSON`
  return %35

bb6(%40 : $`@owned $Error`):
  error = assign %40, $`Error`
  %45 = new $`*Any`
  %46 = new $`@thick NSNull.Type`
  %47 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %48 = apply %47(%46), $`@owned NSNull`
  pointer_write %48 to %45
  %51 = function_ref @`SwiftyJSON.JSON.init(jsonObject: Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %52 = apply %51(%45, %1), $`@owned JSON`
  pointer_write %52 to %2
  br bb3
}

func @`__C.NSNull.__allocating_init() -> __C.NSNull` : $`@owned NSNull` {
bb0(%0 : $`@thick NSNull.Type`):
  %2 = new $`NSNull`
  %3 = function_ref @`@nonobjc __C.NSNull.init() -> __C.NSNull`, $`@convention(method) (@owned NSNull) -> @owned NSNull`
  %4 = apply %3(%2), $`@owned NSNull`
  return %4
}

func @`@nonobjc __C.NSNull.init() -> __C.NSNull` : $`@owned NSNull` {
bb0(%0 : $`@owned $NSNull`):
  %1 = builtin_ref @`#NSNull.init!initializer.foreign`, $`@convention(objc_method) (@owned NSNull) -> @owned NSNull`
  %2 = apply %1(%0), $`@owned NSNull`
  return %2
}

func @`SwiftyJSON.JSON.init(parseJSON: Swift.String) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(jsonString : $`@owned $String`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %5 = new $`*String`
  pointer_write jsonString to %5
  %7 = new $`@thin String.Encoding.Type`
  %8 = new $`*String.Encoding`
  %9 = function_ref @`static (extension in Foundation):Swift.String.Encoding.utf8.getter : (extension in Foundation):Swift.String.Encoding`, $`@convention(method) (@thin String.Encoding.Type) -> @out String.Encoding`
  %10 = apply %9(%8, %7), $`@out String.Encoding`
  %11 = function_ref @`default argument 1 of (extension in Foundation):Swift.StringProtocol.data(using: (extension in Foundation):Swift.String.Encoding, allowLossyConversion: Swift.Bool) -> Foundation.Data?`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol> () -> Bool`
  %12 = apply %11(), $`Bool`
  %13 = function_ref @`(extension in Foundation):Swift.StringProtocol.data(using: (extension in Foundation):Swift.String.Encoding, allowLossyConversion: Swift.Bool) -> Foundation.Data?`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol> (@in_guaranteed String.Encoding, Bool, @in_guaranteed τ_0_0) -> @owned Optional<Data>`
  %14 = apply %13(%8, %12, %5), $`@owned Optional<Data>`
  switch_enum %14, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb1

bb1:
  %20 = new $`*Any`
  %21 = new $`@thick NSNull.Type`
  %22 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %23 = apply %22(%21), $`@owned NSNull`
  pointer_write %23 to %20
  %26 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %27 = apply %26(%20, %1), $`@owned JSON`
  pointer_write %27 to %2
  br bb3

bb2(data : $`@owned $Data`):
  %33 = new $`*Any`
  %35 = assign data, $`Data`
  pointer_write %35 to %33
  %38 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %39 = apply %38(%33, %1), $`@owned JSON`
  pointer_write %39 to %2
  br bb3

bb3:
  %45 = pointer_read %2, $`JSON`
  return %45
}

func [stub] @`static (extension in Foundation):Swift.String.Encoding.utf8.getter : (extension in Foundation):Swift.String.Encoding` : $`@out String.Encoding` {
bb0(%0 : $`@thin String.Encoding.Type`):
  %ret = new $`@out String.Encoding`
  return %ret
}

func @`default argument 1 of (extension in Foundation):Swift.StringProtocol.data(using: (extension in Foundation):Swift.String.Encoding, allowLossyConversion: Swift.Bool) -> Foundation.Data?` : $`Bool` {
bb0:
  %0 = literal [int] 0, $`Builtin.Int1`
  %1 = new $`Bool`
  return %1
}

func [stub] @`(extension in Foundation):Swift.StringProtocol.data(using: (extension in Foundation):Swift.String.Encoding, allowLossyConversion: Swift.Bool) -> Foundation.Data?` : $`@owned Optional<Data>` {
bb0(%0 : $`@in_guaranteed String.Encoding`, %1 : $`Bool`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned Optional<Data>`
  return %ret
}

func @`variable initialization expression of SwiftyJSON.JSON.(rawArray in _4625CC38AABF536BB76490A35D7233C9) : [Any]` : $`@owned Array<Any>` {
bb0:
  %0 = literal [int] 0, $`Builtin.Word`
  %1 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %2 = apply %1(%0), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %3 = field_read %2, 0, $`Array<Any>`
  %4 = field_read %2, 1, $`Builtin.RawPointer`
  return %3
}

func @`variable initialization expression of SwiftyJSON.JSON.(rawDictionary in _4625CC38AABF536BB76490A35D7233C9) : [Swift.String : Any]` : $`@owned Dictionary<String, Any>` {
bb0:
  %0 = literal [int] 0, $`Builtin.Word`
  %1 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %2 = apply %1(%0), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %3 = field_read %2, 0, $`Array<(String, Any)>`
  %4 = field_read %2, 1, $`Builtin.RawPointer`
  %6 = new $`@thin Dictionary<String, Any>.Type`
  %7 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %8 = apply %7(%3, %6), $`@owned Dictionary<τ_0_0, τ_0_1>`
  return %8
}

func @`variable initialization expression of SwiftyJSON.JSON.(rawString in _4625CC38AABF536BB76490A35D7233C9) : Swift.String` : $`@owned String` {
bb0:
  %0 = literal [string] "", $`$Builtin.RawPointer`
  %1 = literal [int] 0, $`Builtin.Word`
  %2 = literal [int] -1, $`Builtin.Int1`
  %3 = new $`@thin String.Type`
  %4 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %5 = apply %4(%0, %1, %2, %3), $`@owned String`
  return %5
}

func @`variable initialization expression of SwiftyJSON.JSON.(rawNumber in _4625CC38AABF536BB76490A35D7233C9) : __C.NSNumber` : $`@owned NSNumber` {
bb0:
  %0 = literal [int] 0, $`Builtin.Int64`
  %1 = new $`Int`
  field_write %0 to %1, _value
  %2 = new $`@thick NSNumber.Type`
  %3 = function_ref @`(extension in Foundation):__C.NSNumber.init(integerLiteral: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %4 = apply %3(%1, %2), $`@owned NSNumber`
  return %4
}

func @`variable initialization expression of SwiftyJSON.JSON.(rawNull in _4625CC38AABF536BB76490A35D7233C9) : __C.NSNull` : $`@owned NSNull` {
bb0:
  %0 = new $`@thick NSNull.Type`
  %1 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %2 = apply %1(%0), $`@owned NSNull`
  return %2
}

func @`variable initialization expression of SwiftyJSON.JSON.(rawBool in _4625CC38AABF536BB76490A35D7233C9) : Swift.Bool` : $`Bool` {
bb0:
  %0 = literal [int] 0, $`Builtin.Int1`
  %1 = new $`Bool`
  return %1
}

func @`variable initialization expression of SwiftyJSON.JSON.type : SwiftyJSON.Type` : $`Type` {
bb0:
  %0 = new $`@thin Type.Type`
  %1 = new $`Type`
  %1i0 = literal [string] "#Type.null!enumelt", $`Builtin.RawPointer`
  field_write %1i0 to %1, type
  return %1
}

func @`variable initialization expression of SwiftyJSON.JSON.error : SwiftyJSON.SwiftyJSONError?` : $`Optional<SwiftyJSONError>` {
bb0:
  %0 = new $`Optional<SwiftyJSONError>`
  %0i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %0i0 to %0, type
  return %0
}

func @`SwiftyJSON.JSON.object.setter : Any` : $`()` {
bb0(newValue : $`*Any`, self : $`*JSON`):
  %4 = new $`Optional<SwiftyJSONError>`
  %4i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %4i0 to %4, type
  %6 = new $`*Any`
  %6i0 = pointer_read self, $`*Any`
  %6i1 = field_read [alias %6] %6i0, error, $`Any`
  pointer_write %6i1 to %6
  pointer_write %4 to %6
  %9 = new $`*Any`
  %10 = function_ref @`SwiftyJSON.(unwrap in _4625CC38AABF536BB76490A35D7233C9)(Any) -> Any`, $`@convention(thin) (@in_guaranteed Any) -> @out Any`
  %11 = apply %10(%9, newValue), $`@out Any`
  %12 = new $`*NSNumber`
  %9i0 = binary_op %9 [arb] %12, $`Builtin.Int1`
  cond_br %9i0, true bb1, false bb5

bb1:
  number = pointer_read %12, $`NSNumber`
  %17 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %18 = apply %17(number), $`Bool`
  %19 = field_read %18, _value, $`Any`
  cond_br %19, true bb2, false bb3

bb2:
  %22 = new $`@thin Type.Type`
  %23 = new $`Type`
  %23i0 = literal [string] "#Type.bool!enumelt", $`Builtin.RawPointer`
  field_write %23i0 to %23, type
  %25 = new $`*Any`
  %25i0 = pointer_read self, $`*Any`
  %25i1 = field_read [alias %25] %25i0, type, $`Any`
  pointer_write %25i1 to %25
  pointer_write %23 to %25
  %29 = builtin_ref @`#NSNumber.boolValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Bool`
  %30 = apply %29(number), $`Bool`
  %32 = new $`*Any`
  %32i0 = pointer_read self, $`*Any`
  %32i1 = field_read [alias %32] %32i0, rawBool, $`Any`
  pointer_write %32i1 to %32
  pointer_write %30 to %32
  br bb4

bb3:
  %37 = new $`@thin Type.Type`
  %38 = new $`Type`
  %38i0 = literal [string] "#Type.number!enumelt", $`Builtin.RawPointer`
  field_write %38i0 to %38, type
  %40 = new $`*Any`
  %40i0 = pointer_read self, $`*Any`
  %40i1 = field_read [alias %40] %40i0, type, $`Any`
  pointer_write %40i1 to %40
  pointer_write %38 to %40
  %44 = assign number, $`NSNumber`
  %46 = new $`*Any`
  %46i0 = pointer_read self, $`*Any`
  %46i1 = field_read [alias %46] %46i0, rawNumber, $`Any`
  pointer_write %46i1 to %46
  pointer_write %44 to %46
  br bb4

bb4:
  br bb19

bb5:
  %57 = new $`*String`
  %9i1 = binary_op %9 [arb] %57, $`Builtin.Int1`
  cond_br %9i1, true bb6, false bb7

bb6:
  string = pointer_read %57, $`String`
  %61 = new $`@thin Type.Type`
  %62 = new $`Type`
  %62i0 = literal [string] "#Type.string!enumelt", $`Builtin.RawPointer`
  field_write %62i0 to %62, type
  %64 = new $`*Any`
  %64i0 = pointer_read self, $`*Any`
  %64i1 = field_read [alias %64] %64i0, type, $`Any`
  pointer_write %64i1 to %64
  pointer_write %62 to %64
  %68 = assign string, $`String`
  %70 = new $`*Any`
  %70i0 = pointer_read self, $`*Any`
  %70i1 = field_read [alias %70] %70i0, rawString, $`Any`
  pointer_write %70i1 to %70
  pointer_write %68 to %70
  br bb19

bb7:
  %80 = new $`*NSNull`
  %9i2 = binary_op %9 [arb] %80, $`Builtin.Int1`
  cond_br %9i2, true bb8, false bb9

bb8:
  %82 = pointer_read %80, $`NSNull`
  %83 = new $`@thin Type.Type`
  %84 = new $`Type`
  %84i0 = literal [string] "#Type.null!enumelt", $`Builtin.RawPointer`
  field_write %84i0 to %84, type
  %86 = new $`*Any`
  %86i0 = pointer_read self, $`*Any`
  %86i1 = field_read [alias %86] %86i0, type, $`Any`
  pointer_write %86i1 to %86
  pointer_write %84 to %86
  br bb19

bb9:
  %95 = new $`*Any`
  %9i3 = pointer_read %9, $`Any`
  pointer_write %9i3 to %95
  %97 = new $`_OptionalNilComparisonType`
  %98 = new $`*Optional<Any>`
  %99 = new $`*Any`
  %99i0 = field_read [alias %99] %98, data, $`Any`
  pointer_write %99i0 to %99
  %95i0 = pointer_read %95, $`Any`
  pointer_write %95i0 to %99
  %98i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %98i0 to %98, type
  %102 = new $`*Optional<Any>`
  %98i1 = pointer_read %98, $`Optional<Any>`
  pointer_write %98i1 to %102
  %102i0 = pointer_read %102, $`Optional<Any>`
  switch_enum %102i0, case "#Optional.some!enumelt" : bb10, case "#Optional.none!enumelt" : bb11

bb10:
  %105 = new $`*Any`
  %105i0 = field_read [alias %105] %102, data, $`Any`
  pointer_write %105i0 to %105
  %106 = literal [int] 0, $`Builtin.Int1`
  %107 = new $`Bool`
  br bb12(%107)

bb11:
  %111 = literal [int] -1, $`Builtin.Int1`
  %112 = new $`Bool`
  br bb12(%112)

bb12(%115 : $`Bool`):
  %118 = field_read %115, _value, $`Any`
  cond_br %118, true bb13, false bb14

bb13:
  %122 = new $`@thin Type.Type`
  %123 = new $`Type`
  %123i0 = literal [string] "#Type.null!enumelt", $`Builtin.RawPointer`
  field_write %123i0 to %123, type
  %125 = new $`*Any`
  %125i0 = pointer_read self, $`*Any`
  %125i1 = field_read [alias %125] %125i0, type, $`Any`
  pointer_write %125i1 to %125
  pointer_write %123 to %125
  br bb19

bb14:
  %133 = new $`*Array<Any>`
  %9i4 = binary_op %9 [arb] %133, $`Builtin.Int1`
  cond_br %9i4, true bb15, false bb16

bb15:
  array = pointer_read %133, $`Array<Any>`
  %137 = new $`@thin Type.Type`
  %138 = new $`Type`
  %138i0 = literal [string] "#Type.array!enumelt", $`Builtin.RawPointer`
  field_write %138i0 to %138, type
  %140 = new $`*Any`
  %140i0 = pointer_read self, $`*Any`
  %140i1 = field_read [alias %140] %140i0, type, $`Any`
  pointer_write %140i1 to %140
  pointer_write %138 to %140
  %144 = assign array, $`Array<Any>`
  %146 = new $`*Any`
  %146i0 = pointer_read self, $`*Any`
  %146i1 = field_read [alias %146] %146i0, rawArray, $`Any`
  pointer_write %146i1 to %146
  pointer_write %144 to %146
  br bb19

bb16:
  %156 = new $`*Dictionary<String, Any>`
  %9i5 = binary_op %9 [arb] %156, $`Builtin.Int1`
  cond_br %9i5, true bb17, false bb18

bb17:
  dictionary = pointer_read %156, $`Dictionary<String, Any>`
  %160 = new $`@thin Type.Type`
  %161 = new $`Type`
  %161i0 = literal [string] "#Type.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %161i0 to %161, type
  %163 = new $`*Any`
  %163i0 = pointer_read self, $`*Any`
  %163i1 = field_read [alias %163] %163i0, type, $`Any`
  pointer_write %163i1 to %163
  pointer_write %161 to %163
  %167 = assign dictionary, $`Dictionary<String, Any>`
  %169 = new $`*Any`
  %169i0 = pointer_read self, $`*Any`
  %169i1 = field_read [alias %169] %169i0, rawDictionary, $`Any`
  pointer_write %169i1 to %169
  pointer_write %167 to %169
  br bb19

bb18:
  %179 = new $`@thin Type.Type`
  %180 = new $`Type`
  %180i0 = literal [string] "#Type.unknown!enumelt", $`Builtin.RawPointer`
  field_write %180i0 to %180, type
  %182 = new $`*Any`
  %182i0 = pointer_read self, $`*Any`
  %182i1 = field_read [alias %182] %182i0, type, $`Any`
  pointer_write %182i1 to %182
  pointer_write %180 to %182
  %185 = new $`@thin SwiftyJSONError.Type`
  %186 = new $`SwiftyJSONError`
  %186i0 = literal [string] "#SwiftyJSONError.unsupportedType!enumelt", $`Builtin.RawPointer`
  field_write %186i0 to %186, type
  %187 = new $`Optional<SwiftyJSONError>`
  %187i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %187i0 to %187, type
  field_write %186 to %187, data
  %189 = new $`*Any`
  %189i0 = pointer_read self, $`*Any`
  %189i1 = field_read [alias %189] %189i0, error, $`Any`
  pointer_write %189i1 to %189
  pointer_write %187 to %189
  br bb19

bb19:
  %196 = new $`()`
  return %196
}

func @`SwiftyJSON.JSON.merge(with: SwiftyJSON.JSON) throws -> ()` : $`@error Error` {
bb0(other : $`@guaranteed $JSON`, self : $`*JSON`):
  %5 = literal [int] -1, $`Builtin.Int1`
  %6 = new $`Bool`
  %8 = function_ref @`SwiftyJSON.JSON.(merge in _4625CC38AABF536BB76490A35D7233C9)(with: SwiftyJSON.JSON, typecheck: Swift.Bool) throws -> ()`, $`@convention(method) (@guaranteed JSON, Bool, @inout JSON) -> @error Error`
  %8i0 = apply %8(other, %6, self), $`()`
  %8i1 = new $`Builtin.Int1`
  cond_br %8i1, true bb1(%8i0), false bb2(%8i0)

bb1(%10 : $`()`):
  %12 = new $`()`
  return %12

bb2(%14 : $`@owned $Error`):
  return %14
}

func @`Swift.Bool.init(_builtinBooleanLiteral: Builtin.Int1) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`Builtin.Int1`, %1 : $`@thin Bool.Type`):
  %2 = new $`Bool`
  return %2
}

func @`SwiftyJSON.JSON.(merge in _4625CC38AABF536BB76490A35D7233C9)(with: SwiftyJSON.JSON, typecheck: Swift.Bool) throws -> ()` : $`@error Error` {
bb0(other : $`@guaranteed $JSON`, typecheck : $`Bool`, self : $`*JSON`):
  %8 = new $`*Any`
  %8i0 = pointer_read self, $`*Any`
  %8i1 = field_read [alias %8] %8i0, type, $`Any`
  pointer_write %8i1 to %8
  %9 = pointer_read %8, $`Type`
  %11 = new $`*Type`
  pointer_write %9 to %11
  %13 = field_read other, type, $`Any`
  %14 = new $`*Type`
  pointer_write %13 to %14
  %16 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %17 = apply %16(%11, %14), $`Bool`
  %20 = field_read %17, _value, $`Any`
  cond_br %20, true bb1, false bb10

bb1:
  %23 = new $`*Any`
  %23i0 = pointer_read self, $`*Any`
  %23i1 = field_read [alias %23] %23i0, type, $`Any`
  pointer_write %23i1 to %23
  %24 = pointer_read %23, $`Type`
  switch_enum %24, case "#Type.dictionary!enumelt" : bb2, case "#Type.array!enumelt" : bb7, default bb8

bb2:
  %27 = new $`*IndexingIterator<JSON>`
  %28 = assign other, $`JSON`
  %29 = new $`*JSON`
  pointer_write %28 to %29
  %31 = function_ref @`(extension in Swift):Swift.Collection< where A.Iterator == Swift.IndexingIterator<A>>.makeIterator() -> Swift.IndexingIterator<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Iterator == IndexingIterator<τ_0_0>> (@in τ_0_0) -> @out IndexingIterator<τ_0_0>`
  %32 = apply %31(%27, %29), $`@out IndexingIterator<τ_0_0>`
  %33 = new $`()`
  br bb3

bb3:
  %36 = new $`*Optional<(String, JSON)>`
  %38 = function_ref @`Swift.IndexingIterator.next() -> A.Element?`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@inout IndexingIterator<τ_0_0>) -> @out Optional<τ_0_0.Element>`
  %39 = apply %38(%36, %27), $`@out Optional<τ_0_0.Element>`
  %40 = new $`()`
  %42 = pointer_read %36, $`Optional<(String, JSON)>`
  switch_enum %42, case "#Optional.some!enumelt" : bb4, case "#Optional.none!enumelt" : bb6

bb4(%45 : $`@owned $(String, JSON)`):
  key = field_read %45, 0, $`String`
  %47 = field_read %45, 1, $`JSON`
  %49 = literal [int] 1, $`Builtin.Word`
  %50 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %51 = apply %50(%49), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %52 = field_read %51, 0, $`Array<JSONSubscriptType>`
  %53 = field_read %51, 1, $`Builtin.RawPointer`
  %56 = assign key, $`String`
  pointer_write %56 to %53
  %60 = literal [int] 1, $`Builtin.Word`
  %61 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %62 = apply %61(%60), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %63 = field_read %62, 0, $`Array<JSONSubscriptType>`
  %64 = field_read %62, 1, $`Builtin.RawPointer`
  %67 = assign key, $`String`
  pointer_write %67 to %64
  %71 = function_ref @`SwiftyJSON.JSON.subscript.getter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON`, $`@convention(method) (@guaranteed Array<JSONSubscriptType>, @guaranteed JSON) -> @owned JSON`
  %72 = apply %71(%63, other), $`@owned JSON`
  %73 = literal [int] 0, $`Builtin.Int1`
  %74 = new $`Bool`
  %76 = assign %52, $`Array<JSONSubscriptType>`
  %77 = new $`*JSON`
  %78 = pointer_read self, $`JSON`
  %79 = function_ref @`SwiftyJSON.JSON.subscript.getter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON`, $`@convention(method) (@guaranteed Array<JSONSubscriptType>, @guaranteed JSON) -> @owned JSON`
  %80 = apply %79(%52, %78), $`@owned JSON`
  pointer_write %80 to %77
  %83 = function_ref @`SwiftyJSON.JSON.(merge in _4625CC38AABF536BB76490A35D7233C9)(with: SwiftyJSON.JSON, typecheck: Swift.Bool) throws -> ()`, $`@convention(method) (@guaranteed JSON, Bool, @inout JSON) -> @error Error`
  %83i0 = apply %83(%72, %74, %77), $`()`
  %83i1 = new $`Builtin.Int1`
  cond_br %83i1, true bb5(%83i0), false bb14(%83i0)

bb5(%85 : $`()`):
  %86 = pointer_read %77, $`JSON`
  %87 = function_ref @`SwiftyJSON.JSON.subscript.setter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %88 = apply %87(%86, %76, self), $`()`
  br bb3

bb6:
  br bb9

bb7:
  %100 = new $`@thin JSON.Type`
  %101 = new $`*Any`
  %102 = new $`@thin Array<JSON>.Type`
  %104 = pointer_read self, $`JSON`
  %107 = function_ref @`SwiftyJSON.JSON.arrayValue.getter : [SwiftyJSON.JSON]`, $`@convention(method) (@guaranteed JSON) -> @owned Array<JSON>`
  %108 = apply %107(%104), $`@owned Array<JSON>`
  %111 = function_ref @`SwiftyJSON.JSON.arrayValue.getter : [SwiftyJSON.JSON]`, $`@convention(method) (@guaranteed JSON) -> @owned Array<JSON>`
  %112 = apply %111(other), $`@owned Array<JSON>`
  %113 = function_ref @`static Swift.Array.+ infix([A], [A]) -> [A]`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>, @guaranteed Array<τ_0_0>, @thin Array<τ_0_0>.Type) -> @owned Array<τ_0_0>`
  %114 = apply %113(%108, %112, %102), $`@owned Array<τ_0_0>`
  pointer_write %114 to %101
  %119 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %120 = apply %119(%101, %100), $`@owned JSON`
  pointer_write %120 to self
  br bb9

bb8(%126 : $`Type`):
  %127 = assign other, $`JSON`
  pointer_write %127 to self
  br bb9

bb9:
  br bb13

bb10:
  %133 = field_read typecheck, _value, $`Any`
  cond_br %133, true bb11, false bb12

bb11:
  %135 = new $`@thin SwiftyJSONError.Type`
  %136 = new $`SwiftyJSONError`
  %136i0 = literal [string] "#SwiftyJSONError.wrongType!enumelt", $`Builtin.RawPointer`
  field_write %136i0 to %136, type
  %137 = new $`*Error`
  pointer_write %136 to %137
  %140i0 = builtin_ref @`willThrow`, $`Any`
  %140 = apply %140i0(%137), $`()`
  br bb15(%137)

bb12:
  %142 = assign other, $`JSON`
  pointer_write %142 to self
  br bb13

bb13:
  %147 = new $`()`
  return %147

bb14(%149 : $`@owned $Error`):
  %150 = pointer_read %77, $`JSON`
  %151 = assign %76, $`Array<JSONSubscriptType>`
  %152 = function_ref @`SwiftyJSON.JSON.subscript.setter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %153 = apply %152(%150, %151, self), $`()`
  br bb15(%149)

bb15(%166 : $`@owned $Error`):
  return %166
}

func @`SwiftyJSON.JSON.merged(with: SwiftyJSON.JSON) throws -> SwiftyJSON.JSON` : $`(@owned JSON, @error Error)` {
bb0(other : $`@guaranteed $JSON`, self : $`@guaranteed $JSON`):
  %5 = new $`*JSON`
  %6 = assign self, $`JSON`
  pointer_write %6 to %5
  %8 = literal [int] -1, $`Builtin.Int1`
  %9 = new $`Bool`
  %11 = function_ref @`SwiftyJSON.JSON.(merge in _4625CC38AABF536BB76490A35D7233C9)(with: SwiftyJSON.JSON, typecheck: Swift.Bool) throws -> ()`, $`@convention(method) (@guaranteed JSON, Bool, @inout JSON) -> @error Error`
  %11i0 = apply %11(other, %9, %5), $`()`
  %11i1 = new $`Builtin.Int1`
  cond_br %11i1, true bb1(%11i0), false bb2(%11i0)

bb1(%13 : $`()`):
  %16 = pointer_read %5, $`JSON`
  return %16

bb2(%21 : $`@owned $Error`):
  return %21
}

func @`SwiftyJSON.JSON.subscript.getter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(path : $`@guaranteed $Array<JSONSubscriptType>`, self : $`@guaranteed $JSON`):
  %4 = assign path, $`Array<JSONSubscriptType>`
  %5 = function_ref @`SwiftyJSON.JSON.subscript.getter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON`, $`@convention(method) (@guaranteed Array<JSONSubscriptType>, @guaranteed JSON) -> @owned JSON`
  %6 = apply %5(%4, self), $`@owned JSON`
  return %6
}

func @`SwiftyJSON.JSON.subscript.setter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON` : $`()` {
bb0(newValue : $`@owned $JSON`, path : $`@owned $Array<JSONSubscriptType>`, self : $`*JSON`):
  %7 = assign path, $`Array<JSONSubscriptType>`
  %9 = assign newValue, $`JSON`
  %11 = function_ref @`SwiftyJSON.JSON.subscript.setter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %12 = apply %11(%9, %7, self), $`()`
  %18 = new $`()`
  return %18
}

func @`SwiftyJSON.JSON.arrayValue.getter : [SwiftyJSON.JSON]` : $`@owned Array<JSON>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = new $`*Array<JSON>`
  %3 = function_ref @`SwiftyJSON.JSON.array.getter : [SwiftyJSON.JSON]?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<Array<JSON>>`
  %4 = apply %3(self), $`@owned Optional<Array<JSON>>`
  %5 = assign %4, $`Optional<Array<JSON>>`
  %6 = new $`*Optional<Array<JSON>>`
  %7 = assign %5, $`Optional<Array<JSON>>`
  pointer_write %7 to %6
  %6i0 = pointer_read %6, $`Optional<Array<JSON>>`
  switch_enum %6i0, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1:
  %11 = new $`*Any`
  %11i0 = field_read [alias %11] %6, data, $`Any`
  pointer_write %11i0 to %11
  %12 = pointer_read %11, $`Array<JSON>`
  pointer_write %12 to %2
  br bb3

bb2:
  %16 = literal [int] 0, $`Builtin.Word`
  %17 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %18 = apply %17(%16), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %19 = field_read %18, 0, $`Array<JSON>`
  %20 = field_read %18, 1, $`Builtin.RawPointer`
  pointer_write %19 to %2
  %23 = new $`()`
  br bb3

bb3:
  %26 = new $`()`
  %28 = pointer_read %2, $`Array<JSON>`
  return %28
}

func [stub] @`static Swift.Array.+ infix([A], [A]) -> [A]` : $`@owned Array<τ_0_0>` {
bb0(%0 : $`@guaranteed Array<τ_0_0>`, %1 : $`@guaranteed Array<τ_0_0>`, %2 : $`@thin Array<τ_0_0>.Type`):
  %ret = new $`@owned Array<τ_0_0>`
  return %ret
}

func [stub] @`(extension in Foundation):__C.NSNumber.init(integerLiteral: Swift.Int) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int`, %1 : $`@thick NSNumber.Type`):
  %ret = new $`@owned NSNumber`
  return %ret
}

func @`SwiftyJSON.JSON.type.getter : SwiftyJSON.Type` : $`Type` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  return %2
}

func @`SwiftyJSON.JSON.error.getter : SwiftyJSON.SwiftyJSONError?` : $`Optional<SwiftyJSONError>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, error, $`Any`
  return %2
}

func @`SwiftyJSON.JSON.object.getter : Any` : $`@out Any` {
bb0(%0 : $`*Any`, self : $`@guaranteed $JSON`):
  %3 = field_read self, type, $`Any`
  switch_enum %3, case "#Type.array!enumelt" : bb1, case "#Type.dictionary!enumelt" : bb2, case "#Type.string!enumelt" : bb3, case "#Type.number!enumelt" : bb4, case "#Type.bool!enumelt" : bb5, default bb6

bb1:
  %5 = field_read self, rawArray, $`Any`
  %6 = assign %5, $`Array<Any>`
  pointer_write %6 to %0
  br bb7

bb2:
  %10 = field_read self, rawDictionary, $`Any`
  %11 = assign %10, $`Dictionary<String, Any>`
  pointer_write %11 to %0
  br bb7

bb3:
  %15 = field_read self, rawString, $`Any`
  %16 = assign %15, $`String`
  pointer_write %16 to %0
  br bb7

bb4:
  %20 = field_read self, rawNumber, $`Any`
  %21 = assign %20, $`NSNumber`
  pointer_write %21 to %0
  br bb7

bb5:
  %25 = field_read self, rawBool, $`Any`
  pointer_write %25 to %0
  br bb7

bb6(%29 : $`Type`):
  %30 = field_read self, rawNull, $`Any`
  %31 = assign %30, $`NSNull`
  pointer_write %31 to %0
  br bb7

bb7:
  %35 = new $`()`
  return %35
}

func @`SwiftyJSON.(unwrap in _4625CC38AABF536BB76490A35D7233C9)(Any) -> Any` : $`@out Any` {
bb0(%0 : $`*Any`, object : $`*Any`):
  %3 = new $`*Any`
  %1i0 = pointer_read object, $`Any`
  pointer_write %1i0 to %3
  %5 = new $`*JSON`
  %3i0 = binary_op %3 [arb] %5, $`Builtin.Int1`
  cond_br %3i0, true bb1, false bb2

bb1:
  json = pointer_read %5, $`JSON`
  %10 = new $`*Any`
  %11 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %12 = apply %11(%10, json), $`@out Any`
  %13 = function_ref @`SwiftyJSON.(unwrap in _4625CC38AABF536BB76490A35D7233C9)(Any) -> Any`, $`@convention(thin) (@in_guaranteed Any) -> @out Any`
  %14 = apply %13(%0, %10), $`@out Any`
  br bb9

bb2:
  %24 = new $`*Array<Any>`
  %3i1 = binary_op %3 [arb] %24, $`Builtin.Int1`
  cond_br %3i1, true bb3, false bb5

bb3:
  array = pointer_read %24, $`Array<Any>`
  %29 = new $`*Array<Any>`
  pointer_write array to %29
  %31 = function_ref @`SwiftyJSON.(unwrap in _4625CC38AABF536BB76490A35D7233C9)(Any) -> Any`, $`@convention(thin) (@in_guaranteed Any) -> @out Any`
  %34 = assign %31, $`@callee_guaranteed (@in_guaranteed Any) -> (@out Any, @error Error)`
  %38 = function_ref @`(extension in Swift):Swift.Collection.map<A>((A.Element) throws -> A1) throws -> [A1]`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection><τ_1_0> (@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@owned Array<τ_1_0>, @error Error)`
  %38i0 = apply %38(%34, %29), $`Array<τ_1_0>`
  %38i1 = new $`Builtin.Int1`
  cond_br %38i1, true bb4(%38i0), false bb10(%38i0)

bb4(%40 : $`@owned $Array<Any>`):
  pointer_write %40 to %0
  br bb9

bb5:
  %52 = new $`*Dictionary<String, Any>`
  %3i2 = binary_op %3 [arb] %52, $`Builtin.Int1`
  cond_br %3i2, true bb6, false bb8

bb6:
  dictionary = pointer_read %52, $`Dictionary<String, Any>`
  %56 = new $`*Dictionary<String, Any>`
  %58 = assign dictionary, $`Dictionary<String, Any>`
  pointer_write %58 to %56
  %62 = new $`*Dictionary<String, Any>`
  pointer_write dictionary to %62
  %64 = function_ref @`closure #1 ((key: Swift.String, value: Any)) -> () in SwiftyJSON.(unwrap in _4625CC38AABF536BB76490A35D7233C9)(Any) -> Any`, $`@convention(thin) (@guaranteed String, @in_guaranteed Any, @inout_aliasable Dictionary<String, Any>) -> ()`
  %65 = apply %64(%56), $`()`
  %68 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@guaranteed Swift.String, @in_guaranteed Any) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed (key: Swift.String, value: Any)) -> (@error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed (key: String, value: Any), @noescape @callee_guaranteed (@guaranteed String, @in_guaranteed Any) -> @error Error) -> @error Error`
  %69 = apply %68(%65), $`@error Error`
  %71 = function_ref @`(extension in Swift):Swift.Sequence.forEach((A.Element) throws -> ()) throws -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence> (@noescape @callee_guaranteed @substituted <τ_0_0> (@in_guaranteed τ_0_0) -> @error Error for <τ_0_0.Element>, @in_guaranteed τ_0_0) -> @error Error`
  %71i0 = apply %71(%69, %62), $`()`
  %71i1 = new $`Builtin.Int1`
  cond_br %71i1, true bb7(%71i0), false bb11(%71i0)

bb7(%73 : $`()`):
  %79 = pointer_read %56, $`Dictionary<String, Any>`
  pointer_write %79 to %0
  br bb9

bb8:
  %1i1 = pointer_read object, $`Any`
  pointer_write %1i1 to %0
  br bb9

bb9:
  %95 = new $`()`
  return %95

bb10(%97 : $`@owned $Error`):
  unreachable

bb11(%100 : $`@owned $Error`):
  unreachable
}

func @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool` : $`Bool` {
bb0(self : $`@guaranteed $NSNumber`):
  %2 = new $`@thin String.Type`
  %3 = assign self, $`NSNumber`
  %6 = builtin_ref @`#NSValue.objCType!getter.foreign`, $`@convention(objc_method) (NSValue) -> @unowned_inner_pointer UnsafePointer<Int8>`
  %7 = assign %3, $`NSValue`
  %8 = apply %6(%3), $`@unowned_inner_pointer UnsafePointer<Int8>`
  %12 = function_ref @`Swift.String.init(cString: Swift.UnsafePointer<Swift.Int8>) -> Swift.String`, $`@convention(method) (UnsafePointer<Int8>, @thin String.Type) -> @owned String`
  objCType = apply %12(%8, %2), $`@owned String`
  %15 = function_ref @`SwiftyJSON.(trueNumber in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : __C.NSNumber`, $`@convention(thin) () -> Builtin.RawPointer`
  %16 = apply %15(), $`Builtin.RawPointer`
  %18 = pointer_read %16, $`NSNumber`
  %19 = builtin_ref @`#NSNumber.compare!foreign`, $`@convention(objc_method) (NSNumber, NSNumber) -> ComparisonResult`
  %20 = apply %19(%18, self), $`ComparisonResult`
  %22 = new $`*ComparisonResult`
  pointer_write %20 to %22
  %24 = new $`@thin ComparisonResult.Type`
  %25 = new $`ComparisonResult`
  %25i0 = literal [string] "#ComparisonResult.orderedSame!enumelt", $`Builtin.RawPointer`
  field_write %25i0 to %25, type
  %26 = new $`*ComparisonResult`
  pointer_write %25 to %26
  %28 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %29 = apply %28(%22, %26), $`Bool`
  %32 = assign objCType, $`String`
  %33 = field_read %29, _value, $`Any`
  cond_br %33, true bb1, false bb2

bb1:
  %36 = new $`@thin String.Type`
  %37 = function_ref @`SwiftyJSON.(trueObjCType in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : Swift.String`, $`@convention(thin) () -> Builtin.RawPointer`
  %38 = apply %37(), $`Builtin.RawPointer`
  %40 = pointer_read %38, $`String`
  %41 = function_ref @`static Swift.String.== infix(Swift.String, Swift.String) -> Swift.Bool`, $`@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool`
  %42 = apply %41(%32, %40, %36), $`Bool`
  br bb3(%42)

bb2:
  %46 = literal [int] 0, $`Builtin.Int1`
  %47 = new $`Bool`
  br bb3(%47)

bb3(%49 : $`Bool`):
  %51 = assign self, $`NSNumber`
  %52 = assign objCType, $`String`
  %53 = field_read %49, _value, $`Any`
  cond_br %53, true bb4, false bb5

bb4:
  %55 = literal [int] -1, $`Builtin.Int1`
  %56 = new $`Bool`
  br bb9(%56)

bb5:
  %60 = function_ref @`SwiftyJSON.(falseNumber in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : __C.NSNumber`, $`@convention(thin) () -> Builtin.RawPointer`
  %61 = apply %60(), $`Builtin.RawPointer`
  %63 = pointer_read %61, $`NSNumber`
  %64 = builtin_ref @`#NSNumber.compare!foreign`, $`@convention(objc_method) (NSNumber, NSNumber) -> ComparisonResult`
  %65 = apply %64(%63, %51), $`ComparisonResult`
  %67 = new $`*ComparisonResult`
  pointer_write %65 to %67
  %69 = new $`@thin ComparisonResult.Type`
  %70 = new $`ComparisonResult`
  %70i0 = literal [string] "#ComparisonResult.orderedSame!enumelt", $`Builtin.RawPointer`
  field_write %70i0 to %70, type
  %71 = new $`*ComparisonResult`
  pointer_write %70 to %71
  %73 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %74 = apply %73(%67, %71), $`Bool`
  %77 = assign %52, $`String`
  %78 = field_read %74, _value, $`Any`
  cond_br %78, true bb6, false bb7

bb6:
  %81 = new $`@thin String.Type`
  %82 = function_ref @`SwiftyJSON.(falseObjCType in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : Swift.String`, $`@convention(thin) () -> Builtin.RawPointer`
  %83 = apply %82(), $`Builtin.RawPointer`
  %85 = pointer_read %83, $`String`
  %86 = function_ref @`static Swift.String.== infix(Swift.String, Swift.String) -> Swift.Bool`, $`@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool`
  %87 = apply %86(%77, %85, %81), $`Bool`
  br bb8(%87)

bb7:
  %91 = literal [int] 0, $`Builtin.Int1`
  %92 = new $`Bool`
  br bb8(%92)

bb8(%94 : $`Bool`):
  br bb9(%94)

bb9(%99 : $`Bool`):
  %102 = field_read %99, _value, $`Any`
  cond_br %102, true bb10, false bb11

bb10:
  %104 = literal [int] -1, $`Builtin.Int1`
  %105 = new $`Bool`
  br bb12(%105)

bb11:
  %108 = literal [int] 0, $`Builtin.Int1`
  %109 = new $`Bool`
  br bb12(%109)

bb12(%112 : $`Bool`):
  return %112
}

func @`Swift._OptionalNilComparisonType.init(nilLiteral: ()) -> Swift._OptionalNilComparisonType` : $`_OptionalNilComparisonType` {
bb0(%0 : $`@thin _OptionalNilComparisonType.Type`):
  %1 = new $`_OptionalNilComparisonType`
  return %1
}

func @`static Swift.Optional.~= infix(Swift._OptionalNilComparisonType, A?) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`_OptionalNilComparisonType`, %1 : $`*Optional<Wrapped>`, %2 : $`@thin Optional<Wrapped>.Type`):
  %3 = new $`*Optional<Wrapped>`
  %1i0 = pointer_read %1, $`Optional<Wrapped>`
  pointer_write %1i0 to %3
  %3i0 = pointer_read %3, $`Optional<Wrapped>`
  switch_enum %3i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb1

bb1:
  %6 = literal [int] -1, $`Builtin.Int1`
  %7 = new $`Bool`
  br bb3(%7)

bb2:
  %10 = new $`*Any`
  %10i0 = field_read [alias %10] %3, data, $`Any`
  pointer_write %10i0 to %10
  %11 = literal [int] 0, $`Builtin.Int1`
  %12 = new $`Bool`
  br bb3(%12)

bb3(%16 : $`Bool`):
  return %16
}

func [coroutine] @`SwiftyJSON.JSON.object.modify : Any` : $`@yields @inout Any` {
bb0(self : $`*JSON`):
  %3 = new $`*Any`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %6 = apply %5(%3, %4), $`@out Any`
  yield (%3), resume bb1, unwind bb2

bb1:
  %9 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %10 = apply %9(%3, self), $`()`
  %13 = new $`()`
  return %13

bb2:
  %15 = new $`*Any`
  %3i0 = pointer_read %3, $`Any`
  pointer_write %3i0 to %15
  %17 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %18 = apply %17(%15, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Any`
  return %dummy_unwindi0
}

func @`static SwiftyJSON.JSON.nullJSON.getter : SwiftyJSON.JSON` : $`@owned JSON` {
bb0(self : $`@thin JSON.Type`):
  %2 = function_ref @`static SwiftyJSON.JSON.null.getter : SwiftyJSON.JSON`, $`@convention(method) (@thin JSON.Type) -> @owned JSON`
  %3 = apply %2(self), $`@owned JSON`
  return %3
}

func @`static SwiftyJSON.JSON.null.getter : SwiftyJSON.JSON` : $`@owned JSON` {
bb0(self : $`@thin JSON.Type`):
  %2 = new $`@thin JSON.Type`
  %3 = new $`*Any`
  %4 = new $`@thick NSNull.Type`
  %5 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %6 = apply %5(%4), $`@owned NSNull`
  pointer_write %6 to %3
  %9 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %10 = apply %9(%3, %2), $`@owned JSON`
  return %10
}

func [stub] @`(extension in Swift):Swift.Collection.map<A>((A.Element) throws -> A1) throws -> [A1]` : $`(@owned Array<τ_1_0>, @error Error)` {
bb0(%0 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error Error) for <τ_0_0.Element, τ_1_0>`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`(@owned Array<τ_1_0>, @error Error)`
  return %ret
}

func @`closure #1 ((key: Swift.String, value: Any)) -> () in SwiftyJSON.(unwrap in _4625CC38AABF536BB76490A35D7233C9)(Any) -> Any` : $`()` {
bb0(%0 : $`@guaranteed $String`, %1 : $`*Any`, d : $`*Dictionary<String, Any>`):
  %3 = new $`*(key: String, value: Any)`
  %4 = new $`*value: Any`
  %4i0 = field_read [alias %4] %3, 1, $`value: Any`
  pointer_write %4i0 to %4
  %5 = new $`*key: String`
  %5i0 = field_read [alias %5] %3, 0, $`key: String`
  pointer_write %5i0 to %5
  %6 = assign %0, $`String`
  %7 = assign %6, $`String`
  %8 = assign %6, $`String`
  pointer_write %6 to %5
  %10 = new $`*value: Any`
  %10i0 = field_read [alias %10] %3, 1, $`value: Any`
  pointer_write %10i0 to %10
  %1i0 = pointer_read %1, $`Any`
  pointer_write %1i0 to %10
  %13 = new $`*(key: String, value: Any)`
  %14 = new $`*key: String`
  %14i0 = field_read [alias %14] %13, 0, $`key: String`
  pointer_write %14i0 to %14
  %15 = new $`*value: Any`
  %15i0 = field_read [alias %15] %13, 1, $`value: Any`
  pointer_write %15i0 to %15
  %16 = assign %8, $`String`
  pointer_write %16 to %14
  %4i1 = pointer_read %4, $`Any`
  pointer_write %4i1 to %15
  %20 = new $`*key: String`
  %20i0 = field_read [alias %20] %13, 0, $`key: String`
  pointer_write %20i0 to %20
  %21 = pointer_read %20, $`String`
  %22 = new $`*value: Any`
  %22i0 = field_read [alias %22] %13, 1, $`value: Any`
  pointer_write %22i0 to %22
  %23 = new $`*Optional<Any>`
  %24 = new $`*Any`
  %24i0 = field_read [alias %24] %23, data, $`Any`
  pointer_write %24i0 to %24
  %25 = assign %7, $`String`
  %28 = new $`*value: Any`
  %28i0 = field_read [alias %28] %3, 1, $`value: Any`
  pointer_write %28i0 to %28
  %29 = function_ref @`SwiftyJSON.(unwrap in _4625CC38AABF536BB76490A35D7233C9)(Any) -> Any`, $`@convention(thin) (@in_guaranteed Any) -> @out Any`
  %30 = apply %29(%24, %28), $`@out Any`
  %23i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %23i0 to %23, type
  %34 = new $`*String`
  pointer_write %21 to %34
  %37 = function_ref @`Swift.Dictionary.subscript.setter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in Optional<τ_0_1>, @in τ_0_0, @inout Dictionary<τ_0_0, τ_0_1>) -> ()`
  %38 = apply %37(%23, %34, d), $`()`
  %46 = new $`()`
  return %46
}

func [stub] @`Swift.Dictionary.subscript.setter : (A) -> B?` : $`()` {
bb0(%0 : $`@in Optional<τ_0_1>`, %1 : $`@in τ_0_0`, %2 : $`@inout Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`()`
  return %ret
}

func @`reabstraction thunk helper from @callee_guaranteed (@guaranteed Swift.String, @in_guaranteed Any) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed (key: Swift.String, value: Any)) -> (@error @owned Swift.Error)` : $`@error Error` {
bb0(%0 : $`*(key: String, value: Any)`, %1 : $`@noescape @callee_guaranteed (@guaranteed String, @in_guaranteed Any) -> @error Error`):
  %2 = new $`*key: String`
  %2i0 = field_read [alias %2] %0, 0, $`key: String`
  pointer_write %2i0 to %2
  %3 = new $`*value: Any`
  %3i0 = field_read [alias %3] %0, 1, $`value: Any`
  pointer_write %3i0 to %3
  %4 = pointer_read %2, $`String`
  %1i0 = apply %1(%4, %3), $`()`
  %1i1 = new $`Builtin.Int1`
  cond_br %1i1, true bb1(%1i0), false bb2(%1i0)

bb1(%6 : $`()`):
  %7 = new $`()`
  return %7

bb2(%10 : $`@owned $Error`):
  return %10
}

func [stub] @`(extension in Swift):Swift.Sequence.forEach((A.Element) throws -> ()) throws -> ()` : $`@error Error` {
bb0(%0 : $`@noescape @callee_guaranteed @substituted <τ_0_0> (@in_guaranteed τ_0_0) -> @error Error for <τ_0_0.Element>`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@error Error`
  return %ret
}

func @`static SwiftyJSON.Index.== infix(SwiftyJSON.Index<A>, SwiftyJSON.Index<A>) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $Index<T>`, rhs : $`@guaranteed $Index<T>`, self : $`@thin Index<T>.Type`):
  %6 = assign lhs, $`Index<T>`
  %7 = assign rhs, $`Index<T>`
  %8 = new $`(Index<T>, Index<T>)`
  field_write %6 to %8, 0
  field_write %7 to %8, 1
  %10 = field_read %8, 0, $`Index<T>`
  %11 = field_read %8, 1, $`Index<T>`
  switch_enum %10, case "#Index.array!enumelt" : bb1, case "#Index.dictionary!enumelt" : bb4, case "#Index.null!enumelt" : bb7

bb1(left : $`Int`):
  switch_enum %11, case "#Index.array!enumelt" : bb2, default bb3

bb2(right : $`Int`):
  %18 = field_read left, _value, $`Any`
  %19 = field_read right, _value, $`Any`
  %20i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %20 = apply %20i0(%18, %19), $`Builtin.Int1`
  %21 = new $`Bool`
  br bb11(%21)

bb3(%25 : $`@guaranteed $Index<T>`):
  br bb10

bb4(%28 : $`@guaranteed $Dictionary<String, T>.Index`):
  switch_enum %11, case "#Index.dictionary!enumelt" : bb5, default bb6

bb5(%30 : $`@guaranteed $Dictionary<String, T>.Index`):
  %31 = assign %28, $`Dictionary<String, T>.Index`
  %33 = assign %30, $`Dictionary<String, T>.Index`
  %35 = new $`@thin Dictionary<String, T>.Index.Type`
  %38 = function_ref @`static Swift.Dictionary.Index.== infix([A : B].Index, [A : B].Index) -> Swift.Bool`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>.Index, @guaranteed Dictionary<τ_0_0, τ_0_1>.Index, @thin Dictionary<τ_0_0, τ_0_1>.Index.Type) -> Bool`
  %39 = apply %38(%31, %33, %35), $`Bool`
  br bb11(%39)

bb6(%47 : $`@guaranteed $Index<T>`):
  br bb10

bb7:
  switch_enum %11, case "#Index.null!enumelt" : bb8, default bb9

bb8:
  %51 = literal [int] -1, $`Builtin.Int1`
  %52 = new $`Bool`
  br bb11(%52)

bb9(%56 : $`@guaranteed $Index<T>`):
  br bb10

bb10:
  %59 = literal [int] 0, $`Builtin.Int1`
  %60 = new $`Bool`
  br bb11(%60)

bb11(%63 : $`Bool`):
  return %63
}

func @`static Swift.Int.== infix(Swift.Int, Swift.Int) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`Int`, %1 : $`Int`, %2 : $`@thin Int.Type`):
  %3 = field_read %0, _value, $`Any`
  %4 = field_read %1, _value, $`Any`
  %5i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %5 = apply %5i0(%3, %4), $`Builtin.Int1`
  %6 = new $`Bool`
  return %6
}

func [stub] @`static Swift.Dictionary.Index.== infix([A : B].Index, [A : B].Index) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>.Index`, %1 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>.Index`, %2 : $`@thin Dictionary<τ_0_0, τ_0_1>.Index.Type`):
  %ret = new $`Bool`
  return %ret
}

func @`static SwiftyJSON.Index.< infix(SwiftyJSON.Index<A>, SwiftyJSON.Index<A>) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $Index<T>`, rhs : $`@guaranteed $Index<T>`, self : $`@thin Index<T>.Type`):
  %6 = assign lhs, $`Index<T>`
  %7 = assign rhs, $`Index<T>`
  %8 = new $`(Index<T>, Index<T>)`
  field_write %6 to %8, 0
  field_write %7 to %8, 1
  %10 = field_read %8, 0, $`Index<T>`
  %11 = field_read %8, 1, $`Index<T>`
  switch_enum %10, case "#Index.array!enumelt" : bb1, case "#Index.dictionary!enumelt" : bb4, default bb7

bb1(left : $`Int`):
  switch_enum %11, case "#Index.array!enumelt" : bb2, default bb3

bb2(right : $`Int`):
  %18 = field_read left, _value, $`Any`
  %19 = field_read right, _value, $`Any`
  %20i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %20 = apply %20i0(%18, %19), $`Builtin.Int1`
  %21 = new $`Bool`
  br bb9(%21)

bb3(%25 : $`@guaranteed $Index<T>`):
  br bb8

bb4(%28 : $`@guaranteed $Dictionary<String, T>.Index`):
  switch_enum %11, case "#Index.dictionary!enumelt" : bb5, default bb6

bb5(%30 : $`@guaranteed $Dictionary<String, T>.Index`):
  %31 = assign %28, $`Dictionary<String, T>.Index`
  %33 = assign %30, $`Dictionary<String, T>.Index`
  %35 = new $`@thin Dictionary<String, T>.Index.Type`
  %38 = function_ref @`static Swift.Dictionary.Index.< infix([A : B].Index, [A : B].Index) -> Swift.Bool`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>.Index, @guaranteed Dictionary<τ_0_0, τ_0_1>.Index, @thin Dictionary<τ_0_0, τ_0_1>.Index.Type) -> Bool`
  %39 = apply %38(%31, %33, %35), $`Bool`
  br bb9(%39)

bb6(%47 : $`@guaranteed $Index<T>`):
  br bb8

bb7(%50 : $`@guaranteed $Index<T>`):
  br bb8

bb8:
  %53 = literal [int] 0, $`Builtin.Int1`
  %54 = new $`Bool`
  br bb9(%54)

bb9(%57 : $`Bool`):
  return %57
}

func @`static Swift.Int.< infix(Swift.Int, Swift.Int) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`Int`, %1 : $`Int`, %2 : $`@thin Int.Type`):
  %3 = field_read %0, _value, $`Any`
  %4 = field_read %1, _value, $`Any`
  %5i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %5 = apply %5i0(%3, %4), $`Builtin.Int1`
  %6 = new $`Bool`
  return %6
}

func [stub] @`static Swift.Dictionary.Index.< infix([A : B].Index, [A : B].Index) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>.Index`, %1 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>.Index`, %2 : $`@thin Dictionary<τ_0_0, τ_0_1>.Index.Type`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for static Swift.Comparable.< infix(A, A) -> Swift.Bool in conformance SwiftyJSON.Index<A> : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*Index<τ_0_0>`, %1 : $`*Index<τ_0_0>`, %2 : $`@thick Index<τ_0_0>.Type`):
  %3 = pointer_read %0, $`Index<τ_0_0>`
  %4 = pointer_read %1, $`Index<τ_0_0>`
  %5 = new $`@thin Index<τ_0_0>.Type`
  %6 = function_ref @`static SwiftyJSON.Index.< infix(SwiftyJSON.Index<A>, SwiftyJSON.Index<A>) -> Swift.Bool`, $`@convention(method) <τ_0_0> (@guaranteed Index<τ_0_0>, @guaranteed Index<τ_0_0>, @thin Index<τ_0_0>.Type) -> Bool`
  %7 = apply %6(%3, %4, %5), $`Bool`
  return %7
}

func @`protocol witness for static Swift.Comparable.<= infix(A, A) -> Swift.Bool in conformance SwiftyJSON.Index<A> : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*Index<τ_0_0>`, %1 : $`*Index<τ_0_0>`, %2 : $`@thick Index<τ_0_0>.Type`):
  %3 = function_ref @`static (extension in Swift):Swift.Comparable.<= infix(A, A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %4 = apply %3(%0, %1, %2), $`Bool`
  return %4
}

func [stub] @`static (extension in Swift):Swift.Comparable.<= infix(A, A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`, %2 : $`@thick τ_0_0.Type`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for static Swift.Comparable.>= infix(A, A) -> Swift.Bool in conformance SwiftyJSON.Index<A> : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*Index<τ_0_0>`, %1 : $`*Index<τ_0_0>`, %2 : $`@thick Index<τ_0_0>.Type`):
  %3 = function_ref @`static (extension in Swift):Swift.Comparable.>= infix(A, A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %4 = apply %3(%0, %1, %2), $`Bool`
  return %4
}

func [stub] @`static (extension in Swift):Swift.Comparable.>= infix(A, A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`, %2 : $`@thick τ_0_0.Type`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for static Swift.Comparable.> infix(A, A) -> Swift.Bool in conformance SwiftyJSON.Index<A> : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*Index<τ_0_0>`, %1 : $`*Index<τ_0_0>`, %2 : $`@thick Index<τ_0_0>.Type`):
  %3 = function_ref @`static (extension in Swift):Swift.Comparable.> infix(A, A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %4 = apply %3(%0, %1, %2), $`Bool`
  return %4
}

func [stub] @`static (extension in Swift):Swift.Comparable.> infix(A, A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`, %2 : $`@thick τ_0_0.Type`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance SwiftyJSON.Index<A> : Swift.Equatable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*Index<τ_0_0>`, %1 : $`*Index<τ_0_0>`, %2 : $`@thick Index<τ_0_0>.Type`):
  %3 = pointer_read %0, $`Index<τ_0_0>`
  %4 = pointer_read %1, $`Index<τ_0_0>`
  %5 = new $`@thin Index<τ_0_0>.Type`
  %6 = function_ref @`static SwiftyJSON.Index.== infix(SwiftyJSON.Index<A>, SwiftyJSON.Index<A>) -> Swift.Bool`, $`@convention(method) <τ_0_0> (@guaranteed Index<τ_0_0>, @guaranteed Index<τ_0_0>, @thin Index<τ_0_0>.Type) -> Bool`
  %7 = apply %6(%3, %4, %5), $`Bool`
  return %7
}

func @`SwiftyJSON.JSON.startIndex.getter : SwiftyJSON.Index<Any>` : $`@owned Index<Any>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.array!enumelt" : bb1, case "#Type.dictionary!enumelt" : bb2, default bb3

bb1:
  %4 = new $`@thin Index<Any>.Type`
  %5 = field_read self, rawArray, $`Any`
  %6 = assign %5, $`Array<Any>`
  %8 = function_ref @`Swift.Array.startIndex.getter : Swift.Int`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int`
  %9 = apply %8(%6), $`Int`
  %12 = new $`Index<Any>`
  %12i0 = literal [string] "#Index.array!enumelt", $`Builtin.RawPointer`
  field_write %12i0 to %12, type
  field_write %9 to %12, data
  br bb4(%12)

bb2:
  %14 = new $`@thin Index<Any>.Type`
  %15 = field_read self, rawDictionary, $`Any`
  %16 = assign %15, $`Dictionary<String, Any>`
  %18 = function_ref @`Swift.Dictionary.startIndex.getter : [A : B].Index`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned Dictionary<τ_0_0, τ_0_1>.Index`
  %19 = apply %18(%16), $`@owned Dictionary<τ_0_0, τ_0_1>.Index`
  %22 = new $`Index<Any>`
  %22i0 = literal [string] "#Index.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %22i0 to %22, type
  field_write %19 to %22, data
  br bb4(%22)

bb3(%24 : $`Type`):
  %25 = new $`@thin Index<Any>.Type`
  %26 = new $`Index<Any>`
  %26i0 = literal [string] "#Index.null!enumelt", $`Builtin.RawPointer`
  field_write %26i0 to %26, type
  br bb4(%26)

bb4(%28 : $`@owned $Index<Any>`):
  return %28
}

func [stub] @`Swift.Array.startIndex.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`Int`
  return %ret
}

func [stub] @`Swift.Dictionary.startIndex.getter : [A : B].Index` : $`@owned Dictionary<τ_0_0, τ_0_1>.Index` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`@owned Dictionary<τ_0_0, τ_0_1>.Index`
  return %ret
}

func @`SwiftyJSON.JSON.endIndex.getter : SwiftyJSON.Index<Any>` : $`@owned Index<Any>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.array!enumelt" : bb1, case "#Type.dictionary!enumelt" : bb2, default bb3

bb1:
  %4 = new $`@thin Index<Any>.Type`
  %5 = field_read self, rawArray, $`Any`
  %6 = assign %5, $`Array<Any>`
  %8 = function_ref @`Swift.Array.endIndex.getter : Swift.Int`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int`
  %9 = apply %8(%6), $`Int`
  %12 = new $`Index<Any>`
  %12i0 = literal [string] "#Index.array!enumelt", $`Builtin.RawPointer`
  field_write %12i0 to %12, type
  field_write %9 to %12, data
  br bb4(%12)

bb2:
  %14 = new $`@thin Index<Any>.Type`
  %15 = field_read self, rawDictionary, $`Any`
  %16 = assign %15, $`Dictionary<String, Any>`
  %18 = function_ref @`Swift.Dictionary.endIndex.getter : [A : B].Index`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned Dictionary<τ_0_0, τ_0_1>.Index`
  %19 = apply %18(%16), $`@owned Dictionary<τ_0_0, τ_0_1>.Index`
  %22 = new $`Index<Any>`
  %22i0 = literal [string] "#Index.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %22i0 to %22, type
  field_write %19 to %22, data
  br bb4(%22)

bb3(%24 : $`Type`):
  %25 = new $`@thin Index<Any>.Type`
  %26 = new $`Index<Any>`
  %26i0 = literal [string] "#Index.null!enumelt", $`Builtin.RawPointer`
  field_write %26i0 to %26, type
  br bb4(%26)

bb4(%28 : $`@owned $Index<Any>`):
  return %28
}

func [stub] @`Swift.Array.endIndex.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`Int`
  return %ret
}

func [stub] @`Swift.Dictionary.endIndex.getter : [A : B].Index` : $`@owned Dictionary<τ_0_0, τ_0_1>.Index` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`@owned Dictionary<τ_0_0, τ_0_1>.Index`
  return %ret
}

func @`SwiftyJSON.JSON.index(after: SwiftyJSON.Index<Any>) -> SwiftyJSON.Index<Any>` : $`@owned Index<Any>` {
bb0(i : $`@guaranteed $Index<Any>`, self : $`@guaranteed $JSON`):
  switch_enum i, case "#Index.array!enumelt" : bb1, case "#Index.dictionary!enumelt" : bb2, default bb3

bb1(idx : $`Int`):
  %7 = new $`@thin Index<Any>.Type`
  %8 = field_read self, rawArray, $`Any`
  %9 = assign %8, $`Array<Any>`
  %10 = function_ref @`Swift.Array.index(after: Swift.Int) -> Swift.Int`, $`@convention(method) <τ_0_0> (Int, @guaranteed Array<τ_0_0>) -> Int`
  %11 = apply %10(idx, %9), $`Int`
  %13 = new $`Index<Any>`
  %13i0 = literal [string] "#Index.array!enumelt", $`Builtin.RawPointer`
  field_write %13i0 to %13, type
  field_write %11 to %13, data
  br bb4(%13)

bb2(%15 : $`@guaranteed $Dictionary<String, Any>.Index`):
  %16 = assign %15, $`Dictionary<String, Any>.Index`
  %18 = new $`@thin Index<Any>.Type`
  %19 = field_read self, rawDictionary, $`Any`
  %20 = assign %19, $`Dictionary<String, Any>`
  %22 = function_ref @`Swift.Dictionary.index(after: [A : B].Index) -> [A : B].Index`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>.Index, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned Dictionary<τ_0_0, τ_0_1>.Index`
  %23 = apply %22(%16, %20), $`@owned Dictionary<τ_0_0, τ_0_1>.Index`
  %26 = new $`Index<Any>`
  %26i0 = literal [string] "#Index.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %26i0 to %26, type
  field_write %23 to %26, data
  br bb4(%26)

bb3(%29 : $`@guaranteed $Index<Any>`):
  %30 = new $`@thin Index<Any>.Type`
  %31 = new $`Index<Any>`
  %31i0 = literal [string] "#Index.null!enumelt", $`Builtin.RawPointer`
  field_write %31i0 to %31, type
  br bb4(%31)

bb4(%33 : $`@owned $Index<Any>`):
  return %33
}

func [stub] @`Swift.Array.index(after: Swift.Int) -> Swift.Int` : $`Int` {
bb0(%0 : $`Int`, %1 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`Int`
  return %ret
}

func [stub] @`Swift.Dictionary.index(after: [A : B].Index) -> [A : B].Index` : $`@owned Dictionary<τ_0_0, τ_0_1>.Index` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>.Index`, %1 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`@owned Dictionary<τ_0_0, τ_0_1>.Index`
  return %ret
}

func @`SwiftyJSON.JSON.subscript.getter : (SwiftyJSON.Index<Any>) -> (Swift.String, SwiftyJSON.JSON)` : $`(@owned String, @owned JSON)` {
bb0(position : $`@guaranteed $Index<Any>`, self : $`@guaranteed $JSON`):
  switch_enum position, case "#Index.array!enumelt" : bb1, case "#Index.dictionary!enumelt" : bb2, default bb3

bb1(idx : $`Int`):
  %7 = new $`@thin String.Type`
  %8 = new $`*Int`
  pointer_write idx to %8
  %10 = function_ref @`Swift.String.init<A where A: Swift.LosslessStringConvertible>(A) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : LosslessStringConvertible> (@in τ_0_0, @thin String.Type) -> @owned String`
  %11 = apply %10(%8, %7), $`@owned String`
  %13 = new $`@thin JSON.Type`
  %14 = field_read self, rawArray, $`Any`
  %15 = assign %14, $`Array<Any>`
  %17 = new $`*Any`
  %18 = function_ref @`Swift.Array.subscript.getter : (Swift.Int) -> A`, $`@convention(method) <τ_0_0> (Int, @guaranteed Array<τ_0_0>) -> @out τ_0_0`
  %19 = apply %18(%17, idx, %15), $`@out τ_0_0`
  %22 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %23 = apply %22(%17, %13), $`@owned JSON`
  br bb4(%11, %23)

bb2(%26 : $`@guaranteed $Dictionary<String, Any>.Index`):
  %27 = assign %26, $`Dictionary<String, Any>.Index`
  %29 = field_read self, rawDictionary, $`Any`
  %30 = assign %29, $`Dictionary<String, Any>`
  %32 = assign %27, $`Dictionary<String, Any>.Index`
  %34 = new $`*String`
  %35 = new $`*Any`
  %36 = function_ref @`Swift.Dictionary.subscript.getter : ([A : B].Index) -> (key: A, value: B)`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>.Index, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> (@out τ_0_0, @out τ_0_1)`
  %37 = apply %36(%34, %35, %32, %30), $`(@out τ_0_0, @out τ_0_1)`
  %38 = pointer_read %34, $`String`
  %41 = new $`@thin JSON.Type`
  %42 = field_read self, rawDictionary, $`Any`
  %43 = assign %42, $`Dictionary<String, Any>`
  %45 = assign %27, $`Dictionary<String, Any>.Index`
  %47 = new $`*String`
  %48 = new $`*Any`
  %49 = function_ref @`Swift.Dictionary.subscript.getter : ([A : B].Index) -> (key: A, value: B)`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>.Index, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> (@out τ_0_0, @out τ_0_1)`
  %50 = apply %49(%47, %48, %45, %43), $`(@out τ_0_0, @out τ_0_1)`
  %51 = pointer_read %47, $`String`
  %54 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %55 = apply %54(%48, %41), $`@owned JSON`
  br bb4(%38, %55)

bb3(%68 : $`@guaranteed $Index<Any>`):
  %69 = literal [string] "", $`$Builtin.RawPointer`
  %70 = literal [int] 0, $`Builtin.Word`
  %71 = literal [int] -1, $`Builtin.Int1`
  %72 = new $`@thin String.Type`
  %73 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %74 = apply %73(%69, %70, %71, %72), $`@owned String`
  %75 = new $`@thin JSON.Type`
  %76 = function_ref @`static SwiftyJSON.JSON.null.getter : SwiftyJSON.JSON`, $`@convention(method) (@thin JSON.Type) -> @owned JSON`
  %77 = apply %76(%75), $`@owned JSON`
  br bb4(%74, %77)

bb4(%79 : $`@owned $String`, %80 : $`@owned $JSON`):
  %81 = new $`(String, JSON)`
  field_write %79 to %81, 0
  field_write %80 to %81, 1
  return %81
}

func [stub] @`Swift.String.init<A where A: Swift.LosslessStringConvertible>(A) -> Swift.String` : $`@owned String` {
bb0(%0 : $`@in τ_0_0`, %1 : $`@thin String.Type`):
  %ret = new $`@owned String`
  return %ret
}

func [stub] @`Swift.Array.subscript.getter : (Swift.Int) -> A` : $`@out τ_0_0` {
bb0(%0 : $`Int`, %1 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func [stub] @`Swift.Dictionary.subscript.getter : ([A : B].Index) -> (key: A, value: B)` : $`(@out τ_0_0, @out τ_0_1)` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>.Index`, %1 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`(@out τ_0_0, @out τ_0_1)`
  return %ret
}

func @`protocol witness for Swift.Collection.startIndex.getter : A.Index in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Index<Any>` {
bb0(%0 : $`*Index<Any>`, %1 : $`*JSON`):
  %2 = pointer_read %1, $`JSON`
  %3 = function_ref @`SwiftyJSON.JSON.startIndex.getter : SwiftyJSON.Index<Any>`, $`@convention(method) (@guaranteed JSON) -> @owned Index<Any>`
  %4 = apply %3(%2), $`@owned Index<Any>`
  pointer_write %4 to %0
  %6 = new $`()`
  return %6
}

func @`protocol witness for Swift.Collection.endIndex.getter : A.Index in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Index<Any>` {
bb0(%0 : $`*Index<Any>`, %1 : $`*JSON`):
  %2 = pointer_read %1, $`JSON`
  %3 = function_ref @`SwiftyJSON.JSON.endIndex.getter : SwiftyJSON.Index<Any>`, $`@convention(method) (@guaranteed JSON) -> @owned Index<Any>`
  %4 = apply %3(%2), $`@owned Index<Any>`
  pointer_write %4 to %0
  %6 = new $`()`
  return %6
}

func [coroutine] @`protocol witness for Swift.Collection.subscript.read : (A.Index) -> A.Element in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@yields @in_guaranteed τ_0_2 for <Index<Any>, JSON, (String, JSON)>` {
bb0(%0 : $`*Index<Any>`, %1 : $`*JSON`):
  %2 = pointer_read %0, $`Index<Any>`
  %3 = pointer_read %1, $`JSON`
  %4 = function_ref @`SwiftyJSON.JSON.subscript.read : (SwiftyJSON.Index<Any>) -> (Swift.String, SwiftyJSON.JSON)`, $`@yield_once @convention(method) (@guaranteed Index<Any>, @guaranteed JSON) -> (@yields @guaranteed String, @yields @guaranteed JSON)`
  %6 = new $`JSON`
  %5 = apply %4(%2, %3), $`(@yields @guaranteed String, @yields @guaranteed JSON)`
  %8 = new $`*(String, JSON)`
  %9 = new $`*String`
  %9i0 = field_read [alias %9] %8, 0, $`String`
  pointer_write %9i0 to %9
  %10 = assign %5, $`String`
  pointer_write %10 to %9
  %12 = new $`*JSON`
  %12i0 = field_read [alias %12] %8, 1, $`JSON`
  pointer_write %12i0 to %12
  %13 = assign %6, $`JSON`
  pointer_write %13 to %12
  yield (%8), resume bb1, unwind bb2

bb1:
  %19 = new $`()`
  return %19

bb2:
  %dummy_unwindi0 = new $`@yield_once @convention(witness_method: Collection) @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_1) -> @yields @in_guaranteed τ_0_2 for <Index<Any>, JSON, (String, JSON)>`
  return %dummy_unwindi0
}

func [coroutine] @`SwiftyJSON.JSON.subscript.read : (SwiftyJSON.Index<Any>) -> (Swift.String, SwiftyJSON.JSON)` : $`(@yields @guaranteed String, @yields @guaranteed JSON)` {
bb0(position : $`@guaranteed $Index<Any>`, self : $`@guaranteed $JSON`):
  %4 = assign position, $`Index<Any>`
  %5 = function_ref @`SwiftyJSON.JSON.subscript.getter : (SwiftyJSON.Index<Any>) -> (Swift.String, SwiftyJSON.JSON)`, $`@convention(method) (@guaranteed Index<Any>, @guaranteed JSON) -> (@owned String, @owned JSON)`
  %6 = apply %5(%4, self), $`(@owned String, @owned JSON)`
  %7 = field_read %6, 0, $`String`
  %8 = field_read %6, 1, $`JSON`
  %9 = new $`(String, JSON)`
  field_write %7 to %9, 0
  field_write %8 to %9, 1
  %11 = field_read %9, 0, $`String`
  %12 = field_read %9, 1, $`JSON`
  yield (%11, %12), resume bb1, unwind bb2

bb1:
  %17 = new $`()`
  return %17

bb2:
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@guaranteed Index<Any>, @guaranteed JSON) -> (@yields @guaranteed String, @yields @guaranteed JSON)`
  return %dummy_unwindi0
}

func @`protocol witness for Swift.Collection.subscript.getter : (Swift.Range<A.Index>) -> A.SubSequence in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Slice<JSON>` {
bb0(%0 : $`*Slice<JSON>`, %1 : $`*Range<Index<Any>>`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Collection< where A.SubSequence == Swift.Slice<A>>.subscript.getter : (Swift.Range<A.Index>) -> Swift.Slice<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.SubSequence == Slice<τ_0_0>> (@in_guaranteed Range<τ_0_0.Index>, @in_guaranteed τ_0_0) -> @out Slice<τ_0_0>`
  %4 = apply %3(%0, %1, %2), $`@out Slice<τ_0_0>`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.Collection< where A.SubSequence == Swift.Slice<A>>.subscript.getter : (Swift.Range<A.Index>) -> Swift.Slice<A>` : $`@out Slice<τ_0_0>` {
bb0(%0 : $`@in_guaranteed Range<τ_0_0.Index>`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out Slice<τ_0_0>`
  return %ret
}

func @`protocol witness for Swift.Collection.indices.getter : A.Indices in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out DefaultIndices<JSON>` {
bb0(%0 : $`*DefaultIndices<JSON>`, %1 : $`*JSON`):
  %2 = function_ref @`(extension in Swift):Swift.Collection< where A.Indices == Swift.DefaultIndices<A>>.indices.getter : Swift.DefaultIndices<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Indices == DefaultIndices<τ_0_0>> (@in_guaranteed τ_0_0) -> @out DefaultIndices<τ_0_0>`
  %3 = apply %2(%0, %1), $`@out DefaultIndices<τ_0_0>`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.Collection< where A.Indices == Swift.DefaultIndices<A>>.indices.getter : Swift.DefaultIndices<A>` : $`@out DefaultIndices<τ_0_0>` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out DefaultIndices<τ_0_0>`
  return %ret
}

func @`protocol witness for Swift.Collection.isEmpty.getter : Swift.Bool in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*JSON`):
  %1 = function_ref @`(extension in Swift):Swift.Collection.isEmpty.getter : Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0) -> Bool`
  %2 = apply %1(%0), $`Bool`
  return %2
}

func [stub] @`(extension in Swift):Swift.Collection.isEmpty.getter : Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for Swift.Collection.count.getter : Swift.Int in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`Int` {
bb0(%0 : $`*JSON`):
  %1 = function_ref @`(extension in Swift):Swift.Collection.count.getter : Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0) -> Int`
  %2 = apply %1(%0), $`Int`
  return %2
}

func [stub] @`(extension in Swift):Swift.Collection.count.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`protocol witness for Swift.Collection._customIndexOfEquatableElement(A.Element) -> A.Index?? in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Optional<Optional<Index<Any>>>` {
bb0(%0 : $`*Optional<Optional<Index<Any>>>`, %1 : $`*(String, JSON)`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Collection._customIndexOfEquatableElement(A.Element) -> A.Index??`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Element, @in_guaranteed τ_0_0) -> @out Optional<Optional<τ_0_0.Index>>`
  %4 = apply %3(%0, %1, %2), $`@out Optional<Optional<τ_0_0.Index>>`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.Collection._customIndexOfEquatableElement(A.Element) -> A.Index??` : $`@out Optional<Optional<τ_0_0.Index>>` {
bb0(%0 : $`@in_guaranteed τ_0_0.Element`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out Optional<Optional<τ_0_0.Index>>`
  return %ret
}

func @`protocol witness for Swift.Collection._customLastIndexOfEquatableElement(A.Element) -> A.Index?? in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Optional<Optional<Index<Any>>>` {
bb0(%0 : $`*Optional<Optional<Index<Any>>>`, %1 : $`*(String, JSON)`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Collection._customLastIndexOfEquatableElement(A.Element) -> A.Index??`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Element, @in_guaranteed τ_0_0) -> @out Optional<Optional<τ_0_0.Index>>`
  %4 = apply %3(%0, %1, %2), $`@out Optional<Optional<τ_0_0.Index>>`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.Collection._customLastIndexOfEquatableElement(A.Element) -> A.Index??` : $`@out Optional<Optional<τ_0_0.Index>>` {
bb0(%0 : $`@in_guaranteed τ_0_0.Element`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out Optional<Optional<τ_0_0.Index>>`
  return %ret
}

func @`protocol witness for Swift.Collection.index(_: A.Index, offsetBy: Swift.Int) -> A.Index in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Index<Any>` {
bb0(%0 : $`*Index<Any>`, %1 : $`*Index<Any>`, %2 : $`Int`, %3 : $`*JSON`):
  %4 = function_ref @`(extension in Swift):Swift.Collection.index(_: A.Index, offsetBy: Swift.Int) -> A.Index`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Index, Int, @in_guaranteed τ_0_0) -> @out τ_0_0.Index`
  %5 = apply %4(%0, %1, %2, %3), $`@out τ_0_0.Index`
  %6 = new $`()`
  return %6
}

func [stub] @`(extension in Swift):Swift.Collection.index(_: A.Index, offsetBy: Swift.Int) -> A.Index` : $`@out τ_0_0.Index` {
bb0(%0 : $`@in_guaranteed τ_0_0.Index`, %1 : $`Int`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out τ_0_0.Index`
  return %ret
}

func @`protocol witness for Swift.Collection.index(_: A.Index, offsetBy: Swift.Int, limitedBy: A.Index) -> A.Index? in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Optional<Index<Any>>` {
bb0(%0 : $`*Optional<Index<Any>>`, %1 : $`*Index<Any>`, %2 : $`Int`, %3 : $`*Index<Any>`, %4 : $`*JSON`):
  %5 = function_ref @`(extension in Swift):Swift.Collection.index(_: A.Index, offsetBy: Swift.Int, limitedBy: A.Index) -> A.Index?`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Index, Int, @in_guaranteed τ_0_0.Index, @in_guaranteed τ_0_0) -> @out Optional<τ_0_0.Index>`
  %6 = apply %5(%0, %1, %2, %3, %4), $`@out Optional<τ_0_0.Index>`
  %7 = new $`()`
  return %7
}

func [stub] @`(extension in Swift):Swift.Collection.index(_: A.Index, offsetBy: Swift.Int, limitedBy: A.Index) -> A.Index?` : $`@out Optional<τ_0_0.Index>` {
bb0(%0 : $`@in_guaranteed τ_0_0.Index`, %1 : $`Int`, %2 : $`@in_guaranteed τ_0_0.Index`, %3 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out Optional<τ_0_0.Index>`
  return %ret
}

func @`protocol witness for Swift.Collection.distance(from: A.Index, to: A.Index) -> Swift.Int in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`Int` {
bb0(%0 : $`*Index<Any>`, %1 : $`*Index<Any>`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Collection.distance(from: A.Index, to: A.Index) -> Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Index, @in_guaranteed τ_0_0.Index, @in_guaranteed τ_0_0) -> Int`
  %4 = apply %3(%0, %1, %2), $`Int`
  return %4
}

func [stub] @`(extension in Swift):Swift.Collection.distance(from: A.Index, to: A.Index) -> Swift.Int` : $`Int` {
bb0(%0 : $`@in_guaranteed τ_0_0.Index`, %1 : $`@in_guaranteed τ_0_0.Index`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`protocol witness for Swift.Collection._failEarlyRangeCheck(_: A.Index, bounds: Swift.Range<A.Index>) -> () in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`()` {
bb0(%0 : $`*Index<Any>`, %1 : $`*Range<Index<Any>>`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Collection._failEarlyRangeCheck(_: A.Index, bounds: Swift.Range<A.Index>) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Index, @in_guaranteed Range<τ_0_0.Index>, @in_guaranteed τ_0_0) -> ()`
  %4 = apply %3(%0, %1, %2), $`()`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.Collection._failEarlyRangeCheck(_: A.Index, bounds: Swift.Range<A.Index>) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0.Index`, %1 : $`@in_guaranteed Range<τ_0_0.Index>`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.Collection._failEarlyRangeCheck(_: A.Index, bounds: Swift.ClosedRange<A.Index>) -> () in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`()` {
bb0(%0 : $`*Index<Any>`, %1 : $`*ClosedRange<Index<Any>>`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Collection._failEarlyRangeCheck(_: A.Index, bounds: Swift.ClosedRange<A.Index>) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Index, @in_guaranteed ClosedRange<τ_0_0.Index>, @in_guaranteed τ_0_0) -> ()`
  %4 = apply %3(%0, %1, %2), $`()`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.Collection._failEarlyRangeCheck(_: A.Index, bounds: Swift.ClosedRange<A.Index>) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0.Index`, %1 : $`@in_guaranteed ClosedRange<τ_0_0.Index>`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.Collection._failEarlyRangeCheck(_: Swift.Range<A.Index>, bounds: Swift.Range<A.Index>) -> () in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`()` {
bb0(%0 : $`*Range<Index<Any>>`, %1 : $`*Range<Index<Any>>`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Collection._failEarlyRangeCheck(_: Swift.Range<A.Index>, bounds: Swift.Range<A.Index>) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed Range<τ_0_0.Index>, @in_guaranteed Range<τ_0_0.Index>, @in_guaranteed τ_0_0) -> ()`
  %4 = apply %3(%0, %1, %2), $`()`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.Collection._failEarlyRangeCheck(_: Swift.Range<A.Index>, bounds: Swift.Range<A.Index>) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed Range<τ_0_0.Index>`, %1 : $`@in_guaranteed Range<τ_0_0.Index>`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.Collection.index(after: A.Index) -> A.Index in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`@out Index<Any>` {
bb0(%0 : $`*Index<Any>`, %1 : $`*Index<Any>`, %2 : $`*JSON`):
  %3 = pointer_read %1, $`Index<Any>`
  %4 = pointer_read %2, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.index(after: SwiftyJSON.Index<Any>) -> SwiftyJSON.Index<Any>`, $`@convention(method) (@guaranteed Index<Any>, @guaranteed JSON) -> @owned Index<Any>`
  %6 = apply %5(%3, %4), $`@owned Index<Any>`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`protocol witness for Swift.Collection.formIndex(after: inout A.Index) -> () in conformance SwiftyJSON.JSON : Swift.Collection in SwiftyJSON` : $`()` {
bb0(%0 : $`*Index<Any>`, %1 : $`*JSON`):
  %2 = function_ref @`(extension in Swift):Swift.Collection.formIndex(after: inout A.Index) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@inout τ_0_0.Index, @in_guaranteed τ_0_0) -> ()`
  %3 = apply %2(%0, %1), $`()`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.Collection.formIndex(after: inout A.Index) -> ()` : $`()` {
bb0(%0 : $`@inout τ_0_0.Index`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.Sequence.makeIterator() -> A.Iterator in conformance SwiftyJSON.JSON : Swift.Sequence in SwiftyJSON` : $`@out IndexingIterator<JSON>` {
bb0(%0 : $`*IndexingIterator<JSON>`, %1 : $`*JSON`):
  %2 = function_ref @`(extension in Swift):Swift.Collection< where A.Iterator == Swift.IndexingIterator<A>>.makeIterator() -> Swift.IndexingIterator<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Iterator == IndexingIterator<τ_0_0>> (@in τ_0_0) -> @out IndexingIterator<τ_0_0>`
  %3 = apply %2(%0, %1), $`@out IndexingIterator<τ_0_0>`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.Collection< where A.Iterator == Swift.IndexingIterator<A>>.makeIterator() -> Swift.IndexingIterator<A>` : $`@out IndexingIterator<τ_0_0>` {
bb0(%0 : $`@in τ_0_0`):
  %ret = new $`@out IndexingIterator<τ_0_0>`
  return %ret
}

func @`protocol witness for Swift.Sequence.underestimatedCount.getter : Swift.Int in conformance SwiftyJSON.JSON : Swift.Sequence in SwiftyJSON` : $`Int` {
bb0(%0 : $`*JSON`):
  %1 = function_ref @`(extension in Swift):Swift.Collection.underestimatedCount.getter : Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0) -> Int`
  %2 = apply %1(%0), $`Int`
  return %2
}

func [stub] @`(extension in Swift):Swift.Collection.underestimatedCount.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`protocol witness for Swift.Sequence._customContainsEquatableElement(A.Element) -> Swift.Bool? in conformance SwiftyJSON.JSON : Swift.Sequence in SwiftyJSON` : $`Optional<Bool>` {
bb0(%0 : $`*(String, JSON)`, %1 : $`*JSON`):
  %2 = function_ref @`(extension in Swift):Swift.Sequence._customContainsEquatableElement(A.Element) -> Swift.Bool?`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence> (@in_guaranteed τ_0_0.Element, @in_guaranteed τ_0_0) -> Optional<Bool>`
  %3 = apply %2(%0, %1), $`Optional<Bool>`
  return %3
}

func [stub] @`(extension in Swift):Swift.Sequence._customContainsEquatableElement(A.Element) -> Swift.Bool?` : $`Optional<Bool>` {
bb0(%0 : $`@in_guaranteed τ_0_0.Element`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Optional<Bool>`
  return %ret
}

func @`protocol witness for Swift.Sequence._copyToContiguousArray() -> Swift.ContiguousArray<A.Element> in conformance SwiftyJSON.JSON : Swift.Sequence in SwiftyJSON` : $`@owned ContiguousArray<(String, JSON)>` {
bb0(%0 : $`*JSON`):
  %1 = function_ref @`(extension in Swift):Swift.Collection._copyToContiguousArray() -> Swift.ContiguousArray<A.Element>`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in τ_0_0) -> @owned ContiguousArray<τ_0_0.Element>`
  %2 = apply %1(%0), $`@owned ContiguousArray<τ_0_0.Element>`
  return %2
}

func [stub] @`(extension in Swift):Swift.Collection._copyToContiguousArray() -> Swift.ContiguousArray<A.Element>` : $`@owned ContiguousArray<τ_0_0.Element>` {
bb0(%0 : $`@in τ_0_0`):
  %ret = new $`@owned ContiguousArray<τ_0_0.Element>`
  return %ret
}

func @`protocol witness for Swift.Sequence._copyContents(initializing: Swift.UnsafeMutableBufferPointer<A.Element>) -> (A.Iterator, Swift.Int) in conformance SwiftyJSON.JSON : Swift.Sequence in SwiftyJSON` : $`(@out IndexingIterator<JSON>, Int)` {
bb0(%0 : $`*IndexingIterator<JSON>`, %1 : $`UnsafeMutableBufferPointer<(String, JSON)>`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Sequence._copyContents(initializing: Swift.UnsafeMutableBufferPointer<A.Element>) -> (A.Iterator, Swift.Int)`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence> (UnsafeMutableBufferPointer<τ_0_0.Element>, @in τ_0_0) -> (@out τ_0_0.Iterator, Int)`
  %4 = apply %3(%0, %1, %2), $`(@out τ_0_0.Iterator, Int)`
  return %4
}

func [stub] @`(extension in Swift):Swift.Sequence._copyContents(initializing: Swift.UnsafeMutableBufferPointer<A.Element>) -> (A.Iterator, Swift.Int)` : $`(@out τ_0_0.Iterator, Int)` {
bb0(%0 : $`UnsafeMutableBufferPointer<τ_0_0.Element>`, %1 : $`@in τ_0_0`):
  %ret = new $`(@out τ_0_0.Iterator, Int)`
  return %ret
}

func @`protocol witness for Swift.Sequence.withContiguousStorageIfAvailable<A>((Swift.UnsafeBufferPointer<A.Element>) throws -> A1) throws -> A1? in conformance SwiftyJSON.JSON : Swift.Sequence in SwiftyJSON` : $`(@out Optional<τ_0_0>, @error Error)` {
bb0(%0 : $`*Optional<τ_0_0>`, %1 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <(String, JSON), τ_0_0>`, %2 : $`*JSON`):
  %3 = function_ref @`(extension in Swift):Swift.Sequence.withContiguousStorageIfAvailable<A>((Swift.UnsafeBufferPointer<A.Element>) throws -> A1) throws -> A1?`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error Error)`
  %3i0 = apply %3(%0, %1, %2), $`Optional<τ_1_0>`
  %3i1 = new $`Builtin.Int1`
  cond_br %3i1, true bb1(%3i0), false bb2(%3i0)

bb1(%5 : $`()`):
  %6 = new $`()`
  return %6

bb2(%8 : $`@owned $Error`):
  return %8
}

func [stub] @`(extension in Swift):Swift.Sequence.withContiguousStorageIfAvailable<A>((Swift.UnsafeBufferPointer<A.Element>) throws -> A1) throws -> A1?` : $`(@out Optional<τ_1_0>, @error Error)` {
bb0(%0 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0.Element, τ_1_0>`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`(@out Optional<τ_1_0>, @error Error)`
  return %ret
}

func @`(extension in SwiftyJSON):Swift.Int.jsonKey.getter : SwiftyJSON.JSONKey` : $`@owned JSONKey` {
bb0(self : $`Int`):
  %2 = new $`@thin JSONKey.Type`
  %3 = new $`JSONKey`
  %3i0 = literal [string] "#JSONKey.index!enumelt", $`Builtin.RawPointer`
  field_write %3i0 to %3, type
  field_write self to %3, data
  return %3
}

func @`protocol witness for SwiftyJSON.JSONSubscriptType.jsonKey.getter : SwiftyJSON.JSONKey in conformance Swift.Int : SwiftyJSON.JSONSubscriptType in SwiftyJSON` : $`@owned JSONKey` {
bb0(%0 : $`*Int`):
  %1 = pointer_read %0, $`Int`
  %2 = function_ref @`(extension in SwiftyJSON):Swift.Int.jsonKey.getter : SwiftyJSON.JSONKey`, $`@convention(method) (Int) -> @owned JSONKey`
  %3 = apply %2(%1), $`@owned JSONKey`
  return %3
}

func @`(extension in SwiftyJSON):Swift.String.jsonKey.getter : SwiftyJSON.JSONKey` : $`@owned JSONKey` {
bb0(self : $`@guaranteed $String`):
  %2 = new $`@thin JSONKey.Type`
  %3 = assign self, $`String`
  %4 = new $`JSONKey`
  %4i0 = literal [string] "#JSONKey.key!enumelt", $`Builtin.RawPointer`
  field_write %4i0 to %4, type
  field_write %3 to %4, data
  return %4
}

func @`protocol witness for SwiftyJSON.JSONSubscriptType.jsonKey.getter : SwiftyJSON.JSONKey in conformance Swift.String : SwiftyJSON.JSONSubscriptType in SwiftyJSON` : $`@owned JSONKey` {
bb0(%0 : $`*String`):
  %1 = pointer_read %0, $`String`
  %2 = function_ref @`(extension in SwiftyJSON):Swift.String.jsonKey.getter : SwiftyJSON.JSONKey`, $`@convention(method) (@guaranteed String) -> @owned JSONKey`
  %3 = apply %2(%1), $`@owned JSONKey`
  return %3
}

func @`SwiftyJSON.JSON.subscript.getter : (index: Swift.Int) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(index : $`Int`, self : $`@guaranteed $JSON`):
  %4 = new $`@thin Type.Type`
  %5 = field_read self, type, $`Any`
  %6 = new $`*Type`
  pointer_write %5 to %6
  %8 = new $`@thin Type.Type`
  %9 = new $`Type`
  %9i0 = literal [string] "#Type.array!enumelt", $`Builtin.RawPointer`
  field_write %9i0 to %9, type
  %10 = new $`*Type`
  pointer_write %9 to %10
  %12 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %13 = apply %12(%6, %10), $`Bool`
  %14 = field_read %13, _value, $`Any`
  %15 = literal [int] -1, $`Builtin.Int1`
  %16i0 = builtin_ref @`xor_Int1`, $`Any`
  %16 = apply %16i0(%14, %15), $`Builtin.Int1`
  cond_br %16, true bb1, false bb5

bb1:
  %20 = new $`*JSON`
  %21 = new $`@thin JSON.Type`
  %22 = function_ref @`static SwiftyJSON.JSON.null.getter : SwiftyJSON.JSON`, $`@convention(method) (@thin JSON.Type) -> @owned JSON`
  %23 = apply %22(%21), $`@owned JSON`
  %25 = field_read %23, rawArray, $`Any`
  %26 = field_read %25, _buffer, $`Any`
  %27 = field_read %26, _storage, $`Any`
  %28 = field_read %27, rawValue, $`Any`
  %29 = assign %28, $`Builtin.BridgeObject`
  %32 = field_read %23, rawDictionary, $`Any`
  %33 = field_read %32, _variant, $`Any`
  %34 = field_read %33, object, $`Any`
  %35 = field_read %34, rawValue, $`Any`
  %36 = assign %35, $`Builtin.BridgeObject`
  %39 = field_read %23, rawString, $`Any`
  %40 = field_read %39, _guts, $`Any`
  %41 = field_read %40, _object, $`Any`
  %42 = field_read %41, _countAndFlagsBits, $`Any`
  %43 = field_read %42, _value, $`Any`
  %46 = field_read %23, rawString, $`Any`
  %47 = field_read %46, _guts, $`Any`
  %48 = field_read %47, _object, $`Any`
  %49 = field_read %48, _object, $`Any`
  %50 = assign %49, $`Builtin.BridgeObject`
  %53 = field_read %23, rawNumber, $`Any`
  %54 = assign %53, $`NSNumber`
  %57 = field_read %23, rawNull, $`Any`
  %58 = assign %57, $`NSNull`
  %61 = field_read %23, rawBool, $`Any`
  %62 = field_read %61, _value, $`Any`
  %65 = field_read %23, type, $`Any`
  pointer_write %23 to %20
  %68 = new $`*SwiftyJSONError`
  %69 = field_read self, error, $`Any`
  %70 = new $`*Optional<SwiftyJSONError>`
  pointer_write %69 to %70
  %70i0 = pointer_read %70, $`Optional<SwiftyJSONError>`
  switch_enum %70i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb3

bb2:
  %73 = new $`*Any`
  %73i0 = field_read [alias %73] %70, data, $`Any`
  pointer_write %73i0 to %73
  %74 = pointer_read %73, $`SwiftyJSONError`
  pointer_write %74 to %68
  br bb4

bb3:
  %78 = new $`@thin SwiftyJSONError.Type`
  %79 = new $`SwiftyJSONError`
  %79i0 = literal [string] "#SwiftyJSONError.wrongType!enumelt", $`Builtin.RawPointer`
  field_write %79i0 to %79, type
  pointer_write %79 to %68
  %81 = new $`()`
  br bb4

bb4:
  %84 = new $`()`
  %85 = pointer_read %68, $`SwiftyJSONError`
  %86 = new $`Optional<SwiftyJSONError>`
  %86i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %86i0 to %86, type
  field_write %85 to %86, data
  %88 = new $`*Any`
  %88i0 = pointer_read %20, $`*Any`
  %88i1 = field_read [alias %88] %88i0, error, $`Any`
  pointer_write %88i1 to %88
  pointer_write %86 to %88
  %92 = assign %29, $`Builtin.BridgeObject`
  %94 = new $`_BridgeStorage<__ContiguousArrayStorageBase>`
  %95 = new $`_ArrayBuffer<Any>`
  %96 = new $`Array<Any>`
  %97 = assign %36, $`Builtin.BridgeObject`
  %99 = new $`_BridgeStorage<__RawDictionaryStorage>`
  %100 = new $`Dictionary<String, Any>._Variant`
  %101 = new $`Dictionary<String, Any>`
  %102 = new $`UInt64`
  field_write %43 to %102, _value
  %103 = assign %50, $`Builtin.BridgeObject`
  %105 = new $`_StringObject`
  %106 = new $`_StringGuts`
  %107 = new $`String`
  %108 = assign %54, $`NSNumber`
  %109 = assign %58, $`NSNull`
  %110 = new $`Bool`
  %113 = new $`JSON`
  %114 = assign %113, $`JSON`
  %120 = assign %114, $`JSON`
  br bb8(%120)

bb5:
  %135 = field_read self, rawArray, $`Any`
  %136 = assign %135, $`Array<Any>`
  %138 = new $`*Array<Any>`
  pointer_write %136 to %138
  %140 = pointer_read %138, $`Array<Any>`
  %141 = new $`*Range<Int>`
  %142 = new $`*Array<Any>`
  pointer_write %140 to %142
  %144 = function_ref @`(extension in Swift):Swift.RandomAccessCollection< where A.Index: Swift.Strideable, A.Indices == Swift.Range<A.Index>, A.Index.Stride == Swift.Int>.indices.getter : Swift.Range<A.Index>`, $`@convention(method) <τ_0_0 where τ_0_0 : RandomAccessCollection, τ_0_0.Index : Strideable, τ_0_0.Indices == Range<τ_0_0.Index>, τ_0_0.Index.Stride == Int> (@in_guaranteed τ_0_0) -> @out Range<τ_0_0.Index>`
  %145 = apply %144(%141, %142), $`@out Range<τ_0_0.Index>`
  %147 = pointer_read %141, $`Range<Int>`
  %150 = new $`*Range<Int>`
  pointer_write %147 to %150
  %152 = new $`*Int`
  pointer_write index to %152
  %154 = function_ref @`Swift.Range.contains(A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed Range<τ_0_0>) -> Bool`
  %155 = apply %154(%152, %150), $`Bool`
  %161 = field_read %155, _value, $`Any`
  cond_br %161, true bb6, false bb7

bb6:
  %163 = new $`@thin JSON.Type`
  %164 = field_read self, rawArray, $`Any`
  %165 = assign %164, $`Array<Any>`
  %167 = new $`*Any`
  %168 = function_ref @`Swift.Array.subscript.getter : (Swift.Int) -> A`, $`@convention(method) <τ_0_0> (Int, @guaranteed Array<τ_0_0>) -> @out τ_0_0`
  %169 = apply %168(%167, index, %165), $`@out τ_0_0`
  %172 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %173 = apply %172(%167, %163), $`@owned JSON`
  br bb8(%173)

bb7:
  %176 = new $`*JSON`
  %177 = new $`@thin JSON.Type`
  %178 = function_ref @`static SwiftyJSON.JSON.null.getter : SwiftyJSON.JSON`, $`@convention(method) (@thin JSON.Type) -> @owned JSON`
  %179 = apply %178(%177), $`@owned JSON`
  %181 = field_read %179, rawArray, $`Any`
  %182 = field_read %181, _buffer, $`Any`
  %183 = field_read %182, _storage, $`Any`
  %184 = field_read %183, rawValue, $`Any`
  %185 = assign %184, $`Builtin.BridgeObject`
  %188 = field_read %179, rawDictionary, $`Any`
  %189 = field_read %188, _variant, $`Any`
  %190 = field_read %189, object, $`Any`
  %191 = field_read %190, rawValue, $`Any`
  %192 = assign %191, $`Builtin.BridgeObject`
  %195 = field_read %179, rawString, $`Any`
  %196 = field_read %195, _guts, $`Any`
  %197 = field_read %196, _object, $`Any`
  %198 = field_read %197, _countAndFlagsBits, $`Any`
  %199 = field_read %198, _value, $`Any`
  %202 = field_read %179, rawString, $`Any`
  %203 = field_read %202, _guts, $`Any`
  %204 = field_read %203, _object, $`Any`
  %205 = field_read %204, _object, $`Any`
  %206 = assign %205, $`Builtin.BridgeObject`
  %209 = field_read %179, rawNumber, $`Any`
  %210 = assign %209, $`NSNumber`
  %213 = field_read %179, rawNull, $`Any`
  %214 = assign %213, $`NSNull`
  %217 = field_read %179, rawBool, $`Any`
  %218 = field_read %217, _value, $`Any`
  %221 = field_read %179, type, $`Any`
  pointer_write %179 to %176
  %224 = new $`@thin SwiftyJSONError.Type`
  %225 = new $`SwiftyJSONError`
  %225i0 = literal [string] "#SwiftyJSONError.indexOutOfBounds!enumelt", $`Builtin.RawPointer`
  field_write %225i0 to %225, type
  %226 = new $`Optional<SwiftyJSONError>`
  %226i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %226i0 to %226, type
  field_write %225 to %226, data
  %228 = new $`*Any`
  %228i0 = pointer_read %176, $`*Any`
  %228i1 = field_read [alias %228] %228i0, error, $`Any`
  pointer_write %228i1 to %228
  pointer_write %226 to %228
  %231 = assign %185, $`Builtin.BridgeObject`
  %233 = new $`_BridgeStorage<__ContiguousArrayStorageBase>`
  %234 = new $`_ArrayBuffer<Any>`
  %235 = new $`Array<Any>`
  %236 = assign %192, $`Builtin.BridgeObject`
  %238 = new $`_BridgeStorage<__RawDictionaryStorage>`
  %239 = new $`Dictionary<String, Any>._Variant`
  %240 = new $`Dictionary<String, Any>`
  %241 = new $`UInt64`
  field_write %199 to %241, _value
  %242 = assign %206, $`Builtin.BridgeObject`
  %244 = new $`_StringObject`
  %245 = new $`_StringGuts`
  %246 = new $`String`
  %247 = assign %210, $`NSNumber`
  %248 = assign %214, $`NSNull`
  %249 = new $`Bool`
  %252 = new $`JSON`
  %253 = assign %252, $`JSON`
  %259 = assign %253, $`JSON`
  br bb8(%259)

bb8(%274 : $`@owned $JSON`):
  return %274
}

func @`static (extension in Swift):Swift.Equatable.!= infix(A, A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`*Self`, %1 : $`*Self`, %2 : $`@thick Self.Type`):
  %3 = new $`@thick Self.Type`
  %4 = dynamic_ref @`#Equatable."=="`, $`@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %5 = apply %4(%0, %1, %3), $`Bool`
  %6 = field_read %5, _value, $`Any`
  %7 = literal [int] -1, $`Builtin.Int1`
  %8i0 = builtin_ref @`xor_Int1`, $`Any`
  %8 = apply %8i0(%6, %7), $`Builtin.Int1`
  %9 = new $`Bool`
  return %9
}

func @`Swift.?? infix<A>(A?, @autoclosure () throws -> A) throws -> A` : $`(@out T, @error Error)` {
bb0(%0 : $`*T`, %1 : $`*Optional<T>`, %2 : $`@noescape @callee_guaranteed @substituted <τ_0_0> () -> (@out τ_0_0, @error Error) for <T>`):
  %3 = new $`*Optional<T>`
  %1i0 = pointer_read %1, $`Optional<T>`
  pointer_write %1i0 to %3
  %3i0 = pointer_read %3, $`Optional<T>`
  switch_enum %3i0, case "#Optional.some!enumelt" : bb4, case "#Optional.none!enumelt" : bb1

bb1:
  %2i0 = apply %2(%0), $`τ_0_0`
  %2i1 = new $`Builtin.Int1`
  cond_br %2i1, true bb3(%2i0), false bb2(%2i0)

bb2(%7 : $`@owned $Error`):
  return %7

bb3(%10 : $`()`):
  br bb5

bb4:
  %13 = new $`*Any`
  %13i0 = field_read [alias %13] %3, data, $`Any`
  pointer_write %13i0 to %13
  %13i1 = pointer_read %13, $`T`
  pointer_write %13i1 to %0
  br bb5

bb5:
  %17 = new $`()`
  return %17
}

func [stub] @`(extension in Swift):Swift.RandomAccessCollection< where A.Index: Swift.Strideable, A.Indices == Swift.Range<A.Index>, A.Index.Stride == Swift.Int>.indices.getter : Swift.Range<A.Index>` : $`@out Range<τ_0_0.Index>` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out Range<τ_0_0.Index>`
  return %ret
}

func [stub] @`Swift.Range.contains(A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed Range<τ_0_0>`):
  %ret = new $`Bool`
  return %ret
}

func @`SwiftyJSON.JSON.subscript.setter : (index: Swift.Int) -> SwiftyJSON.JSON` : $`()` {
bb0(newValue : $`@owned $JSON`, index : $`Int`, self : $`*JSON`):
  %7 = new $`*Any`
  %7i0 = pointer_read self, $`*Any`
  %7i1 = field_read [alias %7] %7i0, type, $`Any`
  pointer_write %7i1 to %7
  %8 = pointer_read %7, $`Type`
  %10 = new $`*Type`
  pointer_write %8 to %10
  %12 = new $`@thin Type.Type`
  %13 = new $`Type`
  %13i0 = literal [string] "#Type.array!enumelt", $`Builtin.RawPointer`
  field_write %13i0 to %13, type
  %14 = new $`*Type`
  pointer_write %13 to %14
  %16 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %17 = apply %16(%10, %14), $`Bool`
  %20 = field_read %17, _value, $`Any`
  cond_br %20, true bb1, false bb2

bb1:
  %23 = new $`*Any`
  %23i0 = pointer_read self, $`*Any`
  %23i1 = field_read [alias %23] %23i0, rawArray, $`Any`
  pointer_write %23i1 to %23
  %24 = pointer_read %23, $`Array<Any>`
  %27 = new $`*Array<Any>`
  pointer_write %24 to %27
  %29 = pointer_read %27, $`Array<Any>`
  %30 = new $`*Range<Int>`
  %31 = new $`*Array<Any>`
  pointer_write %29 to %31
  %33 = function_ref @`(extension in Swift):Swift.RandomAccessCollection< where A.Index: Swift.Strideable, A.Indices == Swift.Range<A.Index>, A.Index.Stride == Swift.Int>.indices.getter : Swift.Range<A.Index>`, $`@convention(method) <τ_0_0 where τ_0_0 : RandomAccessCollection, τ_0_0.Index : Strideable, τ_0_0.Indices == Range<τ_0_0.Index>, τ_0_0.Index.Stride == Int> (@in_guaranteed τ_0_0) -> @out Range<τ_0_0.Index>`
  %34 = apply %33(%30, %31), $`@out Range<τ_0_0.Index>`
  %36 = pointer_read %30, $`Range<Int>`
  %39 = new $`*Range<Int>`
  pointer_write %36 to %39
  %41 = new $`*Int`
  pointer_write index to %41
  %43 = function_ref @`Swift.Range.contains(A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed Range<τ_0_0>) -> Bool`
  %44 = apply %43(%41, %39), $`Bool`
  br bb3(%44)

bb2:
  %51 = literal [int] 0, $`Builtin.Int1`
  %52 = new $`Bool`
  br bb3(%52)

bb3(%54 : $`Bool`):
  %55 = assign newValue, $`JSON`
  %56 = field_read %54, _value, $`Any`
  cond_br %56, true bb4, false bb8

bb4:
  %59 = field_read %55, error, $`Any`
  %60 = new $`_OptionalNilComparisonType`
  %61 = new $`*Optional<SwiftyJSONError>`
  pointer_write %59 to %61
  %61i0 = pointer_read %61, $`Optional<SwiftyJSONError>`
  switch_enum %61i0, case "#Optional.some!enumelt" : bb5, case "#Optional.none!enumelt" : bb6

bb5:
  %64 = new $`*Any`
  %64i0 = field_read [alias %64] %61, data, $`Any`
  pointer_write %64i0 to %64
  %65 = literal [int] 0, $`Builtin.Int1`
  %66 = new $`Bool`
  br bb7(%66)

bb6:
  %70 = literal [int] -1, $`Builtin.Int1`
  %71 = new $`Bool`
  br bb7(%71)

bb7(%74 : $`Bool`):
  br bb9(%74)

bb8:
  %77 = literal [int] 0, $`Builtin.Int1`
  %78 = new $`Bool`
  br bb9(%78)

bb9(%80 : $`Bool`):
  %82 = field_read %80, _value, $`Any`
  cond_br %82, true bb10, false bb11

bb10:
  %85 = new $`*Any`
  %86 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %87 = apply %86(%85, newValue), $`@out Any`
  %89 = new $`*Any`
  %89i0 = pointer_read self, $`*Any`
  %89i1 = field_read [alias %89] %89i0, rawArray, $`Any`
  pointer_write %89i1 to %89
  %90 = function_ref @`Swift.Array.subscript.modify : (Swift.Int) -> A`, $`@yield_once @convention(method) <τ_0_0> (Int, @inout Array<τ_0_0>) -> @yields @inout τ_0_0`
  %91 = apply %90(index, %89), $`@yields @inout τ_0_0`
  %85i0 = pointer_read %85, $`Any`
  pointer_write %85i0 to %91
  br bb12

bb11:
  br bb12

bb12:
  %101 = new $`()`
  return %101
}

func @`static Swift.Bool.&& infix(Swift.Bool, @autoclosure () throws -> Swift.Bool) throws -> Swift.Bool` : $`(Bool, @error Error)` {
bb0(%0 : $`Bool`, %1 : $`@noescape @callee_guaranteed () -> (Bool, @error Error)`, %2 : $`@thin Bool.Type`):
  %3 = field_read %0, _value, $`Any`
  cond_br %3, true bb2, false bb1

bb1:
  %5 = literal [int] 0, $`Builtin.Int1`
  %6 = new $`Bool`
  br bb5(%6)

bb2:
  %1i0 = apply %1(), $`Bool`
  %1i1 = new $`Builtin.Int1`
  cond_br %1i1, true bb4(%1i0), false bb3(%1i0)

bb3(%9 : $`@owned $Error`):
  return %9

bb4(%11 : $`Bool`):
  br bb5(%11)

bb5(%13 : $`Bool`):
  return %13
}

func @`static Swift.Optional.== infix(A?, Swift._OptionalNilComparisonType) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`*Optional<Wrapped>`, %1 : $`_OptionalNilComparisonType`, %2 : $`@thin Optional<Wrapped>.Type`):
  %3 = new $`*Optional<Wrapped>`
  %0i0 = pointer_read %0, $`Optional<Wrapped>`
  pointer_write %0i0 to %3
  %3i0 = pointer_read %3, $`Optional<Wrapped>`
  switch_enum %3i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb1

bb1:
  %6 = literal [int] -1, $`Builtin.Int1`
  %7 = new $`Bool`
  br bb3(%7)

bb2:
  %10 = new $`*Any`
  %10i0 = field_read [alias %10] %3, data, $`Any`
  pointer_write %10i0 to %10
  %11 = literal [int] 0, $`Builtin.Int1`
  %12 = new $`Bool`
  br bb3(%12)

bb3(%16 : $`Bool`):
  return %16
}

func [stub] @`Swift.Array.subscript.modify : (Swift.Int) -> A` : $`@yields @inout τ_0_0` {
bb0(%0 : $`Int`, %1 : $`@inout Array<τ_0_0>`):
  %ret = new $`@yields @inout τ_0_0`
  return %ret
}

func @`SwiftyJSON.JSON.subscript.getter : (key: Swift.String) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(key : $`@guaranteed $String`, self : $`@guaranteed $JSON`):
  %4 = new $`*JSON`
  %5 = new $`@thin JSON.Type`
  %6 = function_ref @`static SwiftyJSON.JSON.null.getter : SwiftyJSON.JSON`, $`@convention(method) (@thin JSON.Type) -> @owned JSON`
  %7 = apply %6(%5), $`@owned JSON`
  pointer_write %7 to %4
  %9 = field_read self, type, $`Any`
  %10 = new $`*Type`
  pointer_write %9 to %10
  %12 = new $`@thin Type.Type`
  %13 = new $`Type`
  %13i0 = literal [string] "#Type.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %13i0 to %13, type
  %14 = new $`*Type`
  pointer_write %13 to %14
  %16 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %17 = apply %16(%10, %14), $`Bool`
  %20 = field_read %17, _value, $`Any`
  cond_br %20, true bb1, false bb5

bb1:
  %22 = new $`*Any`
  %23 = field_read self, rawDictionary, $`Any`
  %24 = assign %23, $`Dictionary<String, Any>`
  %25 = assign key, $`String`
  %27 = new $`*Optional<Any>`
  %28 = new $`*String`
  pointer_write %25 to %28
  %30 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %31 = apply %30(%27, %28, %24), $`@out Optional<τ_0_1>`
  %27i0 = pointer_read %27, $`Optional<Any>`
  switch_enum %27i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb3

bb2:
  %35 = new $`*Any`
  %35i0 = field_read [alias %35] %27, data, $`Any`
  pointer_write %35i0 to %35
  %35i1 = pointer_read %35, $`Any`
  pointer_write %35i1 to %22
  %40 = new $`@thin JSON.Type`
  %41 = new $`*Any`
  %22i0 = pointer_read %22, $`Any`
  pointer_write %22i0 to %41
  %43 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %44 = apply %43(%41, %40), $`@owned JSON`
  pointer_write %44 to %4
  br bb4

bb3:
  %57 = new $`@thin SwiftyJSONError.Type`
  %58 = new $`SwiftyJSONError`
  %58i0 = literal [string] "#SwiftyJSONError.notExist!enumelt", $`Builtin.RawPointer`
  field_write %58i0 to %58, type
  %59 = new $`Optional<SwiftyJSONError>`
  %59i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %59i0 to %59, type
  field_write %58 to %59, data
  %61 = new $`*Any`
  %61i0 = pointer_read %4, $`*Any`
  %61i1 = field_read [alias %61] %61i0, error, $`Any`
  pointer_write %61i1 to %61
  pointer_write %59 to %61
  br bb4

bb4:
  br bb9

bb5:
  %66 = new $`*SwiftyJSONError`
  %67 = field_read self, error, $`Any`
  %68 = new $`*Optional<SwiftyJSONError>`
  pointer_write %67 to %68
  %68i0 = pointer_read %68, $`Optional<SwiftyJSONError>`
  switch_enum %68i0, case "#Optional.some!enumelt" : bb6, case "#Optional.none!enumelt" : bb7

bb6:
  %71 = new $`*Any`
  %71i0 = field_read [alias %71] %68, data, $`Any`
  pointer_write %71i0 to %71
  %72 = pointer_read %71, $`SwiftyJSONError`
  pointer_write %72 to %66
  br bb8

bb7:
  %76 = new $`@thin SwiftyJSONError.Type`
  %77 = new $`SwiftyJSONError`
  %77i0 = literal [string] "#SwiftyJSONError.wrongType!enumelt", $`Builtin.RawPointer`
  field_write %77i0 to %77, type
  pointer_write %77 to %66
  %79 = new $`()`
  br bb8

bb8:
  %82 = new $`()`
  %83 = pointer_read %66, $`SwiftyJSONError`
  %84 = new $`Optional<SwiftyJSONError>`
  %84i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %84i0 to %84, type
  field_write %83 to %84, data
  %86 = new $`*Any`
  %86i0 = pointer_read %4, $`*Any`
  %86i1 = field_read [alias %86] %86i0, error, $`Any`
  pointer_write %86i1 to %86
  pointer_write %84 to %86
  br bb9

bb9:
  %92 = pointer_read %4, $`JSON`
  return %92
}

func [stub] @`Swift.Dictionary.subscript.getter : (A) -> B?` : $`@out Optional<τ_0_1>` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`@out Optional<τ_0_1>`
  return %ret
}

func @`SwiftyJSON.JSON.subscript.setter : (key: Swift.String) -> SwiftyJSON.JSON` : $`()` {
bb0(newValue : $`@owned $JSON`, key : $`@owned $String`, self : $`*JSON`):
  %7 = new $`*Any`
  %7i0 = pointer_read self, $`*Any`
  %7i1 = field_read [alias %7] %7i0, type, $`Any`
  pointer_write %7i1 to %7
  %8 = pointer_read %7, $`Type`
  %10 = new $`*Type`
  pointer_write %8 to %10
  %12 = new $`@thin Type.Type`
  %13 = new $`Type`
  %13i0 = literal [string] "#Type.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %13i0 to %13, type
  %14 = new $`*Type`
  pointer_write %13 to %14
  %16 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %17 = apply %16(%10, %14), $`Bool`
  %20 = assign newValue, $`JSON`
  %21 = field_read %17, _value, $`Any`
  cond_br %21, true bb1, false bb5

bb1:
  %24 = field_read %20, error, $`Any`
  %25 = new $`_OptionalNilComparisonType`
  %26 = new $`*Optional<SwiftyJSONError>`
  pointer_write %24 to %26
  %26i0 = pointer_read %26, $`Optional<SwiftyJSONError>`
  switch_enum %26i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb3

bb2:
  %29 = new $`*Any`
  %29i0 = field_read [alias %29] %26, data, $`Any`
  pointer_write %29i0 to %29
  %30 = literal [int] 0, $`Builtin.Int1`
  %31 = new $`Bool`
  br bb4(%31)

bb3:
  %35 = literal [int] -1, $`Builtin.Int1`
  %36 = new $`Bool`
  br bb4(%36)

bb4(%39 : $`Bool`):
  br bb6(%39)

bb5:
  %42 = literal [int] 0, $`Builtin.Int1`
  %43 = new $`Bool`
  br bb6(%43)

bb6(%45 : $`Bool`):
  %47 = field_read %45, _value, $`Any`
  cond_br %47, true bb7, false bb8

bb7:
  %50 = assign key, $`String`
  %51 = new $`*Optional<Any>`
  %52 = new $`*Any`
  %52i0 = field_read [alias %52] %51, data, $`Any`
  pointer_write %52i0 to %52
  %54 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %55 = apply %54(%52, newValue), $`@out Any`
  %51i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %51i0 to %51, type
  %57 = new $`*String`
  pointer_write %50 to %57
  %60 = new $`*Any`
  %60i0 = pointer_read self, $`*Any`
  %60i1 = field_read [alias %60] %60i0, rawDictionary, $`Any`
  pointer_write %60i1 to %60
  %61 = function_ref @`Swift.Dictionary.subscript.setter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in Optional<τ_0_1>, @in τ_0_0, @inout Dictionary<τ_0_0, τ_0_1>) -> ()`
  %62 = apply %61(%51, %57, %60), $`()`
  br bb9

bb8:
  br bb9

bb9:
  %72 = new $`()`
  return %72
}

func @`SwiftyJSON.JSON.subscript.getter : (sub: SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(sub : $`*JSONSubscriptType`, self : $`@guaranteed $JSON`):
  %5 = new $`*@opened("36AC2136-8364-11EB-A9E1-ACDE48001122") JSONSubscriptType`
  %4i0 = pointer_read sub, $`@opened("36AC2136-8364-11EB-A9E1-ACDE48001122") JSONSubscriptType`
  pointer_write %4i0 to %5
  %7 = dynamic_ref @`#JSONSubscriptType.jsonKey!getter`, $`@convention(witness_method: JSONSubscriptType) <τ_0_0 where τ_0_0 : JSONSubscriptType> (@in_guaranteed τ_0_0) -> @owned JSONKey`
  %8 = apply %7(%5), $`@owned JSONKey`
  switch_enum %8, case "#JSONKey.index!enumelt" : bb1, case "#JSONKey.key!enumelt" : bb2

bb1(index : $`Int`):
  %13 = function_ref @`SwiftyJSON.JSON.subscript.getter : (index: Swift.Int) -> SwiftyJSON.JSON`, $`@convention(method) (Int, @guaranteed JSON) -> @owned JSON`
  %14 = apply %13(index, self), $`@owned JSON`
  br bb3(%14)

bb2(key : $`@owned $String`):
  %20 = assign key, $`String`
  %21 = function_ref @`SwiftyJSON.JSON.subscript.getter : (key: Swift.String) -> SwiftyJSON.JSON`, $`@convention(method) (@guaranteed String, @guaranteed JSON) -> @owned JSON`
  %22 = apply %21(%20, self), $`@owned JSON`
  br bb3(%22)

bb3(%28 : $`@owned $JSON`):
  return %28
}

func @`SwiftyJSON.JSON.subscript.setter : (sub: SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON` : $`()` {
bb0(newValue : $`@owned $JSON`, sub : $`*JSONSubscriptType`, self : $`*JSON`):
  %7 = new $`*@opened("36AC2C9E-8364-11EB-A9E1-ACDE48001122") JSONSubscriptType`
  %6i0 = pointer_read sub, $`@opened("36AC2C9E-8364-11EB-A9E1-ACDE48001122") JSONSubscriptType`
  pointer_write %6i0 to %7
  %9 = dynamic_ref @`#JSONSubscriptType.jsonKey!getter`, $`@convention(witness_method: JSONSubscriptType) <τ_0_0 where τ_0_0 : JSONSubscriptType> (@in_guaranteed τ_0_0) -> @owned JSONKey`
  %10 = apply %9(%7), $`@owned JSONKey`
  switch_enum %10, case "#JSONKey.index!enumelt" : bb1, case "#JSONKey.key!enumelt" : bb2

bb1(index : $`Int`):
  %16 = assign newValue, $`JSON`
  %18 = function_ref @`SwiftyJSON.JSON.subscript.setter : (index: Swift.Int) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, Int, @inout JSON) -> ()`
  %19 = apply %18(%16, index, self), $`()`
  br bb3

bb2(key : $`@owned $String`):
  %27 = assign key, $`String`
  %29 = assign newValue, $`JSON`
  %31 = function_ref @`SwiftyJSON.JSON.subscript.setter : (key: Swift.String) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned String, @inout JSON) -> ()`
  %32 = apply %31(%29, %27, self), $`()`
  br bb3

bb3:
  %41 = new $`()`
  return %41
}

func @`SwiftyJSON.JSON.subscript.getter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(path : $`@guaranteed $Array<JSONSubscriptType>`, self : $`@guaranteed $JSON`):
  %4 = new $`*JSON`
  %5 = new $`*Array<JSONSubscriptType>`
  pointer_write path to %5
  %7 = new $`*JSON`
  pointer_write self to %7
  %9 = function_ref @`closure #1 (SwiftyJSON.JSON, SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON in SwiftyJSON.JSON.subscript.getter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON`, $`@convention(thin) (@guaranteed JSON, @in_guaranteed JSONSubscriptType) -> @owned JSON`
  %13 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@guaranteed SwiftyJSON.JSON, @in_guaranteed SwiftyJSON.JSONSubscriptType) -> (@owned SwiftyJSON.JSON, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed SwiftyJSON.JSON, @in_guaranteed SwiftyJSON.JSONSubscriptType) -> (@out SwiftyJSON.JSON, @error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed JSON, @in_guaranteed JSONSubscriptType, @noescape @callee_guaranteed (@guaranteed JSON, @in_guaranteed JSONSubscriptType) -> (@owned JSON, @error Error)) -> (@out JSON, @error Error)`
  %14 = apply %13(%9), $`(@out JSON, @error Error)`
  %16 = function_ref @`(extension in Swift):Swift.Sequence.reduce<A>(A1, (A1, A.Element) throws -> A1) throws -> A1`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@in_guaranteed τ_1_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_1) -> (@out τ_0_2, @error Error) for <τ_1_0, τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out τ_1_0, @error Error)`
  %16i0 = apply %16(%4, %7, %14, %5), $`τ_1_0`
  %16i1 = new $`Builtin.Int1`
  cond_br %16i1, true bb1(%16i0), false bb2(%16i0)

bb1(%18 : $`()`):
  %22 = pointer_read %4, $`JSON`
  return %22

bb2(%25 : $`@owned $Error`):
  unreachable
}

func @`closure #1 (SwiftyJSON.JSON, SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON in SwiftyJSON.JSON.subscript.getter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0($0 : $`@guaranteed $JSON`, $1 : $`*JSONSubscriptType`):
  %4 = new $`*JSONSubscriptType`
  %1i0 = pointer_read $1, $`JSONSubscriptType`
  pointer_write %1i0 to %4
  %6 = function_ref @`SwiftyJSON.JSON.subscript.getter : (sub: SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON`, $`@convention(method) (@in_guaranteed JSONSubscriptType, @guaranteed JSON) -> @owned JSON`
  %7 = apply %6(%4, $0), $`@owned JSON`
  return %7
}

func @`reabstraction thunk helper from @callee_guaranteed (@guaranteed SwiftyJSON.JSON, @in_guaranteed SwiftyJSON.JSONSubscriptType) -> (@owned SwiftyJSON.JSON, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed SwiftyJSON.JSON, @in_guaranteed SwiftyJSON.JSONSubscriptType) -> (@out SwiftyJSON.JSON, @error @owned Swift.Error)` : $`(@out JSON, @error Error)` {
bb0(%0 : $`*JSON`, %1 : $`*JSON`, %2 : $`*JSONSubscriptType`, %3 : $`@noescape @callee_guaranteed (@guaranteed JSON, @in_guaranteed JSONSubscriptType) -> (@owned JSON, @error Error)`):
  %4 = pointer_read %1, $`JSON`
  %3i0 = apply %3(%4, %2), $`JSON`
  %3i1 = new $`Builtin.Int1`
  cond_br %3i1, true bb1(%3i0), false bb2(%3i0)

bb1(%6 : $`@owned $JSON`):
  pointer_write %6 to %0
  %8 = new $`()`
  return %8

bb2(%11 : $`@owned $Error`):
  return %11
}

func [stub] @`(extension in Swift):Swift.Sequence.reduce<A>(A1, (A1, A.Element) throws -> A1) throws -> A1` : $`(@out τ_1_0, @error Error)` {
bb0(%0 : $`@in_guaranteed τ_1_0`, %1 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_1) -> (@out τ_0_2, @error Error) for <τ_1_0, τ_0_0.Element, τ_1_0>`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`(@out τ_1_0, @error Error)`
  return %ret
}

func @`SwiftyJSON.JSON.subscript.setter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON` : $`()` {
bb0(newValue : $`@owned $JSON`, path : $`@owned $Array<JSONSubscriptType>`, self : $`*JSON`):
  %7 = function_ref @`Swift.Array.count.getter : Swift.Int`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int`
  $match = apply %7(path), $`Int`
  %10 = literal [int] 0, $`Builtin.Int64`
  %11 = field_read $match, _value, $`Any`
  %12i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %12 = apply %12i0(%10, %11), $`Builtin.Int1`
  cond_br %12, true bb1, false bb2

bb1:
  br bb6

bb2:
  %17 = literal [int] 1, $`Builtin.Int64`
  %18 = field_read $match, _value, $`Any`
  %19i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %19 = apply %19i0(%17, %18), $`Builtin.Int1`
  cond_br %19, true bb3, false bb4

bb3:
  %22 = literal [int] 0, $`Builtin.Int64`
  %23 = new $`Int`
  field_write %22 to %23, _value
  %24 = new $`*JSONSubscriptType`
  %25 = function_ref @`Swift.Array.subscript.getter : (Swift.Int) -> A`, $`@convention(method) <τ_0_0> (Int, @guaranteed Array<τ_0_0>) -> @out τ_0_0`
  %26 = apply %25(%24, %23, path), $`@out τ_0_0`
  %28 = new $`*Any`
  %29 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %30 = apply %29(%28, newValue), $`@out Any`
  %32 = new $`*JSONSubscriptType`
  %24i0 = pointer_read %24, $`JSONSubscriptType`
  pointer_write %24i0 to %32
  %34 = new $`*JSON`
  %35 = pointer_read self, $`JSON`
  %36 = function_ref @`SwiftyJSON.JSON.subscript.getter : (sub: SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON`, $`@convention(method) (@in_guaranteed JSONSubscriptType, @guaranteed JSON) -> @owned JSON`
  %37 = apply %36(%24, %35), $`@owned JSON`
  pointer_write %37 to %34
  %40 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %41 = apply %40(%28, %34), $`()`
  %42 = pointer_read %34, $`JSON`
  %43 = function_ref @`SwiftyJSON.JSON.subscript.setter : (sub: SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @in JSONSubscriptType, @inout JSON) -> ()`
  %44 = apply %43(%42, %32, self), $`()`
  br bb5

bb4:
  %55 = new $`*Array<JSONSubscriptType>`
  %57 = assign path, $`Array<JSONSubscriptType>`
  pointer_write %57 to %55
  %60 = new $`*JSONSubscriptType`
  %61 = literal [int] 0, $`Builtin.Int64`
  %62 = new $`Int`
  field_write %61 to %62, _value
  %64 = function_ref @`Swift.Array.remove(at: Swift.Int) -> A`, $`@convention(method) <τ_0_0> (Int, @inout Array<τ_0_0>) -> @out τ_0_0`
  %65 = apply %64(%60, %62, %55), $`@out τ_0_0`
  %69 = new $`*JSON`
  %71 = literal [int] 0, $`Builtin.Int64`
  %72 = new $`Int`
  field_write %71 to %72, _value
  %73 = new $`*JSONSubscriptType`
  %74 = function_ref @`Swift.Array.subscript.getter : (Swift.Int) -> A`, $`@convention(method) <τ_0_0> (Int, @guaranteed Array<τ_0_0>) -> @out τ_0_0`
  %75 = apply %74(%73, %72, path), $`@out τ_0_0`
  %77 = pointer_read self, $`JSON`
  %78 = function_ref @`SwiftyJSON.JSON.subscript.getter : (sub: SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON`, $`@convention(method) (@in_guaranteed JSONSubscriptType, @guaranteed JSON) -> @owned JSON`
  %79 = apply %78(%73, %77), $`@owned JSON`
  pointer_write %79 to %69
  %87 = pointer_read %55, $`Array<JSONSubscriptType>`
  %90 = assign newValue, $`JSON`
  %92 = function_ref @`SwiftyJSON.JSON.subscript.setter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %93 = apply %92(%90, %87, %69), $`()`
  %97 = literal [int] 0, $`Builtin.Int64`
  %98 = new $`Int`
  field_write %97 to %98, _value
  %99 = new $`*JSONSubscriptType`
  %100 = function_ref @`Swift.Array.subscript.getter : (Swift.Int) -> A`, $`@convention(method) <τ_0_0> (Int, @guaranteed Array<τ_0_0>) -> @out τ_0_0`
  %101 = apply %100(%99, %98, path), $`@out τ_0_0`
  %103 = pointer_read %69, $`JSON`
  %106 = function_ref @`SwiftyJSON.JSON.subscript.setter : (sub: SwiftyJSON.JSONSubscriptType) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @in JSONSubscriptType, @inout JSON) -> ()`
  %107 = apply %106(%103, %99, self), $`()`
  br bb5

bb5:
  br bb6

bb6:
  %120 = new $`()`
  return %120
}

func [stub] @`Swift.Array.count.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`Int`
  return %ret
}

func [stub] @`Swift.Array.remove(at: Swift.Int) -> A` : $`@out τ_0_0` {
bb0(%0 : $`Int`, %1 : $`@inout Array<τ_0_0>`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func [coroutine] @`SwiftyJSON.JSON.subscript.modify : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON` : $`@yields @inout JSON` {
bb0(path : $`@guaranteed $Array<JSONSubscriptType>`, self : $`*JSON`):
  %4 = assign path, $`Array<JSONSubscriptType>`
  %6 = assign %4, $`Array<JSONSubscriptType>`
  %7 = new $`*JSON`
  %8 = pointer_read self, $`JSON`
  %9 = function_ref @`SwiftyJSON.JSON.subscript.getter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON`, $`@convention(method) (@guaranteed Array<JSONSubscriptType>, @guaranteed JSON) -> @owned JSON`
  %10 = apply %9(%4, %8), $`@owned JSON`
  pointer_write %10 to %7
  yield (%7), resume bb1, unwind bb2

bb1:
  %14 = pointer_read %7, $`JSON`
  %15 = function_ref @`SwiftyJSON.JSON.subscript.setter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %16 = apply %15(%14, %6, self), $`()`
  %20 = new $`()`
  return %20

bb2:
  %22 = pointer_read %7, $`JSON`
  %23 = assign %6, $`Array<JSONSubscriptType>`
  %24 = function_ref @`SwiftyJSON.JSON.subscript.setter : ([SwiftyJSON.JSONSubscriptType]) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %25 = apply %24(%22, %23, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@guaranteed Array<JSONSubscriptType>, @inout JSON) -> @yields @inout JSON`
  return %dummy_unwindi0
}

func [coroutine] @`SwiftyJSON.JSON.subscript.modify : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON` : $`@yields @inout JSON` {
bb0(path : $`@guaranteed $Array<JSONSubscriptType>`, self : $`*JSON`):
  %4 = assign path, $`Array<JSONSubscriptType>`
  %6 = assign %4, $`Array<JSONSubscriptType>`
  %7 = new $`*JSON`
  %8 = pointer_read self, $`JSON`
  %9 = function_ref @`SwiftyJSON.JSON.subscript.getter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON`, $`@convention(method) (@guaranteed Array<JSONSubscriptType>, @guaranteed JSON) -> @owned JSON`
  %10 = apply %9(%4, %8), $`@owned JSON`
  pointer_write %10 to %7
  yield (%7), resume bb1, unwind bb2

bb1:
  %14 = pointer_read %7, $`JSON`
  %15 = function_ref @`SwiftyJSON.JSON.subscript.setter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %16 = apply %15(%14, %6, self), $`()`
  %20 = new $`()`
  return %20

bb2:
  %22 = pointer_read %7, $`JSON`
  %23 = assign %6, $`Array<JSONSubscriptType>`
  %24 = function_ref @`SwiftyJSON.JSON.subscript.setter : (SwiftyJSON.JSONSubscriptType...) -> SwiftyJSON.JSON`, $`@convention(method) (@owned JSON, @owned Array<JSONSubscriptType>, @inout JSON) -> ()`
  %25 = apply %24(%22, %23, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@guaranteed Array<JSONSubscriptType>, @inout JSON) -> @yields @inout JSON`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.init(stringLiteral: Swift.String) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(value : $`@owned $String`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  %6 = assign value, $`String`
  pointer_write %6 to %4
  %9 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %10 = apply %9(%4, %1), $`@owned JSON`
  %13 = assign %10, $`JSON`
  pointer_write %10 to %2
  %15 = assign %13, $`JSON`
  return %15
}

func @`SwiftyJSON.JSON.init(extendedGraphemeClusterLiteral: Swift.String) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(value : $`@owned $String`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  %6 = assign value, $`String`
  pointer_write %6 to %4
  %9 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %10 = apply %9(%4, %1), $`@owned JSON`
  %13 = assign %10, $`JSON`
  pointer_write %10 to %2
  %15 = assign %13, $`JSON`
  return %15
}

func @`SwiftyJSON.JSON.init(unicodeScalarLiteral: Swift.String) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(value : $`@owned $String`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  %6 = assign value, $`String`
  pointer_write %6 to %4
  %9 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %10 = apply %9(%4, %1), $`@owned JSON`
  %13 = assign %10, $`JSON`
  pointer_write %10 to %2
  %15 = assign %13, $`JSON`
  return %15
}

func @`protocol witness for Swift.ExpressibleByStringLiteral.init(stringLiteral: A.StringLiteralType) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByStringLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`*String`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %1, $`String`
  %4 = new $`@thin JSON.Type`
  %5 = function_ref @`SwiftyJSON.JSON.init(stringLiteral: Swift.String) -> SwiftyJSON.JSON`, $`@convention(method) (@owned String, @thin JSON.Type) -> @owned JSON`
  %6 = apply %5(%3, %4), $`@owned JSON`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`protocol witness for Swift.ExpressibleByExtendedGraphemeClusterLiteral.init(extendedGraphemeClusterLiteral: A.ExtendedGraphemeClusterLiteralType) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByExtendedGraphemeClusterLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`*String`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %1, $`String`
  %4 = new $`@thin JSON.Type`
  %5 = function_ref @`SwiftyJSON.JSON.init(extendedGraphemeClusterLiteral: Swift.String) -> SwiftyJSON.JSON`, $`@convention(method) (@owned String, @thin JSON.Type) -> @owned JSON`
  %6 = apply %5(%3, %4), $`@owned JSON`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`protocol witness for Swift.ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral: A.UnicodeScalarLiteralType) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByUnicodeScalarLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`*String`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %1, $`String`
  %4 = new $`@thin JSON.Type`
  %5 = function_ref @`SwiftyJSON.JSON.init(unicodeScalarLiteral: Swift.String) -> SwiftyJSON.JSON`, $`@convention(method) (@owned String, @thin JSON.Type) -> @owned JSON`
  %6 = apply %5(%3, %4), $`@owned JSON`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`SwiftyJSON.JSON.init(integerLiteral: Swift.Int) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(value : $`Int`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  pointer_write value to %4
  %7 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %8 = apply %7(%4, %1), $`@owned JSON`
  %10 = assign %8, $`JSON`
  pointer_write %8 to %2
  %12 = assign %10, $`JSON`
  return %12
}

func @`protocol witness for Swift.ExpressibleByIntegerLiteral.init(integerLiteral: A.IntegerLiteralType) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByIntegerLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`*Int`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %1, $`Int`
  %4 = new $`@thin JSON.Type`
  %5 = function_ref @`SwiftyJSON.JSON.init(integerLiteral: Swift.Int) -> SwiftyJSON.JSON`, $`@convention(method) (Int, @thin JSON.Type) -> @owned JSON`
  %6 = apply %5(%3, %4), $`@owned JSON`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`SwiftyJSON.JSON.init(booleanLiteral: Swift.Bool) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(value : $`Bool`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  pointer_write value to %4
  %7 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %8 = apply %7(%4, %1), $`@owned JSON`
  %10 = assign %8, $`JSON`
  pointer_write %8 to %2
  %12 = assign %10, $`JSON`
  return %12
}

func @`protocol witness for Swift.ExpressibleByBooleanLiteral.init(booleanLiteral: A.BooleanLiteralType) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByBooleanLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`*Bool`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %1, $`Bool`
  %4 = new $`@thin JSON.Type`
  %5 = function_ref @`SwiftyJSON.JSON.init(booleanLiteral: Swift.Bool) -> SwiftyJSON.JSON`, $`@convention(method) (Bool, @thin JSON.Type) -> @owned JSON`
  %6 = apply %5(%3, %4), $`@owned JSON`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`SwiftyJSON.JSON.init(floatLiteral: Swift.Double) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(value : $`Double`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  pointer_write value to %4
  %7 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %8 = apply %7(%4, %1), $`@owned JSON`
  %10 = assign %8, $`JSON`
  pointer_write %8 to %2
  %12 = assign %10, $`JSON`
  return %12
}

func @`protocol witness for Swift.ExpressibleByFloatLiteral.init(floatLiteral: A.FloatLiteralType) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByFloatLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`*Double`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %1, $`Double`
  %4 = new $`@thin JSON.Type`
  %5 = function_ref @`SwiftyJSON.JSON.init(floatLiteral: Swift.Double) -> SwiftyJSON.JSON`, $`@convention(method) (Double, @thin JSON.Type) -> @owned JSON`
  %6 = apply %5(%3, %4), $`@owned JSON`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`SwiftyJSON.JSON.init(dictionaryLiteral: (Swift.String, Any)...) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(elements : $`@owned $Array<(String, Any)>`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Dictionary<String, Any>`
  %6 = new $`*Array<(String, Any)>`
  pointer_write elements to %6
  %8 = new $`@thin Dictionary<String, Any>.Type`
  %9 = function_ref @`Swift.Dictionary.init() -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %10 = apply %9(%8), $`@owned Dictionary<τ_0_0, τ_0_1>`
  %11 = new $`*Dictionary<String, Any>`
  pointer_write %10 to %11
  %13 = function_ref @`closure #1 (inout [Swift.String : Any], (Swift.String, Any)) -> () in SwiftyJSON.JSON.init(dictionaryLiteral: (Swift.String, Any)...) -> SwiftyJSON.JSON`, $`@convention(thin) (@inout Dictionary<String, Any>, @guaranteed String, @in_guaranteed Any) -> ()`
  %17 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@inout [Swift.String : Any], @guaranteed Swift.String, @in_guaranteed Any) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@inout [Swift.String : Any], @in_guaranteed (Swift.String, Any)) -> (@error @owned Swift.Error)`, $`@convention(thin) (@inout Dictionary<String, Any>, @in_guaranteed (String, Any), @noescape @callee_guaranteed (@inout Dictionary<String, Any>, @guaranteed String, @in_guaranteed Any) -> @error Error) -> @error Error`
  %18 = apply %17(%13), $`@error Error`
  %20 = function_ref @`(extension in Swift):Swift.Sequence.reduce<A>(into: __owned A1, _: (inout A1, A.Element) throws -> ()) throws -> A1`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@in τ_1_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@inout τ_0_0, @in_guaranteed τ_0_1) -> @error Error for <τ_1_0, τ_0_0.Element>, @in_guaranteed τ_0_0) -> (@out τ_1_0, @error Error)`
  %20i0 = apply %20(%4, %11, %18, %6), $`τ_1_0`
  %20i1 = new $`Builtin.Int1`
  cond_br %20i1, true bb1(%20i0), false bb2(%20i0)

bb1(%22 : $`()`):
  dictionary = pointer_read %4, $`Dictionary<String, Any>`
  %30 = new $`*Any`
  %32 = assign dictionary, $`Dictionary<String, Any>`
  pointer_write %32 to %30
  %35 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %36 = apply %35(%30, %1), $`@owned JSON`
  %39 = assign %36, $`JSON`
  pointer_write %36 to %2
  %42 = assign %39, $`JSON`
  return %42

bb2(%48 : $`@owned $Error`):
  unreachable
}

func [stub] @`Swift.Dictionary.init() -> [A : B]` : $`@owned Dictionary<τ_0_0, τ_0_1>` {
bb0(%0 : $`@thin Dictionary<τ_0_0, τ_0_1>.Type`):
  %ret = new $`@owned Dictionary<τ_0_0, τ_0_1>`
  return %ret
}

func @`closure #1 (inout [Swift.String : Any], (Swift.String, Any)) -> () in SwiftyJSON.JSON.init(dictionaryLiteral: (Swift.String, Any)...) -> SwiftyJSON.JSON` : $`()` {
bb0($0 : $`*Dictionary<String, Any>`, %1 : $`@guaranteed $String`, %2 : $`*Any`):
  %4 = new $`*(String, Any)`
  %5 = new $`*Any`
  %5i0 = field_read [alias %5] %4, 1, $`Any`
  pointer_write %5i0 to %5
  %6 = new $`*String`
  %6i0 = field_read [alias %6] %4, 0, $`String`
  pointer_write %6i0 to %6
  %7 = assign %1, $`String`
  %8 = assign %7, $`String`
  %9 = assign %7, $`String`
  pointer_write %7 to %6
  %11 = new $`*Any`
  %11i0 = field_read [alias %11] %4, 1, $`Any`
  pointer_write %11i0 to %11
  %2i0 = pointer_read %2, $`Any`
  pointer_write %2i0 to %11
  %13 = new $`*(String, Any)`
  %14 = new $`*String`
  %14i0 = field_read [alias %14] %13, 0, $`String`
  pointer_write %14i0 to %14
  %15 = new $`*Any`
  %15i0 = field_read [alias %15] %13, 1, $`Any`
  pointer_write %15i0 to %15
  %16 = assign %8, $`String`
  pointer_write %16 to %14
  %5i1 = pointer_read %5, $`Any`
  pointer_write %5i1 to %15
  %20 = new $`*String`
  %20i0 = field_read [alias %20] %13, 0, $`String`
  pointer_write %20i0 to %20
  %21 = pointer_read %20, $`String`
  %22 = new $`*Any`
  %22i0 = field_read [alias %22] %13, 1, $`Any`
  pointer_write %22i0 to %22
  %23 = new $`*Optional<Any>`
  %24 = new $`*Any`
  %24i0 = field_read [alias %24] %23, data, $`Any`
  pointer_write %24i0 to %24
  %25 = new $`*(String, Any)`
  %26 = new $`*String`
  %26i0 = field_read [alias %26] %25, 0, $`String`
  pointer_write %26i0 to %26
  %27 = new $`*Any`
  %27i0 = field_read [alias %27] %25, 1, $`Any`
  pointer_write %27i0 to %27
  %28 = assign %9, $`String`
  pointer_write %28 to %26
  %5i2 = pointer_read %5, $`Any`
  pointer_write %5i2 to %27
  %32 = new $`*String`
  %32i0 = field_read [alias %32] %25, 0, $`String`
  pointer_write %32i0 to %32
  %33 = pointer_read %32, $`String`
  %34 = new $`*Any`
  %34i0 = field_read [alias %34] %25, 1, $`Any`
  pointer_write %34i0 to %34
  %34i1 = pointer_read %34, $`Any`
  pointer_write %34i1 to %24
  %23i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %23i0 to %23, type
  %37 = new $`*String`
  pointer_write %21 to %37
  %40 = function_ref @`Swift.Dictionary.subscript.setter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in Optional<τ_0_1>, @in τ_0_0, @inout Dictionary<τ_0_0, τ_0_1>) -> ()`
  %41 = apply %40(%23, %37, $0), $`()`
  %51 = new $`()`
  return %51
}

func @`reabstraction thunk helper from @callee_guaranteed (@inout [Swift.String : Any], @guaranteed Swift.String, @in_guaranteed Any) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@inout [Swift.String : Any], @in_guaranteed (Swift.String, Any)) -> (@error @owned Swift.Error)` : $`@error Error` {
bb0(%0 : $`*Dictionary<String, Any>`, %1 : $`*(String, Any)`, %2 : $`@noescape @callee_guaranteed (@inout Dictionary<String, Any>, @guaranteed String, @in_guaranteed Any) -> @error Error`):
  %3 = new $`*String`
  %3i0 = field_read [alias %3] %1, 0, $`String`
  pointer_write %3i0 to %3
  %4 = new $`*Any`
  %4i0 = field_read [alias %4] %1, 1, $`Any`
  pointer_write %4i0 to %4
  %5 = pointer_read %3, $`String`
  %2i0 = apply %2(%0, %5, %4), $`()`
  %2i1 = new $`Builtin.Int1`
  cond_br %2i1, true bb1(%2i0), false bb2(%2i0)

bb1(%7 : $`()`):
  %8 = new $`()`
  return %8

bb2(%11 : $`@owned $Error`):
  return %11
}

func [stub] @`(extension in Swift):Swift.Sequence.reduce<A>(into: __owned A1, _: (inout A1, A.Element) throws -> ()) throws -> A1` : $`(@out τ_1_0, @error Error)` {
bb0(%0 : $`@in τ_1_0`, %1 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@inout τ_0_0, @in_guaranteed τ_0_1) -> @error Error for <τ_1_0, τ_0_0.Element>`, %2 : $`@in_guaranteed τ_0_0`):
  %ret = new $`(@out τ_1_0, @error Error)`
  return %ret
}

func @`protocol witness for Swift.ExpressibleByDictionaryLiteral.init(dictionaryLiteral: (A.Key, A.Value)...) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByDictionaryLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`@owned $Array<(String, Any)>`, %2 : $`@thick JSON.Type`):
  %3 = new $`@thin JSON.Type`
  %4 = function_ref @`SwiftyJSON.JSON.init(dictionaryLiteral: (Swift.String, Any)...) -> SwiftyJSON.JSON`, $`@convention(method) (@owned Array<(String, Any)>, @thin JSON.Type) -> @owned JSON`
  %5 = apply %4(%1, %3), $`@owned JSON`
  pointer_write %5 to %0
  %7 = new $`()`
  return %7
}

func @`SwiftyJSON.JSON.init(arrayLiteral: Any...) -> SwiftyJSON.JSON` : $`@owned JSON` {
bb0(elements : $`@owned $Array<Any>`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`*Any`
  %6 = assign elements, $`Array<Any>`
  pointer_write %6 to %4
  %9 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %10 = apply %9(%4, %1), $`@owned JSON`
  %13 = assign %10, $`JSON`
  pointer_write %10 to %2
  %15 = assign %13, $`JSON`
  return %15
}

func @`protocol witness for Swift.ExpressibleByArrayLiteral.init(arrayLiteral: A.ArrayLiteralElement...) -> A in conformance SwiftyJSON.JSON : Swift.ExpressibleByArrayLiteral in SwiftyJSON` : $`@out JSON` {
bb0(%0 : $`*JSON`, %1 : $`@owned $Array<Any>`, %2 : $`@thick JSON.Type`):
  %3 = new $`@thin JSON.Type`
  %4 = function_ref @`SwiftyJSON.JSON.init(arrayLiteral: Any...) -> SwiftyJSON.JSON`, $`@convention(method) (@owned Array<Any>, @thin JSON.Type) -> @owned JSON`
  %5 = apply %4(%1, %3), $`@owned JSON`
  pointer_write %5 to %0
  %7 = new $`()`
  return %7
}

func @`SwiftyJSON.JSON.init(rawValue: Any) -> SwiftyJSON.JSON?` : $`@owned Optional<JSON>` {
bb0(rawValue : $`*Any`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %4 = new $`@thin JSON.Type`
  %5 = new $`*Any`
  %0i0 = pointer_read rawValue, $`Any`
  pointer_write %0i0 to %5
  %7 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %8 = apply %7(%5, %4), $`@owned JSON`
  %11 = field_read %8, type, $`Any`
  %14 = new $`*Type`
  pointer_write %11 to %14
  %16 = new $`@thin Type.Type`
  %17 = new $`Type`
  %17i0 = literal [string] "#Type.unknown!enumelt", $`Builtin.RawPointer`
  field_write %17i0 to %17, type
  %18 = new $`*Type`
  pointer_write %17 to %18
  %20 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %21 = apply %20(%14, %18), $`Bool`
  %24 = field_read %21, _value, $`Any`
  cond_br %24, true bb1, false bb2

bb1:
  %28 = new $`Optional<JSON>`
  %28i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %28i0 to %28, type
  br bb3(%28)

bb2:
  %30 = new $`*Any`
  %0i1 = pointer_read rawValue, $`Any`
  pointer_write %0i1 to %30
  %32 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %33 = apply %32(%30, %1), $`@owned JSON`
  %35 = assign %33, $`JSON`
  pointer_write %33 to %2
  %37 = assign %35, $`JSON`
  %39 = new $`Optional<JSON>`
  %39i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %39i0 to %39, type
  field_write %37 to %39, data
  br bb3(%39)

bb3(%44 : $`@owned $Optional<JSON>`):
  return %44
}

func @`SwiftyJSON.JSON.rawValue.getter : Any` : $`@out Any` {
bb0(%0 : $`*Any`, self : $`@guaranteed $JSON`):
  %3 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %4 = apply %3(%0, self), $`@out Any`
  %5 = new $`()`
  return %5
}

func @`default argument 0 of SwiftyJSON.JSON.rawData(options: __C.NSJSONWritingOptions) throws -> Foundation.Data` : $`JSONSerialization.WritingOptions` {
bb0:
  %0 = literal [int] 0, $`Builtin.Int64`
  %1 = new $`UInt`
  field_write %0 to %1, _value
  %2 = new $`JSONSerialization.WritingOptions`
  return %2
}

func @`Swift.UInt.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.UInt` : $`UInt` {
bb0(%0 : $`Builtin.IntLiteral`, %1 : $`@thin UInt.Type`):
  %2i0 = builtin_ref @`s_to_u_checked_trunc_IntLiteral_Int64`, $`Any`
  %2 = apply %2i0(%0), $`(Builtin.Int64, Builtin.Int1)`
  %3 = field_read %2, 0, $`Builtin.Int64`
  %4 = field_read %2, 1, $`Builtin.Int1`
  %5 = new $`UInt`
  field_write %3 to %5, _value
  return %5
}

func @`SwiftyJSON.JSON.rawData(options: __C.NSJSONWritingOptions) throws -> Foundation.Data` : $`(@owned Data, @error Error)` {
bb0(opt : $`JSONSerialization.WritingOptions`, self : $`@guaranteed $JSON`):
  %5 = new $`@objc_metatype JSONSerialization.Type`
  %6 = new $`*Any`
  %7 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %8 = apply %7(%6, self), $`@out Any`
  %10 = new $`*@opened("36CB970A-8364-11EB-A9E1-ACDE48001122") Any`
  %9i0 = pointer_read %6, $`@opened("36CB970A-8364-11EB-A9E1-ACDE48001122") Any`
  pointer_write %9i0 to %10
  %12 = function_ref @`Swift._bridgeAnythingToObjectiveC<A>(A) -> Swift.AnyObject`, $`@convention(thin) <τ_0_0> (@in_guaranteed τ_0_0) -> @owned AnyObject`
  %13 = apply %12(%10), $`@owned AnyObject`
  %18 = builtin_ref @`#JSONSerialization.isValidJSONObject!foreign`, $`@convention(objc_method) (AnyObject, @objc_metatype JSONSerialization.Type) -> Bool`
  %19 = apply %18(%13, %5), $`Bool`
  %21 = field_read %19, _value, $`Any`
  cond_br %21, true bb1, false bb3

bb1:
  %23 = new $`*Optional<NSError>`
  %23i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %23i0 to %23, type
  %25 = new $`@objc_metatype JSONSerialization.Type`
  %26 = new $`*Any`
  %27 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %28 = apply %27(%26, self), $`@out Any`
  %30 = new $`*@opened("36CB9B6A-8364-11EB-A9E1-ACDE48001122") Any`
  %29i0 = pointer_read %26, $`@opened("36CB9B6A-8364-11EB-A9E1-ACDE48001122") Any`
  pointer_write %29i0 to %30
  %32 = function_ref @`Swift._bridgeAnythingToObjectiveC<A>(A) -> Swift.AnyObject`, $`@convention(thin) <τ_0_0> (@in_guaranteed τ_0_0) -> @owned AnyObject`
  %33 = apply %32(%30), $`@owned AnyObject`
  %38 = builtin_ref @`#JSONSerialization.data!foreign`, $`@convention(objc_method) (AnyObject, JSONSerialization.WritingOptions, Optional<AutoreleasingUnsafeMutablePointer<Optional<NSError>>>, @objc_metatype JSONSerialization.Type) -> @autoreleased Optional<NSData>`
  %39 = new $`*@sil_unmanaged Optional<NSError>`
  %40 = pointer_read %23, $`Optional<NSError>`
  pointer_write %40 to %39
  %45 = new $`AutoreleasingUnsafeMutablePointer<Optional<NSError>>`
  %46 = new $`()`
  %47 = new $`()`
  %48 = new $`Optional<AutoreleasingUnsafeMutablePointer<Optional<NSError>>>`
  %48i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %48i0 to %48, type
  field_write %45 to %48, data
  %49 = apply %38(%33, opt, %48, %25), $`@autoreleased Optional<NSData>`
  %50 = pointer_read %39, $`@sil_unmanaged Optional<NSError>`
  %52 = assign %50, $`Optional<NSError>`
  pointer_write %52 to %23
  switch_enum %49, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb4

bb2(%57 : $`@owned $NSData`):
  %58 = function_ref @`static Foundation.Data._unconditionallyBridgeFromObjectiveC(__C.NSData?) -> Foundation.Data`, $`@convention(method) (@guaranteed Optional<NSData>, @thin Data.Type) -> @owned Data`
  %59 = new $`Optional<NSData>`
  %59i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %59i0 to %59, type
  field_write %57 to %59, data
  %60 = new $`@thin Data.Type`
  %61 = apply %58(%59, %60), $`@owned Data`
  return %61

bb3:
  %65 = new $`@thin SwiftyJSONError.Type`
  %66 = new $`SwiftyJSONError`
  %66i0 = literal [string] "#SwiftyJSONError.invalidJSON!enumelt", $`Builtin.RawPointer`
  field_write %66i0 to %66, type
  %67 = new $`*Error`
  pointer_write %66 to %67
  %70i0 = builtin_ref @`willThrow`, $`Any`
  %70 = apply %70i0(%67), $`()`
  br bb5(%67)

bb4:
  %72 = pointer_read %23, $`Optional<NSError>`
  %73 = function_ref @`Foundation._convertNSErrorToError(__C.NSError?) -> Swift.Error`, $`@convention(thin) (@guaranteed Optional<NSError>) -> @owned Error`
  %74 = apply %73(%72), $`@owned Error`
  %76i0 = builtin_ref @`willThrow`, $`Any`
  %76 = apply %76i0(%74), $`()`
  br bb5(%74)

bb5(%79 : $`@owned $Error`):
  return %79
}

func [stub] @`Swift._bridgeAnythingToObjectiveC<A>(A) -> Swift.AnyObject` : $`@owned AnyObject` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned AnyObject`
  return %ret
}

func [stub] @`static Foundation.Data._unconditionallyBridgeFromObjectiveC(__C.NSData?) -> Foundation.Data` : $`@owned Data` {
bb0(%0 : $`@guaranteed Optional<NSData>`, %1 : $`@thin Data.Type`):
  %ret = new $`@owned Data`
  return %ret
}

func @`default argument 0 of SwiftyJSON.JSON.rawString(_: (extension in Foundation):Swift.String.Encoding, options: __C.NSJSONWritingOptions) -> Swift.String?` : $`@out String.Encoding` {
bb0(%0 : $`*String.Encoding`):
  %1 = new $`@thin String.Encoding.Type`
  %2 = function_ref @`static (extension in Foundation):Swift.String.Encoding.utf8.getter : (extension in Foundation):Swift.String.Encoding`, $`@convention(method) (@thin String.Encoding.Type) -> @out String.Encoding`
  %3 = apply %2(%0, %1), $`@out String.Encoding`
  %4 = new $`()`
  return %4
}

func @`default argument 1 of SwiftyJSON.JSON.rawString(_: (extension in Foundation):Swift.String.Encoding, options: __C.NSJSONWritingOptions) -> Swift.String?` : $`JSONSerialization.WritingOptions` {
bb0:
  %0 = literal [int] 1, $`Builtin.Int64`
  %1 = new $`UInt`
  field_write %0 to %1, _value
  %2 = new $`JSONSerialization.WritingOptions`
  return %2
}

func @`SwiftyJSON.JSON.rawString(_: (extension in Foundation):Swift.String.Encoding, options: __C.NSJSONWritingOptions) -> Swift.String?` : $`@owned Optional<String>` {
bb0(encoding : $`*String.Encoding`, opt : $`JSONSerialization.WritingOptions`, self : $`@guaranteed $JSON`):
  %6 = literal [int] 1, $`Builtin.Word`
  %7 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %8 = apply %7(%6), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %9 = field_read %8, 0, $`Array<(writingOptionsKeys, Any)>`
  %10 = field_read %8, 1, $`Builtin.RawPointer`
  %12 = new $`*writingOptionsKeys`
  %12i0 = field_read [alias %12] %10, 0, $`writingOptionsKeys`
  pointer_write %12i0 to %12
  %13 = new $`*Any`
  %13i0 = field_read [alias %13] %10, 1, $`Any`
  pointer_write %13i0 to %13
  %14 = new $`@thin writingOptionsKeys.Type`
  %15 = new $`writingOptionsKeys`
  %15i0 = literal [string] "#writingOptionsKeys.jsonSerialization!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  pointer_write %15 to %12
  pointer_write opt to %13
  %19 = new $`@thin Dictionary<writingOptionsKeys, Any>.Type`
  %20 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %21 = apply %20(%9, %19), $`@owned Dictionary<τ_0_0, τ_0_1>`
  %22 = function_ref @`default argument 2 of SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?`, $`@convention(thin) () -> Int`
  %23 = apply %22(), $`Int`
  %24 = function_ref @`SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?`, $`@convention(method) (@in_guaranteed String.Encoding, @guaranteed Dictionary<writingOptionsKeys, Any>, Int, @guaranteed JSON) -> (@owned Optional<String>, @error Error)`
  %24i0 = apply %24(encoding, %21, %23, self), $`Optional<String>`
  %24i1 = new $`Builtin.Int1`
  cond_br %24i1, true bb1(%24i0), false bb3(%24i0)

bb1(%26 : $`@owned $Optional<String>`):
  br bb2(%26)

bb2(%29 : $`@owned $Optional<String>`):
  return %29

bb3(%31 : $`@owned $Error`):
  error = assign %31, $`Error`
  %36 = literal [int] 2, $`Builtin.Word`
  %37 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %38 = apply %37(%36), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %39 = field_read %38, 0, $`Array<Any>`
  %40 = field_read %38, 1, $`Builtin.RawPointer`
  %42 = literal [string] "Could not serialize object to JSON because:", $`$Builtin.RawPointer`
  %43 = literal [int] 43, $`Builtin.Word`
  %44 = literal [int] -1, $`Builtin.Int1`
  %45 = new $`@thin String.Type`
  %46 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %47 = apply %46(%42, %43, %44, %45), $`@owned String`
  pointer_write %47 to %40
  %50 = literal [int] 1, $`Builtin.Word`
  %54 = new $`*@opened("36AD939A-8364-11EB-A9E1-ACDE48001122") Error`
  %53i0 = pointer_read error, $`@opened("36AD939A-8364-11EB-A9E1-ACDE48001122") Error`
  pointer_write %53i0 to %54
  %56 = function_ref @`(extension in Foundation):Swift.Error.localizedDescription.getter : Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : Error> (@in_guaranteed τ_0_0) -> @owned String`
  %57 = apply %56(%54), $`@owned String`
  pointer_write %57 to %40
  %63 = function_ref @`default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) () -> @owned String`
  %64 = apply %63(), $`@owned String`
  %65 = function_ref @`default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) () -> @owned String`
  %66 = apply %65(), $`@owned String`
  %67 = function_ref @`Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()`
  %68 = apply %67(%39, %64, %66), $`()`
  %72 = new $`Optional<String>`
  %72i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %72i0 to %72, type
  br bb2(%72)
}

func @`default argument 2 of SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?` : $`Int` {
bb0:
  %0 = literal [int] 10, $`Builtin.Int64`
  %1 = new $`Int`
  field_write %0 to %1, _value
  return %1
}

func @`SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?` : $`(@owned Optional<String>, @error Error)` {
bb0(encoding : $`*String.Encoding`, options : $`@guaranteed $Dictionary<writingOptionsKeys, Any>`, maxObjectDepth : $`Int`, self : $`@guaranteed $JSON`):
  %9 = literal [int] 0, $`Builtin.Int64`
  %10 = field_read maxObjectDepth, _value, $`Any`
  %11i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %11 = apply %11i0(%9, %10), $`Builtin.Int1`
  cond_br %11, true bb1, false bb63

bb1:
  %13 = field_read self, type, $`Any`
  switch_enum %13, case "#Type.dictionary!enumelt" : bb2, case "#Type.array!enumelt" : bb30, case "#Type.string!enumelt" : bb58, case "#Type.number!enumelt" : bb59, case "#Type.bool!enumelt" : bb60, case "#Type.null!enumelt" : bb61, default bb62

bb2:
  %15 = new $`*Bool`
  %16 = new $`*Optional<Any>`
  %17 = new $`@thin writingOptionsKeys.Type`
  %18 = new $`writingOptionsKeys`
  %18i0 = literal [string] "#writingOptionsKeys.castNilToNSNull!enumelt", $`Builtin.RawPointer`
  field_write %18i0 to %18, type
  %19 = new $`*writingOptionsKeys`
  pointer_write %18 to %19
  %21 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %22 = apply %21(%16, %19, options), $`@out Optional<τ_0_1>`
  %16i0 = pointer_read %16, $`Optional<Any>`
  switch_enum %16i0, case "#Optional.some!enumelt" : bb3, case "#Optional.none!enumelt" : bb22

bb3:
  %25 = new $`*Any`
  %25i0 = field_read [alias %25] %16, data, $`Any`
  pointer_write %25i0 to %25
  %26 = new $`*Bool`
  %25i1 = binary_op %25 [arb] %26, $`Builtin.Int1`
  cond_br %25i1, true bb4, false bb5

bb4:
  %28 = pointer_read %26, $`Bool`
  %29 = new $`Optional<Bool>`
  %29i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %29i0 to %29, type
  field_write %28 to %29, data
  br bb6(%29)

bb5:
  %32 = new $`Optional<Bool>`
  %32i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %32i0 to %32, type
  br bb6(%32)

bb6(%35 : $`Optional<Bool>`):
  br bb7(%35)

bb7(%38 : $`Optional<Bool>`):
  %39 = new $`*Optional<Bool>`
  pointer_write %38 to %39
  %39i0 = pointer_read %39, $`Optional<Bool>`
  switch_enum %39i0, case "#Optional.some!enumelt" : bb8, case "#Optional.none!enumelt" : bb9

bb8:
  %42 = new $`*Any`
  %42i0 = field_read [alias %42] %39, data, $`Any`
  pointer_write %42i0 to %42
  %43 = pointer_read %42, $`Bool`
  pointer_write %43 to %15
  br bb10

bb9:
  %47 = literal [int] 0, $`Builtin.Int1`
  %48 = new $`Bool`
  pointer_write %48 to %15
  %50 = new $`()`
  br bb10

bb10:
  %53 = new $`()`
  %54 = pointer_read %15, $`Bool`
  %55 = field_read %54, _value, $`Any`
  %56 = literal [int] -1, $`Builtin.Int1`
  %57i0 = builtin_ref @`xor_Int1`, $`Any`
  %57 = apply %57i0(%55, %56), $`Builtin.Int1`
  cond_br %57, true bb11, false bb23

bb11:
  %60 = new $`*JSONSerialization.WritingOptions`
  %61 = new $`*Optional<Any>`
  %62 = new $`@thin writingOptionsKeys.Type`
  %63 = new $`writingOptionsKeys`
  %63i0 = literal [string] "#writingOptionsKeys.jsonSerialization!enumelt", $`Builtin.RawPointer`
  field_write %63i0 to %63, type
  %64 = new $`*writingOptionsKeys`
  pointer_write %63 to %64
  %66 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %67 = apply %66(%61, %64, options), $`@out Optional<τ_0_1>`
  %61i0 = pointer_read %61, $`Optional<Any>`
  switch_enum %61i0, case "#Optional.some!enumelt" : bb12, case "#Optional.none!enumelt" : bb21

bb12:
  %70 = new $`*Any`
  %70i0 = field_read [alias %70] %61, data, $`Any`
  pointer_write %70i0 to %70
  %71 = new $`*JSONSerialization.WritingOptions`
  %70i1 = binary_op %70 [arb] %71, $`Builtin.Int1`
  cond_br %70i1, true bb13, false bb14

bb13:
  %73 = pointer_read %71, $`JSONSerialization.WritingOptions`
  %74 = new $`Optional<JSONSerialization.WritingOptions>`
  %74i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %74i0 to %74, type
  field_write %73 to %74, data
  br bb15(%74)

bb14:
  %77 = new $`Optional<JSONSerialization.WritingOptions>`
  %77i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %77i0 to %77, type
  br bb15(%77)

bb15(%80 : $`Optional<JSONSerialization.WritingOptions>`):
  br bb16(%80)

bb16(%83 : $`Optional<JSONSerialization.WritingOptions>`):
  %84 = new $`*Optional<JSONSerialization.WritingOptions>`
  pointer_write %83 to %84
  %84i0 = pointer_read %84, $`Optional<JSONSerialization.WritingOptions>`
  switch_enum %84i0, case "#Optional.some!enumelt" : bb17, case "#Optional.none!enumelt" : bb18

bb17:
  %87 = new $`*Any`
  %87i0 = field_read [alias %87] %84, data, $`Any`
  pointer_write %87i0 to %87
  %88 = pointer_read %87, $`JSONSerialization.WritingOptions`
  pointer_write %88 to %60
  br bb19

bb18:
  %92 = literal [int] 1, $`Builtin.Int64`
  %93 = new $`UInt`
  field_write %92 to %93, _value
  %94 = new $`JSONSerialization.WritingOptions`
  pointer_write %94 to %60
  %96 = new $`()`
  br bb19

bb19:
  %99 = new $`()`
  jsonOption = pointer_read %60, $`JSONSerialization.WritingOptions`
  %103 = function_ref @`SwiftyJSON.JSON.rawData(options: __C.NSJSONWritingOptions) throws -> Foundation.Data`, $`@convention(method) (JSONSerialization.WritingOptions, @guaranteed JSON) -> (@owned Data, @error Error)`
  %103i0 = apply %103(jsonOption, self), $`Data`
  %103i1 = new $`Builtin.Int1`
  cond_br %103i1, true bb20(%103i0), false bb66(%103i0)

bb20(data : $`@owned $Data`):
  %107 = new $`@thin String.Type`
  %109 = new $`*String.Encoding`
  %0i0 = pointer_read encoding, $`String.Encoding`
  pointer_write %0i0 to %109
  %111 = function_ref @`(extension in Foundation):Swift.String.init(data: __shared Foundation.Data, encoding: (extension in Foundation):Swift.String.Encoding) -> Swift.String?`, $`@convention(method) (@guaranteed Data, @in String.Encoding, @thin String.Type) -> @owned Optional<String>`
  %112 = apply %111(data, %109, %107), $`@owned Optional<String>`
  br bb64(%112)

bb21:
  %119 = new $`Optional<JSONSerialization.WritingOptions>`
  %119i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %119i0 to %119, type
  br bb16(%119)

bb22:
  %123 = new $`Optional<Bool>`
  %123i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %123i0 to %123, type
  br bb7(%123)

bb23:
  %125 = new $`*Any`
  %126 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %127 = apply %126(%125, self), $`@out Any`
  %128 = new $`*Dictionary<String, Optional<Any>>`
  %125i0 = binary_op %125 [arb] %128, $`Builtin.Int1`
  cond_br %125i0, true bb24, false bb25

bb24:
  %130 = pointer_read %128, $`Dictionary<String, Optional<Any>>`
  %131 = new $`Optional<Dictionary<String, Optional<Any>>>`
  %131i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %131i0 to %131, type
  field_write %130 to %131, data
  br bb26(%131)

bb25:
  %134 = new $`Optional<Dictionary<String, Optional<Any>>>`
  %134i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %134i0 to %134, type
  br bb26(%134)

bb26(%137 : $`@owned $Optional<Dictionary<String, Optional<Any>>>`):
  switch_enum %137, case "#Optional.some!enumelt" : bb27, case "#Optional.none!enumelt" : bb29

bb27(dict : $`@owned $Dictionary<String, Optional<Any>>`):
  %143 = function_ref @`Swift.Dictionary.keys.getter : [A : B].Keys`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned Dictionary<τ_0_0, τ_0_1>.Keys`
  %144 = apply %143(dict), $`@owned Dictionary<τ_0_0, τ_0_1>.Keys`
  %145 = new $`*Dictionary<String, Optional<Any>>.Keys`
  pointer_write %144 to %145
  %147 = function_ref @`closure #1 (Swift.String) throws -> Swift.String in SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?`, $`@convention(thin) (@guaranteed String, @guaranteed Dictionary<String, Optional<Any>>, @in_guaranteed String.Encoding, @guaranteed Dictionary<writingOptionsKeys, Any>, Int) -> (@owned String, @error Error)`
  %148 = assign dict, $`Dictionary<String, Optional<Any>>`
  %149 = new $`*String.Encoding`
  %0i1 = pointer_read encoding, $`String.Encoding`
  pointer_write %0i1 to %149
  %151 = assign options, $`Dictionary<writingOptionsKeys, Any>`
  %152 = apply %147(%148, %149, %151, maxObjectDepth), $`(@owned String, @error Error)`
  %156 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@guaranteed Swift.String) -> (@owned Swift.String, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Swift.String) -> (@out Swift.String, @error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed String, @noescape @callee_guaranteed (@guaranteed String) -> (@owned String, @error Error)) -> (@out String, @error Error)`
  %157 = apply %156(%152), $`(@out String, @error Error)`
  %159 = function_ref @`(extension in Swift):Swift.Collection.map<A>((A.Element) throws -> A1) throws -> [A1]`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection><τ_1_0> (@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@owned Array<τ_1_0>, @error Error)`
  %159i0 = apply %159(%157, %145), $`Array<τ_1_0>`
  %159i1 = new $`Builtin.Int1`
  cond_br %159i1, true bb28(%159i0), false bb67(%159i0)

bb28(body : $`@owned $Array<String>`):
  %172 = new $`*DefaultStringInterpolation`
  %173 = literal [int] 2, $`Builtin.Int64`
  %174 = new $`Int`
  field_write %173 to %174, _value
  %175 = literal [int] 1, $`Builtin.Int64`
  %176 = new $`Int`
  field_write %175 to %176, _value
  %177 = new $`@thin DefaultStringInterpolation.Type`
  %178 = function_ref @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation`, $`@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation`
  %179 = apply %178(%174, %176, %177), $`@owned DefaultStringInterpolation`
  pointer_write %179 to %172
  %181 = literal [string] "{", $`$Builtin.RawPointer`
  %182 = literal [int] 1, $`Builtin.Word`
  %183 = literal [int] -1, $`Builtin.Int1`
  %184 = new $`@thin String.Type`
  %185 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %186 = apply %185(%181, %182, %183, %184), $`@owned String`
  %188 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %189 = apply %188(%186, %172), $`()`
  %193 = new $`*Array<String>`
  pointer_write body to %193
  %195 = literal [string] ",", $`$Builtin.RawPointer`
  %196 = literal [int] 1, $`Builtin.Word`
  %197 = literal [int] -1, $`Builtin.Int1`
  %198 = new $`@thin String.Type`
  %199 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %200 = apply %199(%195, %196, %197, %198), $`@owned String`
  %201 = function_ref @`(extension in Swift):Swift.BidirectionalCollection< where A.Element == Swift.String>.joined(separator: Swift.String) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : BidirectionalCollection, τ_0_0.Element == String> (@guaranteed String, @in_guaranteed τ_0_0) -> @owned String`
  %202 = apply %201(%200, %193), $`@owned String`
  %206 = new $`*String`
  pointer_write %202 to %206
  %209 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %210 = apply %209(%206, %172), $`()`
  %214 = literal [string] "}", $`$Builtin.RawPointer`
  %215 = literal [int] 1, $`Builtin.Word`
  %216 = literal [int] -1, $`Builtin.Int1`
  %217 = new $`@thin String.Type`
  %218 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %219 = apply %218(%214, %215, %216, %217), $`@owned String`
  %221 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %222 = apply %221(%219, %172), $`()`
  %225 = pointer_read %172, $`DefaultStringInterpolation`
  %228 = new $`@thin String.Type`
  %229 = function_ref @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String`, $`@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String`
  %230 = apply %229(%225, %228), $`@owned String`
  %231 = new $`Optional<String>`
  %231i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %231i0 to %231, type
  field_write %230 to %231, data
  br bb64(%231)

bb29:
  %236 = new $`Optional<String>`
  %236i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %236i0 to %236, type
  br bb64(%236)

bb30:
  %238 = new $`*Bool`
  %239 = new $`*Optional<Any>`
  %240 = new $`@thin writingOptionsKeys.Type`
  %241 = new $`writingOptionsKeys`
  %241i0 = literal [string] "#writingOptionsKeys.castNilToNSNull!enumelt", $`Builtin.RawPointer`
  field_write %241i0 to %241, type
  %242 = new $`*writingOptionsKeys`
  pointer_write %241 to %242
  %244 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %245 = apply %244(%239, %242, options), $`@out Optional<τ_0_1>`
  %239i0 = pointer_read %239, $`Optional<Any>`
  switch_enum %239i0, case "#Optional.some!enumelt" : bb31, case "#Optional.none!enumelt" : bb50

bb31:
  %248 = new $`*Any`
  %248i0 = field_read [alias %248] %239, data, $`Any`
  pointer_write %248i0 to %248
  %249 = new $`*Bool`
  %248i1 = binary_op %248 [arb] %249, $`Builtin.Int1`
  cond_br %248i1, true bb32, false bb33

bb32:
  %251 = pointer_read %249, $`Bool`
  %252 = new $`Optional<Bool>`
  %252i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %252i0 to %252, type
  field_write %251 to %252, data
  br bb34(%252)

bb33:
  %255 = new $`Optional<Bool>`
  %255i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %255i0 to %255, type
  br bb34(%255)

bb34(%258 : $`Optional<Bool>`):
  br bb35(%258)

bb35(%261 : $`Optional<Bool>`):
  %262 = new $`*Optional<Bool>`
  pointer_write %261 to %262
  %262i0 = pointer_read %262, $`Optional<Bool>`
  switch_enum %262i0, case "#Optional.some!enumelt" : bb36, case "#Optional.none!enumelt" : bb37

bb36:
  %265 = new $`*Any`
  %265i0 = field_read [alias %265] %262, data, $`Any`
  pointer_write %265i0 to %265
  %266 = pointer_read %265, $`Bool`
  pointer_write %266 to %238
  br bb38

bb37:
  %270 = literal [int] 0, $`Builtin.Int1`
  %271 = new $`Bool`
  pointer_write %271 to %238
  %273 = new $`()`
  br bb38

bb38:
  %276 = new $`()`
  %277 = pointer_read %238, $`Bool`
  %278 = field_read %277, _value, $`Any`
  %279 = literal [int] -1, $`Builtin.Int1`
  %280i0 = builtin_ref @`xor_Int1`, $`Any`
  %280 = apply %280i0(%278, %279), $`Builtin.Int1`
  cond_br %280, true bb39, false bb51

bb39:
  %283 = new $`*JSONSerialization.WritingOptions`
  %284 = new $`*Optional<Any>`
  %285 = new $`@thin writingOptionsKeys.Type`
  %286 = new $`writingOptionsKeys`
  %286i0 = literal [string] "#writingOptionsKeys.jsonSerialization!enumelt", $`Builtin.RawPointer`
  field_write %286i0 to %286, type
  %287 = new $`*writingOptionsKeys`
  pointer_write %286 to %287
  %289 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %290 = apply %289(%284, %287, options), $`@out Optional<τ_0_1>`
  %284i0 = pointer_read %284, $`Optional<Any>`
  switch_enum %284i0, case "#Optional.some!enumelt" : bb40, case "#Optional.none!enumelt" : bb49

bb40:
  %293 = new $`*Any`
  %293i0 = field_read [alias %293] %284, data, $`Any`
  pointer_write %293i0 to %293
  %294 = new $`*JSONSerialization.WritingOptions`
  %293i1 = binary_op %293 [arb] %294, $`Builtin.Int1`
  cond_br %293i1, true bb41, false bb42

bb41:
  %296 = pointer_read %294, $`JSONSerialization.WritingOptions`
  %297 = new $`Optional<JSONSerialization.WritingOptions>`
  %297i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %297i0 to %297, type
  field_write %296 to %297, data
  br bb43(%297)

bb42:
  %300 = new $`Optional<JSONSerialization.WritingOptions>`
  %300i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %300i0 to %300, type
  br bb43(%300)

bb43(%303 : $`Optional<JSONSerialization.WritingOptions>`):
  br bb44(%303)

bb44(%306 : $`Optional<JSONSerialization.WritingOptions>`):
  %307 = new $`*Optional<JSONSerialization.WritingOptions>`
  pointer_write %306 to %307
  %307i0 = pointer_read %307, $`Optional<JSONSerialization.WritingOptions>`
  switch_enum %307i0, case "#Optional.some!enumelt" : bb45, case "#Optional.none!enumelt" : bb46

bb45:
  %310 = new $`*Any`
  %310i0 = field_read [alias %310] %307, data, $`Any`
  pointer_write %310i0 to %310
  %311 = pointer_read %310, $`JSONSerialization.WritingOptions`
  pointer_write %311 to %283
  br bb47

bb46:
  %315 = literal [int] 1, $`Builtin.Int64`
  %316 = new $`UInt`
  field_write %315 to %316, _value
  %317 = new $`JSONSerialization.WritingOptions`
  pointer_write %317 to %283
  %319 = new $`()`
  br bb47

bb47:
  %322 = new $`()`
  %323 = pointer_read %283, $`JSONSerialization.WritingOptions`
  %326 = function_ref @`SwiftyJSON.JSON.rawData(options: __C.NSJSONWritingOptions) throws -> Foundation.Data`, $`@convention(method) (JSONSerialization.WritingOptions, @guaranteed JSON) -> (@owned Data, @error Error)`
  %326i0 = apply %326(%323, self), $`Data`
  %326i1 = new $`Builtin.Int1`
  cond_br %326i1, true bb48(%326i0), false bb69(%326i0)

bb48(%328 : $`@owned $Data`):
  %330 = new $`@thin String.Type`
  %332 = new $`*String.Encoding`
  %0i2 = pointer_read encoding, $`String.Encoding`
  pointer_write %0i2 to %332
  %334 = function_ref @`(extension in Foundation):Swift.String.init(data: __shared Foundation.Data, encoding: (extension in Foundation):Swift.String.Encoding) -> Swift.String?`, $`@convention(method) (@guaranteed Data, @in String.Encoding, @thin String.Type) -> @owned Optional<String>`
  %335 = apply %334(%328, %332, %330), $`@owned Optional<String>`
  br bb64(%335)

bb49:
  %342 = new $`Optional<JSONSerialization.WritingOptions>`
  %342i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %342i0 to %342, type
  br bb44(%342)

bb50:
  %346 = new $`Optional<Bool>`
  %346i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %346i0 to %346, type
  br bb35(%346)

bb51:
  %348 = new $`*Any`
  %349 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %350 = apply %349(%348, self), $`@out Any`
  %351 = new $`*Array<Optional<Any>>`
  %348i0 = binary_op %348 [arb] %351, $`Builtin.Int1`
  cond_br %348i0, true bb52, false bb53

bb52:
  %353 = pointer_read %351, $`Array<Optional<Any>>`
  %354 = new $`Optional<Array<Optional<Any>>>`
  %354i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %354i0 to %354, type
  field_write %353 to %354, data
  br bb54(%354)

bb53:
  %357 = new $`Optional<Array<Optional<Any>>>`
  %357i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %357i0 to %357, type
  br bb54(%357)

bb54(%360 : $`@owned $Optional<Array<Optional<Any>>>`):
  switch_enum %360, case "#Optional.some!enumelt" : bb55, case "#Optional.none!enumelt" : bb57

bb55(array : $`@owned $Array<Optional<Any>>`):
  %366 = new $`*Array<Optional<Any>>`
  pointer_write array to %366
  %368 = function_ref @`closure #2 (Any?) throws -> Swift.String in SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?`, $`@convention(thin) (@in_guaranteed Optional<Any>, @in_guaranteed String.Encoding, @guaranteed Dictionary<writingOptionsKeys, Any>, Int) -> (@owned String, @error Error)`
  %369 = new $`*String.Encoding`
  %0i3 = pointer_read encoding, $`String.Encoding`
  pointer_write %0i3 to %369
  %371 = assign options, $`Dictionary<writingOptionsKeys, Any>`
  %372 = apply %368(%369, %371, maxObjectDepth), $`(@owned String, @error Error)`
  %375 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@in_guaranteed Any?) -> (@owned Swift.String, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@out Swift.String, @error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed Optional<Any>, @noescape @callee_guaranteed (@in_guaranteed Optional<Any>) -> (@owned String, @error Error)) -> (@out String, @error Error)`
  %376 = apply %375(%372), $`(@out String, @error Error)`
  %378 = function_ref @`(extension in Swift):Swift.Collection.map<A>((A.Element) throws -> A1) throws -> [A1]`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection><τ_1_0> (@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@owned Array<τ_1_0>, @error Error)`
  %378i0 = apply %378(%376, %366), $`Array<τ_1_0>`
  %378i1 = new $`Builtin.Int1`
  cond_br %378i1, true bb56(%378i0), false bb70(%378i0)

bb56(%380 : $`@owned $Array<String>`):
  %389 = new $`*DefaultStringInterpolation`
  %390 = literal [int] 2, $`Builtin.Int64`
  %391 = new $`Int`
  field_write %390 to %391, _value
  %392 = literal [int] 1, $`Builtin.Int64`
  %393 = new $`Int`
  field_write %392 to %393, _value
  %394 = new $`@thin DefaultStringInterpolation.Type`
  %395 = function_ref @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation`, $`@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation`
  %396 = apply %395(%391, %393, %394), $`@owned DefaultStringInterpolation`
  pointer_write %396 to %389
  %398 = literal [string] "[", $`$Builtin.RawPointer`
  %399 = literal [int] 1, $`Builtin.Word`
  %400 = literal [int] -1, $`Builtin.Int1`
  %401 = new $`@thin String.Type`
  %402 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %403 = apply %402(%398, %399, %400, %401), $`@owned String`
  %405 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %406 = apply %405(%403, %389), $`()`
  %410 = new $`*Array<String>`
  pointer_write %380 to %410
  %412 = literal [string] ",", $`$Builtin.RawPointer`
  %413 = literal [int] 1, $`Builtin.Word`
  %414 = literal [int] -1, $`Builtin.Int1`
  %415 = new $`@thin String.Type`
  %416 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %417 = apply %416(%412, %413, %414, %415), $`@owned String`
  %418 = function_ref @`(extension in Swift):Swift.BidirectionalCollection< where A.Element == Swift.String>.joined(separator: Swift.String) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : BidirectionalCollection, τ_0_0.Element == String> (@guaranteed String, @in_guaranteed τ_0_0) -> @owned String`
  %419 = apply %418(%417, %410), $`@owned String`
  %423 = new $`*String`
  pointer_write %419 to %423
  %426 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %427 = apply %426(%423, %389), $`()`
  %431 = literal [string] "]", $`$Builtin.RawPointer`
  %432 = literal [int] 1, $`Builtin.Word`
  %433 = literal [int] -1, $`Builtin.Int1`
  %434 = new $`@thin String.Type`
  %435 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %436 = apply %435(%431, %432, %433, %434), $`@owned String`
  %438 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %439 = apply %438(%436, %389), $`()`
  %442 = pointer_read %389, $`DefaultStringInterpolation`
  %445 = new $`@thin String.Type`
  %446 = function_ref @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String`, $`@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String`
  %447 = apply %446(%442, %445), $`@owned String`
  %448 = new $`Optional<String>`
  %448i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %448i0 to %448, type
  field_write %447 to %448, data
  br bb64(%448)

bb57:
  %453 = new $`Optional<String>`
  %453i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %453i0 to %453, type
  br bb64(%453)

bb58:
  %455 = field_read self, rawString, $`Any`
  %456 = assign %455, $`String`
  %457 = new $`Optional<String>`
  %457i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %457i0 to %457, type
  field_write %456 to %457, data
  br bb64(%457)

bb59:
  %459 = field_read self, rawNumber, $`Any`
  %460 = assign %459, $`NSNumber`
  %462 = builtin_ref @`#NSNumber.stringValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> @autoreleased Optional<NSString>`
  %463 = apply %462(%460), $`@autoreleased Optional<NSString>`
  %464 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %465 = new $`@thin String.Type`
  %466 = apply %464(%463, %465), $`@owned String`
  %469 = new $`Optional<String>`
  %469i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %469i0 to %469, type
  field_write %466 to %469, data
  br bb64(%469)

bb60:
  %472 = field_read self, rawBool, $`Any`
  %473 = function_ref @`Swift.Bool.description.getter : Swift.String`, $`@convention(method) (Bool) -> @owned String`
  %474 = apply %473(%472), $`@owned String`
  %475 = new $`Optional<String>`
  %475i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %475i0 to %475, type
  field_write %474 to %475, data
  br bb64(%475)

bb61:
  %477 = literal [string] "null", $`$Builtin.RawPointer`
  %478 = literal [int] 4, $`Builtin.Word`
  %479 = literal [int] -1, $`Builtin.Int1`
  %480 = new $`@thin String.Type`
  %481 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %482 = apply %481(%477, %478, %479, %480), $`@owned String`
  %483 = new $`Optional<String>`
  %483i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %483i0 to %483, type
  field_write %482 to %483, data
  br bb64(%483)

bb62(%485 : $`Type`):
  %486 = new $`Optional<String>`
  %486i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %486i0 to %486, type
  br bb64(%486)

bb63:
  %488 = new $`@thin SwiftyJSONError.Type`
  %489 = new $`SwiftyJSONError`
  %489i0 = literal [string] "#SwiftyJSONError.invalidJSON!enumelt", $`Builtin.RawPointer`
  field_write %489i0 to %489, type
  %490 = new $`*Error`
  pointer_write %489 to %490
  %493i0 = builtin_ref @`willThrow`, $`Any`
  %493 = apply %493i0(%490), $`()`
  return %490

bb64(%495 : $`@owned $Optional<String>`):
  return %495

bb65(%497 : $`@owned $Error`):
  %499 = new $`Optional<String>`
  %499i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %499i0 to %499, type
  br bb64(%499)

bb66(%503 : $`@owned $Error`):
  br bb65(%503)

bb67(%505 : $`@owned $Error`):
  br bb65(%505)

bb68(%517 : $`@owned $Error`):
  %519 = new $`Optional<String>`
  %519i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %519i0 to %519, type
  br bb64(%519)

bb69(%523 : $`@owned $Error`):
  br bb68(%523)

bb70(%525 : $`@owned $Error`):
  br bb68(%525)
}

func [stub] @`(extension in Foundation):Swift.Error.localizedDescription.getter : Swift.String` : $`@owned String` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned String`
  return %ret
}

func @`default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`@owned String` {
bb0:
  %0 = literal [string] " ", $`$Builtin.RawPointer`
  %1 = literal [int] 1, $`Builtin.Word`
  %2 = literal [int] -1, $`Builtin.Int1`
  %3 = new $`@thin String.Type`
  %4 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %5 = apply %4(%0, %1, %2, %3), $`@owned String`
  return %5
}

func @`default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`@owned String` {
bb0:
  %0 = literal [string] "\n", $`$Builtin.RawPointer`
  %1 = literal [int] 1, $`Builtin.Word`
  %2 = literal [int] -1, $`Builtin.Int1`
  %3 = new $`@thin String.Type`
  %4 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %5 = apply %4(%0, %1, %2, %3), $`@owned String`
  return %5
}

func [stub] @`Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`()` {
bb0(%0 : $`@guaranteed Array<Any>`, %1 : $`@guaranteed String`, %2 : $`@guaranteed String`):
  %ret = new $`()`
  return %ret
}

func @`SwiftyJSON.JSON.rawString([SwiftyJSON.writingOptionsKeys : Any]) -> Swift.String?` : $`@owned Optional<String>` {
bb0(options : $`@guaranteed $Dictionary<writingOptionsKeys, Any>`, self : $`@guaranteed $JSON`):
  %4 = new $`*String.Encoding`
  %5 = new $`*Optional<String.Encoding>`
  %6 = new $`*Optional<Any>`
  %7 = new $`@thin writingOptionsKeys.Type`
  %8 = new $`writingOptionsKeys`
  %8i0 = literal [string] "#writingOptionsKeys.encoding!enumelt", $`Builtin.RawPointer`
  field_write %8i0 to %8, type
  %9 = new $`*writingOptionsKeys`
  pointer_write %8 to %9
  %11 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %12 = apply %11(%6, %9, options), $`@out Optional<τ_0_1>`
  %6i0 = pointer_read %6, $`Optional<Any>`
  switch_enum %6i0, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb19

bb1:
  %15 = new $`*Any`
  %15i0 = field_read [alias %15] %6, data, $`Any`
  pointer_write %15i0 to %15
  %16 = new $`*Any`
  %16i0 = field_read [alias %16] %5, data, $`Any`
  pointer_write %16i0 to %16
  %15i1 = binary_op %15 [arb] %16, $`Builtin.Int1`
  cond_br %15i1, true bb2, false bb3

bb2:
  %5i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  br bb4

bb3:
  %5i1 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i1 to %5, type
  br bb4

bb4:
  br bb5

bb5:
  %24 = new $`*Optional<String.Encoding>`
  %5i2 = pointer_read %5, $`Optional<String.Encoding>`
  pointer_write %5i2 to %24
  %24i0 = pointer_read %24, $`Optional<String.Encoding>`
  switch_enum %24i0, case "#Optional.some!enumelt" : bb6, case "#Optional.none!enumelt" : bb7

bb6:
  %27 = new $`*Any`
  %27i0 = field_read [alias %27] %24, data, $`Any`
  pointer_write %27i0 to %27
  %27i1 = pointer_read %27, $`String.Encoding`
  pointer_write %27i1 to %4
  br bb8

bb7:
  %31 = new $`@thin String.Encoding.Type`
  %32 = function_ref @`static (extension in Foundation):Swift.String.Encoding.utf8.getter : (extension in Foundation):Swift.String.Encoding`, $`@convention(method) (@thin String.Encoding.Type) -> @out String.Encoding`
  %33 = apply %32(%4, %31), $`@out String.Encoding`
  %34 = new $`()`
  br bb8

bb8:
  %37 = new $`()`
  %40 = new $`*Int`
  %41 = new $`*Optional<Any>`
  %42 = new $`@thin writingOptionsKeys.Type`
  %43 = new $`writingOptionsKeys`
  %43i0 = literal [string] "#writingOptionsKeys.maxObjextDepth!enumelt", $`Builtin.RawPointer`
  field_write %43i0 to %43, type
  %44 = new $`*writingOptionsKeys`
  pointer_write %43 to %44
  %46 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %47 = apply %46(%41, %44, options), $`@out Optional<τ_0_1>`
  %41i0 = pointer_read %41, $`Optional<Any>`
  switch_enum %41i0, case "#Optional.some!enumelt" : bb9, case "#Optional.none!enumelt" : bb18

bb9:
  %50 = new $`*Any`
  %50i0 = field_read [alias %50] %41, data, $`Any`
  pointer_write %50i0 to %50
  %51 = new $`*Int`
  %50i1 = binary_op %50 [arb] %51, $`Builtin.Int1`
  cond_br %50i1, true bb10, false bb11

bb10:
  %53 = pointer_read %51, $`Int`
  %54 = new $`Optional<Int>`
  %54i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %54i0 to %54, type
  field_write %53 to %54, data
  br bb12(%54)

bb11:
  %57 = new $`Optional<Int>`
  %57i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %57i0 to %57, type
  br bb12(%57)

bb12(%60 : $`Optional<Int>`):
  br bb13(%60)

bb13(%63 : $`Optional<Int>`):
  %64 = new $`*Optional<Int>`
  pointer_write %63 to %64
  %64i0 = pointer_read %64, $`Optional<Int>`
  switch_enum %64i0, case "#Optional.some!enumelt" : bb14, case "#Optional.none!enumelt" : bb15

bb14:
  %67 = new $`*Any`
  %67i0 = field_read [alias %67] %64, data, $`Any`
  pointer_write %67i0 to %67
  %68 = pointer_read %67, $`Int`
  pointer_write %68 to %40
  br bb16

bb15:
  %72 = literal [int] 10, $`Builtin.Int64`
  %73 = new $`Int`
  field_write %72 to %73, _value
  pointer_write %73 to %40
  %75 = new $`()`
  br bb16

bb16:
  %78 = new $`()`
  maxObjectDepth = pointer_read %40, $`Int`
  %82 = function_ref @`SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?`, $`@convention(method) (@in_guaranteed String.Encoding, @guaranteed Dictionary<writingOptionsKeys, Any>, Int, @guaranteed JSON) -> (@owned Optional<String>, @error Error)`
  %82i0 = apply %82(%4, options, maxObjectDepth, self), $`Optional<String>`
  %82i1 = new $`Builtin.Int1`
  cond_br %82i1, true bb17(%82i0), false bb21(%82i0)

bb17(%84 : $`@owned $Optional<String>`):
  br bb20(%84)

bb18:
  %90 = new $`Optional<Int>`
  %90i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %90i0 to %90, type
  br bb13(%90)

bb19:
  %5i3 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i3 to %5, type
  br bb5

bb20(%96 : $`@owned $Optional<String>`):
  return %96

bb21(%98 : $`@owned $Error`):
  error = assign %98, $`Error`
  %102 = literal [int] 2, $`Builtin.Word`
  %103 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %104 = apply %103(%102), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %105 = field_read %104, 0, $`Array<Any>`
  %106 = field_read %104, 1, $`Builtin.RawPointer`
  %108 = literal [string] "Could not serialize object to JSON because:", $`$Builtin.RawPointer`
  %109 = literal [int] 43, $`Builtin.Word`
  %110 = literal [int] -1, $`Builtin.Int1`
  %111 = new $`@thin String.Type`
  %112 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %113 = apply %112(%108, %109, %110, %111), $`@owned String`
  pointer_write %113 to %106
  %116 = literal [int] 1, $`Builtin.Word`
  %120 = new $`*@opened("36ADDF8A-8364-11EB-A9E1-ACDE48001122") Error`
  %119i0 = pointer_read error, $`@opened("36ADDF8A-8364-11EB-A9E1-ACDE48001122") Error`
  pointer_write %119i0 to %120
  %122 = function_ref @`(extension in Foundation):Swift.Error.localizedDescription.getter : Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : Error> (@in_guaranteed τ_0_0) -> @owned String`
  %123 = apply %122(%120), $`@owned String`
  pointer_write %123 to %106
  %129 = function_ref @`default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) () -> @owned String`
  %130 = apply %129(), $`@owned String`
  %131 = function_ref @`default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) () -> @owned String`
  %132 = apply %131(), $`@owned String`
  %133 = function_ref @`Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()`
  %134 = apply %133(%105, %130, %132), $`()`
  %138 = new $`Optional<String>`
  %138i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %138i0 to %138, type
  br bb20(%138)
}

func @`default argument 0 of SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?` : $`@out String.Encoding` {
bb0(%0 : $`*String.Encoding`):
  %1 = new $`@thin String.Encoding.Type`
  %2 = function_ref @`static (extension in Foundation):Swift.String.Encoding.utf8.getter : (extension in Foundation):Swift.String.Encoding`, $`@convention(method) (@thin String.Encoding.Type) -> @out String.Encoding`
  %3 = apply %2(%0, %1), $`@out String.Encoding`
  %4 = new $`()`
  return %4
}

func @`static Swift.Int.> infix(Swift.Int, Swift.Int) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`Int`, %1 : $`Int`, %2 : $`@thin Int.Type`):
  %3 = field_read %1, _value, $`Any`
  %4 = field_read %0, _value, $`Any`
  %5i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %5 = apply %5i0(%3, %4), $`Builtin.Int1`
  %6 = new $`Bool`
  return %6
}

func @`static Swift.Bool.! prefix(Swift.Bool) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`Bool`, %1 : $`@thin Bool.Type`):
  %2 = field_read %0, _value, $`Any`
  %3 = literal [int] -1, $`Builtin.Int1`
  %4i0 = builtin_ref @`xor_Int1`, $`Any`
  %4 = apply %4i0(%2, %3), $`Builtin.Int1`
  %5 = new $`Bool`
  return %5
}

func [stub] @`(extension in Foundation):Swift.String.init(data: __shared Foundation.Data, encoding: (extension in Foundation):Swift.String.Encoding) -> Swift.String?` : $`@owned Optional<String>` {
bb0(%0 : $`@guaranteed Data`, %1 : $`@in String.Encoding`, %2 : $`@thin String.Type`):
  %ret = new $`@owned Optional<String>`
  return %ret
}

func [stub] @`Swift.Dictionary.keys.getter : [A : B].Keys` : $`@owned Dictionary<τ_0_0, τ_0_1>.Keys` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`@owned Dictionary<τ_0_0, τ_0_1>.Keys`
  return %ret
}

func @`closure #1 (Swift.String) throws -> Swift.String in SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?` : $`(@owned String, @error Error)` {
bb0(key : $`@guaranteed $String`, dict : $`@guaranteed $Dictionary<String, Optional<Any>>`, encoding : $`*String.Encoding`, options : $`@guaranteed $Dictionary<writingOptionsKeys, Any>`, maxObjectDepth : $`Int`):
  %11 = new $`*Optional<Any>`
  %12 = assign key, $`String`
  %13 = new $`*Optional<Optional<Any>>`
  %14 = new $`*String`
  pointer_write %12 to %14
  %16 = function_ref @`Swift.Dictionary.subscript.getter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @guaranteed Dictionary<τ_0_0, τ_0_1>) -> @out Optional<τ_0_1>`
  %17 = apply %16(%13, %14, dict), $`@out Optional<τ_0_1>`
  %13i0 = pointer_read %13, $`Optional<Optional<Any>>`
  switch_enum %13i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb1

bb1:
  %24 = new $`*DefaultStringInterpolation`
  %25 = literal [int] 8, $`Builtin.Int64`
  %26 = new $`Int`
  field_write %25 to %26, _value
  %27 = literal [int] 1, $`Builtin.Int64`
  %28 = new $`Int`
  field_write %27 to %28, _value
  %29 = new $`@thin DefaultStringInterpolation.Type`
  %30 = function_ref @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation`, $`@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation`
  %31 = apply %30(%26, %28, %29), $`@owned DefaultStringInterpolation`
  pointer_write %31 to %24
  %33 = literal [string] "\"", $`$Builtin.RawPointer`
  %34 = literal [int] 1, $`Builtin.Word`
  %35 = literal [int] -1, $`Builtin.Int1`
  %36 = new $`@thin String.Type`
  %37 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %38 = apply %37(%33, %34, %35, %36), $`@owned String`
  %40 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %41 = apply %40(%38, %24), $`()`
  %44 = new $`*String`
  pointer_write key to %44
  %47 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %48 = apply %47(%44, %24), $`()`
  %51 = literal [string] "\": null", $`$Builtin.RawPointer`
  %52 = literal [int] 7, $`Builtin.Word`
  %53 = literal [int] -1, $`Builtin.Int1`
  %54 = new $`@thin String.Type`
  %55 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %56 = apply %55(%51, %52, %53, %54), $`@owned String`
  %58 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %59 = apply %58(%56, %24), $`()`
  %62 = pointer_read %24, $`DefaultStringInterpolation`
  %65 = new $`@thin String.Type`
  %66 = function_ref @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String`, $`@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String`
  %67 = apply %66(%62, %65), $`@owned String`
  br bb10(%67)

bb2:
  %69 = new $`*Any`
  %69i0 = field_read [alias %69] %13, data, $`Any`
  pointer_write %69i0 to %69
  %69i1 = pointer_read %69, $`Optional<Any>`
  pointer_write %69i1 to %11
  %72 = new $`*Any`
  %73 = new $`*Optional<Any>`
  %11i0 = pointer_read %11, $`Optional<Any>`
  pointer_write %11i0 to %73
  %73i0 = pointer_read %73, $`Optional<Any>`
  switch_enum %73i0, case "#Optional.some!enumelt" : bb4, case "#Optional.none!enumelt" : bb3

bb3:
  %79 = new $`*DefaultStringInterpolation`
  %80 = literal [int] 8, $`Builtin.Int64`
  %81 = new $`Int`
  field_write %80 to %81, _value
  %82 = literal [int] 1, $`Builtin.Int64`
  %83 = new $`Int`
  field_write %82 to %83, _value
  %84 = new $`@thin DefaultStringInterpolation.Type`
  %85 = function_ref @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation`, $`@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation`
  %86 = apply %85(%81, %83, %84), $`@owned DefaultStringInterpolation`
  pointer_write %86 to %79
  %88 = literal [string] "\"", $`$Builtin.RawPointer`
  %89 = literal [int] 1, $`Builtin.Word`
  %90 = literal [int] -1, $`Builtin.Int1`
  %91 = new $`@thin String.Type`
  %92 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %93 = apply %92(%88, %89, %90, %91), $`@owned String`
  %95 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %96 = apply %95(%93, %79), $`()`
  %99 = new $`*String`
  pointer_write key to %99
  %102 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %103 = apply %102(%99, %79), $`()`
  %106 = literal [string] "\": null", $`$Builtin.RawPointer`
  %107 = literal [int] 7, $`Builtin.Word`
  %108 = literal [int] -1, $`Builtin.Int1`
  %109 = new $`@thin String.Type`
  %110 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %111 = apply %110(%106, %107, %108, %109), $`@owned String`
  %113 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %114 = apply %113(%111, %79), $`()`
  %117 = pointer_read %79, $`DefaultStringInterpolation`
  %120 = new $`@thin String.Type`
  %121 = function_ref @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String`, $`@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String`
  %122 = apply %121(%117, %120), $`@owned String`
  br bb10(%122)

bb4:
  %126 = new $`*Any`
  %126i0 = field_read [alias %126] %73, data, $`Any`
  pointer_write %126i0 to %126
  %126i1 = pointer_read %126, $`Any`
  pointer_write %126i1 to %72
  %129 = new $`@thin JSON.Type`
  %130 = new $`*Any`
  %72i0 = pointer_read %72, $`Any`
  pointer_write %72i0 to %130
  %132 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  nestedValue = apply %132(%130, %129), $`@owned JSON`
  %137 = literal [int] 1, $`Builtin.Int64`
  %138 = field_read maxObjectDepth, _value, $`Any`
  %139 = literal [int] -1, $`Builtin.Int1`
  %140i0 = builtin_ref @`ssub_with_overflow_Int64`, $`Any`
  %140 = apply %140i0(%138, %137, %139), $`(Builtin.Int64, Builtin.Int1)`
  %141 = field_read %140, 0, $`Builtin.Int64`
  %142 = field_read %140, 1, $`Builtin.Int1`
  cond_fail %142
  %144 = new $`Int`
  field_write %141 to %144, _value
  %145 = function_ref @`SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?`, $`@convention(method) (@in_guaranteed String.Encoding, @guaranteed Dictionary<writingOptionsKeys, Any>, Int, @guaranteed JSON) -> (@owned Optional<String>, @error Error)`
  %145i0 = apply %145(encoding, options, %144, nestedValue), $`Optional<String>`
  %145i1 = new $`Builtin.Int1`
  cond_br %145i1, true bb5(%145i0), false bb11(%145i0)

bb5(%147 : $`@owned $Optional<String>`):
  switch_enum %147, case "#Optional.some!enumelt" : bb7, case "#Optional.none!enumelt" : bb6

bb6:
  %150 = new $`@thin SwiftyJSONError.Type`
  %151 = new $`SwiftyJSONError`
  %151i0 = literal [string] "#SwiftyJSONError.elementTooDeep!enumelt", $`Builtin.RawPointer`
  field_write %151i0 to %151, type
  %152 = new $`*Error`
  pointer_write %151 to %152
  %155i0 = builtin_ref @`willThrow`, $`Any`
  %155 = apply %155i0(%152), $`()`
  br bb12(%152)

bb7(nestedString : $`@owned $String`):
  %165 = field_read nestedValue, type, $`Any`
  %166 = new $`*Type`
  pointer_write %165 to %166
  %168 = new $`@thin Type.Type`
  %169 = new $`Type`
  %169i0 = literal [string] "#Type.string!enumelt", $`Builtin.RawPointer`
  field_write %169i0 to %169, type
  %170 = new $`*Type`
  pointer_write %169 to %170
  %172 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %173 = apply %172(%166, %170), $`Bool`
  %177 = field_read %173, _value, $`Any`
  cond_br %177, true bb8, false bb9

bb8:
  %179 = new $`*DefaultStringInterpolation`
  %180 = literal [int] 6, $`Builtin.Int64`
  %181 = new $`Int`
  field_write %180 to %181, _value
  %182 = literal [int] 2, $`Builtin.Int64`
  %183 = new $`Int`
  field_write %182 to %183, _value
  %184 = new $`@thin DefaultStringInterpolation.Type`
  %185 = function_ref @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation`, $`@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation`
  %186 = apply %185(%181, %183, %184), $`@owned DefaultStringInterpolation`
  pointer_write %186 to %179
  %188 = literal [string] "\"", $`$Builtin.RawPointer`
  %189 = literal [int] 1, $`Builtin.Word`
  %190 = literal [int] -1, $`Builtin.Int1`
  %191 = new $`@thin String.Type`
  %192 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %193 = apply %192(%188, %189, %190, %191), $`@owned String`
  %195 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %196 = apply %195(%193, %179), $`()`
  %199 = new $`*String`
  pointer_write key to %199
  %202 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %203 = apply %202(%199, %179), $`()`
  %206 = literal [string] "\": \"", $`$Builtin.RawPointer`
  %207 = literal [int] 4, $`Builtin.Word`
  %208 = literal [int] -1, $`Builtin.Int1`
  %209 = new $`@thin String.Type`
  %210 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %211 = apply %210(%206, %207, %208, %209), $`@owned String`
  %213 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %214 = apply %213(%211, %179), $`()`
  %218 = new $`*String`
  pointer_write nestedString to %218
  %220 = literal [string] "\\", $`$Builtin.RawPointer`
  %221 = literal [int] 1, $`Builtin.Word`
  %222 = literal [int] -1, $`Builtin.Int1`
  %223 = new $`@thin String.Type`
  %224 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %225 = apply %224(%220, %221, %222, %223), $`@owned String`
  %226 = new $`*String`
  pointer_write %225 to %226
  %228 = literal [string] "\\\\", $`$Builtin.RawPointer`
  %229 = literal [int] 2, $`Builtin.Word`
  %230 = literal [int] -1, $`Builtin.Int1`
  %231 = new $`@thin String.Type`
  %232 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %233 = apply %232(%228, %229, %230, %231), $`@owned String`
  %234 = new $`*String`
  pointer_write %233 to %234
  %236 = function_ref @`default argument 2 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> NSString.CompareOptions`
  %237 = apply %236(), $`NSString.CompareOptions`
  %238 = function_ref @`default argument 3 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> Optional<Range<String.Index>>`
  %239 = apply %238(), $`Optional<Range<String.Index>>`
  %240 = function_ref @`(extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> (@in_guaranteed τ_1_0, @in_guaranteed τ_1_1, NSString.CompareOptions, Optional<Range<String.Index>>, @in_guaranteed τ_0_0) -> @owned String`
  %241 = apply %240(%226, %234, %237, %239, %218), $`@owned String`
  %248 = new $`*String`
  pointer_write %241 to %248
  %250 = literal [string] "\"", $`$Builtin.RawPointer`
  %251 = literal [int] 1, $`Builtin.Word`
  %252 = literal [int] -1, $`Builtin.Int1`
  %253 = new $`@thin String.Type`
  %254 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %255 = apply %254(%250, %251, %252, %253), $`@owned String`
  %256 = new $`*String`
  pointer_write %255 to %256
  %258 = literal [string] "\\\"", $`$Builtin.RawPointer`
  %259 = literal [int] 2, $`Builtin.Word`
  %260 = literal [int] -1, $`Builtin.Int1`
  %261 = new $`@thin String.Type`
  %262 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %263 = apply %262(%258, %259, %260, %261), $`@owned String`
  %264 = new $`*String`
  pointer_write %263 to %264
  %266 = function_ref @`default argument 2 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> NSString.CompareOptions`
  %267 = apply %266(), $`NSString.CompareOptions`
  %268 = function_ref @`default argument 3 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> Optional<Range<String.Index>>`
  %269 = apply %268(), $`Optional<Range<String.Index>>`
  %270 = function_ref @`(extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> (@in_guaranteed τ_1_0, @in_guaranteed τ_1_1, NSString.CompareOptions, Optional<Range<String.Index>>, @in_guaranteed τ_0_0) -> @owned String`
  %271 = apply %270(%256, %264, %267, %269, %248), $`@owned String`
  %278 = new $`*String`
  pointer_write %271 to %278
  %281 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %282 = apply %281(%278, %179), $`()`
  %286 = literal [string] "\"", $`$Builtin.RawPointer`
  %287 = literal [int] 1, $`Builtin.Word`
  %288 = literal [int] -1, $`Builtin.Int1`
  %289 = new $`@thin String.Type`
  %290 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %291 = apply %290(%286, %287, %288, %289), $`@owned String`
  %293 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %294 = apply %293(%291, %179), $`()`
  %297 = pointer_read %179, $`DefaultStringInterpolation`
  %300 = new $`@thin String.Type`
  %301 = function_ref @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String`, $`@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String`
  %302 = apply %301(%297, %300), $`@owned String`
  br bb10(%302)

bb9:
  %310 = new $`*DefaultStringInterpolation`
  %311 = literal [int] 4, $`Builtin.Int64`
  %312 = new $`Int`
  field_write %311 to %312, _value
  %313 = literal [int] 2, $`Builtin.Int64`
  %314 = new $`Int`
  field_write %313 to %314, _value
  %315 = new $`@thin DefaultStringInterpolation.Type`
  %316 = function_ref @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation`, $`@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation`
  %317 = apply %316(%312, %314, %315), $`@owned DefaultStringInterpolation`
  pointer_write %317 to %310
  %319 = literal [string] "\"", $`$Builtin.RawPointer`
  %320 = literal [int] 1, $`Builtin.Word`
  %321 = literal [int] -1, $`Builtin.Int1`
  %322 = new $`@thin String.Type`
  %323 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %324 = apply %323(%319, %320, %321, %322), $`@owned String`
  %326 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %327 = apply %326(%324, %310), $`()`
  %330 = new $`*String`
  pointer_write key to %330
  %333 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %334 = apply %333(%330, %310), $`()`
  %337 = literal [string] "\": ", $`$Builtin.RawPointer`
  %338 = literal [int] 3, $`Builtin.Word`
  %339 = literal [int] -1, $`Builtin.Int1`
  %340 = new $`@thin String.Type`
  %341 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %342 = apply %341(%337, %338, %339, %340), $`@owned String`
  %344 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %345 = apply %344(%342, %310), $`()`
  %349 = new $`*String`
  pointer_write nestedString to %349
  %352 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %353 = apply %352(%349, %310), $`()`
  %357 = literal [string] "", $`$Builtin.RawPointer`
  %358 = literal [int] 0, $`Builtin.Word`
  %359 = literal [int] -1, $`Builtin.Int1`
  %360 = new $`@thin String.Type`
  %361 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %362 = apply %361(%357, %358, %359, %360), $`@owned String`
  %364 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %365 = apply %364(%362, %310), $`()`
  %368 = pointer_read %310, $`DefaultStringInterpolation`
  %371 = new $`@thin String.Type`
  %372 = function_ref @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String`, $`@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String`
  %373 = apply %372(%368, %371), $`@owned String`
  br bb10(%373)

bb10(%381 : $`@owned $String`):
  return %381

bb11(%383 : $`@owned $Error`):
  br bb12(%383)

bb12(%391 : $`@owned $Error`):
  return %391
}

func [stub] @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation` : $`@owned DefaultStringInterpolation` {
bb0(%0 : $`Int`, %1 : $`Int`, %2 : $`@thin DefaultStringInterpolation.Type`):
  %ret = new $`@owned DefaultStringInterpolation`
  return %ret
}

func [stub] @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()` : $`()` {
bb0(%0 : $`@guaranteed String`, %1 : $`@inout DefaultStringInterpolation`):
  %ret = new $`()`
  return %ret
}

func [stub] @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout DefaultStringInterpolation`):
  %ret = new $`()`
  return %ret
}

func [stub] @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String` : $`@owned String` {
bb0(%0 : $`@owned DefaultStringInterpolation`, %1 : $`@thin String.Type`):
  %ret = new $`@owned String`
  return %ret
}

func @`static Swift.Int.- infix(Swift.Int, Swift.Int) -> Swift.Int` : $`Int` {
bb0(%0 : $`Int`, %1 : $`Int`, %2 : $`@thin Int.Type`):
  %3 = field_read %0, _value, $`Any`
  %4 = field_read %1, _value, $`Any`
  %5 = literal [int] -1, $`Builtin.Int1`
  %6i0 = builtin_ref @`ssub_with_overflow_Int64`, $`Any`
  %6 = apply %6i0(%3, %4, %5), $`(Builtin.Int64, Builtin.Int1)`
  %7 = field_read %6, 0, $`Builtin.Int64`
  %8 = field_read %6, 1, $`Builtin.Int1`
  br bb1

bb1:
  br bb2

bb2:
  cond_fail %8
  %12 = new $`Int`
  field_write %7 to %12, _value
  return %12
}

func @`default argument 2 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String` : $`NSString.CompareOptions` {
bb0:
  %0 = literal [int] 0, $`Builtin.Int64`
  %1 = new $`Int`
  field_write %0 to %1, _value
  %2 = new $`@thin Array<NSString.CompareOptions>.Type`
  %3 = function_ref @`generic specialization <serialized, __C.NSStringCompareOptions> of static Swift.Array._allocateUninitialized(Swift.Int) -> ([A], Swift.UnsafeMutablePointer<A>)`, $`@convention(method) (Int, @thin Array<NSString.CompareOptions>.Type) -> (@owned Array<NSString.CompareOptions>, UnsafeMutablePointer<NSString.CompareOptions>)`
  %4 = apply %3(%1, %2), $`(@owned Array<NSString.CompareOptions>, UnsafeMutablePointer<NSString.CompareOptions>)`
  %5 = field_read %4, 0, $`Array<NSString.CompareOptions>`
  %6 = new $`@thick NSString.CompareOptions.Type`
  %7 = function_ref @`generic specialization <serialized, __C.NSStringCompareOptions> of (extension in Swift):Swift.SetAlgebra< where A.ArrayLiteralElement == A.Element>.init(arrayLiteral: A.ArrayLiteralElement...) -> A`, $`@convention(method) (@owned Array<NSString.CompareOptions>, @thick NSString.CompareOptions.Type) -> NSString.CompareOptions`
  %8 = apply %7(%5, %6), $`NSString.CompareOptions`
  return %8
}

func @`default argument 3 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String` : $`Optional<Range<String.Index>>` {
bb0:
  %0 = new $`Optional<Range<String.Index>>`
  %0i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %0i0 to %0, type
  return %0
}

func [stub] @`(extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String` : $`@owned String` {
bb0(%0 : $`@in_guaranteed τ_1_0`, %1 : $`@in_guaranteed τ_1_1`, %2 : $`NSString.CompareOptions`, %3 : $`Optional<Range<String.Index>>`, %4 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned String`
  return %ret
}

func @`reabstraction thunk helper from @callee_guaranteed (@guaranteed Swift.String) -> (@owned Swift.String, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Swift.String) -> (@out Swift.String, @error @owned Swift.Error)` : $`(@out String, @error Error)` {
bb0(%0 : $`*String`, %1 : $`*String`, %2 : $`@noescape @callee_guaranteed (@guaranteed String) -> (@owned String, @error Error)`):
  %3 = pointer_read %1, $`String`
  %2i0 = apply %2(%3), $`String`
  %2i1 = new $`Builtin.Int1`
  cond_br %2i1, true bb1(%2i0), false bb2(%2i0)

bb1(%5 : $`@owned $String`):
  pointer_write %5 to %0
  %7 = new $`()`
  return %7

bb2(%10 : $`@owned $Error`):
  return %10
}

func [stub] @`(extension in Swift):Swift.BidirectionalCollection< where A.Element == Swift.String>.joined(separator: Swift.String) -> Swift.String` : $`@owned String` {
bb0(%0 : $`@guaranteed String`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned String`
  return %ret
}

func @`closure #2 (Any?) throws -> Swift.String in SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?` : $`(@owned String, @error Error)` {
bb0(value : $`*Optional<Any>`, encoding : $`*String.Encoding`, options : $`@guaranteed $Dictionary<writingOptionsKeys, Any>`, maxObjectDepth : $`Int`):
  %9 = new $`*Any`
  %10 = new $`*Optional<Any>`
  %0i0 = pointer_read value, $`Optional<Any>`
  pointer_write %0i0 to %10
  %10i0 = pointer_read %10, $`Optional<Any>`
  switch_enum %10i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb1

bb1:
  %16 = literal [string] "null", $`$Builtin.RawPointer`
  %17 = literal [int] 4, $`Builtin.Word`
  %18 = literal [int] -1, $`Builtin.Int1`
  %19 = new $`@thin String.Type`
  %20 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %21 = apply %20(%16, %17, %18, %19), $`@owned String`
  br bb8(%21)

bb2:
  %23 = new $`*Any`
  %23i0 = field_read [alias %23] %10, data, $`Any`
  pointer_write %23i0 to %23
  %23i1 = pointer_read %23, $`Any`
  pointer_write %23i1 to %9
  %26 = new $`@thin JSON.Type`
  %27 = new $`*Any`
  %9i0 = pointer_read %9, $`Any`
  pointer_write %9i0 to %27
  %29 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  nestedValue = apply %29(%27, %26), $`@owned JSON`
  %34 = literal [int] 1, $`Builtin.Int64`
  %35 = field_read maxObjectDepth, _value, $`Any`
  %36 = literal [int] -1, $`Builtin.Int1`
  %37i0 = builtin_ref @`ssub_with_overflow_Int64`, $`Any`
  %37 = apply %37i0(%35, %34, %36), $`(Builtin.Int64, Builtin.Int1)`
  %38 = field_read %37, 0, $`Builtin.Int64`
  %39 = field_read %37, 1, $`Builtin.Int1`
  cond_fail %39
  %41 = new $`Int`
  field_write %38 to %41, _value
  %42 = function_ref @`SwiftyJSON.JSON.(_rawString in _4625CC38AABF536BB76490A35D7233C9)(_: (extension in Foundation):Swift.String.Encoding, options: [SwiftyJSON.writingOptionsKeys : Any], maxObjectDepth: Swift.Int) throws -> Swift.String?`, $`@convention(method) (@in_guaranteed String.Encoding, @guaranteed Dictionary<writingOptionsKeys, Any>, Int, @guaranteed JSON) -> (@owned Optional<String>, @error Error)`
  %42i0 = apply %42(encoding, options, %41, nestedValue), $`Optional<String>`
  %42i1 = new $`Builtin.Int1`
  cond_br %42i1, true bb3(%42i0), false bb9(%42i0)

bb3(%44 : $`@owned $Optional<String>`):
  switch_enum %44, case "#Optional.some!enumelt" : bb5, case "#Optional.none!enumelt" : bb4

bb4:
  %47 = new $`@thin SwiftyJSONError.Type`
  %48 = new $`SwiftyJSONError`
  %48i0 = literal [string] "#SwiftyJSONError.invalidJSON!enumelt", $`Builtin.RawPointer`
  field_write %48i0 to %48, type
  %49 = new $`*Error`
  pointer_write %48 to %49
  %52i0 = builtin_ref @`willThrow`, $`Any`
  %52 = apply %52i0(%49), $`()`
  br bb10(%49)

bb5(nestedString : $`@owned $String`):
  %60 = field_read nestedValue, type, $`Any`
  %61 = new $`*Type`
  pointer_write %60 to %61
  %63 = new $`@thin Type.Type`
  %64 = new $`Type`
  %64i0 = literal [string] "#Type.string!enumelt", $`Builtin.RawPointer`
  field_write %64i0 to %64, type
  %65 = new $`*Type`
  pointer_write %64 to %65
  %67 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %68 = apply %67(%61, %65), $`Bool`
  %72 = field_read %68, _value, $`Any`
  cond_br %72, true bb6, false bb7

bb6:
  %74 = new $`*DefaultStringInterpolation`
  %75 = literal [int] 2, $`Builtin.Int64`
  %76 = new $`Int`
  field_write %75 to %76, _value
  %77 = literal [int] 1, $`Builtin.Int64`
  %78 = new $`Int`
  field_write %77 to %78, _value
  %79 = new $`@thin DefaultStringInterpolation.Type`
  %80 = function_ref @`Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation`, $`@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation`
  %81 = apply %80(%76, %78, %79), $`@owned DefaultStringInterpolation`
  pointer_write %81 to %74
  %83 = literal [string] "\"", $`$Builtin.RawPointer`
  %84 = literal [int] 1, $`Builtin.Word`
  %85 = literal [int] -1, $`Builtin.Int1`
  %86 = new $`@thin String.Type`
  %87 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %88 = apply %87(%83, %84, %85, %86), $`@owned String`
  %90 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %91 = apply %90(%88, %74), $`()`
  %95 = new $`*String`
  pointer_write nestedString to %95
  %97 = literal [string] "\\", $`$Builtin.RawPointer`
  %98 = literal [int] 1, $`Builtin.Word`
  %99 = literal [int] -1, $`Builtin.Int1`
  %100 = new $`@thin String.Type`
  %101 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %102 = apply %101(%97, %98, %99, %100), $`@owned String`
  %103 = new $`*String`
  pointer_write %102 to %103
  %105 = literal [string] "\\\\", $`$Builtin.RawPointer`
  %106 = literal [int] 2, $`Builtin.Word`
  %107 = literal [int] -1, $`Builtin.Int1`
  %108 = new $`@thin String.Type`
  %109 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %110 = apply %109(%105, %106, %107, %108), $`@owned String`
  %111 = new $`*String`
  pointer_write %110 to %111
  %113 = function_ref @`default argument 2 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> NSString.CompareOptions`
  %114 = apply %113(), $`NSString.CompareOptions`
  %115 = function_ref @`default argument 3 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> Optional<Range<String.Index>>`
  %116 = apply %115(), $`Optional<Range<String.Index>>`
  %117 = function_ref @`(extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> (@in_guaranteed τ_1_0, @in_guaranteed τ_1_1, NSString.CompareOptions, Optional<Range<String.Index>>, @in_guaranteed τ_0_0) -> @owned String`
  %118 = apply %117(%103, %111, %114, %116, %95), $`@owned String`
  %125 = new $`*String`
  pointer_write %118 to %125
  %127 = literal [string] "\"", $`$Builtin.RawPointer`
  %128 = literal [int] 1, $`Builtin.Word`
  %129 = literal [int] -1, $`Builtin.Int1`
  %130 = new $`@thin String.Type`
  %131 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %132 = apply %131(%127, %128, %129, %130), $`@owned String`
  %133 = new $`*String`
  pointer_write %132 to %133
  %135 = literal [string] "\\\"", $`$Builtin.RawPointer`
  %136 = literal [int] 2, $`Builtin.Word`
  %137 = literal [int] -1, $`Builtin.Int1`
  %138 = new $`@thin String.Type`
  %139 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %140 = apply %139(%135, %136, %137, %138), $`@owned String`
  %141 = new $`*String`
  pointer_write %140 to %141
  %143 = function_ref @`default argument 2 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> NSString.CompareOptions`
  %144 = apply %143(), $`NSString.CompareOptions`
  %145 = function_ref @`default argument 3 of (extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(thin) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> () -> Optional<Range<String.Index>>`
  %146 = apply %145(), $`Optional<Range<String.Index>>`
  %147 = function_ref @`(extension in Foundation):Swift.StringProtocol.replacingOccurrences<A, B where A1: Swift.StringProtocol, B1: Swift.StringProtocol>(of: A1, with: B1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0, τ_1_1 where τ_1_0 : StringProtocol, τ_1_1 : StringProtocol> (@in_guaranteed τ_1_0, @in_guaranteed τ_1_1, NSString.CompareOptions, Optional<Range<String.Index>>, @in_guaranteed τ_0_0) -> @owned String`
  %148 = apply %147(%133, %141, %144, %146, %125), $`@owned String`
  %155 = new $`*String`
  pointer_write %148 to %155
  %158 = function_ref @`Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()`
  %159 = apply %158(%155, %74), $`()`
  %163 = literal [string] "\"", $`$Builtin.RawPointer`
  %164 = literal [int] 1, $`Builtin.Word`
  %165 = literal [int] -1, $`Builtin.Int1`
  %166 = new $`@thin String.Type`
  %167 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %168 = apply %167(%163, %164, %165, %166), $`@owned String`
  %170 = function_ref @`Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> ()`, $`@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()`
  %171 = apply %170(%168, %74), $`()`
  %174 = pointer_read %74, $`DefaultStringInterpolation`
  %177 = new $`@thin String.Type`
  %178 = function_ref @`Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String`, $`@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String`
  %179 = apply %178(%174, %177), $`@owned String`
  br bb8(%179)

bb7:
  %186 = assign nestedString, $`String`
  br bb8(%186)

bb8(%193 : $`@owned $String`):
  return %193

bb9(%195 : $`@owned $Error`):
  br bb10(%195)

bb10(%201 : $`@owned $Error`):
  return %201
}

func @`reabstraction thunk helper from @callee_guaranteed (@in_guaranteed Any?) -> (@owned Swift.String, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@out Swift.String, @error @owned Swift.Error)` : $`(@out String, @error Error)` {
bb0(%0 : $`*String`, %1 : $`*Optional<Any>`, %2 : $`@noescape @callee_guaranteed (@in_guaranteed Optional<Any>) -> (@owned String, @error Error)`):
  %2i0 = apply %2(%1), $`String`
  %2i1 = new $`Builtin.Int1`
  cond_br %2i1, true bb1(%2i0), false bb2(%2i0)

bb1(%4 : $`@owned $String`):
  pointer_write %4 to %0
  %6 = new $`()`
  return %6

bb2(%8 : $`@owned $Error`):
  return %8
}

func [stub] @`Swift.Bool.description.getter : Swift.String` : $`@owned String` {
bb0(%0 : $`Bool`):
  %ret = new $`@owned String`
  return %ret
}

func @`protocol witness for Swift.RawRepresentable.init(rawValue: A.RawValue) -> A? in conformance SwiftyJSON.JSON : Swift.RawRepresentable in SwiftyJSON` : $`@out Optional<JSON>` {
bb0(%0 : $`*Optional<JSON>`, %1 : $`*Any`, %2 : $`@thick JSON.Type`):
  %3 = new $`@thin JSON.Type`
  %4 = function_ref @`SwiftyJSON.JSON.init(rawValue: Any) -> SwiftyJSON.JSON?`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned Optional<JSON>`
  %5 = apply %4(%1, %3), $`@owned Optional<JSON>`
  pointer_write %5 to %0
  %7 = new $`()`
  return %7
}

func @`protocol witness for Swift.RawRepresentable.rawValue.getter : A.RawValue in conformance SwiftyJSON.JSON : Swift.RawRepresentable in SwiftyJSON` : $`@out Any` {
bb0(%0 : $`*Any`, %1 : $`*JSON`):
  %2 = pointer_read %1, $`JSON`
  %3 = function_ref @`SwiftyJSON.JSON.rawValue.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %4 = apply %3(%0, %2), $`@out Any`
  %5 = new $`()`
  return %5
}

func @`SwiftyJSON.JSON.description.getter : Swift.String` : $`@owned String` {
bb0(self : $`@guaranteed $JSON`):
  %2 = new $`*String`
  %3 = literal [int] 1, $`Builtin.Int64`
  %4 = new $`UInt`
  field_write %3 to %4, _value
  %5 = new $`JSONSerialization.WritingOptions`
  %6 = function_ref @`default argument 0 of SwiftyJSON.JSON.rawString(_: (extension in Foundation):Swift.String.Encoding, options: __C.NSJSONWritingOptions) -> Swift.String?`, $`@convention(thin) () -> @out String.Encoding`
  %7 = new $`*String.Encoding`
  %8 = apply %6(%7), $`@out String.Encoding`
  %9 = function_ref @`SwiftyJSON.JSON.rawString(_: (extension in Foundation):Swift.String.Encoding, options: __C.NSJSONWritingOptions) -> Swift.String?`, $`@convention(method) (@in_guaranteed String.Encoding, JSONSerialization.WritingOptions, @guaranteed JSON) -> @owned Optional<String>`
  %10 = apply %9(%7, %5, self), $`@owned Optional<String>`
  %13 = assign %10, $`Optional<String>`
  %14 = new $`*Optional<String>`
  %15 = assign %13, $`Optional<String>`
  pointer_write %15 to %14
  %14i0 = pointer_read %14, $`Optional<String>`
  switch_enum %14i0, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1:
  %19 = new $`*Any`
  %19i0 = field_read [alias %19] %14, data, $`Any`
  pointer_write %19i0 to %19
  %20 = pointer_read %19, $`String`
  pointer_write %20 to %2
  br bb3

bb2:
  %24 = literal [string] "unknown", $`$Builtin.RawPointer`
  %25 = literal [int] 7, $`Builtin.Word`
  %26 = literal [int] -1, $`Builtin.Int1`
  %27 = new $`@thin String.Type`
  %28 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %29 = apply %28(%24, %25, %26, %27), $`@owned String`
  pointer_write %29 to %2
  %31 = new $`()`
  br bb3

bb3:
  %34 = new $`()`
  %36 = pointer_read %2, $`String`
  return %36
}

func @`SwiftyJSON.JSON.debugDescription.getter : Swift.String` : $`@owned String` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.description.getter : Swift.String`, $`@convention(method) (@guaranteed JSON) -> @owned String`
  %3 = apply %2(self), $`@owned String`
  return %3
}

func @`protocol witness for Swift.CustomStringConvertible.description.getter : Swift.String in conformance SwiftyJSON.JSON : Swift.CustomStringConvertible in SwiftyJSON` : $`@owned String` {
bb0(%0 : $`*JSON`):
  %1 = pointer_read %0, $`JSON`
  %2 = function_ref @`SwiftyJSON.JSON.description.getter : Swift.String`, $`@convention(method) (@guaranteed JSON) -> @owned String`
  %3 = apply %2(%1), $`@owned String`
  return %3
}

func @`protocol witness for Swift.CustomDebugStringConvertible.debugDescription.getter : Swift.String in conformance SwiftyJSON.JSON : Swift.CustomDebugStringConvertible in SwiftyJSON` : $`@owned String` {
bb0(%0 : $`*JSON`):
  %1 = pointer_read %0, $`JSON`
  %2 = function_ref @`SwiftyJSON.JSON.debugDescription.getter : Swift.String`, $`@convention(method) (@guaranteed JSON) -> @owned String`
  %3 = apply %2(%1), $`@owned String`
  return %3
}

func @`SwiftyJSON.JSON.array.getter : [SwiftyJSON.JSON]?` : $`@owned Optional<Array<JSON>>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  %3 = new $`*Type`
  pointer_write %2 to %3
  %5 = new $`@thin Type.Type`
  %6 = new $`Type`
  %6i0 = literal [string] "#Type.array!enumelt", $`Builtin.RawPointer`
  field_write %6i0 to %6, type
  %7 = new $`*Type`
  pointer_write %6 to %7
  %9 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %10 = apply %9(%3, %7), $`Bool`
  %13 = field_read %10, _value, $`Any`
  cond_br %13, true bb1, false bb3

bb1:
  %15 = field_read self, rawArray, $`Any`
  %16 = assign %15, $`Array<Any>`
  %17 = new $`*Array<Any>`
  pointer_write %16 to %17
  %19 = function_ref @`closure #1 (Any) -> SwiftyJSON.JSON in SwiftyJSON.JSON.array.getter : [SwiftyJSON.JSON]?`, $`@convention(thin) (@in_guaranteed Any) -> @owned JSON`
  %23 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@in_guaranteed Any) -> (@owned SwiftyJSON.JSON, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out SwiftyJSON.JSON, @error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed Any, @noescape @callee_guaranteed (@in_guaranteed Any) -> (@owned JSON, @error Error)) -> (@out JSON, @error Error)`
  %24 = apply %23(%19), $`(@out JSON, @error Error)`
  %26 = function_ref @`(extension in Swift):Swift.Collection.map<A>((A.Element) throws -> A1) throws -> [A1]`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection><τ_1_0> (@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@owned Array<τ_1_0>, @error Error)`
  %26i0 = apply %26(%24, %17), $`Array<τ_1_0>`
  %26i1 = new $`Builtin.Int1`
  cond_br %26i1, true bb2(%26i0), false bb5(%26i0)

bb2(%28 : $`@owned $Array<JSON>`):
  %32 = new $`Optional<Array<JSON>>`
  %32i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %32i0 to %32, type
  field_write %28 to %32, data
  br bb4(%32)

bb3:
  %34 = new $`Optional<Array<JSON>>`
  %34i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %34i0 to %34, type
  br bb4(%34)

bb4(%36 : $`@owned $Optional<Array<JSON>>`):
  return %36

bb5(%38 : $`@owned $Error`):
  unreachable
}

func @`closure #1 (Any) -> SwiftyJSON.JSON in SwiftyJSON.JSON.array.getter : [SwiftyJSON.JSON]?` : $`@owned JSON` {
bb0($0 : $`*Any`):
  %2 = new $`@thin JSON.Type`
  %3 = new $`*Any`
  %0i0 = pointer_read $0, $`Any`
  pointer_write %0i0 to %3
  %5 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %6 = apply %5(%3, %2), $`@owned JSON`
  return %6
}

func @`reabstraction thunk helper from @callee_guaranteed (@in_guaranteed Any) -> (@owned SwiftyJSON.JSON, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out SwiftyJSON.JSON, @error @owned Swift.Error)` : $`(@out JSON, @error Error)` {
bb0(%0 : $`*JSON`, %1 : $`*Any`, %2 : $`@noescape @callee_guaranteed (@in_guaranteed Any) -> (@owned JSON, @error Error)`):
  %2i0 = apply %2(%1), $`JSON`
  %2i1 = new $`Builtin.Int1`
  cond_br %2i1, true bb1(%2i0), false bb2(%2i0)

bb1(%4 : $`@owned $JSON`):
  pointer_write %4 to %0
  %6 = new $`()`
  return %6

bb2(%8 : $`@owned $Error`):
  return %8
}

func @`SwiftyJSON.JSON.arrayObject.getter : [Any]?` : $`@owned Optional<Array<Any>>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.array!enumelt" : bb1, default bb2

bb1:
  %4 = field_read self, rawArray, $`Any`
  %5 = assign %4, $`Array<Any>`
  %6 = new $`Optional<Array<Any>>`
  %6i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %6i0 to %6, type
  field_write %5 to %6, data
  br bb3(%6)

bb2(%8 : $`Type`):
  %9 = new $`Optional<Array<Any>>`
  %9i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %9i0 to %9, type
  br bb3(%9)

bb3(%11 : $`@owned $Optional<Array<Any>>`):
  return %11
}

func @`SwiftyJSON.JSON.arrayObject.setter : [Any]?` : $`()` {
bb0(newValue : $`@owned $Optional<Array<Any>>`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`*Optional<Any>`
  %6 = new $`*Any`
  %6i0 = field_read [alias %6] %5, data, $`Any`
  pointer_write %6i0 to %6
  %8 = assign newValue, $`Optional<Array<Any>>`
  switch_enum %8, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb6

bb1(%10 : $`@owned $Array<Any>`):
  pointer_write %10 to %6
  %5i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  br bb2

bb2:
  %16 = new $`*Optional<Any>`
  %5i1 = pointer_read %5, $`Optional<Any>`
  pointer_write %5i1 to %16
  %16i0 = pointer_read %16, $`Optional<Any>`
  switch_enum %16i0, case "#Optional.some!enumelt" : bb3, case "#Optional.none!enumelt" : bb4

bb3:
  %19 = new $`*Any`
  %19i0 = field_read [alias %19] %16, data, $`Any`
  pointer_write %19i0 to %19
  %19i1 = pointer_read %19, $`Any`
  pointer_write %19i1 to %4
  br bb5

bb4:
  %23 = new $`@thick NSNull.Type`
  %24 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %25 = apply %24(%23), $`@owned NSNull`
  pointer_write %25 to %4
  %28 = new $`()`
  br bb5

bb5:
  %31 = new $`()`
  %35 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %36 = apply %35(%4, self), $`()`
  %40 = new $`()`
  return %40

bb6:
  %5i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i2 to %5, type
  br bb2
}

func [coroutine] @`SwiftyJSON.JSON.arrayObject.modify : [Any]?` : $`@yields @inout Optional<Array<Any>>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Array<Any>>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.arrayObject.getter : [Any]?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<Array<Any>>`
  %6 = apply %5(%4), $`@owned Optional<Array<Any>>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Array<Any>>`
  %11 = function_ref @`SwiftyJSON.JSON.arrayObject.setter : [Any]?`, $`@convention(method) (@owned Optional<Array<Any>>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Array<Any>>`
  %18 = function_ref @`SwiftyJSON.JSON.arrayObject.setter : [Any]?`, $`@convention(method) (@owned Optional<Array<Any>>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Array<Any>>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.dictionary.getter : [Swift.String : SwiftyJSON.JSON]?` : $`@owned Optional<Dictionary<String, JSON>>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  %3 = new $`*Type`
  pointer_write %2 to %3
  %5 = new $`@thin Type.Type`
  %6 = new $`Type`
  %6i0 = literal [string] "#Type.dictionary!enumelt", $`Builtin.RawPointer`
  field_write %6i0 to %6, type
  %7 = new $`*Type`
  pointer_write %6 to %7
  %9 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %10 = apply %9(%3, %7), $`Bool`
  %13 = field_read %10, _value, $`Any`
  cond_br %13, true bb1, false bb3

bb1:
  %15 = new $`*Dictionary<String, JSON>`
  %16 = new $`@thin Dictionary<String, JSON>.Type`
  %17 = field_read self, rawDictionary, $`Any`
  %18 = assign %17, $`Dictionary<String, Any>`
  %20 = function_ref @`Swift.Dictionary.count.getter : Swift.Int`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> Int`
  %21 = apply %20(%18), $`Int`
  %24 = function_ref @`Swift.Dictionary.init(minimumCapacity: Swift.Int) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (Int, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %25 = apply %24(%21, %16), $`@owned Dictionary<τ_0_0, τ_0_1>`
  pointer_write %25 to %15
  %27 = field_read self, rawDictionary, $`Any`
  %28 = assign %27, $`Dictionary<String, Any>`
  %29 = new $`*Dictionary<String, Any>`
  pointer_write %28 to %29
  %31 = function_ref @`closure #1 ((key: Swift.String, value: Any)) -> () in SwiftyJSON.JSON.dictionary.getter : [Swift.String : SwiftyJSON.JSON]?`, $`@convention(thin) (@guaranteed String, @in_guaranteed Any, @inout_aliasable Dictionary<String, JSON>) -> ()`
  %32 = apply %31(%15), $`()`
  %35 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@guaranteed Swift.String, @in_guaranteed Any) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed (key: Swift.String, value: Any)) -> (@error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed (key: String, value: Any), @noescape @callee_guaranteed (@guaranteed String, @in_guaranteed Any) -> @error Error) -> @error Error`
  %36 = apply %35(%32), $`@error Error`
  %38 = function_ref @`(extension in Swift):Swift.Sequence.forEach((A.Element) throws -> ()) throws -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence> (@noescape @callee_guaranteed @substituted <τ_0_0> (@in_guaranteed τ_0_0) -> @error Error for <τ_0_0.Element>, @in_guaranteed τ_0_0) -> @error Error`
  %38i0 = apply %38(%36, %29), $`()`
  %38i1 = new $`Builtin.Int1`
  cond_br %38i1, true bb2(%38i0), false bb5(%38i0)

bb2(%40 : $`()`):
  %46 = pointer_read %15, $`Dictionary<String, JSON>`
  %48 = new $`Optional<Dictionary<String, JSON>>`
  %48i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %48i0 to %48, type
  field_write %46 to %48, data
  br bb4(%48)

bb3:
  %52 = new $`Optional<Dictionary<String, JSON>>`
  %52i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %52i0 to %52, type
  br bb4(%52)

bb4(%54 : $`@owned $Optional<Dictionary<String, JSON>>`):
  return %54

bb5(%56 : $`@owned $Error`):
  unreachable
}

func [stub] @`Swift.Dictionary.count.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`Int`
  return %ret
}

func [stub] @`Swift.Dictionary.init(minimumCapacity: Swift.Int) -> [A : B]` : $`@owned Dictionary<τ_0_0, τ_0_1>` {
bb0(%0 : $`Int`, %1 : $`@thin Dictionary<τ_0_0, τ_0_1>.Type`):
  %ret = new $`@owned Dictionary<τ_0_0, τ_0_1>`
  return %ret
}

func @`closure #1 ((key: Swift.String, value: Any)) -> () in SwiftyJSON.JSON.dictionary.getter : [Swift.String : SwiftyJSON.JSON]?` : $`()` {
bb0(%0 : $`@guaranteed $String`, %1 : $`*Any`, d : $`*Dictionary<String, JSON>`):
  %3 = new $`*(key: String, value: Any)`
  %4 = new $`*value: Any`
  %4i0 = field_read [alias %4] %3, 1, $`value: Any`
  pointer_write %4i0 to %4
  %5 = new $`*key: String`
  %5i0 = field_read [alias %5] %3, 0, $`key: String`
  pointer_write %5i0 to %5
  %6 = assign %0, $`String`
  %7 = assign %6, $`String`
  %8 = assign %6, $`String`
  pointer_write %6 to %5
  %10 = new $`*value: Any`
  %10i0 = field_read [alias %10] %3, 1, $`value: Any`
  pointer_write %10i0 to %10
  %1i0 = pointer_read %1, $`Any`
  pointer_write %1i0 to %10
  %13 = new $`*(key: String, value: Any)`
  %14 = new $`*key: String`
  %14i0 = field_read [alias %14] %13, 0, $`key: String`
  pointer_write %14i0 to %14
  %15 = new $`*value: Any`
  %15i0 = field_read [alias %15] %13, 1, $`value: Any`
  pointer_write %15i0 to %15
  %16 = assign %7, $`String`
  pointer_write %16 to %14
  %4i1 = pointer_read %4, $`Any`
  pointer_write %4i1 to %15
  %20 = new $`*key: String`
  %20i0 = field_read [alias %20] %13, 0, $`key: String`
  pointer_write %20i0 to %20
  %21 = pointer_read %20, $`String`
  %22 = new $`*value: Any`
  %22i0 = field_read [alias %22] %13, 1, $`value: Any`
  pointer_write %22i0 to %22
  %23 = new $`@thin JSON.Type`
  %24 = new $`*(key: String, value: Any)`
  %25 = new $`*key: String`
  %25i0 = field_read [alias %25] %24, 0, $`key: String`
  pointer_write %25i0 to %25
  %26 = new $`*value: Any`
  %26i0 = field_read [alias %26] %24, 1, $`value: Any`
  pointer_write %26i0 to %26
  %27 = assign %8, $`String`
  pointer_write %27 to %25
  %4i2 = pointer_read %4, $`Any`
  pointer_write %4i2 to %26
  %31 = new $`*key: String`
  %31i0 = field_read [alias %31] %24, 0, $`key: String`
  pointer_write %31i0 to %31
  %32 = pointer_read %31, $`String`
  %33 = new $`*value: Any`
  %33i0 = field_read [alias %33] %24, 1, $`value: Any`
  pointer_write %33i0 to %33
  %34 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %35 = apply %34(%33, %23), $`@owned JSON`
  %38 = new $`Optional<JSON>`
  %38i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %38i0 to %38, type
  field_write %35 to %38, data
  %39 = new $`*Optional<JSON>`
  pointer_write %38 to %39
  %41 = new $`*String`
  pointer_write %21 to %41
  %44 = function_ref @`Swift.Dictionary.subscript.setter : (A) -> B?`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@in Optional<τ_0_1>, @in τ_0_0, @inout Dictionary<τ_0_0, τ_0_1>) -> ()`
  %45 = apply %44(%39, %41, d), $`()`
  %53 = new $`()`
  return %53
}

func @`SwiftyJSON.JSON.dictionaryValue.getter : [Swift.String : SwiftyJSON.JSON]` : $`@owned Dictionary<String, JSON>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = new $`*Dictionary<String, JSON>`
  %3 = function_ref @`SwiftyJSON.JSON.dictionary.getter : [Swift.String : SwiftyJSON.JSON]?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<Dictionary<String, JSON>>`
  %4 = apply %3(self), $`@owned Optional<Dictionary<String, JSON>>`
  %5 = assign %4, $`Optional<Dictionary<String, JSON>>`
  %6 = new $`*Optional<Dictionary<String, JSON>>`
  %7 = assign %5, $`Optional<Dictionary<String, JSON>>`
  pointer_write %7 to %6
  %6i0 = pointer_read %6, $`Optional<Dictionary<String, JSON>>`
  switch_enum %6i0, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1:
  %11 = new $`*Any`
  %11i0 = field_read [alias %11] %6, data, $`Any`
  pointer_write %11i0 to %11
  %12 = pointer_read %11, $`Dictionary<String, JSON>`
  pointer_write %12 to %2
  br bb3

bb2:
  %16 = literal [int] 0, $`Builtin.Word`
  %17 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %18 = apply %17(%16), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %19 = field_read %18, 0, $`Array<(String, JSON)>`
  %20 = field_read %18, 1, $`Builtin.RawPointer`
  %22 = new $`@thin Dictionary<String, JSON>.Type`
  %23 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %24 = apply %23(%19, %22), $`@owned Dictionary<τ_0_0, τ_0_1>`
  pointer_write %24 to %2
  %26 = new $`()`
  br bb3

bb3:
  %29 = new $`()`
  %31 = pointer_read %2, $`Dictionary<String, JSON>`
  return %31
}

func @`SwiftyJSON.JSON.dictionaryObject.getter : [Swift.String : Any]?` : $`@owned Optional<Dictionary<String, Any>>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.dictionary!enumelt" : bb1, default bb2

bb1:
  %4 = field_read self, rawDictionary, $`Any`
  %5 = assign %4, $`Dictionary<String, Any>`
  %6 = new $`Optional<Dictionary<String, Any>>`
  %6i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %6i0 to %6, type
  field_write %5 to %6, data
  br bb3(%6)

bb2(%8 : $`Type`):
  %9 = new $`Optional<Dictionary<String, Any>>`
  %9i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %9i0 to %9, type
  br bb3(%9)

bb3(%11 : $`@owned $Optional<Dictionary<String, Any>>`):
  return %11
}

func @`SwiftyJSON.JSON.dictionaryObject.setter : [Swift.String : Any]?` : $`()` {
bb0(newValue : $`@owned $Optional<Dictionary<String, Any>>`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`*Optional<Any>`
  %6 = new $`*Any`
  %6i0 = field_read [alias %6] %5, data, $`Any`
  pointer_write %6i0 to %6
  %8 = assign newValue, $`Optional<Dictionary<String, Any>>`
  switch_enum %8, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb6

bb1(%10 : $`@owned $Dictionary<String, Any>`):
  pointer_write %10 to %6
  %5i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  br bb2

bb2:
  %16 = new $`*Optional<Any>`
  %5i1 = pointer_read %5, $`Optional<Any>`
  pointer_write %5i1 to %16
  %16i0 = pointer_read %16, $`Optional<Any>`
  switch_enum %16i0, case "#Optional.some!enumelt" : bb3, case "#Optional.none!enumelt" : bb4

bb3:
  %19 = new $`*Any`
  %19i0 = field_read [alias %19] %16, data, $`Any`
  pointer_write %19i0 to %19
  %19i1 = pointer_read %19, $`Any`
  pointer_write %19i1 to %4
  br bb5

bb4:
  %23 = new $`@thick NSNull.Type`
  %24 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %25 = apply %24(%23), $`@owned NSNull`
  pointer_write %25 to %4
  %28 = new $`()`
  br bb5

bb5:
  %31 = new $`()`
  %35 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %36 = apply %35(%4, self), $`()`
  %40 = new $`()`
  return %40

bb6:
  %5i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i2 to %5, type
  br bb2
}

func [coroutine] @`SwiftyJSON.JSON.dictionaryObject.modify : [Swift.String : Any]?` : $`@yields @inout Optional<Dictionary<String, Any>>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Dictionary<String, Any>>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.dictionaryObject.getter : [Swift.String : Any]?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<Dictionary<String, Any>>`
  %6 = apply %5(%4), $`@owned Optional<Dictionary<String, Any>>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Dictionary<String, Any>>`
  %11 = function_ref @`SwiftyJSON.JSON.dictionaryObject.setter : [Swift.String : Any]?`, $`@convention(method) (@owned Optional<Dictionary<String, Any>>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Dictionary<String, Any>>`
  %18 = function_ref @`SwiftyJSON.JSON.dictionaryObject.setter : [Swift.String : Any]?`, $`@convention(method) (@owned Optional<Dictionary<String, Any>>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Dictionary<String, Any>>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.bool.getter : Swift.Bool?` : $`Optional<Bool>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.bool!enumelt" : bb1, default bb2

bb1:
  %4 = field_read self, rawBool, $`Any`
  %5 = new $`Optional<Bool>`
  %5i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  field_write %4 to %5, data
  br bb3(%5)

bb2(%7 : $`Type`):
  %8 = new $`Optional<Bool>`
  %8i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %8i0 to %8, type
  br bb3(%8)

bb3(%10 : $`Optional<Bool>`):
  return %10
}

func @`SwiftyJSON.JSON.bool.setter : Swift.Bool?` : $`()` {
bb0(newValue : $`Optional<Bool>`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`*Optional<Any>`
  %6 = new $`*Any`
  %6i0 = field_read [alias %6] %5, data, $`Any`
  pointer_write %6i0 to %6
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb6

bb1(%8 : $`Bool`):
  pointer_write %8 to %6
  %5i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  br bb2

bb2:
  %13 = new $`*Optional<Any>`
  %5i1 = pointer_read %5, $`Optional<Any>`
  pointer_write %5i1 to %13
  %13i0 = pointer_read %13, $`Optional<Any>`
  switch_enum %13i0, case "#Optional.some!enumelt" : bb3, case "#Optional.none!enumelt" : bb4

bb3:
  %16 = new $`*Any`
  %16i0 = field_read [alias %16] %13, data, $`Any`
  pointer_write %16i0 to %16
  %16i1 = pointer_read %16, $`Any`
  pointer_write %16i1 to %4
  br bb5

bb4:
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %4
  %25 = new $`()`
  br bb5

bb5:
  %28 = new $`()`
  %32 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %33 = apply %32(%4, self), $`()`
  %36 = new $`()`
  return %36

bb6:
  %5i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i2 to %5, type
  br bb2
}

func [coroutine] @`SwiftyJSON.JSON.bool.modify : Swift.Bool?` : $`@yields @inout Optional<Bool>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Bool>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.bool.getter : Swift.Bool?`, $`@convention(method) (@guaranteed JSON) -> Optional<Bool>`
  %6 = apply %5(%4), $`Optional<Bool>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Bool>`
  %11 = function_ref @`SwiftyJSON.JSON.bool.setter : Swift.Bool?`, $`@convention(method) (Optional<Bool>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Bool>`
  %18 = function_ref @`SwiftyJSON.JSON.bool.setter : Swift.Bool?`, $`@convention(method) (Optional<Bool>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Bool>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.boolValue.getter : Swift.Bool` : $`Bool` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.bool!enumelt" : bb1, case "#Type.number!enumelt" : bb2, case "#Type.string!enumelt" : bb3, default bb5

bb1:
  %4 = field_read self, rawBool, $`Any`
  br bb6(%4)

bb2:
  %6 = field_read self, rawNumber, $`Any`
  %7 = assign %6, $`NSNumber`
  %9 = builtin_ref @`#NSNumber.boolValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Bool`
  %10 = apply %9(%7), $`Bool`
  br bb6(%10)

bb3:
  %14 = literal [int] 5, $`Builtin.Word`
  %15 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %16 = apply %15(%14), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %17 = field_read %16, 0, $`Array<String>`
  %18 = field_read %16, 1, $`Builtin.RawPointer`
  %20 = literal [string] "true", $`$Builtin.RawPointer`
  %21 = literal [int] 4, $`Builtin.Word`
  %22 = literal [int] -1, $`Builtin.Int1`
  %23 = new $`@thin String.Type`
  %24 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %25 = apply %24(%20, %21, %22, %23), $`@owned String`
  pointer_write %25 to %18
  %27 = literal [int] 1, $`Builtin.Word`
  %29 = literal [string] "y", $`$Builtin.RawPointer`
  %30 = literal [int] 1, $`Builtin.Word`
  %31 = literal [int] -1, $`Builtin.Int1`
  %32 = new $`@thin String.Type`
  %33 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %34 = apply %33(%29, %30, %31, %32), $`@owned String`
  pointer_write %34 to %18
  %36 = literal [int] 2, $`Builtin.Word`
  %38 = literal [string] "t", $`$Builtin.RawPointer`
  %39 = literal [int] 1, $`Builtin.Word`
  %40 = literal [int] -1, $`Builtin.Int1`
  %41 = new $`@thin String.Type`
  %42 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %43 = apply %42(%38, %39, %40, %41), $`@owned String`
  pointer_write %43 to %18
  %45 = literal [int] 3, $`Builtin.Word`
  %47 = literal [string] "yes", $`$Builtin.RawPointer`
  %48 = literal [int] 3, $`Builtin.Word`
  %49 = literal [int] -1, $`Builtin.Int1`
  %50 = new $`@thin String.Type`
  %51 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %52 = apply %51(%47, %48, %49, %50), $`@owned String`
  pointer_write %52 to %18
  %54 = literal [int] 4, $`Builtin.Word`
  %56 = literal [string] "1", $`$Builtin.RawPointer`
  %57 = literal [int] 1, $`Builtin.Word`
  %58 = literal [int] -1, $`Builtin.Int1`
  %59 = new $`@thin String.Type`
  %60 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %61 = apply %60(%56, %57, %58, %59), $`@owned String`
  pointer_write %61 to %18
  %63 = new $`*Array<String>`
  pointer_write %17 to %63
  %65 = function_ref @`closure #1 (Swift.String) -> Swift.Bool in SwiftyJSON.JSON.boolValue.getter : Swift.Bool`, $`@convention(thin) (@guaranteed String, @guaranteed JSON) -> Bool`
  %66 = assign self, $`JSON`
  %67 = apply %65(%66), $`Bool`
  %70 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@guaranteed Swift.String) -> (@unowned Swift.Bool, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Swift.String) -> (@unowned Swift.Bool, @error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed String, @noescape @callee_guaranteed (@guaranteed String) -> (Bool, @error Error)) -> (Bool, @error Error)`
  %71 = apply %70(%67), $`(Bool, @error Error)`
  %73 = function_ref @`(extension in Swift):Swift.Sequence.contains(where: (A.Element) throws -> Swift.Bool) throws -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence> (@noescape @callee_guaranteed @substituted <τ_0_0> (@in_guaranteed τ_0_0) -> (Bool, @error Error) for <τ_0_0.Element>, @in_guaranteed τ_0_0) -> (Bool, @error Error)`
  %73i0 = apply %73(%71, %63), $`Bool`
  %73i1 = new $`Builtin.Int1`
  cond_br %73i1, true bb4(%73i0), false bb7(%73i0)

bb4(%75 : $`Bool`):
  br bb6(%75)

bb5(%82 : $`Type`):
  %83 = literal [int] 0, $`Builtin.Int1`
  %84 = new $`Bool`
  br bb6(%84)

bb6(%86 : $`Bool`):
  return %86

bb7(%88 : $`@owned $Error`):
  unreachable
}

func @`closure #1 (Swift.String) -> Swift.Bool in SwiftyJSON.JSON.boolValue.getter : Swift.Bool` : $`Bool` {
bb0($0 : $`@guaranteed $String`, self : $`@guaranteed $JSON`):
  %4 = field_read self, rawString, $`Any`
  %5 = assign %4, $`String`
  %6 = new $`*String`
  pointer_write %5 to %6
  %8 = new $`*String`
  pointer_write $0 to %8
  %10 = function_ref @`(extension in Foundation):Swift.StringProtocol.caseInsensitiveCompare<A where A1: Swift.StringProtocol>(A1) -> __C.NSComparisonResult`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0 where τ_1_0 : StringProtocol> (@in_guaranteed τ_1_0, @in_guaranteed τ_0_0) -> ComparisonResult`
  %11 = apply %10(%8, %6), $`ComparisonResult`
  %15 = new $`*ComparisonResult`
  pointer_write %11 to %15
  %17 = new $`@thin ComparisonResult.Type`
  %18 = new $`ComparisonResult`
  %18i0 = literal [string] "#ComparisonResult.orderedSame!enumelt", $`Builtin.RawPointer`
  field_write %18i0 to %18, type
  %19 = new $`*ComparisonResult`
  pointer_write %18 to %19
  %21 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %22 = apply %21(%15, %19), $`Bool`
  return %22
}

func [stub] @`(extension in Foundation):Swift.StringProtocol.caseInsensitiveCompare<A where A1: Swift.StringProtocol>(A1) -> __C.NSComparisonResult` : $`ComparisonResult` {
bb0(%0 : $`@in_guaranteed τ_1_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`ComparisonResult`
  return %ret
}

func @`reabstraction thunk helper from @callee_guaranteed (@guaranteed Swift.String) -> (@unowned Swift.Bool, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Swift.String) -> (@unowned Swift.Bool, @error @owned Swift.Error)` : $`(Bool, @error Error)` {
bb0(%0 : $`*String`, %1 : $`@noescape @callee_guaranteed (@guaranteed String) -> (Bool, @error Error)`):
  %2 = pointer_read %0, $`String`
  %1i0 = apply %1(%2), $`Bool`
  %1i1 = new $`Builtin.Int1`
  cond_br %1i1, true bb1(%1i0), false bb2(%1i0)

bb1(%4 : $`Bool`):
  return %4

bb2(%7 : $`@owned $Error`):
  return %7
}

func [stub] @`(extension in Swift):Swift.Sequence.contains(where: (A.Element) throws -> Swift.Bool) throws -> Swift.Bool` : $`(Bool, @error Error)` {
bb0(%0 : $`@noescape @callee_guaranteed @substituted <τ_0_0> (@in_guaranteed τ_0_0) -> (Bool, @error Error) for <τ_0_0.Element>`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`(Bool, @error Error)`
  return %ret
}

func @`SwiftyJSON.JSON.boolValue.setter : Swift.Bool` : $`()` {
bb0(newValue : $`Bool`, self : $`*JSON`):
  %4 = new $`*Any`
  pointer_write newValue to %4
  %8 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %9 = apply %8(%4, self), $`()`
  %12 = new $`()`
  return %12
}

func [coroutine] @`SwiftyJSON.JSON.boolValue.modify : Swift.Bool` : $`@yields @inout Bool` {
bb0(self : $`*JSON`):
  %3 = new $`*Bool`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.boolValue.getter : Swift.Bool`, $`@convention(method) (@guaranteed JSON) -> Bool`
  %6 = apply %5(%4), $`Bool`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Bool`
  %11 = function_ref @`SwiftyJSON.JSON.boolValue.setter : Swift.Bool`, $`@convention(method) (Bool, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Bool`
  %18 = function_ref @`SwiftyJSON.JSON.boolValue.setter : Swift.Bool`, $`@convention(method) (Bool, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Bool`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.string.getter : Swift.String?` : $`@owned Optional<String>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.string!enumelt" : bb1, default bb5

bb1:
  %4 = new $`*Any`
  %5 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %6 = apply %5(%4, self), $`@out Any`
  %7 = new $`*String`
  %4i0 = binary_op %4 [arb] %7, $`Builtin.Int1`
  cond_br %4i0, true bb2, false bb3

bb2:
  %9 = pointer_read %7, $`String`
  %10 = new $`Optional<String>`
  %10i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %10i0 to %10, type
  field_write %9 to %10, data
  br bb4(%10)

bb3:
  %13 = new $`Optional<String>`
  %13i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %13i0 to %13, type
  br bb4(%13)

bb4(%16 : $`@owned $Optional<String>`):
  br bb6(%16)

bb5(%19 : $`Type`):
  %20 = new $`Optional<String>`
  %20i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %20i0 to %20, type
  br bb6(%20)

bb6(%22 : $`@owned $Optional<String>`):
  return %22
}

func @`SwiftyJSON.JSON.string.setter : Swift.String?` : $`()` {
bb0(newValue : $`@owned $Optional<String>`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`*Optional<Any>`
  %6 = new $`*Any`
  %6i0 = field_read [alias %6] %5, data, $`Any`
  pointer_write %6i0 to %6
  %8 = assign newValue, $`Optional<String>`
  switch_enum %8, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb6

bb1(%10 : $`@owned $String`):
  pointer_write %10 to %6
  %5i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  br bb2

bb2:
  %16 = new $`*Optional<Any>`
  %5i1 = pointer_read %5, $`Optional<Any>`
  pointer_write %5i1 to %16
  %16i0 = pointer_read %16, $`Optional<Any>`
  switch_enum %16i0, case "#Optional.some!enumelt" : bb3, case "#Optional.none!enumelt" : bb4

bb3:
  %19 = new $`*Any`
  %19i0 = field_read [alias %19] %16, data, $`Any`
  pointer_write %19i0 to %19
  %19i1 = pointer_read %19, $`Any`
  pointer_write %19i1 to %4
  br bb5

bb4:
  %23 = new $`@thick NSNull.Type`
  %24 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %25 = apply %24(%23), $`@owned NSNull`
  pointer_write %25 to %4
  %28 = new $`()`
  br bb5

bb5:
  %31 = new $`()`
  %35 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %36 = apply %35(%4, self), $`()`
  %40 = new $`()`
  return %40

bb6:
  %5i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i2 to %5, type
  br bb2
}

func [coroutine] @`SwiftyJSON.JSON.string.modify : Swift.String?` : $`@yields @inout Optional<String>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<String>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.string.getter : Swift.String?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<String>`
  %6 = apply %5(%4), $`@owned Optional<String>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<String>`
  %11 = function_ref @`SwiftyJSON.JSON.string.setter : Swift.String?`, $`@convention(method) (@owned Optional<String>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<String>`
  %18 = function_ref @`SwiftyJSON.JSON.string.setter : Swift.String?`, $`@convention(method) (@owned Optional<String>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<String>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.stringValue.getter : Swift.String` : $`@owned String` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.string!enumelt" : bb1, case "#Type.number!enumelt" : bb8, case "#Type.bool!enumelt" : bb9, default bb17

bb1:
  %4 = new $`*String`
  %5 = new $`*Any`
  %6 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %7 = apply %6(%5, self), $`@out Any`
  %8 = new $`*String`
  %5i0 = binary_op %5 [arb] %8, $`Builtin.Int1`
  cond_br %5i0, true bb2, false bb3

bb2:
  %10 = pointer_read %8, $`String`
  %11 = new $`Optional<String>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %10 to %11, data
  br bb4(%11)

bb3:
  %14 = new $`Optional<String>`
  %14i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %14i0 to %14, type
  br bb4(%14)

bb4(%17 : $`@owned $Optional<String>`):
  %18 = assign %17, $`Optional<String>`
  %19 = new $`*Optional<String>`
  %20 = assign %18, $`Optional<String>`
  pointer_write %20 to %19
  %19i0 = pointer_read %19, $`Optional<String>`
  switch_enum %19i0, case "#Optional.some!enumelt" : bb5, case "#Optional.none!enumelt" : bb6

bb5:
  %24 = new $`*Any`
  %24i0 = field_read [alias %24] %19, data, $`Any`
  pointer_write %24i0 to %24
  %25 = pointer_read %24, $`String`
  pointer_write %25 to %4
  br bb7

bb6:
  %29 = literal [string] "", $`$Builtin.RawPointer`
  %30 = literal [int] 0, $`Builtin.Word`
  %31 = literal [int] -1, $`Builtin.Int1`
  %32 = new $`@thin String.Type`
  %33 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %34 = apply %33(%29, %30, %31, %32), $`@owned String`
  pointer_write %34 to %4
  %36 = new $`()`
  br bb7

bb7:
  %39 = new $`()`
  %42 = pointer_read %4, $`String`
  br bb18(%42)

bb8:
  %45 = field_read self, rawNumber, $`Any`
  %46 = assign %45, $`NSNumber`
  %48 = builtin_ref @`#NSNumber.stringValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> @autoreleased Optional<NSString>`
  %49 = apply %48(%46), $`@autoreleased Optional<NSString>`
  %50 = function_ref @`static (extension in Foundation):Swift.String._unconditionallyBridgeFromObjectiveC(__C.NSString?) -> Swift.String`, $`@convention(method) (@guaranteed Optional<NSString>, @thin String.Type) -> @owned String`
  %51 = new $`@thin String.Type`
  %52 = apply %50(%49, %51), $`@owned String`
  br bb18(%52)

bb9:
  %57 = new $`*String`
  %58 = new $`*Optional<String>`
  %59 = new $`*Any`
  %60 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %61 = apply %60(%59, self), $`@out Any`
  %62 = new $`*Bool`
  %59i0 = binary_op %59 [arb] %62, $`Builtin.Int1`
  cond_br %59i0, true bb10, false bb11

bb10:
  %64 = pointer_read %62, $`Bool`
  %65 = new $`Optional<Bool>`
  %65i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %65i0 to %65, type
  field_write %64 to %65, data
  br bb12(%65)

bb11:
  %68 = new $`Optional<Bool>`
  %68i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %68i0 to %68, type
  br bb12(%68)

bb12(%71 : $`Optional<Bool>`):
  %72 = new $`*Optional<Bool>`
  pointer_write %71 to %72
  %74 = function_ref @`closure #1 (Swift.Bool) -> Swift.String in SwiftyJSON.JSON.stringValue.getter : Swift.String`, $`@convention(thin) (Bool) -> @owned String`
  %78 = function_ref @`reabstraction thunk helper from @callee_guaranteed (@unowned Swift.Bool) -> (@owned Swift.String, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Swift.Bool) -> (@out Swift.String, @error @owned Swift.Error)`, $`@convention(thin) (@in_guaranteed Bool, @noescape @callee_guaranteed (Bool) -> (@owned String, @error Error)) -> (@out String, @error Error)`
  %79 = apply %78(%74), $`(@out String, @error Error)`
  %81 = function_ref @`Swift.Optional.map<A>((A) throws -> A1) throws -> A1?`, $`@convention(method) <τ_0_0><τ_1_0> (@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_1_0>, @in_guaranteed Optional<τ_0_0>) -> (@out Optional<τ_1_0>, @error Error)`
  %81i0 = apply %81(%58, %79, %72), $`Optional<τ_1_0>`
  %81i1 = new $`Builtin.Int1`
  cond_br %81i1, true bb13(%81i0), false bb19(%81i0)

bb13(%83 : $`()`):
  %87 = pointer_read %58, $`Optional<String>`
  %88 = assign %87, $`Optional<String>`
  %89 = new $`*Optional<String>`
  %90 = assign %88, $`Optional<String>`
  pointer_write %90 to %89
  %89i0 = pointer_read %89, $`Optional<String>`
  switch_enum %89i0, case "#Optional.some!enumelt" : bb14, case "#Optional.none!enumelt" : bb15

bb14:
  %94 = new $`*Any`
  %94i0 = field_read [alias %94] %89, data, $`Any`
  pointer_write %94i0 to %94
  %95 = pointer_read %94, $`String`
  pointer_write %95 to %57
  br bb16

bb15:
  %99 = literal [string] "", $`$Builtin.RawPointer`
  %100 = literal [int] 0, $`Builtin.Word`
  %101 = literal [int] -1, $`Builtin.Int1`
  %102 = new $`@thin String.Type`
  %103 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %104 = apply %103(%99, %100, %101, %102), $`@owned String`
  pointer_write %104 to %57
  %106 = new $`()`
  br bb16

bb16:
  %109 = new $`()`
  %112 = pointer_read %57, $`String`
  br bb18(%112)

bb17(%115 : $`Type`):
  %116 = literal [string] "", $`$Builtin.RawPointer`
  %117 = literal [int] 0, $`Builtin.Word`
  %118 = literal [int] -1, $`Builtin.Int1`
  %119 = new $`@thin String.Type`
  %120 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %121 = apply %120(%116, %117, %118, %119), $`@owned String`
  br bb18(%121)

bb18(%123 : $`@owned $String`):
  return %123

bb19(%125 : $`@owned $Error`):
  unreachable
}

func @`closure #1 (Swift.Bool) -> Swift.String in SwiftyJSON.JSON.stringValue.getter : Swift.String` : $`@owned String` {
bb0($0 : $`Bool`):
  %2 = new $`@thin String.Type`
  %3 = new $`*Bool`
  pointer_write $0 to %3
  %5 = function_ref @`Swift.String.init<A where A: Swift.LosslessStringConvertible>(A) -> Swift.String`, $`@convention(method) <τ_0_0 where τ_0_0 : LosslessStringConvertible> (@in τ_0_0, @thin String.Type) -> @owned String`
  %6 = apply %5(%3, %2), $`@owned String`
  return %6
}

func @`reabstraction thunk helper from @callee_guaranteed (@unowned Swift.Bool) -> (@owned Swift.String, @error @owned Swift.Error) to @escaping @callee_guaranteed (@in_guaranteed Swift.Bool) -> (@out Swift.String, @error @owned Swift.Error)` : $`(@out String, @error Error)` {
bb0(%0 : $`*String`, %1 : $`*Bool`, %2 : $`@noescape @callee_guaranteed (Bool) -> (@owned String, @error Error)`):
  %3 = pointer_read %1, $`Bool`
  %2i0 = apply %2(%3), $`String`
  %2i1 = new $`Builtin.Int1`
  cond_br %2i1, true bb1(%2i0), false bb2(%2i0)

bb1(%5 : $`@owned $String`):
  pointer_write %5 to %0
  %7 = new $`()`
  return %7

bb2(%9 : $`@owned $Error`):
  return %9
}

func [stub] @`Swift.Optional.map<A>((A) throws -> A1) throws -> A1?` : $`(@out Optional<τ_1_0>, @error Error)` {
bb0(%0 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_1_0>`, %1 : $`@in_guaranteed Optional<τ_0_0>`):
  %ret = new $`(@out Optional<τ_1_0>, @error Error)`
  return %ret
}

func @`SwiftyJSON.JSON.stringValue.setter : Swift.String` : $`()` {
bb0(newValue : $`@owned $String`, self : $`*JSON`):
  %4 = new $`*Any`
  %6 = assign newValue, $`String`
  pointer_write %6 to %4
  %10 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %11 = apply %10(%4, self), $`()`
  %16 = new $`()`
  return %16
}

func [coroutine] @`SwiftyJSON.JSON.stringValue.modify : Swift.String` : $`@yields @inout String` {
bb0(self : $`*JSON`):
  %3 = new $`*String`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.stringValue.getter : Swift.String`, $`@convention(method) (@guaranteed JSON) -> @owned String`
  %6 = apply %5(%4), $`@owned String`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`String`
  %11 = function_ref @`SwiftyJSON.JSON.stringValue.setter : Swift.String`, $`@convention(method) (@owned String, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`String`
  %18 = function_ref @`SwiftyJSON.JSON.stringValue.setter : Swift.String`, $`@convention(method) (@owned String, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout String`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.number.getter : __C.NSNumber?` : $`@owned Optional<NSNumber>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.number!enumelt" : bb1, case "#Type.bool!enumelt" : bb2, default bb6

bb1:
  %4 = field_read self, rawNumber, $`Any`
  %5 = assign %4, $`NSNumber`
  %6 = new $`Optional<NSNumber>`
  %6i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %6i0 to %6, type
  field_write %5 to %6, data
  br bb7(%6)

bb2:
  %8 = new $`@thick NSNumber.Type`
  %9 = field_read self, rawBool, $`Any`
  %10 = field_read %9, _value, $`Any`
  cond_br %10, true bb3, false bb4

bb3:
  %12 = literal [int] 1, $`Builtin.Int64`
  %13 = new $`Int`
  field_write %12 to %13, _value
  br bb5(%13)

bb4:
  %15 = literal [int] 0, $`Builtin.Int64`
  %16 = new $`Int`
  field_write %15 to %16, _value
  br bb5(%16)

bb5(%18 : $`Int`):
  %19 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %20 = apply %19(%18, %8), $`@owned NSNumber`
  br bb7(%20)

bb6(%23 : $`Type`):
  %24 = new $`Optional<NSNumber>`
  %24i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %24i0 to %24, type
  br bb7(%24)

bb7(%26 : $`@owned $Optional<NSNumber>`):
  return %26
}

func @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.Int) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (Int, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func @`SwiftyJSON.JSON.number.setter : __C.NSNumber?` : $`()` {
bb0(newValue : $`@owned $Optional<NSNumber>`, self : $`*JSON`):
  %4 = new $`*Any`
  %6 = assign newValue, $`Optional<NSNumber>`
  switch_enum %6, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb6

bb1(%8 : $`@owned $NSNumber`):
  %10 = new $`Optional<NSObject>`
  %10i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %10i0 to %10, type
  field_write %8 to %10, data
  br bb2(%10)

bb2(%13 : $`@owned $Optional<NSObject>`):
  %14 = assign %13, $`Optional<NSObject>`
  %16 = new $`*Optional<NSObject>`
  %17 = assign %14, $`Optional<NSObject>`
  pointer_write %17 to %16
  %16i0 = pointer_read %16, $`Optional<NSObject>`
  switch_enum %16i0, case "#Optional.some!enumelt" : bb3, case "#Optional.none!enumelt" : bb4

bb3:
  %21 = new $`*Any`
  %21i0 = field_read [alias %21] %16, data, $`Any`
  pointer_write %21i0 to %21
  %21i1 = pointer_read %21, $`NSObject`
  pointer_write %21i1 to %4
  br bb5

bb4:
  %25 = new $`@thick NSNull.Type`
  %26 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %27 = apply %26(%25), $`@owned NSNull`
  pointer_write %27 to %4
  %30 = new $`()`
  br bb5

bb5:
  %33 = new $`()`
  %36 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %37 = apply %36(%4, self), $`()`
  %41 = new $`()`
  return %41

bb6:
  %44 = new $`Optional<NSObject>`
  %44i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %44i0 to %44, type
  br bb2(%44)
}

func [coroutine] @`SwiftyJSON.JSON.number.modify : __C.NSNumber?` : $`@yields @inout Optional<NSNumber>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<NSNumber>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %6 = apply %5(%4), $`@owned Optional<NSNumber>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<NSNumber>`
  %11 = function_ref @`SwiftyJSON.JSON.number.setter : __C.NSNumber?`, $`@convention(method) (@owned Optional<NSNumber>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<NSNumber>`
  %18 = function_ref @`SwiftyJSON.JSON.number.setter : __C.NSNumber?`, $`@convention(method) (@owned Optional<NSNumber>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<NSNumber>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber` : $`@owned NSNumber` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.string!enumelt" : bb1, case "#Type.number!enumelt" : bb8, case "#Type.bool!enumelt" : bb15, default bb19

bb1:
  %4 = new $`@thick NSDecimalNumber.Type`
  %5 = new $`*Any`
  %6 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %7 = apply %6(%5, self), $`@out Any`
  %8 = new $`*String`
  %5i0 = binary_op %5 [arb] %8, $`Builtin.Int1`
  cond_br %5i0, true bb2, false bb3

bb2:
  %10 = pointer_read %8, $`String`
  %11 = new $`Optional<String>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %10 to %11, data
  br bb4(%11)

bb3:
  %14 = new $`Optional<String>`
  %14i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %14i0 to %14, type
  br bb4(%14)

bb4(%17 : $`@owned $Optional<String>`):
  %18 = function_ref @`__C.NSDecimalNumber.__allocating_init(string: Swift.String?) -> __C.NSDecimalNumber`, $`@convention(method) (@owned Optional<String>, @thick NSDecimalNumber.Type) -> @owned NSDecimalNumber`
  decimal = apply %18(%17, %4), $`@owned NSDecimalNumber`
  %22 = new $`@thick NSDecimalNumber.Type`
  %24 = new $`*NSDecimalNumber`
  pointer_write decimal to %24
  %26 = new $`@objc_metatype NSDecimalNumber.Type`
  %27 = builtin_ref @`#NSDecimalNumber.notANumber!getter.foreign`, $`@convention(objc_method) (@objc_metatype NSDecimalNumber.Type) -> @autoreleased NSDecimalNumber`
  %28 = apply %27(%26), $`@autoreleased NSDecimalNumber`
  %29 = new $`*NSDecimalNumber`
  pointer_write %28 to %29
  %34 = pointer_read %24, $`NSObject`
  %35 = pointer_read %29, $`NSObject`
  %36 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %37 = apply %36(%34, %35, %22), $`Bool`
  %44 = field_read %37, _value, $`Any`
  cond_br %44, true bb5, false bb6

bb5:
  %46 = new $`@objc_metatype NSDecimalNumber.Type`
  %47 = builtin_ref @`#NSDecimalNumber.zero!getter.foreign`, $`@convention(objc_method) (@objc_metatype NSDecimalNumber.Type) -> @autoreleased NSDecimalNumber`
  %48 = apply %47(%46), $`@autoreleased NSDecimalNumber`
  br bb7(%48)

bb6:
  %51 = assign decimal, $`NSDecimalNumber`
  br bb7(%51)

bb7(%54 : $`@owned $NSDecimalNumber`):
  br bb20(%54)

bb8:
  %58 = new $`*NSNumber`
  %59 = new $`*Any`
  %60 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %61 = apply %60(%59, self), $`@out Any`
  %62 = new $`*NSNumber`
  %59i0 = binary_op %59 [arb] %62, $`Builtin.Int1`
  cond_br %59i0, true bb9, false bb10

bb9:
  %64 = pointer_read %62, $`NSNumber`
  %65 = new $`Optional<NSNumber>`
  %65i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %65i0 to %65, type
  field_write %64 to %65, data
  br bb11(%65)

bb10:
  %68 = new $`Optional<NSNumber>`
  %68i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %68i0 to %68, type
  br bb11(%68)

bb11(%71 : $`@owned $Optional<NSNumber>`):
  %72 = assign %71, $`Optional<NSNumber>`
  %73 = new $`*Optional<NSNumber>`
  %74 = assign %72, $`Optional<NSNumber>`
  pointer_write %74 to %73
  %73i0 = pointer_read %73, $`Optional<NSNumber>`
  switch_enum %73i0, case "#Optional.some!enumelt" : bb12, case "#Optional.none!enumelt" : bb13

bb12:
  %78 = new $`*Any`
  %78i0 = field_read [alias %78] %73, data, $`Any`
  pointer_write %78i0 to %78
  %79 = pointer_read %78, $`NSNumber`
  pointer_write %79 to %58
  br bb14

bb13:
  %83 = new $`@thick NSNumber.Type`
  %84 = literal [int] 0, $`Builtin.Int64`
  %85 = new $`Int`
  field_write %84 to %85, _value
  %86 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %87 = apply %86(%85, %83), $`@owned NSNumber`
  pointer_write %87 to %58
  %89 = new $`()`
  br bb14

bb14:
  %92 = new $`()`
  %95 = pointer_read %58, $`NSNumber`
  br bb20(%95)

bb15:
  %98 = new $`@thick NSNumber.Type`
  %99 = field_read self, rawBool, $`Any`
  %100 = field_read %99, _value, $`Any`
  cond_br %100, true bb16, false bb17

bb16:
  %102 = literal [int] 1, $`Builtin.Int64`
  %103 = new $`Int`
  field_write %102 to %103, _value
  br bb18(%103)

bb17:
  %105 = literal [int] 0, $`Builtin.Int64`
  %106 = new $`Int`
  field_write %105 to %106, _value
  br bb18(%106)

bb18(%108 : $`Int`):
  %109 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %110 = apply %109(%108, %98), $`@owned NSNumber`
  br bb20(%110)

bb19(%112 : $`Type`):
  %113 = new $`@thick NSNumber.Type`
  %114 = literal [float] 0.0, $`Builtin.FPIEEE64`
  %115 = new $`Double`
  field_write %114 to %115, _value
  %116 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Double) -> __C.NSNumber`, $`@convention(method) (Double, @thick NSNumber.Type) -> @owned NSNumber`
  %117 = apply %116(%115, %113), $`@owned NSNumber`
  br bb20(%117)

bb20(%119 : $`@owned $NSNumber`):
  return %119
}

func @`__C.NSDecimalNumber.__allocating_init(string: Swift.String?) -> __C.NSDecimalNumber` : $`@owned NSDecimalNumber` {
bb0(%0 : $`@owned $Optional<String>`, %1 : $`@thick NSDecimalNumber.Type`):
  %3 = new $`NSDecimalNumber`
  %4 = function_ref @`@nonobjc __C.NSDecimalNumber.init(string: Swift.String?) -> __C.NSDecimalNumber`, $`@convention(method) (@owned Optional<String>, @owned NSDecimalNumber) -> @owned NSDecimalNumber`
  %5 = apply %4(%0, %3), $`@owned NSDecimalNumber`
  return %5
}

func @`@nonobjc __C.NSDecimalNumber.init(string: Swift.String?) -> __C.NSDecimalNumber` : $`@owned NSDecimalNumber` {
bb0(%0 : $`@owned $Optional<String>`, %1 : $`@owned $NSDecimalNumber`):
  switch_enum %0, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%3 : $`@owned $String`):
  %4 = function_ref @`(extension in Foundation):Swift.String._bridgeToObjectiveC() -> __C.NSString`, $`@convention(method) (@guaranteed String) -> @owned NSString`
  %6 = apply %4(%3), $`@owned NSString`
  %8 = new $`Optional<NSString>`
  %8i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %8i0 to %8, type
  field_write %6 to %8, data
  br bb3(%8)

bb2:
  %11 = new $`Optional<NSString>`
  %11i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  br bb3(%11)

bb3(%13 : $`@owned $Optional<NSString>`):
  %14 = builtin_ref @`#NSDecimalNumber.init!initializer.foreign`, $`@convention(objc_method) (Optional<NSString>, @owned NSDecimalNumber) -> @owned NSDecimalNumber`
  %15 = apply %14(%13, %1), $`@owned NSDecimalNumber`
  return %15
}

func [stub] @`(extension in Foundation):Swift.String._bridgeToObjectiveC() -> __C.NSString` : $`@owned NSString` {
bb0(%0 : $`@guaranteed String`):
  %ret = new $`@owned NSString`
  return %ret
}

func @`Swift.Double.init(_builtinFloatLiteral: Builtin.FPIEEE64) -> Swift.Double` : $`Double` {
bb0(%0 : $`Builtin.FPIEEE64`, %1 : $`@thin Double.Type`):
  %2 = new $`Double`
  field_write %0 to %2, _value
  return %2
}

func @`__C.NSNumber.__allocating_init(value: Swift.Double) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Double`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.Double) -> __C.NSNumber`, $`@convention(method) (Double, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.Double) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Double`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (Double, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func @`SwiftyJSON.JSON.numberValue.setter : __C.NSNumber` : $`()` {
bb0(newValue : $`@owned $NSNumber`, self : $`*JSON`):
  %4 = new $`*Any`
  %6 = assign newValue, $`NSNumber`
  pointer_write %6 to %4
  %10 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %11 = apply %10(%4, self), $`()`
  %16 = new $`()`
  return %16
}

func [coroutine] @`SwiftyJSON.JSON.numberValue.modify : __C.NSNumber` : $`@yields @inout NSNumber` {
bb0(self : $`*JSON`):
  %3 = new $`*NSNumber`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %6 = apply %5(%4), $`@owned NSNumber`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`NSNumber`
  %11 = function_ref @`SwiftyJSON.JSON.numberValue.setter : __C.NSNumber`, $`@convention(method) (@owned NSNumber, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`NSNumber`
  %18 = function_ref @`SwiftyJSON.JSON.numberValue.setter : __C.NSNumber`, $`@convention(method) (@owned NSNumber, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout NSNumber`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.null.setter : __C.NSNull?` : $`()` {
bb0(newValue : $`@owned $Optional<NSNull>`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNull.Type`
  %6 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %7 = apply %6(%5), $`@owned NSNull`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %16 = new $`()`
  return %16
}

func @`SwiftyJSON.JSON.null.getter : __C.NSNull?` : $`@owned Optional<NSNull>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, type, $`Any`
  switch_enum %2, case "#Type.null!enumelt" : bb1, default bb2

bb1:
  %4 = field_read self, rawNull, $`Any`
  %5 = assign %4, $`NSNull`
  %6 = new $`Optional<NSNull>`
  %6i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %6i0 to %6, type
  field_write %5 to %6, data
  br bb3(%6)

bb2(%8 : $`Type`):
  %9 = new $`Optional<NSNull>`
  %9i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %9i0 to %9, type
  br bb3(%9)

bb3(%11 : $`@owned $Optional<NSNull>`):
  return %11
}

func [coroutine] @`SwiftyJSON.JSON.null.modify : __C.NSNull?` : $`@yields @inout Optional<NSNull>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<NSNull>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.null.getter : __C.NSNull?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNull>`
  %6 = apply %5(%4), $`@owned Optional<NSNull>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<NSNull>`
  %11 = function_ref @`SwiftyJSON.JSON.null.setter : __C.NSNull?`, $`@convention(method) (@owned Optional<NSNull>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<NSNull>`
  %18 = function_ref @`SwiftyJSON.JSON.null.setter : __C.NSNull?`, $`@convention(method) (@owned Optional<NSNull>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<NSNull>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.exists() -> Swift.Bool` : $`Bool` {
bb0(self : $`@guaranteed $JSON`):
  %2 = field_read self, error, $`Any`
  switch_enum %2, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb1

bb1:
  br bb8

bb2(errorValue : $`SwiftyJSONError`):
  %7 = new $`*ClosedRange<Int>`
  %8 = new $`@thin Int.Type`
  %9 = literal [int] 400, $`Builtin.Int64`
  %10 = new $`Int`
  field_write %9 to %10, _value
  %11 = literal [int] 1000, $`Builtin.Int64`
  %12 = new $`Int`
  field_write %11 to %12, _value
  br bb3

bb3:
  br bb4

bb4:
  br bb5

bb5:
  %16 = new $`@thin ClosedRange<Int>.Type`
  %17 = new $`*Int`
  pointer_write %10 to %17
  %19 = new $`*Int`
  pointer_write %12 to %19
  %21 = function_ref @`Swift.ClosedRange.init(uncheckedBounds: (lower: A, upper: A)) -> Swift.ClosedRange<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thin ClosedRange<τ_0_0>.Type) -> @out ClosedRange<τ_0_0>`
  %22 = apply %21(%7, %17, %19, %16), $`@out ClosedRange<τ_0_0>`
  %25 = new $`()`
  %26 = pointer_read %7, $`ClosedRange<Int>`
  %27 = new $`*ClosedRange<Int>`
  pointer_write %26 to %27
  %29 = function_ref @`SwiftyJSON.SwiftyJSONError.errorCode.getter : Swift.Int`, $`@convention(method) (SwiftyJSONError) -> Int`
  %30 = apply %29(errorValue), $`Int`
  %31 = new $`*Int`
  pointer_write %30 to %31
  %33 = function_ref @`Swift.ClosedRange.contains(A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed ClosedRange<τ_0_0>) -> Bool`
  %34 = apply %33(%31, %27), $`Bool`
  %38 = field_read %34, _value, $`Any`
  cond_br %38, true bb6, false bb7

bb6:
  %40 = literal [int] 0, $`Builtin.Int1`
  %41 = new $`Bool`
  br bb9(%41)

bb7:
  br bb8

bb8:
  %44 = literal [int] -1, $`Builtin.Int1`
  %45 = new $`Bool`
  br bb9(%45)

bb9(%47 : $`Bool`):
  return %47
}

func @`static (extension in Swift):Swift.Comparable.... infix(A, A) -> Swift.ClosedRange<A>` : $`@out ClosedRange<Self>` {
bb0(%0 : $`*ClosedRange<Self>`, %1 : $`*Self`, %2 : $`*Self`, %3 : $`@thick Self.Type`):
  %4 = new $`*Self`
  %1i0 = pointer_read %1, $`Self`
  pointer_write %1i0 to %4
  %6 = new $`*Self`
  %2i0 = pointer_read %2, $`Self`
  pointer_write %2i0 to %6
  %8 = literal [string] "Can't form Range with upperBound < lowerBound", $`$Builtin.RawPointer`
  %9 = literal [int] 45, $`Builtin.Word`
  %10i0 = builtin_ref @`ptrtoint_Word`, $`Any`
  %10 = apply %10i0(%8), $`Builtin.Word`
  br bb1

bb1:
  %12 = literal [int] 2, $`Builtin.Int8`
  br bb2

bb2:
  %14 = new $`StaticString`
  %15 = literal [string] "Swift/arm64-apple-ios.swiftinterface", $`$Builtin.RawPointer`
  %16 = literal [int] 36, $`Builtin.Word`
  %17i0 = builtin_ref @`ptrtoint_Word`, $`Any`
  %17 = apply %17i0(%15), $`Builtin.Word`
  br bb3

bb3:
  %19 = literal [int] 2, $`Builtin.Int8`
  br bb4

bb4:
  %21 = new $`StaticString`
  %22 = literal [int] 5557, $`Builtin.Int64`
  %23 = new $`UInt`
  field_write %22 to %23, _value
  br bb5

bb5:
  %25 = new $`@thick Self.Type`
  %26 = dynamic_ref @`#Comparable."<="`, $`@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %27 = apply %26(%4, %6, %25), $`Bool`
  %28 = field_read %27, _value, $`Any`
  %29 = literal [int] -1, $`Builtin.Int1`
  %30i0 = builtin_ref @`int_expect_Int1`, $`Any`
  %30 = apply %30i0(%28, %29), $`Builtin.Int1`
  %31 = literal [int] -1, $`Builtin.Int1`
  %32i0 = builtin_ref @`xor_Int1`, $`Any`
  %32 = apply %32i0(%30, %31), $`Builtin.Int1`
  cond_br %32, true bb8, false bb6

bb6:
  br bb7

bb7:
  %39 = new $`@thin ClosedRange<Self>.Type`
  %40 = new $`*Self`
  %1i1 = pointer_read %1, $`Self`
  pointer_write %1i1 to %40
  %42 = new $`*Self`
  %2i1 = pointer_read %2, $`Self`
  pointer_write %2i1 to %42
  %44 = function_ref @`Swift.ClosedRange.init(uncheckedBounds: (lower: A, upper: A)) -> Swift.ClosedRange<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thin ClosedRange<τ_0_0>.Type) -> @out ClosedRange<τ_0_0>`
  %45 = apply %44(%0, %40, %42, %39), $`@out ClosedRange<τ_0_0>`
  %48 = new $`()`
  return %48

bb8:
  %50 = literal [string] "Fatal error", $`$Builtin.RawPointer`
  %51 = literal [int] 11, $`Builtin.Word`
  %52i0 = builtin_ref @`ptrtoint_Word`, $`Any`
  %52 = apply %52i0(%50), $`Builtin.Word`
  br bb9

bb9:
  %54 = literal [int] 2, $`Builtin.Int8`
  br bb10

bb10:
  %56 = new $`StaticString`
  %57 = literal [int] 0, $`Builtin.Int32`
  %58 = new $`UInt32`
  field_write %57 to %58, _value
  %59 = function_ref @`Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never`, $`@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never`
  %60 = apply %59(%56, %14, %21, %23, %58), $`Never`
  unreachable
}

func [stub] @`Swift.ClosedRange.contains(A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed ClosedRange<τ_0_0>`):
  %ret = new $`Bool`
  return %ret
}

func @`SwiftyJSON.JSON.url.getter : Foundation.URL?` : $`@out Optional<URL>` {
bb0(%0 : $`*Optional<URL>`, self : $`@guaranteed $JSON`):
  %3 = field_read self, type, $`Any`
  switch_enum %3, case "#Type.string!enumelt" : bb1, default bb9

bb1:
  %5 = field_read self, rawString, $`Any`
  %6 = assign %5, $`String`
  %7 = new $`*String`
  pointer_write %6 to %7
  %9 = literal [string] "%[0-9A-Fa-f]{2}", $`$Builtin.RawPointer`
  %10 = literal [int] 15, $`Builtin.Word`
  %11 = literal [int] -1, $`Builtin.Int1`
  %12 = new $`@thin String.Type`
  %13 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %14 = apply %13(%9, %10, %11, %12), $`@owned String`
  %15 = new $`*String`
  pointer_write %14 to %15
  %17 = literal [int] 1024, $`Builtin.Int64`
  %18 = new $`UInt`
  field_write %17 to %18, _value
  %19 = new $`NSString.CompareOptions`
  %20 = new $`Optional<Range<String.Index>>`
  %20i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %20i0 to %20, type
  %21 = new $`*Optional<Locale>`
  %21i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %21i0 to %21, type
  %23 = function_ref @`(extension in Foundation):Swift.StringProtocol.range<A where A1: Swift.StringProtocol>(of: A1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?, locale: Foundation.Locale?) -> Swift.Range<Swift.String.Index>?`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol><τ_1_0 where τ_1_0 : StringProtocol> (@in_guaranteed τ_1_0, NSString.CompareOptions, Optional<Range<String.Index>>, @in_guaranteed Optional<Locale>, @in_guaranteed τ_0_0) -> Optional<Range<String.Index>>`
  %24 = apply %23(%15, %19, %20, %21, %7), $`Optional<Range<String.Index>>`
  %31 = new $`_OptionalNilComparisonType`
  %32 = new $`*Optional<Range<String.Index>>`
  pointer_write %24 to %32
  %32i0 = pointer_read %32, $`Optional<Range<String.Index>>`
  switch_enum %32i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb3

bb2:
  %35 = new $`*Any`
  %35i0 = field_read [alias %35] %32, data, $`Any`
  pointer_write %35i0 to %35
  %36 = literal [int] -1, $`Builtin.Int1`
  %37 = new $`Bool`
  br bb4(%37)

bb3:
  %41 = literal [int] 0, $`Builtin.Int1`
  %42 = new $`Bool`
  br bb4(%42)

bb4(%45 : $`Bool`):
  %46 = field_read %45, _value, $`Any`
  cond_br %46, true bb5, false bb6

bb5:
  %48 = new $`@thin URL.Type`
  %49 = field_read self, rawString, $`Any`
  %50 = assign %49, $`String`
  %51 = function_ref @`Foundation.URL.init(string: __shared Swift.String) -> Foundation.URL?`, $`@convention(method) (@guaranteed String, @thin URL.Type) -> @out Optional<URL>`
  %52 = apply %51(%0, %50, %48), $`@out Optional<URL>`
  br bb10

bb6:
  %55 = field_read self, rawString, $`Any`
  %56 = assign %55, $`String`
  %57 = new $`*String`
  pointer_write %56 to %57
  %59 = new $`@thin CharacterSet.Type`
  %60 = new $`*CharacterSet`
  %61 = function_ref @`static Foundation.CharacterSet.urlQueryAllowed.getter : Foundation.CharacterSet`, $`@convention(method) (@thin CharacterSet.Type) -> @out CharacterSet`
  %62 = apply %61(%60, %59), $`@out CharacterSet`
  %63 = function_ref @`(extension in Foundation):Swift.StringProtocol.addingPercentEncoding(withAllowedCharacters: Foundation.CharacterSet) -> Swift.String?`, $`@convention(method) <τ_0_0 where τ_0_0 : StringProtocol> (@in_guaranteed CharacterSet, @in_guaranteed τ_0_0) -> @owned Optional<String>`
  %64 = apply %63(%60, %57), $`@owned Optional<String>`
  switch_enum %64, case "#Optional.some!enumelt" : bb7, case "#Optional.none!enumelt" : bb8

bb7(encodedString_ : $`@owned $String`):
  %72 = new $`@thin URL.Type`
  %74 = function_ref @`Foundation.URL.init(string: __shared Swift.String) -> Foundation.URL?`, $`@convention(method) (@guaranteed String, @thin URL.Type) -> @out Optional<URL>`
  %75 = apply %74(%0, encodedString_, %72), $`@out Optional<URL>`
  br bb10

bb8:
  %0i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %0i0 to %0, type
  br bb10

bb9(%81 : $`Type`):
  %0i1 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %0i1 to %0, type
  br bb10

bb10:
  %84 = new $`()`
  return %84
}

func [stub] @`(extension in Foundation):Swift.StringProtocol.range<A where A1: Swift.StringProtocol>(of: A1, options: __C.NSStringCompareOptions, range: Swift.Range<Swift.String.Index>?, locale: Foundation.Locale?) -> Swift.Range<Swift.String.Index>?` : $`Optional<Range<String.Index>>` {
bb0(%0 : $`@in_guaranteed τ_1_0`, %1 : $`NSString.CompareOptions`, %2 : $`Optional<Range<String.Index>>`, %3 : $`@in_guaranteed Optional<Locale>`, %4 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Optional<Range<String.Index>>`
  return %ret
}

func @`static Swift.Optional.!= infix(A?, Swift._OptionalNilComparisonType) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`*Optional<Wrapped>`, %1 : $`_OptionalNilComparisonType`, %2 : $`@thin Optional<Wrapped>.Type`):
  %3 = new $`*Optional<Wrapped>`
  %0i0 = pointer_read %0, $`Optional<Wrapped>`
  pointer_write %0i0 to %3
  %3i0 = pointer_read %3, $`Optional<Wrapped>`
  switch_enum %3i0, case "#Optional.some!enumelt" : bb2, case "#Optional.none!enumelt" : bb1

bb1:
  %6 = literal [int] 0, $`Builtin.Int1`
  %7 = new $`Bool`
  br bb3(%7)

bb2:
  %10 = new $`*Any`
  %10i0 = field_read [alias %10] %3, data, $`Any`
  pointer_write %10i0 to %10
  %11 = literal [int] -1, $`Builtin.Int1`
  %12 = new $`Bool`
  br bb3(%12)

bb3(%16 : $`Bool`):
  return %16
}

func [stub] @`Foundation.URL.init(string: __shared Swift.String) -> Foundation.URL?` : $`@out Optional<URL>` {
bb0(%0 : $`@guaranteed String`, %1 : $`@thin URL.Type`):
  %ret = new $`@out Optional<URL>`
  return %ret
}

func [stub] @`static Foundation.CharacterSet.urlQueryAllowed.getter : Foundation.CharacterSet` : $`@out CharacterSet` {
bb0(%0 : $`@thin CharacterSet.Type`):
  %ret = new $`@out CharacterSet`
  return %ret
}

func [stub] @`(extension in Foundation):Swift.StringProtocol.addingPercentEncoding(withAllowedCharacters: Foundation.CharacterSet) -> Swift.String?` : $`@owned Optional<String>` {
bb0(%0 : $`@in_guaranteed CharacterSet`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@owned Optional<String>`
  return %ret
}

func @`SwiftyJSON.JSON.url.setter : Foundation.URL?` : $`()` {
bb0(newValue : $`*Optional<URL>`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`*Optional<Any>`
  %6 = new $`*Any`
  %6i0 = field_read [alias %6] %5, data, $`Any`
  pointer_write %6i0 to %6
  %7 = new $`*Optional<URL>`
  %0i0 = pointer_read newValue, $`Optional<URL>`
  pointer_write %0i0 to %7
  %7i0 = pointer_read %7, $`Optional<URL>`
  switch_enum %7i0, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb6

bb1:
  %10 = new $`*Any`
  %10i0 = field_read [alias %10] %7, data, $`Any`
  pointer_write %10i0 to %10
  %11 = new $`*URL`
  %10i1 = pointer_read %10, $`URL`
  pointer_write %10i1 to %11
  %13 = function_ref @`Foundation.URL.absoluteString.getter : Swift.String`, $`@convention(method) (@in_guaranteed URL) -> @owned String`
  %14 = apply %13(%11), $`@owned String`
  pointer_write %14 to %6
  %5i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  br bb2

bb2:
  %23 = new $`*Optional<Any>`
  %5i1 = pointer_read %5, $`Optional<Any>`
  pointer_write %5i1 to %23
  %23i0 = pointer_read %23, $`Optional<Any>`
  switch_enum %23i0, case "#Optional.some!enumelt" : bb3, case "#Optional.none!enumelt" : bb4

bb3:
  %26 = new $`*Any`
  %26i0 = field_read [alias %26] %23, data, $`Any`
  pointer_write %26i0 to %26
  %26i1 = pointer_read %26, $`Any`
  pointer_write %26i1 to %4
  br bb5

bb4:
  %30 = new $`@thick NSNull.Type`
  %31 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %32 = apply %31(%30), $`@owned NSNull`
  pointer_write %32 to %4
  %35 = new $`()`
  br bb5

bb5:
  %38 = new $`()`
  %42 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %43 = apply %42(%4, self), $`()`
  %47 = new $`()`
  return %47

bb6:
  %5i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i2 to %5, type
  br bb2
}

func [stub] @`Foundation.URL.absoluteString.getter : Swift.String` : $`@owned String` {
bb0(%0 : $`@in_guaranteed URL`):
  %ret = new $`@owned String`
  return %ret
}

func [coroutine] @`SwiftyJSON.JSON.url.modify : Foundation.URL?` : $`@yields @inout Optional<URL>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<URL>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.url.getter : Foundation.URL?`, $`@convention(method) (@guaranteed JSON) -> @out Optional<URL>`
  %6 = apply %5(%3, %4), $`@out Optional<URL>`
  yield (%3), resume bb1, unwind bb2

bb1:
  %9 = function_ref @`SwiftyJSON.JSON.url.setter : Foundation.URL?`, $`@convention(method) (@in Optional<URL>, @inout JSON) -> ()`
  %10 = apply %9(%3, self), $`()`
  %13 = new $`()`
  return %13

bb2:
  %15 = new $`*Optional<URL>`
  %3i0 = pointer_read %3, $`Optional<URL>`
  pointer_write %3i0 to %15
  %17 = function_ref @`SwiftyJSON.JSON.url.setter : Foundation.URL?`, $`@convention(method) (@in Optional<URL>, @inout JSON) -> ()`
  %18 = apply %17(%15, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<URL>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.double.getter : Swift.Double?` : $`Optional<Double>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.doubleValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Double`
  %8 = apply %7(%5), $`Double`
  %11 = new $`Optional<Double>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<Double>`):
  return %13

bb3:
  %15 = new $`Optional<Double>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.double.setter : Swift.Double?` : $`()` {
bb0(newValue : $`Optional<Double>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`Double`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Double) -> __C.NSNumber`, $`@convention(method) (Double, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func [coroutine] @`SwiftyJSON.JSON.double.modify : Swift.Double?` : $`@yields @inout Optional<Double>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Double>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.double.getter : Swift.Double?`, $`@convention(method) (@guaranteed JSON) -> Optional<Double>`
  %6 = apply %5(%4), $`Optional<Double>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Double>`
  %11 = function_ref @`SwiftyJSON.JSON.double.setter : Swift.Double?`, $`@convention(method) (Optional<Double>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Double>`
  %18 = function_ref @`SwiftyJSON.JSON.double.setter : Swift.Double?`, $`@convention(method) (Optional<Double>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Double>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.doubleValue.getter : Swift.Double` : $`Double` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.doubleValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Double`
  %6 = apply %5(%3), $`Double`
  return %6
}

func @`SwiftyJSON.JSON.doubleValue.setter : Swift.Double` : $`()` {
bb0(newValue : $`Double`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Double) -> __C.NSNumber`, $`@convention(method) (Double, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.doubleValue.modify : Swift.Double` : $`@yields @inout Double` {
bb0(self : $`*JSON`):
  %3 = new $`*Double`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.doubleValue.getter : Swift.Double`, $`@convention(method) (@guaranteed JSON) -> Double`
  %6 = apply %5(%4), $`Double`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Double`
  %11 = function_ref @`SwiftyJSON.JSON.doubleValue.setter : Swift.Double`, $`@convention(method) (Double, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Double`
  %18 = function_ref @`SwiftyJSON.JSON.doubleValue.setter : Swift.Double`, $`@convention(method) (Double, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Double`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.float.getter : Swift.Float?` : $`Optional<Float>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.floatValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Float`
  %8 = apply %7(%5), $`Float`
  %11 = new $`Optional<Float>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<Float>`):
  return %13

bb3:
  %15 = new $`Optional<Float>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.float.setter : Swift.Float?` : $`()` {
bb0(newValue : $`Optional<Float>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`Float`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Float) -> __C.NSNumber`, $`@convention(method) (Float, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.Float) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Float`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.Float) -> __C.NSNumber`, $`@convention(method) (Float, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.Float) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Float`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (Float, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.float.modify : Swift.Float?` : $`@yields @inout Optional<Float>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Float>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.float.getter : Swift.Float?`, $`@convention(method) (@guaranteed JSON) -> Optional<Float>`
  %6 = apply %5(%4), $`Optional<Float>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Float>`
  %11 = function_ref @`SwiftyJSON.JSON.float.setter : Swift.Float?`, $`@convention(method) (Optional<Float>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Float>`
  %18 = function_ref @`SwiftyJSON.JSON.float.setter : Swift.Float?`, $`@convention(method) (Optional<Float>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Float>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.floatValue.getter : Swift.Float` : $`Float` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.floatValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Float`
  %6 = apply %5(%3), $`Float`
  return %6
}

func @`SwiftyJSON.JSON.floatValue.setter : Swift.Float` : $`()` {
bb0(newValue : $`Float`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Float) -> __C.NSNumber`, $`@convention(method) (Float, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.floatValue.modify : Swift.Float` : $`@yields @inout Float` {
bb0(self : $`*JSON`):
  %3 = new $`*Float`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.floatValue.getter : Swift.Float`, $`@convention(method) (@guaranteed JSON) -> Float`
  %6 = apply %5(%4), $`Float`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Float`
  %11 = function_ref @`SwiftyJSON.JSON.floatValue.setter : Swift.Float`, $`@convention(method) (Float, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Float`
  %18 = function_ref @`SwiftyJSON.JSON.floatValue.setter : Swift.Float`, $`@convention(method) (Float, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Float`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int.getter : Swift.Int?` : $`Optional<Int>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.intValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int`
  %8 = apply %7(%5), $`Int`
  %11 = new $`Optional<Int>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<Int>`):
  return %13

bb3:
  %15 = new $`Optional<Int>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.int.setter : Swift.Int?` : $`()` {
bb0(newValue : $`Optional<Int>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`Int`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func [coroutine] @`SwiftyJSON.JSON.int.modify : Swift.Int?` : $`@yields @inout Optional<Int>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Int>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int.getter : Swift.Int?`, $`@convention(method) (@guaranteed JSON) -> Optional<Int>`
  %6 = apply %5(%4), $`Optional<Int>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Int>`
  %11 = function_ref @`SwiftyJSON.JSON.int.setter : Swift.Int?`, $`@convention(method) (Optional<Int>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Int>`
  %18 = function_ref @`SwiftyJSON.JSON.int.setter : Swift.Int?`, $`@convention(method) (Optional<Int>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Int>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.intValue.getter : Swift.Int` : $`Int` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.intValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int`
  %6 = apply %5(%3), $`Int`
  return %6
}

func @`SwiftyJSON.JSON.intValue.setter : Swift.Int` : $`()` {
bb0(newValue : $`Int`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.intValue.modify : Swift.Int` : $`@yields @inout Int` {
bb0(self : $`*JSON`):
  %3 = new $`*Int`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.intValue.getter : Swift.Int`, $`@convention(method) (@guaranteed JSON) -> Int`
  %6 = apply %5(%4), $`Int`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Int`
  %11 = function_ref @`SwiftyJSON.JSON.intValue.setter : Swift.Int`, $`@convention(method) (Int, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Int`
  %18 = function_ref @`SwiftyJSON.JSON.intValue.setter : Swift.Int`, $`@convention(method) (Int, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Int`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt.getter : Swift.UInt?` : $`Optional<UInt>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.uintValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt`
  %8 = apply %7(%5), $`UInt`
  %11 = new $`Optional<UInt>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<UInt>`):
  return %13

bb3:
  %15 = new $`Optional<UInt>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.uInt.setter : Swift.UInt?` : $`()` {
bb0(newValue : $`Optional<UInt>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`UInt`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt) -> __C.NSNumber`, $`@convention(method) (UInt, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.UInt) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.UInt) -> __C.NSNumber`, $`@convention(method) (UInt, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.UInt) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (UInt, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.uInt.modify : Swift.UInt?` : $`@yields @inout Optional<UInt>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<UInt>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt.getter : Swift.UInt?`, $`@convention(method) (@guaranteed JSON) -> Optional<UInt>`
  %6 = apply %5(%4), $`Optional<UInt>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<UInt>`
  %11 = function_ref @`SwiftyJSON.JSON.uInt.setter : Swift.UInt?`, $`@convention(method) (Optional<UInt>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<UInt>`
  %18 = function_ref @`SwiftyJSON.JSON.uInt.setter : Swift.UInt?`, $`@convention(method) (Optional<UInt>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<UInt>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uIntValue.getter : Swift.UInt` : $`UInt` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.uintValue!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt`
  %6 = apply %5(%3), $`UInt`
  return %6
}

func @`SwiftyJSON.JSON.uIntValue.setter : Swift.UInt` : $`()` {
bb0(newValue : $`UInt`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt) -> __C.NSNumber`, $`@convention(method) (UInt, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.uIntValue.modify : Swift.UInt` : $`@yields @inout UInt` {
bb0(self : $`*JSON`):
  %3 = new $`*UInt`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uIntValue.getter : Swift.UInt`, $`@convention(method) (@guaranteed JSON) -> UInt`
  %6 = apply %5(%4), $`UInt`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`UInt`
  %11 = function_ref @`SwiftyJSON.JSON.uIntValue.setter : Swift.UInt`, $`@convention(method) (UInt, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`UInt`
  %18 = function_ref @`SwiftyJSON.JSON.uIntValue.setter : Swift.UInt`, $`@convention(method) (UInt, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout UInt`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int8.getter : Swift.Int8?` : $`Optional<Int8>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.int8Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int8`
  %8 = apply %7(%5), $`Int8`
  %11 = new $`Optional<Int8>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<Int8>`):
  return %13

bb3:
  %15 = new $`Optional<Int8>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.int8.setter : Swift.Int8?` : $`()` {
bb0(newValue : $`Optional<Int8>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`Int8`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = new $`*Int`
  %10 = new $`@thin Int.Type`
  %11 = new $`@thick Int.Type`
  %12 = new $`*Int8`
  pointer_write %5 to %12
  %14 = function_ref @`(extension in Swift):Swift.SignedInteger< where A: Swift.FixedWidthInteger>.init<A where A1: Swift.BinaryInteger>(A1) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger, τ_0_0 : SignedInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0`
  %15 = apply %14(%9, %12, %11), $`@out τ_0_0`
  %17 = pointer_read %9, $`Int`
  %18 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %19 = apply %18(%17, %8), $`@owned NSNumber`
  pointer_write %19 to %7
  %24 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %25 = apply %24(%7, self), $`()`
  br bb3

bb2:
  %29 = new $`*Any`
  %30 = new $`@thick NSNull.Type`
  %31 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %32 = apply %31(%30), $`@owned NSNull`
  pointer_write %32 to %29
  %36 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %37 = apply %36(%29, self), $`()`
  br bb3

bb3:
  %41 = new $`()`
  return %41
}

func [stub] @`(extension in Swift):Swift.SignedInteger< where A: Swift.FixedWidthInteger>.init<A where A1: Swift.BinaryInteger>(A1) -> A` : $`@out τ_0_0` {
bb0(%0 : $`@in τ_1_0`, %1 : $`@thick τ_0_0.Type`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func [coroutine] @`SwiftyJSON.JSON.int8.modify : Swift.Int8?` : $`@yields @inout Optional<Int8>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Int8>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int8.getter : Swift.Int8?`, $`@convention(method) (@guaranteed JSON) -> Optional<Int8>`
  %6 = apply %5(%4), $`Optional<Int8>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Int8>`
  %11 = function_ref @`SwiftyJSON.JSON.int8.setter : Swift.Int8?`, $`@convention(method) (Optional<Int8>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Int8>`
  %18 = function_ref @`SwiftyJSON.JSON.int8.setter : Swift.Int8?`, $`@convention(method) (Optional<Int8>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Int8>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int8Value.getter : Swift.Int8` : $`Int8` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.int8Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int8`
  %6 = apply %5(%3), $`Int8`
  return %6
}

func @`SwiftyJSON.JSON.int8Value.setter : Swift.Int8` : $`()` {
bb0(newValue : $`Int8`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = new $`*Int`
  %7 = new $`@thin Int.Type`
  %8 = new $`@thick Int.Type`
  %9 = new $`*Int8`
  pointer_write newValue to %9
  %11 = function_ref @`(extension in Swift):Swift.SignedInteger< where A: Swift.FixedWidthInteger>.init<A where A1: Swift.BinaryInteger>(A1) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger, τ_0_0 : SignedInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0`
  %12 = apply %11(%6, %9, %8), $`@out τ_0_0`
  %14 = pointer_read %6, $`Int`
  %15 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int) -> __C.NSNumber`, $`@convention(method) (Int, @thick NSNumber.Type) -> @owned NSNumber`
  %16 = apply %15(%14, %5), $`@owned NSNumber`
  pointer_write %16 to %4
  %21 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %22 = apply %21(%4, self), $`()`
  %25 = new $`()`
  return %25
}

func [coroutine] @`SwiftyJSON.JSON.int8Value.modify : Swift.Int8` : $`@yields @inout Int8` {
bb0(self : $`*JSON`):
  %3 = new $`*Int8`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int8Value.getter : Swift.Int8`, $`@convention(method) (@guaranteed JSON) -> Int8`
  %6 = apply %5(%4), $`Int8`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Int8`
  %11 = function_ref @`SwiftyJSON.JSON.int8Value.setter : Swift.Int8`, $`@convention(method) (Int8, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Int8`
  %18 = function_ref @`SwiftyJSON.JSON.int8Value.setter : Swift.Int8`, $`@convention(method) (Int8, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Int8`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt8.getter : Swift.UInt8?` : $`Optional<UInt8>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.uint8Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt8`
  %8 = apply %7(%5), $`UInt8`
  %11 = new $`Optional<UInt8>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<UInt8>`):
  return %13

bb3:
  %15 = new $`Optional<UInt8>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.uInt8.setter : Swift.UInt8?` : $`()` {
bb0(newValue : $`Optional<UInt8>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`UInt8`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt8) -> __C.NSNumber`, $`@convention(method) (UInt8, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.UInt8) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt8`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.UInt8) -> __C.NSNumber`, $`@convention(method) (UInt8, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.UInt8) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt8`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (UInt8, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.uInt8.modify : Swift.UInt8?` : $`@yields @inout Optional<UInt8>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<UInt8>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt8.getter : Swift.UInt8?`, $`@convention(method) (@guaranteed JSON) -> Optional<UInt8>`
  %6 = apply %5(%4), $`Optional<UInt8>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<UInt8>`
  %11 = function_ref @`SwiftyJSON.JSON.uInt8.setter : Swift.UInt8?`, $`@convention(method) (Optional<UInt8>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<UInt8>`
  %18 = function_ref @`SwiftyJSON.JSON.uInt8.setter : Swift.UInt8?`, $`@convention(method) (Optional<UInt8>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<UInt8>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt8Value.getter : Swift.UInt8` : $`UInt8` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.uint8Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt8`
  %6 = apply %5(%3), $`UInt8`
  return %6
}

func @`SwiftyJSON.JSON.uInt8Value.setter : Swift.UInt8` : $`()` {
bb0(newValue : $`UInt8`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt8) -> __C.NSNumber`, $`@convention(method) (UInt8, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.uInt8Value.modify : Swift.UInt8` : $`@yields @inout UInt8` {
bb0(self : $`*JSON`):
  %3 = new $`*UInt8`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt8Value.getter : Swift.UInt8`, $`@convention(method) (@guaranteed JSON) -> UInt8`
  %6 = apply %5(%4), $`UInt8`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`UInt8`
  %11 = function_ref @`SwiftyJSON.JSON.uInt8Value.setter : Swift.UInt8`, $`@convention(method) (UInt8, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`UInt8`
  %18 = function_ref @`SwiftyJSON.JSON.uInt8Value.setter : Swift.UInt8`, $`@convention(method) (UInt8, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout UInt8`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int16.getter : Swift.Int16?` : $`Optional<Int16>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.int16Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int16`
  %8 = apply %7(%5), $`Int16`
  %11 = new $`Optional<Int16>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<Int16>`):
  return %13

bb3:
  %15 = new $`Optional<Int16>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.int16.setter : Swift.Int16?` : $`()` {
bb0(newValue : $`Optional<Int16>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`Int16`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int16) -> __C.NSNumber`, $`@convention(method) (Int16, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.Int16) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int16`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.Int16) -> __C.NSNumber`, $`@convention(method) (Int16, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.Int16) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int16`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (Int16, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.int16.modify : Swift.Int16?` : $`@yields @inout Optional<Int16>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Int16>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int16.getter : Swift.Int16?`, $`@convention(method) (@guaranteed JSON) -> Optional<Int16>`
  %6 = apply %5(%4), $`Optional<Int16>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Int16>`
  %11 = function_ref @`SwiftyJSON.JSON.int16.setter : Swift.Int16?`, $`@convention(method) (Optional<Int16>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Int16>`
  %18 = function_ref @`SwiftyJSON.JSON.int16.setter : Swift.Int16?`, $`@convention(method) (Optional<Int16>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Int16>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int16Value.getter : Swift.Int16` : $`Int16` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.int16Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int16`
  %6 = apply %5(%3), $`Int16`
  return %6
}

func @`SwiftyJSON.JSON.int16Value.setter : Swift.Int16` : $`()` {
bb0(newValue : $`Int16`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int16) -> __C.NSNumber`, $`@convention(method) (Int16, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.int16Value.modify : Swift.Int16` : $`@yields @inout Int16` {
bb0(self : $`*JSON`):
  %3 = new $`*Int16`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int16Value.getter : Swift.Int16`, $`@convention(method) (@guaranteed JSON) -> Int16`
  %6 = apply %5(%4), $`Int16`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Int16`
  %11 = function_ref @`SwiftyJSON.JSON.int16Value.setter : Swift.Int16`, $`@convention(method) (Int16, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Int16`
  %18 = function_ref @`SwiftyJSON.JSON.int16Value.setter : Swift.Int16`, $`@convention(method) (Int16, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Int16`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt16.getter : Swift.UInt16?` : $`Optional<UInt16>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.uint16Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt16`
  %8 = apply %7(%5), $`UInt16`
  %11 = new $`Optional<UInt16>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<UInt16>`):
  return %13

bb3:
  %15 = new $`Optional<UInt16>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.uInt16.setter : Swift.UInt16?` : $`()` {
bb0(newValue : $`Optional<UInt16>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`UInt16`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt16) -> __C.NSNumber`, $`@convention(method) (UInt16, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.UInt16) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt16`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.UInt16) -> __C.NSNumber`, $`@convention(method) (UInt16, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.UInt16) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt16`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (UInt16, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.uInt16.modify : Swift.UInt16?` : $`@yields @inout Optional<UInt16>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<UInt16>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt16.getter : Swift.UInt16?`, $`@convention(method) (@guaranteed JSON) -> Optional<UInt16>`
  %6 = apply %5(%4), $`Optional<UInt16>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<UInt16>`
  %11 = function_ref @`SwiftyJSON.JSON.uInt16.setter : Swift.UInt16?`, $`@convention(method) (Optional<UInt16>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<UInt16>`
  %18 = function_ref @`SwiftyJSON.JSON.uInt16.setter : Swift.UInt16?`, $`@convention(method) (Optional<UInt16>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<UInt16>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt16Value.getter : Swift.UInt16` : $`UInt16` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.uint16Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt16`
  %6 = apply %5(%3), $`UInt16`
  return %6
}

func @`SwiftyJSON.JSON.uInt16Value.setter : Swift.UInt16` : $`()` {
bb0(newValue : $`UInt16`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt16) -> __C.NSNumber`, $`@convention(method) (UInt16, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.uInt16Value.modify : Swift.UInt16` : $`@yields @inout UInt16` {
bb0(self : $`*JSON`):
  %3 = new $`*UInt16`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt16Value.getter : Swift.UInt16`, $`@convention(method) (@guaranteed JSON) -> UInt16`
  %6 = apply %5(%4), $`UInt16`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`UInt16`
  %11 = function_ref @`SwiftyJSON.JSON.uInt16Value.setter : Swift.UInt16`, $`@convention(method) (UInt16, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`UInt16`
  %18 = function_ref @`SwiftyJSON.JSON.uInt16Value.setter : Swift.UInt16`, $`@convention(method) (UInt16, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout UInt16`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int32.getter : Swift.Int32?` : $`Optional<Int32>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.int32Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int32`
  %8 = apply %7(%5), $`Int32`
  %11 = new $`Optional<Int32>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<Int32>`):
  return %13

bb3:
  %15 = new $`Optional<Int32>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.int32.setter : Swift.Int32?` : $`()` {
bb0(newValue : $`Optional<Int32>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`Int32`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int32) -> __C.NSNumber`, $`@convention(method) (Int32, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.Int32) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int32`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.Int32) -> __C.NSNumber`, $`@convention(method) (Int32, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.Int32) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int32`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (Int32, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.int32.modify : Swift.Int32?` : $`@yields @inout Optional<Int32>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Int32>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int32.getter : Swift.Int32?`, $`@convention(method) (@guaranteed JSON) -> Optional<Int32>`
  %6 = apply %5(%4), $`Optional<Int32>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Int32>`
  %11 = function_ref @`SwiftyJSON.JSON.int32.setter : Swift.Int32?`, $`@convention(method) (Optional<Int32>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Int32>`
  %18 = function_ref @`SwiftyJSON.JSON.int32.setter : Swift.Int32?`, $`@convention(method) (Optional<Int32>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Int32>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int32Value.getter : Swift.Int32` : $`Int32` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.int32Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int32`
  %6 = apply %5(%3), $`Int32`
  return %6
}

func @`SwiftyJSON.JSON.int32Value.setter : Swift.Int32` : $`()` {
bb0(newValue : $`Int32`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int32) -> __C.NSNumber`, $`@convention(method) (Int32, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.int32Value.modify : Swift.Int32` : $`@yields @inout Int32` {
bb0(self : $`*JSON`):
  %3 = new $`*Int32`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int32Value.getter : Swift.Int32`, $`@convention(method) (@guaranteed JSON) -> Int32`
  %6 = apply %5(%4), $`Int32`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Int32`
  %11 = function_ref @`SwiftyJSON.JSON.int32Value.setter : Swift.Int32`, $`@convention(method) (Int32, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Int32`
  %18 = function_ref @`SwiftyJSON.JSON.int32Value.setter : Swift.Int32`, $`@convention(method) (Int32, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Int32`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt32.getter : Swift.UInt32?` : $`Optional<UInt32>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.uint32Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt32`
  %8 = apply %7(%5), $`UInt32`
  %11 = new $`Optional<UInt32>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<UInt32>`):
  return %13

bb3:
  %15 = new $`Optional<UInt32>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.uInt32.setter : Swift.UInt32?` : $`()` {
bb0(newValue : $`Optional<UInt32>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`UInt32`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt32) -> __C.NSNumber`, $`@convention(method) (UInt32, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.UInt32) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt32`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.UInt32) -> __C.NSNumber`, $`@convention(method) (UInt32, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.UInt32) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt32`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (UInt32, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.uInt32.modify : Swift.UInt32?` : $`@yields @inout Optional<UInt32>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<UInt32>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt32.getter : Swift.UInt32?`, $`@convention(method) (@guaranteed JSON) -> Optional<UInt32>`
  %6 = apply %5(%4), $`Optional<UInt32>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<UInt32>`
  %11 = function_ref @`SwiftyJSON.JSON.uInt32.setter : Swift.UInt32?`, $`@convention(method) (Optional<UInt32>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<UInt32>`
  %18 = function_ref @`SwiftyJSON.JSON.uInt32.setter : Swift.UInt32?`, $`@convention(method) (Optional<UInt32>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<UInt32>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt32Value.getter : Swift.UInt32` : $`UInt32` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.uint32Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt32`
  %6 = apply %5(%3), $`UInt32`
  return %6
}

func @`SwiftyJSON.JSON.uInt32Value.setter : Swift.UInt32` : $`()` {
bb0(newValue : $`UInt32`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt32) -> __C.NSNumber`, $`@convention(method) (UInt32, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.uInt32Value.modify : Swift.UInt32` : $`@yields @inout UInt32` {
bb0(self : $`*JSON`):
  %3 = new $`*UInt32`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt32Value.getter : Swift.UInt32`, $`@convention(method) (@guaranteed JSON) -> UInt32`
  %6 = apply %5(%4), $`UInt32`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`UInt32`
  %11 = function_ref @`SwiftyJSON.JSON.uInt32Value.setter : Swift.UInt32`, $`@convention(method) (UInt32, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`UInt32`
  %18 = function_ref @`SwiftyJSON.JSON.uInt32Value.setter : Swift.UInt32`, $`@convention(method) (UInt32, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout UInt32`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int64.getter : Swift.Int64?` : $`Optional<Int64>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.int64Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int64`
  %8 = apply %7(%5), $`Int64`
  %11 = new $`Optional<Int64>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<Int64>`):
  return %13

bb3:
  %15 = new $`Optional<Int64>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.int64.setter : Swift.Int64?` : $`()` {
bb0(newValue : $`Optional<Int64>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`Int64`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int64) -> __C.NSNumber`, $`@convention(method) (Int64, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.Int64) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int64`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.Int64) -> __C.NSNumber`, $`@convention(method) (Int64, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.Int64) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Int64`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (Int64, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.int64.modify : Swift.Int64?` : $`@yields @inout Optional<Int64>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<Int64>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int64.getter : Swift.Int64?`, $`@convention(method) (@guaranteed JSON) -> Optional<Int64>`
  %6 = apply %5(%4), $`Optional<Int64>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<Int64>`
  %11 = function_ref @`SwiftyJSON.JSON.int64.setter : Swift.Int64?`, $`@convention(method) (Optional<Int64>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<Int64>`
  %18 = function_ref @`SwiftyJSON.JSON.int64.setter : Swift.Int64?`, $`@convention(method) (Optional<Int64>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<Int64>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.int64Value.getter : Swift.Int64` : $`Int64` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.int64Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> Int64`
  %6 = apply %5(%3), $`Int64`
  return %6
}

func @`SwiftyJSON.JSON.int64Value.setter : Swift.Int64` : $`()` {
bb0(newValue : $`Int64`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Int64) -> __C.NSNumber`, $`@convention(method) (Int64, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.int64Value.modify : Swift.Int64` : $`@yields @inout Int64` {
bb0(self : $`*JSON`):
  %3 = new $`*Int64`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.int64Value.getter : Swift.Int64`, $`@convention(method) (@guaranteed JSON) -> Int64`
  %6 = apply %5(%4), $`Int64`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Int64`
  %11 = function_ref @`SwiftyJSON.JSON.int64Value.setter : Swift.Int64`, $`@convention(method) (Int64, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Int64`
  %18 = function_ref @`SwiftyJSON.JSON.int64Value.setter : Swift.Int64`, $`@convention(method) (Int64, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Int64`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt64.getter : Swift.UInt64?` : $`Optional<UInt64>` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.number.getter : __C.NSNumber?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<NSNumber>`
  %3 = apply %2(self), $`@owned Optional<NSNumber>`
  switch_enum %3, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb3

bb1(%5 : $`@owned $NSNumber`):
  %7 = builtin_ref @`#NSNumber.uint64Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt64`
  %8 = apply %7(%5), $`UInt64`
  %11 = new $`Optional<UInt64>`
  %11i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %11i0 to %11, type
  field_write %8 to %11, data
  br bb2(%11)

bb2(%13 : $`Optional<UInt64>`):
  return %13

bb3:
  %15 = new $`Optional<UInt64>`
  %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %15i0 to %15, type
  br bb2(%15)
}

func @`SwiftyJSON.JSON.uInt64.setter : Swift.UInt64?` : $`()` {
bb0(newValue : $`Optional<UInt64>`, self : $`*JSON`):
  switch_enum newValue, case "#Optional.some!enumelt" : bb1, case "#Optional.none!enumelt" : bb2

bb1(%5 : $`UInt64`):
  %7 = new $`*Any`
  %8 = new $`@thick NSNumber.Type`
  %9 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt64) -> __C.NSNumber`, $`@convention(method) (UInt64, @thick NSNumber.Type) -> @owned NSNumber`
  %10 = apply %9(%5, %8), $`@owned NSNumber`
  pointer_write %10 to %7
  %14 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %15 = apply %14(%7, self), $`()`
  br bb3

bb2:
  %19 = new $`*Any`
  %20 = new $`@thick NSNull.Type`
  %21 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %22 = apply %21(%20), $`@owned NSNull`
  pointer_write %22 to %19
  %26 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %27 = apply %26(%19, self), $`()`
  br bb3

bb3:
  %31 = new $`()`
  return %31
}

func @`__C.NSNumber.__allocating_init(value: Swift.UInt64) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt64`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.UInt64) -> __C.NSNumber`, $`@convention(method) (UInt64, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.UInt64) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`UInt64`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (UInt64, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func [coroutine] @`SwiftyJSON.JSON.uInt64.modify : Swift.UInt64?` : $`@yields @inout Optional<UInt64>` {
bb0(self : $`*JSON`):
  %3 = new $`*Optional<UInt64>`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt64.getter : Swift.UInt64?`, $`@convention(method) (@guaranteed JSON) -> Optional<UInt64>`
  %6 = apply %5(%4), $`Optional<UInt64>`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`Optional<UInt64>`
  %11 = function_ref @`SwiftyJSON.JSON.uInt64.setter : Swift.UInt64?`, $`@convention(method) (Optional<UInt64>, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`Optional<UInt64>`
  %18 = function_ref @`SwiftyJSON.JSON.uInt64.setter : Swift.UInt64?`, $`@convention(method) (Optional<UInt64>, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout Optional<UInt64>`
  return %dummy_unwindi0
}

func @`SwiftyJSON.JSON.uInt64Value.getter : Swift.UInt64` : $`UInt64` {
bb0(self : $`@guaranteed $JSON`):
  %2 = function_ref @`SwiftyJSON.JSON.numberValue.getter : __C.NSNumber`, $`@convention(method) (@guaranteed JSON) -> @owned NSNumber`
  %3 = apply %2(self), $`@owned NSNumber`
  %5 = builtin_ref @`#NSNumber.uint64Value!getter.foreign`, $`@convention(objc_method) (NSNumber) -> UInt64`
  %6 = apply %5(%3), $`UInt64`
  return %6
}

func @`SwiftyJSON.JSON.uInt64Value.setter : Swift.UInt64` : $`()` {
bb0(newValue : $`UInt64`, self : $`*JSON`):
  %4 = new $`*Any`
  %5 = new $`@thick NSNumber.Type`
  %6 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.UInt64) -> __C.NSNumber`, $`@convention(method) (UInt64, @thick NSNumber.Type) -> @owned NSNumber`
  %7 = apply %6(newValue, %5), $`@owned NSNumber`
  pointer_write %7 to %4
  %11 = function_ref @`SwiftyJSON.JSON.object.setter : Any`, $`@convention(method) (@in Any, @inout JSON) -> ()`
  %12 = apply %11(%4, self), $`()`
  %15 = new $`()`
  return %15
}

func [coroutine] @`SwiftyJSON.JSON.uInt64Value.modify : Swift.UInt64` : $`@yields @inout UInt64` {
bb0(self : $`*JSON`):
  %3 = new $`*UInt64`
  %4 = pointer_read self, $`JSON`
  %5 = function_ref @`SwiftyJSON.JSON.uInt64Value.getter : Swift.UInt64`, $`@convention(method) (@guaranteed JSON) -> UInt64`
  %6 = apply %5(%4), $`UInt64`
  pointer_write %6 to %3
  yield (%3), resume bb1, unwind bb2

bb1:
  %10 = pointer_read %3, $`UInt64`
  %11 = function_ref @`SwiftyJSON.JSON.uInt64Value.setter : Swift.UInt64`, $`@convention(method) (UInt64, @inout JSON) -> ()`
  %12 = apply %11(%10, self), $`()`
  %15 = new $`()`
  return %15

bb2:
  %17 = pointer_read %3, $`UInt64`
  %18 = function_ref @`SwiftyJSON.JSON.uInt64Value.setter : Swift.UInt64`, $`@convention(method) (UInt64, @inout JSON) -> ()`
  %19 = apply %18(%17, self), $`()`
  %dummy_unwindi0 = new $`@yield_once @convention(method) (@inout JSON) -> @yields @inout UInt64`
  return %dummy_unwindi0
}

func @`protocol witness for static Swift.Comparable.< infix(A, A) -> Swift.Bool in conformance SwiftyJSON.JSON : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*JSON`, %1 : $`*JSON`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %0, $`JSON`
  %4 = pointer_read %1, $`JSON`
  %5 = function_ref @`SwiftyJSON.< infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool`, $`@convention(thin) (@guaranteed JSON, @guaranteed JSON) -> Bool`
  %6 = apply %5(%3, %4), $`Bool`
  return %6
}

func @`SwiftyJSON.< infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $JSON`, rhs : $`@guaranteed $JSON`):
  %4 = field_read lhs, type, $`Any`
  %5 = field_read rhs, type, $`Any`
  switch_enum %4, case "#Type.number!enumelt" : bb1, case "#Type.string!enumelt" : bb4, default bb7

bb1:
  switch_enum %5, case "#Type.number!enumelt" : bb2, default bb3

bb2:
  %8 = field_read lhs, rawNumber, $`Any`
  %9 = assign %8, $`NSNumber`
  %10 = field_read rhs, rawNumber, $`Any`
  %11 = assign %10, $`NSNumber`
  %12 = function_ref @`SwiftyJSON.< infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool`, $`@convention(thin) (@guaranteed NSNumber, @guaranteed NSNumber) -> Bool`
  %13 = apply %12(%9, %11), $`Bool`
  br bb9(%13)

bb3(%17 : $`Type`):
  br bb8

bb4:
  switch_enum %5, case "#Type.string!enumelt" : bb5, default bb6

bb5:
  %20 = new $`@thin String.Type`
  %21 = field_read lhs, rawString, $`Any`
  %22 = assign %21, $`String`
  %23 = field_read rhs, rawString, $`Any`
  %24 = assign %23, $`String`
  %25 = function_ref @`static Swift.String.< infix(Swift.String, Swift.String) -> Swift.Bool`, $`@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool`
  %26 = apply %25(%22, %24, %20), $`Bool`
  br bb9(%26)

bb6(%30 : $`Type`):
  br bb8

bb7(%32 : $`Type`):
  br bb8

bb8:
  %34 = literal [int] 0, $`Builtin.Int1`
  %35 = new $`Bool`
  br bb9(%35)

bb9(%37 : $`Bool`):
  return %37
}

func @`protocol witness for static Swift.Comparable.<= infix(A, A) -> Swift.Bool in conformance SwiftyJSON.JSON : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*JSON`, %1 : $`*JSON`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %0, $`JSON`
  %4 = pointer_read %1, $`JSON`
  %5 = function_ref @`SwiftyJSON.<= infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool`, $`@convention(thin) (@guaranteed JSON, @guaranteed JSON) -> Bool`
  %6 = apply %5(%3, %4), $`Bool`
  return %6
}

func @`SwiftyJSON.<= infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $JSON`, rhs : $`@guaranteed $JSON`):
  %4 = field_read lhs, type, $`Any`
  %5 = field_read rhs, type, $`Any`
  switch_enum %4, case "#Type.number!enumelt" : bb1, case "#Type.string!enumelt" : bb4, case "#Type.bool!enumelt" : bb7, case "#Type.array!enumelt" : bb10, case "#Type.dictionary!enumelt" : bb13, case "#Type.null!enumelt" : bb16, default bb19

bb1:
  switch_enum %5, case "#Type.number!enumelt" : bb2, default bb3

bb2:
  %8 = field_read lhs, rawNumber, $`Any`
  %9 = assign %8, $`NSNumber`
  %10 = field_read rhs, rawNumber, $`Any`
  %11 = assign %10, $`NSNumber`
  %12 = function_ref @`SwiftyJSON.<= infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool`, $`@convention(thin) (@guaranteed NSNumber, @guaranteed NSNumber) -> Bool`
  %13 = apply %12(%9, %11), $`Bool`
  br bb21(%13)

bb3(%17 : $`Type`):
  br bb20

bb4:
  switch_enum %5, case "#Type.string!enumelt" : bb5, default bb6

bb5:
  %20 = new $`@thin String.Type`
  %21 = new $`@thick String.Type`
  %22 = field_read lhs, rawString, $`Any`
  %23 = assign %22, $`String`
  %24 = new $`*String`
  pointer_write %23 to %24
  %26 = field_read rhs, rawString, $`Any`
  %27 = assign %26, $`String`
  %28 = new $`*String`
  pointer_write %27 to %28
  %30 = function_ref @`static (extension in Swift):Swift.Comparable.<= infix(A, A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %31 = apply %30(%24, %28, %21), $`Bool`
  br bb21(%31)

bb6(%37 : $`Type`):
  br bb20

bb7:
  switch_enum %5, case "#Type.bool!enumelt" : bb8, default bb9

bb8:
  %40 = field_read lhs, rawBool, $`Any`
  %41 = field_read rhs, rawBool, $`Any`
  %42 = field_read %40, _value, $`Any`
  %43 = field_read %41, _value, $`Any`
  %44i0 = builtin_ref @`cmp_eq_Int1`, $`Any`
  %44 = apply %44i0(%42, %43), $`Builtin.Int1`
  %45 = new $`Bool`
  br bb21(%45)

bb9(%47 : $`Type`):
  br bb20

bb10:
  switch_enum %5, case "#Type.array!enumelt" : bb11, default bb12

bb11:
  %50 = new $`@thick NSObject.Type`
  %51 = field_read lhs, rawArray, $`Any`
  %52 = assign %51, $`Array<Any>`
  %53 = function_ref @`(extension in Foundation):Swift.Array._bridgeToObjectiveC() -> __C.NSArray`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> @owned NSArray`
  %55 = apply %53(%52), $`@owned NSArray`
  %58 = field_read rhs, rawArray, $`Any`
  %59 = assign %58, $`Array<Any>`
  %60 = function_ref @`(extension in Foundation):Swift.Array._bridgeToObjectiveC() -> __C.NSArray`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> @owned NSArray`
  %62 = apply %60(%59), $`@owned NSArray`
  %65 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %66 = apply %65(%55, %62, %50), $`Bool`
  br bb21(%66)

bb12(%72 : $`Type`):
  br bb20

bb13:
  switch_enum %5, case "#Type.dictionary!enumelt" : bb14, default bb15

bb14:
  %75 = new $`@thick NSObject.Type`
  %76 = field_read lhs, rawDictionary, $`Any`
  %77 = assign %76, $`Dictionary<String, Any>`
  %78 = function_ref @`(extension in Foundation):Swift.Dictionary._bridgeToObjectiveC() -> __C.NSDictionary`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned NSDictionary`
  %80 = apply %78(%77), $`@owned NSDictionary`
  %83 = field_read rhs, rawDictionary, $`Any`
  %84 = assign %83, $`Dictionary<String, Any>`
  %85 = function_ref @`(extension in Foundation):Swift.Dictionary._bridgeToObjectiveC() -> __C.NSDictionary`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned NSDictionary`
  %87 = apply %85(%84), $`@owned NSDictionary`
  %90 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %91 = apply %90(%80, %87, %75), $`Bool`
  br bb21(%91)

bb15(%97 : $`Type`):
  br bb20

bb16:
  switch_enum %5, case "#Type.null!enumelt" : bb17, default bb18

bb17:
  %100 = literal [int] -1, $`Builtin.Int1`
  %101 = new $`Bool`
  br bb21(%101)

bb18(%103 : $`Type`):
  br bb20

bb19(%105 : $`Type`):
  br bb20

bb20:
  %107 = literal [int] 0, $`Builtin.Int1`
  %108 = new $`Bool`
  br bb21(%108)

bb21(%110 : $`Bool`):
  return %110
}

func @`protocol witness for static Swift.Comparable.>= infix(A, A) -> Swift.Bool in conformance SwiftyJSON.JSON : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*JSON`, %1 : $`*JSON`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %0, $`JSON`
  %4 = pointer_read %1, $`JSON`
  %5 = function_ref @`SwiftyJSON.>= infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool`, $`@convention(thin) (@guaranteed JSON, @guaranteed JSON) -> Bool`
  %6 = apply %5(%3, %4), $`Bool`
  return %6
}

func @`SwiftyJSON.>= infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $JSON`, rhs : $`@guaranteed $JSON`):
  %4 = field_read lhs, type, $`Any`
  %5 = field_read rhs, type, $`Any`
  switch_enum %4, case "#Type.number!enumelt" : bb1, case "#Type.string!enumelt" : bb4, case "#Type.bool!enumelt" : bb7, case "#Type.array!enumelt" : bb10, case "#Type.dictionary!enumelt" : bb13, case "#Type.null!enumelt" : bb16, default bb19

bb1:
  switch_enum %5, case "#Type.number!enumelt" : bb2, default bb3

bb2:
  %8 = field_read lhs, rawNumber, $`Any`
  %9 = assign %8, $`NSNumber`
  %10 = field_read rhs, rawNumber, $`Any`
  %11 = assign %10, $`NSNumber`
  %12 = function_ref @`SwiftyJSON.>= infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool`, $`@convention(thin) (@guaranteed NSNumber, @guaranteed NSNumber) -> Bool`
  %13 = apply %12(%9, %11), $`Bool`
  br bb21(%13)

bb3(%17 : $`Type`):
  br bb20

bb4:
  switch_enum %5, case "#Type.string!enumelt" : bb5, default bb6

bb5:
  %20 = new $`@thin String.Type`
  %21 = new $`@thick String.Type`
  %22 = field_read lhs, rawString, $`Any`
  %23 = assign %22, $`String`
  %24 = new $`*String`
  pointer_write %23 to %24
  %26 = field_read rhs, rawString, $`Any`
  %27 = assign %26, $`String`
  %28 = new $`*String`
  pointer_write %27 to %28
  %30 = function_ref @`static (extension in Swift):Swift.Comparable.>= infix(A, A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %31 = apply %30(%24, %28, %21), $`Bool`
  br bb21(%31)

bb6(%37 : $`Type`):
  br bb20

bb7:
  switch_enum %5, case "#Type.bool!enumelt" : bb8, default bb9

bb8:
  %40 = field_read lhs, rawBool, $`Any`
  %41 = field_read rhs, rawBool, $`Any`
  %42 = field_read %40, _value, $`Any`
  %43 = field_read %41, _value, $`Any`
  %44i0 = builtin_ref @`cmp_eq_Int1`, $`Any`
  %44 = apply %44i0(%42, %43), $`Builtin.Int1`
  %45 = new $`Bool`
  br bb21(%45)

bb9(%47 : $`Type`):
  br bb20

bb10:
  switch_enum %5, case "#Type.array!enumelt" : bb11, default bb12

bb11:
  %50 = new $`@thick NSObject.Type`
  %51 = field_read lhs, rawArray, $`Any`
  %52 = assign %51, $`Array<Any>`
  %53 = function_ref @`(extension in Foundation):Swift.Array._bridgeToObjectiveC() -> __C.NSArray`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> @owned NSArray`
  %55 = apply %53(%52), $`@owned NSArray`
  %58 = field_read rhs, rawArray, $`Any`
  %59 = assign %58, $`Array<Any>`
  %60 = function_ref @`(extension in Foundation):Swift.Array._bridgeToObjectiveC() -> __C.NSArray`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> @owned NSArray`
  %62 = apply %60(%59), $`@owned NSArray`
  %65 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %66 = apply %65(%55, %62, %50), $`Bool`
  br bb21(%66)

bb12(%72 : $`Type`):
  br bb20

bb13:
  switch_enum %5, case "#Type.dictionary!enumelt" : bb14, default bb15

bb14:
  %75 = new $`@thick NSObject.Type`
  %76 = field_read lhs, rawDictionary, $`Any`
  %77 = assign %76, $`Dictionary<String, Any>`
  %78 = function_ref @`(extension in Foundation):Swift.Dictionary._bridgeToObjectiveC() -> __C.NSDictionary`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned NSDictionary`
  %80 = apply %78(%77), $`@owned NSDictionary`
  %83 = field_read rhs, rawDictionary, $`Any`
  %84 = assign %83, $`Dictionary<String, Any>`
  %85 = function_ref @`(extension in Foundation):Swift.Dictionary._bridgeToObjectiveC() -> __C.NSDictionary`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned NSDictionary`
  %87 = apply %85(%84), $`@owned NSDictionary`
  %90 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %91 = apply %90(%80, %87, %75), $`Bool`
  br bb21(%91)

bb15(%97 : $`Type`):
  br bb20

bb16:
  switch_enum %5, case "#Type.null!enumelt" : bb17, default bb18

bb17:
  %100 = literal [int] -1, $`Builtin.Int1`
  %101 = new $`Bool`
  br bb21(%101)

bb18(%103 : $`Type`):
  br bb20

bb19(%105 : $`Type`):
  br bb20

bb20:
  %107 = literal [int] 0, $`Builtin.Int1`
  %108 = new $`Bool`
  br bb21(%108)

bb21(%110 : $`Bool`):
  return %110
}

func @`protocol witness for static Swift.Comparable.> infix(A, A) -> Swift.Bool in conformance SwiftyJSON.JSON : Swift.Comparable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*JSON`, %1 : $`*JSON`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %0, $`JSON`
  %4 = pointer_read %1, $`JSON`
  %5 = function_ref @`SwiftyJSON.> infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool`, $`@convention(thin) (@guaranteed JSON, @guaranteed JSON) -> Bool`
  %6 = apply %5(%3, %4), $`Bool`
  return %6
}

func @`SwiftyJSON.> infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $JSON`, rhs : $`@guaranteed $JSON`):
  %4 = field_read lhs, type, $`Any`
  %5 = field_read rhs, type, $`Any`
  switch_enum %4, case "#Type.number!enumelt" : bb1, case "#Type.string!enumelt" : bb4, default bb7

bb1:
  switch_enum %5, case "#Type.number!enumelt" : bb2, default bb3

bb2:
  %8 = field_read lhs, rawNumber, $`Any`
  %9 = assign %8, $`NSNumber`
  %10 = field_read rhs, rawNumber, $`Any`
  %11 = assign %10, $`NSNumber`
  %12 = function_ref @`SwiftyJSON.> infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool`, $`@convention(thin) (@guaranteed NSNumber, @guaranteed NSNumber) -> Bool`
  %13 = apply %12(%9, %11), $`Bool`
  br bb9(%13)

bb3(%17 : $`Type`):
  br bb8

bb4:
  switch_enum %5, case "#Type.string!enumelt" : bb5, default bb6

bb5:
  %20 = new $`@thin String.Type`
  %21 = new $`@thick String.Type`
  %22 = field_read lhs, rawString, $`Any`
  %23 = assign %22, $`String`
  %24 = new $`*String`
  pointer_write %23 to %24
  %26 = field_read rhs, rawString, $`Any`
  %27 = assign %26, $`String`
  %28 = new $`*String`
  pointer_write %27 to %28
  %30 = function_ref @`static (extension in Swift):Swift.Comparable.> infix(A, A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool`
  %31 = apply %30(%24, %28, %21), $`Bool`
  br bb9(%31)

bb6(%37 : $`Type`):
  br bb8

bb7(%39 : $`Type`):
  br bb8

bb8:
  %41 = literal [int] 0, $`Builtin.Int1`
  %42 = new $`Bool`
  br bb9(%42)

bb9(%44 : $`Bool`):
  return %44
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance SwiftyJSON.JSON : Swift.Equatable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*JSON`, %1 : $`*JSON`, %2 : $`@thick JSON.Type`):
  %3 = pointer_read %0, $`JSON`
  %4 = pointer_read %1, $`JSON`
  %5 = function_ref @`SwiftyJSON.== infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool`, $`@convention(thin) (@guaranteed JSON, @guaranteed JSON) -> Bool`
  %6 = apply %5(%3, %4), $`Bool`
  return %6
}

func @`SwiftyJSON.== infix(SwiftyJSON.JSON, SwiftyJSON.JSON) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $JSON`, rhs : $`@guaranteed $JSON`):
  %4 = field_read lhs, type, $`Any`
  %5 = field_read rhs, type, $`Any`
  switch_enum %4, case "#Type.number!enumelt" : bb1, case "#Type.string!enumelt" : bb4, case "#Type.bool!enumelt" : bb7, case "#Type.array!enumelt" : bb10, case "#Type.dictionary!enumelt" : bb13, case "#Type.null!enumelt" : bb16, default bb19

bb1:
  switch_enum %5, case "#Type.number!enumelt" : bb2, default bb3

bb2:
  %8 = field_read lhs, rawNumber, $`Any`
  %9 = assign %8, $`NSNumber`
  %10 = field_read rhs, rawNumber, $`Any`
  %11 = assign %10, $`NSNumber`
  %12 = function_ref @`SwiftyJSON.== infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool`, $`@convention(thin) (@guaranteed NSNumber, @guaranteed NSNumber) -> Bool`
  %13 = apply %12(%9, %11), $`Bool`
  br bb21(%13)

bb3(%17 : $`Type`):
  br bb20

bb4:
  switch_enum %5, case "#Type.string!enumelt" : bb5, default bb6

bb5:
  %20 = new $`@thin String.Type`
  %21 = field_read lhs, rawString, $`Any`
  %22 = assign %21, $`String`
  %23 = field_read rhs, rawString, $`Any`
  %24 = assign %23, $`String`
  %25 = function_ref @`static Swift.String.== infix(Swift.String, Swift.String) -> Swift.Bool`, $`@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool`
  %26 = apply %25(%22, %24, %20), $`Bool`
  br bb21(%26)

bb6(%30 : $`Type`):
  br bb20

bb7:
  switch_enum %5, case "#Type.bool!enumelt" : bb8, default bb9

bb8:
  %33 = field_read lhs, rawBool, $`Any`
  %34 = field_read rhs, rawBool, $`Any`
  %35 = field_read %33, _value, $`Any`
  %36 = field_read %34, _value, $`Any`
  %37i0 = builtin_ref @`cmp_eq_Int1`, $`Any`
  %37 = apply %37i0(%35, %36), $`Builtin.Int1`
  %38 = new $`Bool`
  br bb21(%38)

bb9(%40 : $`Type`):
  br bb20

bb10:
  switch_enum %5, case "#Type.array!enumelt" : bb11, default bb12

bb11:
  %43 = new $`@thick NSObject.Type`
  %44 = field_read lhs, rawArray, $`Any`
  %45 = assign %44, $`Array<Any>`
  %46 = function_ref @`(extension in Foundation):Swift.Array._bridgeToObjectiveC() -> __C.NSArray`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> @owned NSArray`
  %48 = apply %46(%45), $`@owned NSArray`
  %51 = field_read rhs, rawArray, $`Any`
  %52 = assign %51, $`Array<Any>`
  %53 = function_ref @`(extension in Foundation):Swift.Array._bridgeToObjectiveC() -> __C.NSArray`, $`@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> @owned NSArray`
  %55 = apply %53(%52), $`@owned NSArray`
  %58 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %59 = apply %58(%48, %55, %43), $`Bool`
  br bb21(%59)

bb12(%65 : $`Type`):
  br bb20

bb13:
  switch_enum %5, case "#Type.dictionary!enumelt" : bb14, default bb15

bb14:
  %68 = new $`@thick NSObject.Type`
  %69 = field_read lhs, rawDictionary, $`Any`
  %70 = assign %69, $`Dictionary<String, Any>`
  %71 = function_ref @`(extension in Foundation):Swift.Dictionary._bridgeToObjectiveC() -> __C.NSDictionary`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned NSDictionary`
  %73 = apply %71(%70), $`@owned NSDictionary`
  %76 = field_read rhs, rawDictionary, $`Any`
  %77 = assign %76, $`Dictionary<String, Any>`
  %78 = function_ref @`(extension in Foundation):Swift.Dictionary._bridgeToObjectiveC() -> __C.NSDictionary`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@guaranteed Dictionary<τ_0_0, τ_0_1>) -> @owned NSDictionary`
  %80 = apply %78(%77), $`@owned NSDictionary`
  %83 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %84 = apply %83(%73, %80, %68), $`Bool`
  br bb21(%84)

bb15(%90 : $`Type`):
  br bb20

bb16:
  switch_enum %5, case "#Type.null!enumelt" : bb17, default bb18

bb17:
  %93 = literal [int] -1, $`Builtin.Int1`
  %94 = new $`Bool`
  br bb21(%94)

bb18(%96 : $`Type`):
  br bb20

bb19(%98 : $`Type`):
  br bb20

bb20:
  %100 = literal [int] 0, $`Builtin.Int1`
  %101 = new $`Bool`
  br bb21(%101)

bb21(%103 : $`Bool`):
  return %103
}

func @`SwiftyJSON.== infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $NSNumber`, rhs : $`@guaranteed $NSNumber`):
  %4 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %5 = apply %4(lhs), $`Bool`
  %6 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %7 = apply %6(rhs), $`Bool`
  %8 = literal [int] 0, $`Builtin.Int1`
  %9 = literal [int] -1, $`Builtin.Int1`
  %10 = field_read %5, _value, $`Any`
  switch %10, case %8 : bb1, case %9 : bb4

bb1:
  %12 = literal [int] -1, $`Builtin.Int1`
  %13 = field_read %7, _value, $`Any`
  switch %13, case %12 : bb2, default bb3

bb2:
  %15 = literal [int] 0, $`Builtin.Int1`
  %16 = new $`Bool`
  br bb8(%16)

bb3:
  br bb7

bb4:
  %19 = literal [int] 0, $`Builtin.Int1`
  %20 = field_read %7, _value, $`Any`
  switch %20, case %19 : bb5, default bb6

bb5:
  %22 = literal [int] 0, $`Builtin.Int1`
  %23 = new $`Bool`
  br bb8(%23)

bb6:
  br bb7

bb7:
  %26 = builtin_ref @`#NSNumber.compare!foreign`, $`@convention(objc_method) (NSNumber, NSNumber) -> ComparisonResult`
  %27 = apply %26(rhs, lhs), $`ComparisonResult`
  %28 = new $`*ComparisonResult`
  pointer_write %27 to %28
  %30 = new $`@thin ComparisonResult.Type`
  %31 = new $`ComparisonResult`
  %31i0 = literal [string] "#ComparisonResult.orderedSame!enumelt", $`Builtin.RawPointer`
  field_write %31i0 to %31, type
  %32 = new $`*ComparisonResult`
  pointer_write %31 to %32
  %34 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %35 = apply %34(%28, %32), $`Bool`
  br bb8(%35)

bb8(%39 : $`Bool`):
  return %39
}

func [stub] @`static Swift.String.== infix(Swift.String, Swift.String) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@guaranteed String`, %1 : $`@guaranteed String`, %2 : $`@thin String.Type`):
  %ret = new $`Bool`
  return %ret
}

func @`static Swift.Bool.== infix(Swift.Bool, Swift.Bool) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`Bool`, %1 : $`Bool`, %2 : $`@thin Bool.Type`):
  %3 = field_read %0, _value, $`Any`
  %4 = field_read %1, _value, $`Any`
  %5i0 = builtin_ref @`cmp_eq_Int1`, $`Any`
  %5 = apply %5i0(%3, %4), $`Builtin.Int1`
  %6 = new $`Bool`
  return %6
}

func [stub] @`(extension in Foundation):Swift.Array._bridgeToObjectiveC() -> __C.NSArray` : $`@owned NSArray` {
bb0(%0 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`@owned NSArray`
  return %ret
}

func [stub] @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@guaranteed NSObject`, %1 : $`@guaranteed NSObject`, %2 : $`@thick NSObject.Type`):
  %ret = new $`Bool`
  return %ret
}

func [stub] @`(extension in Foundation):Swift.Dictionary._bridgeToObjectiveC() -> __C.NSDictionary` : $`@owned NSDictionary` {
bb0(%0 : $`@guaranteed Dictionary<τ_0_0, τ_0_1>`):
  %ret = new $`@owned NSDictionary`
  return %ret
}

func @`SwiftyJSON.<= infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $NSNumber`, rhs : $`@guaranteed $NSNumber`):
  %4 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %5 = apply %4(lhs), $`Bool`
  %6 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %7 = apply %6(rhs), $`Bool`
  %8 = literal [int] 0, $`Builtin.Int1`
  %9 = literal [int] -1, $`Builtin.Int1`
  %10 = field_read %5, _value, $`Any`
  switch %10, case %8 : bb1, case %9 : bb4

bb1:
  %12 = literal [int] -1, $`Builtin.Int1`
  %13 = field_read %7, _value, $`Any`
  switch %13, case %12 : bb2, default bb3

bb2:
  %15 = literal [int] 0, $`Builtin.Int1`
  %16 = new $`Bool`
  br bb8(%16)

bb3:
  br bb7

bb4:
  %19 = literal [int] 0, $`Builtin.Int1`
  %20 = field_read %7, _value, $`Any`
  switch %20, case %19 : bb5, default bb6

bb5:
  %22 = literal [int] 0, $`Builtin.Int1`
  %23 = new $`Bool`
  br bb8(%23)

bb6:
  br bb7

bb7:
  %26 = new $`@thin ComparisonResult.Type`
  %27 = builtin_ref @`#NSNumber.compare!foreign`, $`@convention(objc_method) (NSNumber, NSNumber) -> ComparisonResult`
  %28 = apply %27(rhs, lhs), $`ComparisonResult`
  %29 = new $`*ComparisonResult`
  pointer_write %28 to %29
  %31 = new $`@thin ComparisonResult.Type`
  %32 = new $`ComparisonResult`
  %32i0 = literal [string] "#ComparisonResult.orderedDescending!enumelt", $`Builtin.RawPointer`
  field_write %32i0 to %32, type
  %33 = new $`*ComparisonResult`
  pointer_write %32 to %33
  %35 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %36 = apply %35(%29, %33), $`Bool`
  %37 = field_read %36, _value, $`Any`
  %38 = literal [int] -1, $`Builtin.Int1`
  %39i0 = builtin_ref @`xor_Int1`, $`Any`
  %39 = apply %39i0(%37, %38), $`Builtin.Int1`
  %40 = new $`Bool`
  br bb8(%40)

bb8(%44 : $`Bool`):
  return %44
}

func @`SwiftyJSON.>= infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $NSNumber`, rhs : $`@guaranteed $NSNumber`):
  %4 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %5 = apply %4(lhs), $`Bool`
  %6 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %7 = apply %6(rhs), $`Bool`
  %8 = literal [int] 0, $`Builtin.Int1`
  %9 = literal [int] -1, $`Builtin.Int1`
  %10 = field_read %5, _value, $`Any`
  switch %10, case %8 : bb1, case %9 : bb4

bb1:
  %12 = literal [int] -1, $`Builtin.Int1`
  %13 = field_read %7, _value, $`Any`
  switch %13, case %12 : bb2, default bb3

bb2:
  %15 = literal [int] 0, $`Builtin.Int1`
  %16 = new $`Bool`
  br bb8(%16)

bb3:
  br bb7

bb4:
  %19 = literal [int] 0, $`Builtin.Int1`
  %20 = field_read %7, _value, $`Any`
  switch %20, case %19 : bb5, default bb6

bb5:
  %22 = literal [int] 0, $`Builtin.Int1`
  %23 = new $`Bool`
  br bb8(%23)

bb6:
  br bb7

bb7:
  %26 = new $`@thin ComparisonResult.Type`
  %27 = builtin_ref @`#NSNumber.compare!foreign`, $`@convention(objc_method) (NSNumber, NSNumber) -> ComparisonResult`
  %28 = apply %27(rhs, lhs), $`ComparisonResult`
  %29 = new $`*ComparisonResult`
  pointer_write %28 to %29
  %31 = new $`@thin ComparisonResult.Type`
  %32 = new $`ComparisonResult`
  %32i0 = literal [string] "#ComparisonResult.orderedAscending!enumelt", $`Builtin.RawPointer`
  field_write %32i0 to %32, type
  %33 = new $`*ComparisonResult`
  pointer_write %32 to %33
  %35 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %36 = apply %35(%29, %33), $`Bool`
  %37 = field_read %36, _value, $`Any`
  %38 = literal [int] -1, $`Builtin.Int1`
  %39i0 = builtin_ref @`xor_Int1`, $`Any`
  %39 = apply %39i0(%37, %38), $`Builtin.Int1`
  %40 = new $`Bool`
  br bb8(%40)

bb8(%44 : $`Bool`):
  return %44
}

func @`SwiftyJSON.> infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $NSNumber`, rhs : $`@guaranteed $NSNumber`):
  %4 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %5 = apply %4(lhs), $`Bool`
  %6 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %7 = apply %6(rhs), $`Bool`
  %8 = literal [int] 0, $`Builtin.Int1`
  %9 = literal [int] -1, $`Builtin.Int1`
  %10 = field_read %5, _value, $`Any`
  switch %10, case %8 : bb1, case %9 : bb4

bb1:
  %12 = literal [int] -1, $`Builtin.Int1`
  %13 = field_read %7, _value, $`Any`
  switch %13, case %12 : bb2, default bb3

bb2:
  %15 = literal [int] 0, $`Builtin.Int1`
  %16 = new $`Bool`
  br bb8(%16)

bb3:
  br bb7

bb4:
  %19 = literal [int] 0, $`Builtin.Int1`
  %20 = field_read %7, _value, $`Any`
  switch %20, case %19 : bb5, default bb6

bb5:
  %22 = literal [int] 0, $`Builtin.Int1`
  %23 = new $`Bool`
  br bb8(%23)

bb6:
  br bb7

bb7:
  %26 = builtin_ref @`#NSNumber.compare!foreign`, $`@convention(objc_method) (NSNumber, NSNumber) -> ComparisonResult`
  %27 = apply %26(rhs, lhs), $`ComparisonResult`
  %28 = new $`*ComparisonResult`
  pointer_write %27 to %28
  %30 = new $`@thin ComparisonResult.Type`
  %31 = new $`ComparisonResult`
  %31i0 = literal [string] "#ComparisonResult.orderedDescending!enumelt", $`Builtin.RawPointer`
  field_write %31i0 to %31, type
  %32 = new $`*ComparisonResult`
  pointer_write %31 to %32
  %34 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %35 = apply %34(%28, %32), $`Bool`
  br bb8(%35)

bb8(%39 : $`Bool`):
  return %39
}

func @`SwiftyJSON.< infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $NSNumber`, rhs : $`@guaranteed $NSNumber`):
  %4 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %5 = apply %4(lhs), $`Bool`
  %6 = function_ref @`(extension in SwiftyJSON):__C.NSNumber.(isBool in _4625CC38AABF536BB76490A35D7233C9).getter : Swift.Bool`, $`@convention(method) (@guaranteed NSNumber) -> Bool`
  %7 = apply %6(rhs), $`Bool`
  %8 = literal [int] 0, $`Builtin.Int1`
  %9 = literal [int] -1, $`Builtin.Int1`
  %10 = field_read %5, _value, $`Any`
  switch %10, case %8 : bb1, case %9 : bb4

bb1:
  %12 = literal [int] -1, $`Builtin.Int1`
  %13 = field_read %7, _value, $`Any`
  switch %13, case %12 : bb2, default bb3

bb2:
  %15 = literal [int] 0, $`Builtin.Int1`
  %16 = new $`Bool`
  br bb8(%16)

bb3:
  br bb7

bb4:
  %19 = literal [int] 0, $`Builtin.Int1`
  %20 = field_read %7, _value, $`Any`
  switch %20, case %19 : bb5, default bb6

bb5:
  %22 = literal [int] 0, $`Builtin.Int1`
  %23 = new $`Bool`
  br bb8(%23)

bb6:
  br bb7

bb7:
  %26 = builtin_ref @`#NSNumber.compare!foreign`, $`@convention(objc_method) (NSNumber, NSNumber) -> ComparisonResult`
  %27 = apply %26(rhs, lhs), $`ComparisonResult`
  %28 = new $`*ComparisonResult`
  pointer_write %27 to %28
  %30 = new $`@thin ComparisonResult.Type`
  %31 = new $`ComparisonResult`
  %31i0 = literal [string] "#ComparisonResult.orderedAscending!enumelt", $`Builtin.RawPointer`
  field_write %31i0 to %31, type
  %32 = new $`*ComparisonResult`
  pointer_write %31 to %32
  %34 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %35 = apply %34(%28, %32), $`Bool`
  br bb8(%35)

bb8(%39 : $`Bool`):
  return %39
}

func [stub] @`static Swift.String.< infix(Swift.String, Swift.String) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@guaranteed String`, %1 : $`@guaranteed String`, %2 : $`@thin String.Type`):
  %ret = new $`Bool`
  return %ret
}

func @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func0` : $`()` {
bb0:
  %1 = singleton_read `SwiftyJSON.(trueNumber in _4625CC38AABF536BB76490A35D7233C9) : __C.NSNumber` from Globals_SwiftyJSON.Pods.sil, $`*NSNumber`
  %2 = new $`@thick NSNumber.Type`
  %3 = literal [int] -1, $`Builtin.Int1`
  %4 = new $`Bool`
  %5 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Bool) -> __C.NSNumber`, $`@convention(method) (Bool, @thick NSNumber.Type) -> @owned NSNumber`
  %6 = apply %5(%4, %2), $`@owned NSNumber`
  pointer_write %6 to %1
  %8 = new $`()`
  return %8
}

func @`__C.NSNumber.__allocating_init(value: Swift.Bool) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Bool`, %1 : $`@thick NSNumber.Type`):
  %3 = new $`NSNumber`
  %4 = function_ref @`@nonobjc __C.NSNumber.init(value: Swift.Bool) -> __C.NSNumber`, $`@convention(method) (Bool, @owned NSNumber) -> @owned NSNumber`
  %5 = apply %4(%0, %3), $`@owned NSNumber`
  return %5
}

func @`@nonobjc __C.NSNumber.init(value: Swift.Bool) -> __C.NSNumber` : $`@owned NSNumber` {
bb0(%0 : $`Bool`, %1 : $`@owned $NSNumber`):
  %2 = builtin_ref @`#NSNumber.init!initializer.foreign`, $`@convention(objc_method) (Bool, @owned NSNumber) -> @owned NSNumber`
  %3 = apply %2(%0, %1), $`@owned NSNumber`
  return %3
}

func @`SwiftyJSON.(trueNumber in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : __C.NSNumber` : $`Builtin.RawPointer` {
bb0:
  %0 = singleton_read `globalinit_33_4625CC38AABF536BB76490A35D7233C9_token0` from Globals_SwiftyJSON.Pods.sil, $`*Builtin.Word`
  %2 = function_ref @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func0`, $`@convention(c) () -> ()`
  %3i0 = builtin_ref @`once`, $`Any`
  %3 = apply %3i0(%0, %2), $`()`
  %4 = singleton_read `SwiftyJSON.(trueNumber in _4625CC38AABF536BB76490A35D7233C9) : __C.NSNumber` from Globals_SwiftyJSON.Pods.sil, $`*NSNumber`
  return %4
}

func @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func1` : $`()` {
bb0:
  %1 = singleton_read `SwiftyJSON.(falseNumber in _4625CC38AABF536BB76490A35D7233C9) : __C.NSNumber` from Globals_SwiftyJSON.Pods.sil, $`*NSNumber`
  %2 = new $`@thick NSNumber.Type`
  %3 = literal [int] 0, $`Builtin.Int1`
  %4 = new $`Bool`
  %5 = function_ref @`__C.NSNumber.__allocating_init(value: Swift.Bool) -> __C.NSNumber`, $`@convention(method) (Bool, @thick NSNumber.Type) -> @owned NSNumber`
  %6 = apply %5(%4, %2), $`@owned NSNumber`
  pointer_write %6 to %1
  %8 = new $`()`
  return %8
}

func @`SwiftyJSON.(falseNumber in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : __C.NSNumber` : $`Builtin.RawPointer` {
bb0:
  %0 = singleton_read `globalinit_33_4625CC38AABF536BB76490A35D7233C9_token1` from Globals_SwiftyJSON.Pods.sil, $`*Builtin.Word`
  %2 = function_ref @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func1`, $`@convention(c) () -> ()`
  %3i0 = builtin_ref @`once`, $`Any`
  %3 = apply %3i0(%0, %2), $`()`
  %4 = singleton_read `SwiftyJSON.(falseNumber in _4625CC38AABF536BB76490A35D7233C9) : __C.NSNumber` from Globals_SwiftyJSON.Pods.sil, $`*NSNumber`
  return %4
}

func @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func2` : $`()` {
bb0:
  %1 = singleton_read `SwiftyJSON.(trueObjCType in _4625CC38AABF536BB76490A35D7233C9) : Swift.String` from Globals_SwiftyJSON.Pods.sil, $`*String`
  %2 = new $`@thin String.Type`
  %3 = function_ref @`SwiftyJSON.(trueNumber in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : __C.NSNumber`, $`@convention(thin) () -> Builtin.RawPointer`
  %4 = apply %3(), $`Builtin.RawPointer`
  %6 = pointer_read %4, $`NSNumber`
  %9 = builtin_ref @`#NSValue.objCType!getter.foreign`, $`@convention(objc_method) (NSValue) -> @unowned_inner_pointer UnsafePointer<Int8>`
  %10 = assign %6, $`NSValue`
  %11 = apply %9(%6), $`@unowned_inner_pointer UnsafePointer<Int8>`
  %15 = function_ref @`Swift.String.init(cString: Swift.UnsafePointer<Swift.Int8>) -> Swift.String`, $`@convention(method) (UnsafePointer<Int8>, @thin String.Type) -> @owned String`
  %16 = apply %15(%11, %2), $`@owned String`
  pointer_write %16 to %1
  %18 = new $`()`
  return %18
}

func [stub] @`Swift.String.init(cString: Swift.UnsafePointer<Swift.Int8>) -> Swift.String` : $`@owned String` {
bb0(%0 : $`UnsafePointer<Int8>`, %1 : $`@thin String.Type`):
  %ret = new $`@owned String`
  return %ret
}

func @`SwiftyJSON.(trueObjCType in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : Swift.String` : $`Builtin.RawPointer` {
bb0:
  %0 = singleton_read `globalinit_33_4625CC38AABF536BB76490A35D7233C9_token2` from Globals_SwiftyJSON.Pods.sil, $`*Builtin.Word`
  %2 = function_ref @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func2`, $`@convention(c) () -> ()`
  %3i0 = builtin_ref @`once`, $`Any`
  %3 = apply %3i0(%0, %2), $`()`
  %4 = singleton_read `SwiftyJSON.(trueObjCType in _4625CC38AABF536BB76490A35D7233C9) : Swift.String` from Globals_SwiftyJSON.Pods.sil, $`*String`
  return %4
}

func @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func3` : $`()` {
bb0:
  %1 = singleton_read `SwiftyJSON.(falseObjCType in _4625CC38AABF536BB76490A35D7233C9) : Swift.String` from Globals_SwiftyJSON.Pods.sil, $`*String`
  %2 = new $`@thin String.Type`
  %3 = function_ref @`SwiftyJSON.(falseNumber in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : __C.NSNumber`, $`@convention(thin) () -> Builtin.RawPointer`
  %4 = apply %3(), $`Builtin.RawPointer`
  %6 = pointer_read %4, $`NSNumber`
  %9 = builtin_ref @`#NSValue.objCType!getter.foreign`, $`@convention(objc_method) (NSValue) -> @unowned_inner_pointer UnsafePointer<Int8>`
  %10 = assign %6, $`NSValue`
  %11 = apply %9(%6), $`@unowned_inner_pointer UnsafePointer<Int8>`
  %15 = function_ref @`Swift.String.init(cString: Swift.UnsafePointer<Swift.Int8>) -> Swift.String`, $`@convention(method) (UnsafePointer<Int8>, @thin String.Type) -> @owned String`
  %16 = apply %15(%11, %2), $`@owned String`
  pointer_write %16 to %1
  %18 = new $`()`
  return %18
}

func @`SwiftyJSON.(falseObjCType in _4625CC38AABF536BB76490A35D7233C9).unsafeMutableAddressor : Swift.String` : $`Builtin.RawPointer` {
bb0:
  %0 = singleton_read `globalinit_33_4625CC38AABF536BB76490A35D7233C9_token3` from Globals_SwiftyJSON.Pods.sil, $`*Builtin.Word`
  %2 = function_ref @`globalinit_33_4625CC38AABF536BB76490A35D7233C9_func3`, $`@convention(c) () -> ()`
  %3i0 = builtin_ref @`once`, $`Any`
  %3 = apply %3i0(%0, %2), $`()`
  %4 = singleton_read `SwiftyJSON.(falseObjCType in _4625CC38AABF536BB76490A35D7233C9) : Swift.String` from Globals_SwiftyJSON.Pods.sil, $`*String`
  return %4
}

func @`static Swift.Bool.|| infix(Swift.Bool, @autoclosure () throws -> Swift.Bool) throws -> Swift.Bool` : $`(Bool, @error Error)` {
bb0(%0 : $`Bool`, %1 : $`@noescape @callee_guaranteed () -> (Bool, @error Error)`, %2 : $`@thin Bool.Type`):
  %3 = field_read %0, _value, $`Any`
  cond_br %3, true bb4, false bb1

bb1:
  %1i0 = apply %1(), $`Bool`
  %1i1 = new $`Builtin.Int1`
  cond_br %1i1, true bb3(%1i0), false bb2(%1i0)

bb2(%6 : $`@owned $Error`):
  return %6

bb3(%8 : $`Bool`):
  br bb5(%8)

bb4:
  %10 = literal [int] -1, $`Builtin.Int1`
  %11 = new $`Bool`
  br bb5(%11)

bb5(%13 : $`Bool`):
  return %13
}

func @`SwiftyJSON.!= infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool` : $`Bool` {
bb0(lhs : $`@guaranteed $NSNumber`, rhs : $`@guaranteed $NSNumber`):
  %4 = function_ref @`SwiftyJSON.== infix(__C.NSNumber, __C.NSNumber) -> Swift.Bool`, $`@convention(thin) (@guaranteed NSNumber, @guaranteed NSNumber) -> Bool`
  %5 = apply %4(lhs, rhs), $`Bool`
  %6 = field_read %5, _value, $`Any`
  %7 = literal [int] -1, $`Builtin.Int1`
  %8i0 = builtin_ref @`xor_Int1`, $`Any`
  %8 = apply %8i0(%6, %7), $`Builtin.Int1`
  %9 = new $`Bool`
  return %9
}

func @`static SwiftyJSON.writingOptionsKeys.__derived_enum_equals(SwiftyJSON.writingOptionsKeys, SwiftyJSON.writingOptionsKeys) -> Swift.Bool` : $`Bool` {
bb0(a : $`writingOptionsKeys`, b : $`writingOptionsKeys`, self : $`@thin writingOptionsKeys.Type`):
  %6 = new $`*Int`
  switch_enum a, case "#writingOptionsKeys.jsonSerialization!enumelt" : bb1, case "#writingOptionsKeys.castNilToNSNull!enumelt" : bb2, case "#writingOptionsKeys.maxObjextDepth!enumelt" : bb3, case "#writingOptionsKeys.encoding!enumelt" : bb4

bb1:
  %8 = literal [int] 0, $`Builtin.Int64`
  %9 = new $`Int`
  field_write %8 to %9, _value
  pointer_write %9 to %6
  br bb5

bb2:
  %14 = literal [int] 1, $`Builtin.Int64`
  %15 = new $`Int`
  field_write %14 to %15, _value
  pointer_write %15 to %6
  br bb5

bb3:
  %20 = literal [int] 2, $`Builtin.Int64`
  %21 = new $`Int`
  field_write %20 to %21, _value
  pointer_write %21 to %6
  br bb5

bb4:
  %26 = literal [int] 3, $`Builtin.Int64`
  %27 = new $`Int`
  field_write %26 to %27, _value
  pointer_write %27 to %6
  br bb5

bb5:
  %32 = new $`*Int`
  switch_enum b, case "#writingOptionsKeys.jsonSerialization!enumelt" : bb6, case "#writingOptionsKeys.castNilToNSNull!enumelt" : bb7, case "#writingOptionsKeys.maxObjextDepth!enumelt" : bb8, case "#writingOptionsKeys.encoding!enumelt" : bb9

bb6:
  %34 = literal [int] 0, $`Builtin.Int64`
  %35 = new $`Int`
  field_write %34 to %35, _value
  pointer_write %35 to %32
  br bb10

bb7:
  %40 = literal [int] 1, $`Builtin.Int64`
  %41 = new $`Int`
  field_write %40 to %41, _value
  pointer_write %41 to %32
  br bb10

bb8:
  %46 = literal [int] 2, $`Builtin.Int64`
  %47 = new $`Int`
  field_write %46 to %47, _value
  pointer_write %47 to %32
  br bb10

bb9:
  %52 = literal [int] 3, $`Builtin.Int64`
  %53 = new $`Int`
  field_write %52 to %53, _value
  pointer_write %53 to %32
  br bb10

bb10:
  %58 = pointer_read %6, $`Int`
  %59 = pointer_read %32, $`Int`
  %60 = field_read %58, _value, $`Any`
  %61 = field_read %59, _value, $`Any`
  %62i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %62 = apply %62i0(%60, %61), $`Builtin.Int1`
  %63 = new $`Bool`
  return %63
}

func @`SwiftyJSON.writingOptionsKeys.hashValue.getter : Swift.Int` : $`Int` {
bb0(self : $`writingOptionsKeys`):
  %2 = new $`*writingOptionsKeys`
  pointer_write self to %2
  %4 = function_ref @`Swift._hashValue<A where A: Swift.Hashable>(for: A) -> Swift.Int`, $`@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int`
  %5 = apply %4(%2), $`Int`
  return %5
}

func [stub] @`Swift._hashValue<A where A: Swift.Hashable>(for: A) -> Swift.Int` : $`Int` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`SwiftyJSON.writingOptionsKeys.hash(into: inout Swift.Hasher) -> ()` : $`()` {
bb0(hasher : $`*Hasher`, self : $`writingOptionsKeys`):
  %4 = new $`*Int`
  switch_enum self, case "#writingOptionsKeys.jsonSerialization!enumelt" : bb1, case "#writingOptionsKeys.castNilToNSNull!enumelt" : bb2, case "#writingOptionsKeys.maxObjextDepth!enumelt" : bb3, case "#writingOptionsKeys.encoding!enumelt" : bb4

bb1:
  %6 = literal [int] 0, $`Builtin.Int64`
  %7 = new $`Int`
  field_write %6 to %7, _value
  pointer_write %7 to %4
  br bb5

bb2:
  %12 = literal [int] 1, $`Builtin.Int64`
  %13 = new $`Int`
  field_write %12 to %13, _value
  pointer_write %13 to %4
  br bb5

bb3:
  %18 = literal [int] 2, $`Builtin.Int64`
  %19 = new $`Int`
  field_write %18 to %19, _value
  pointer_write %19 to %4
  br bb5

bb4:
  %24 = literal [int] 3, $`Builtin.Int64`
  %25 = new $`Int`
  field_write %24 to %25, _value
  pointer_write %25 to %4
  br bb5

bb5:
  %31 = pointer_read %4, $`Int`
  %33 = new $`*Int`
  pointer_write %31 to %33
  %36 = function_ref @`Swift.Hasher.combine<A where A: Swift.Hashable>(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()`
  %37 = apply %36(%33, hasher), $`()`
  %41 = new $`()`
  return %41
}

func [stub] @`Swift.Hasher.combine<A where A: Swift.Hashable>(A) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout Hasher`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance SwiftyJSON.writingOptionsKeys : Swift.Equatable in SwiftyJSON` : $`Bool` {
bb0(%0 : $`*writingOptionsKeys`, %1 : $`*writingOptionsKeys`, %2 : $`@thick writingOptionsKeys.Type`):
  %3 = pointer_read %0, $`writingOptionsKeys`
  %4 = pointer_read %1, $`writingOptionsKeys`
  %5 = new $`@thin writingOptionsKeys.Type`
  %6 = function_ref @`static SwiftyJSON.writingOptionsKeys.__derived_enum_equals(SwiftyJSON.writingOptionsKeys, SwiftyJSON.writingOptionsKeys) -> Swift.Bool`, $`@convention(method) (writingOptionsKeys, writingOptionsKeys, @thin writingOptionsKeys.Type) -> Bool`
  %7 = apply %6(%3, %4, %5), $`Bool`
  return %7
}

func @`protocol witness for Swift.Hashable.hashValue.getter : Swift.Int in conformance SwiftyJSON.writingOptionsKeys : Swift.Hashable in SwiftyJSON` : $`Int` {
bb0(%0 : $`*writingOptionsKeys`):
  %1 = pointer_read %0, $`writingOptionsKeys`
  %2 = function_ref @`SwiftyJSON.writingOptionsKeys.hashValue.getter : Swift.Int`, $`@convention(method) (writingOptionsKeys) -> Int`
  %3 = apply %2(%1), $`Int`
  return %3
}

func @`protocol witness for Swift.Hashable.hash(into: inout Swift.Hasher) -> () in conformance SwiftyJSON.writingOptionsKeys : Swift.Hashable in SwiftyJSON` : $`()` {
bb0(%0 : $`*Hasher`, %1 : $`*writingOptionsKeys`):
  %2 = pointer_read %1, $`writingOptionsKeys`
  %3 = function_ref @`SwiftyJSON.writingOptionsKeys.hash(into: inout Swift.Hasher) -> ()`, $`@convention(method) (@inout Hasher, writingOptionsKeys) -> ()`
  %4 = apply %3(%0, %2), $`()`
  %5 = new $`()`
  return %5
}

func @`protocol witness for Swift.Hashable._rawHashValue(seed: Swift.Int) -> Swift.Int in conformance SwiftyJSON.writingOptionsKeys : Swift.Hashable in SwiftyJSON` : $`Int` {
bb0(%0 : $`Int`, %1 : $`*writingOptionsKeys`):
  %2 = function_ref @`(extension in Swift):Swift.Hashable._rawHashValue(seed: Swift.Int) -> Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int`
  %3 = apply %2(%0, %1), $`Int`
  return %3
}

func [stub] @`(extension in Swift):Swift.Hashable._rawHashValue(seed: Swift.Int) -> Swift.Int` : $`Int` {
bb0(%0 : $`Int`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Int`
  return %ret
}

func @`static SwiftyJSON.JSON.(codableTypes in _4625CC38AABF536BB76490A35D7233C9).getter : [Swift.Decodable & Swift.Encodable.Type]` : $`@owned Array<(Decodable & Encodable).Type>` {
bb0(self : $`@thin JSON.Type`):
  %2 = literal [int] 15, $`Builtin.Word`
  %3 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %4 = apply %3(%2), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %5 = field_read %4, 0, $`Array<(Decodable & Encodable).Type>`
  %6 = field_read %4, 1, $`Builtin.RawPointer`
  %8 = new $`@thin Bool.Type`
  %9 = new $`@thick Bool.Type`
  pointer_write %9 to %6
  %12 = literal [int] 1, $`Builtin.Word`
  %14 = new $`@thin Int.Type`
  %15 = new $`@thick Int.Type`
  pointer_write %15 to %6
  %18 = literal [int] 2, $`Builtin.Word`
  %20 = new $`@thin Int8.Type`
  %21 = new $`@thick Int8.Type`
  pointer_write %21 to %6
  %24 = literal [int] 3, $`Builtin.Word`
  %26 = new $`@thin Int16.Type`
  %27 = new $`@thick Int16.Type`
  pointer_write %27 to %6
  %30 = literal [int] 4, $`Builtin.Word`
  %32 = new $`@thin Int32.Type`
  %33 = new $`@thick Int32.Type`
  pointer_write %33 to %6
  %36 = literal [int] 5, $`Builtin.Word`
  %38 = new $`@thin Int64.Type`
  %39 = new $`@thick Int64.Type`
  pointer_write %39 to %6
  %42 = literal [int] 6, $`Builtin.Word`
  %44 = new $`@thin UInt.Type`
  %45 = new $`@thick UInt.Type`
  pointer_write %45 to %6
  %48 = literal [int] 7, $`Builtin.Word`
  %50 = new $`@thin UInt8.Type`
  %51 = new $`@thick UInt8.Type`
  pointer_write %51 to %6
  %54 = literal [int] 8, $`Builtin.Word`
  %56 = new $`@thin UInt16.Type`
  %57 = new $`@thick UInt16.Type`
  pointer_write %57 to %6
  %60 = literal [int] 9, $`Builtin.Word`
  %62 = new $`@thin UInt32.Type`
  %63 = new $`@thick UInt32.Type`
  pointer_write %63 to %6
  %66 = literal [int] 10, $`Builtin.Word`
  %68 = new $`@thin UInt64.Type`
  %69 = new $`@thick UInt64.Type`
  pointer_write %69 to %6
  %72 = literal [int] 11, $`Builtin.Word`
  %74 = new $`@thin Double.Type`
  %75 = new $`@thick Double.Type`
  pointer_write %75 to %6
  %78 = literal [int] 12, $`Builtin.Word`
  %80 = new $`@thin String.Type`
  %81 = new $`@thick String.Type`
  pointer_write %81 to %6
  %84 = literal [int] 13, $`Builtin.Word`
  %86 = new $`@thin Array<JSON>.Type`
  %87 = new $`@thick Array<JSON>.Type`
  pointer_write %87 to %6
  %90 = literal [int] 14, $`Builtin.Word`
  %92 = new $`@thin Dictionary<String, JSON>.Type`
  %93 = new $`@thick Dictionary<String, JSON>.Type`
  pointer_write %93 to %6
  return %5
}

func @`SwiftyJSON.JSON.init(from: Swift.Decoder) throws -> SwiftyJSON.JSON` : $`(@owned JSON, @error Error)` {
bb0(decoder : $`*Decoder`, %1 : $`@thin JSON.Type`):
  %2 = new $`*JSON`
  %5 = new $`*Optional<Any>`
  %5i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %5i0 to %5, type
  %7 = new $`*SingleValueDecodingContainer`
  %8 = new $`*Optional<SingleValueDecodingContainer>`
  %9 = new $`*Any`
  %9i0 = field_read [alias %9] %8, data, $`Any`
  pointer_write %9i0 to %9
  %11 = dynamic_ref @`#Decoder.singleValueContainer`, $`@convention(witness_method: Decoder) <τ_0_0 where τ_0_0 : Decoder> (@in_guaranteed τ_0_0) -> (@out SingleValueDecodingContainer, @error Error)`
  %11i0 = apply %11(%9, decoder), $`SingleValueDecodingContainer`
  %11i1 = new $`Builtin.Int1`
  cond_br %11i1, true bb1(%11i0), false bb77(%11i0)

bb1(%13 : $`()`):
  %8i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %8i0 to %8, type
  br bb2

bb2:
  %8i1 = pointer_read %8, $`Optional<SingleValueDecodingContainer>`
  switch_enum %8i1, case "#Optional.some!enumelt" : bb4, case "#Optional.none!enumelt" : bb3

bb3:
  br bb73

bb4:
  %21 = new $`*Any`
  %21i0 = field_read [alias %21] %8, data, $`Any`
  pointer_write %21i0 to %21
  %21i1 = pointer_read %21, $`SingleValueDecodingContainer`
  pointer_write %21i1 to %7
  %25 = dynamic_ref @`#SingleValueDecodingContainer.decodeNil`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@in_guaranteed τ_0_0) -> Bool`
  %26 = apply %25(%7), $`Bool`
  %27 = field_read %26, _value, $`Any`
  %28 = literal [int] -1, $`Builtin.Int1`
  %29i0 = builtin_ref @`xor_Int1`, $`Any`
  %29 = apply %29i0(%27, %28), $`Builtin.Int1`
  cond_br %29, true bb5, false bb72

bb5:
  %31 = new $`*IndexingIterator<Array<(Decodable & Encodable).Type>>`
  %32 = new $`@thin JSON.Type`
  %33 = function_ref @`static SwiftyJSON.JSON.(codableTypes in _4625CC38AABF536BB76490A35D7233C9).getter : [Swift.Decodable & Swift.Encodable.Type]`, $`@convention(method) (@thin JSON.Type) -> @owned Array<(Decodable & Encodable).Type>`
  %34 = apply %33(%32), $`@owned Array<(Decodable & Encodable).Type>`
  %35 = new $`*Array<(Decodable & Encodable).Type>`
  pointer_write %34 to %35
  %37 = function_ref @`(extension in Swift):Swift.Collection< where A.Iterator == Swift.IndexingIterator<A>>.makeIterator() -> Swift.IndexingIterator<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Iterator == IndexingIterator<τ_0_0>> (@in τ_0_0) -> @out IndexingIterator<τ_0_0>`
  %38 = apply %37(%31, %35), $`@out IndexingIterator<τ_0_0>`
  %39 = new $`()`
  br bb6

bb6:
  %42 = new $`*Optional<@thick (Decodable & Encodable).Type>`
  %44 = function_ref @`Swift.IndexingIterator.next() -> A.Element?`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@inout IndexingIterator<τ_0_0>) -> @out Optional<τ_0_0.Element>`
  %45 = apply %44(%42, %31), $`@out Optional<τ_0_0.Element>`
  %46 = new $`()`
  %48 = pointer_read %42, $`Optional<@thick (Decodable & Encodable).Type>`
  switch_enum %48, case "#Optional.some!enumelt" : bb8, case "#Optional.none!enumelt" : bb7

bb7:
  br bb71

bb8(type : $`@thick (Decodable & Encodable).Type`):
  %55 = new $`*Optional<Any>`
  %54i0 = pointer_read %5, $`Optional<Any>`
  pointer_write %54i0 to %55
  %58 = new $`_OptionalNilComparisonType`
  %59 = new $`*Optional<Any>`
  %55i0 = pointer_read %55, $`Optional<Any>`
  pointer_write %55i0 to %59
  %59i0 = pointer_read %59, $`Optional<Any>`
  switch_enum %59i0, case "#Optional.some!enumelt" : bb9, case "#Optional.none!enumelt" : bb10

bb9:
  %62 = new $`*Any`
  %62i0 = field_read [alias %62] %59, data, $`Any`
  pointer_write %62i0 to %62
  %63 = literal [int] -1, $`Builtin.Int1`
  %64 = new $`Bool`
  br bb11(%64)

bb10:
  %68 = literal [int] 0, $`Builtin.Int1`
  %69 = new $`Bool`
  br bb11(%69)

bb11(%72 : $`Bool`):
  %75 = field_read %72, _value, $`Any`
  cond_br %75, true bb12, false bb13

bb12:
  br bb71

bb13:
  %52i0 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i0, true bb14(type), false bb17

bb14(%79 : $`@thick Bool.Type`):
  boolType = new $`@thin Bool.Type`
  %82 = new $`*Optional<Any>`
  %83 = new $`*Any`
  %83i0 = field_read [alias %83] %82, data, $`Any`
  pointer_write %83i0 to %83
  %85 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin Bool.Type, @in_guaranteed τ_0_0) -> (Bool, @error Error)`
  %85i0 = apply %85(boolType, %7), $`Bool`
  %85i1 = new $`Builtin.Int1`
  cond_br %85i1, true bb15(%85i0), false bb78(%85i0)

bb15(%87 : $`Bool`):
  pointer_write %87 to %83
  %82i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %82i0 to %82, type
  br bb16

bb16:
  %82i1 = pointer_read %82, $`Optional<Any>`
  pointer_write %82i1 to %5
  br bb70

bb17(%97 : $`@thick (Decodable & Encodable).Type`):
  %52i1 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i1, true bb18(type), false bb21

bb18(%99 : $`@thick Int.Type`):
  intType = new $`@thin Int.Type`
  %102 = new $`*Optional<Any>`
  %103 = new $`*Any`
  %103i0 = field_read [alias %103] %102, data, $`Any`
  pointer_write %103i0 to %103
  %105 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin Int.Type, @in_guaranteed τ_0_0) -> (Int, @error Error)`
  %105i0 = apply %105(intType, %7), $`Int`
  %105i1 = new $`Builtin.Int1`
  cond_br %105i1, true bb19(%105i0), false bb79(%105i0)

bb19(%107 : $`Int`):
  pointer_write %107 to %103
  %102i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %102i0 to %102, type
  br bb20

bb20:
  %102i1 = pointer_read %102, $`Optional<Any>`
  pointer_write %102i1 to %5
  br bb70

bb21(%117 : $`@thick (Decodable & Encodable).Type`):
  %52i2 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i2, true bb22(type), false bb25

bb22(%119 : $`@thick Int8.Type`):
  int8Type = new $`@thin Int8.Type`
  %122 = new $`*Optional<Any>`
  %123 = new $`*Any`
  %123i0 = field_read [alias %123] %122, data, $`Any`
  pointer_write %123i0 to %123
  %125 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin Int8.Type, @in_guaranteed τ_0_0) -> (Int8, @error Error)`
  %125i0 = apply %125(int8Type, %7), $`Int8`
  %125i1 = new $`Builtin.Int1`
  cond_br %125i1, true bb23(%125i0), false bb80(%125i0)

bb23(%127 : $`Int8`):
  pointer_write %127 to %123
  %122i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %122i0 to %122, type
  br bb24

bb24:
  %122i1 = pointer_read %122, $`Optional<Any>`
  pointer_write %122i1 to %5
  br bb70

bb25(%137 : $`@thick (Decodable & Encodable).Type`):
  %52i3 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i3, true bb26(type), false bb29

bb26(%139 : $`@thick Int32.Type`):
  int32Type = new $`@thin Int32.Type`
  %142 = new $`*Optional<Any>`
  %143 = new $`*Any`
  %143i0 = field_read [alias %143] %142, data, $`Any`
  pointer_write %143i0 to %143
  %145 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin Int32.Type, @in_guaranteed τ_0_0) -> (Int32, @error Error)`
  %145i0 = apply %145(int32Type, %7), $`Int32`
  %145i1 = new $`Builtin.Int1`
  cond_br %145i1, true bb27(%145i0), false bb81(%145i0)

bb27(%147 : $`Int32`):
  pointer_write %147 to %143
  %142i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %142i0 to %142, type
  br bb28

bb28:
  %142i1 = pointer_read %142, $`Optional<Any>`
  pointer_write %142i1 to %5
  br bb70

bb29(%157 : $`@thick (Decodable & Encodable).Type`):
  %52i4 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i4, true bb30(type), false bb33

bb30(%159 : $`@thick Int64.Type`):
  int64Type = new $`@thin Int64.Type`
  %162 = new $`*Optional<Any>`
  %163 = new $`*Any`
  %163i0 = field_read [alias %163] %162, data, $`Any`
  pointer_write %163i0 to %163
  %165 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin Int64.Type, @in_guaranteed τ_0_0) -> (Int64, @error Error)`
  %165i0 = apply %165(int64Type, %7), $`Int64`
  %165i1 = new $`Builtin.Int1`
  cond_br %165i1, true bb31(%165i0), false bb82(%165i0)

bb31(%167 : $`Int64`):
  pointer_write %167 to %163
  %162i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %162i0 to %162, type
  br bb32

bb32:
  %162i1 = pointer_read %162, $`Optional<Any>`
  pointer_write %162i1 to %5
  br bb70

bb33(%177 : $`@thick (Decodable & Encodable).Type`):
  %52i5 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i5, true bb34(type), false bb37

bb34(%179 : $`@thick UInt.Type`):
  uintType = new $`@thin UInt.Type`
  %182 = new $`*Optional<Any>`
  %183 = new $`*Any`
  %183i0 = field_read [alias %183] %182, data, $`Any`
  pointer_write %183i0 to %183
  %185 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin UInt.Type, @in_guaranteed τ_0_0) -> (UInt, @error Error)`
  %185i0 = apply %185(uintType, %7), $`UInt`
  %185i1 = new $`Builtin.Int1`
  cond_br %185i1, true bb35(%185i0), false bb83(%185i0)

bb35(%187 : $`UInt`):
  pointer_write %187 to %183
  %182i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %182i0 to %182, type
  br bb36

bb36:
  %182i1 = pointer_read %182, $`Optional<Any>`
  pointer_write %182i1 to %5
  br bb70

bb37(%197 : $`@thick (Decodable & Encodable).Type`):
  %52i6 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i6, true bb38(type), false bb41

bb38(%199 : $`@thick UInt8.Type`):
  uint8Type = new $`@thin UInt8.Type`
  %202 = new $`*Optional<Any>`
  %203 = new $`*Any`
  %203i0 = field_read [alias %203] %202, data, $`Any`
  pointer_write %203i0 to %203
  %205 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin UInt8.Type, @in_guaranteed τ_0_0) -> (UInt8, @error Error)`
  %205i0 = apply %205(uint8Type, %7), $`UInt8`
  %205i1 = new $`Builtin.Int1`
  cond_br %205i1, true bb39(%205i0), false bb84(%205i0)

bb39(%207 : $`UInt8`):
  pointer_write %207 to %203
  %202i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %202i0 to %202, type
  br bb40

bb40:
  %202i1 = pointer_read %202, $`Optional<Any>`
  pointer_write %202i1 to %5
  br bb70

bb41(%217 : $`@thick (Decodable & Encodable).Type`):
  %52i7 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i7, true bb42(type), false bb45

bb42(%219 : $`@thick UInt16.Type`):
  uint16Type = new $`@thin UInt16.Type`
  %222 = new $`*Optional<Any>`
  %223 = new $`*Any`
  %223i0 = field_read [alias %223] %222, data, $`Any`
  pointer_write %223i0 to %223
  %225 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin UInt16.Type, @in_guaranteed τ_0_0) -> (UInt16, @error Error)`
  %225i0 = apply %225(uint16Type, %7), $`UInt16`
  %225i1 = new $`Builtin.Int1`
  cond_br %225i1, true bb43(%225i0), false bb85(%225i0)

bb43(%227 : $`UInt16`):
  pointer_write %227 to %223
  %222i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %222i0 to %222, type
  br bb44

bb44:
  %222i1 = pointer_read %222, $`Optional<Any>`
  pointer_write %222i1 to %5
  br bb70

bb45(%237 : $`@thick (Decodable & Encodable).Type`):
  %52i8 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i8, true bb46(type), false bb49

bb46(%239 : $`@thick UInt32.Type`):
  uint32Type = new $`@thin UInt32.Type`
  %242 = new $`*Optional<Any>`
  %243 = new $`*Any`
  %243i0 = field_read [alias %243] %242, data, $`Any`
  pointer_write %243i0 to %243
  %245 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin UInt32.Type, @in_guaranteed τ_0_0) -> (UInt32, @error Error)`
  %245i0 = apply %245(uint32Type, %7), $`UInt32`
  %245i1 = new $`Builtin.Int1`
  cond_br %245i1, true bb47(%245i0), false bb86(%245i0)

bb47(%247 : $`UInt32`):
  pointer_write %247 to %243
  %242i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %242i0 to %242, type
  br bb48

bb48:
  %242i1 = pointer_read %242, $`Optional<Any>`
  pointer_write %242i1 to %5
  br bb70

bb49(%257 : $`@thick (Decodable & Encodable).Type`):
  %52i9 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i9, true bb50(type), false bb53

bb50(%259 : $`@thick UInt64.Type`):
  uint64Type = new $`@thin UInt64.Type`
  %262 = new $`*Optional<Any>`
  %263 = new $`*Any`
  %263i0 = field_read [alias %263] %262, data, $`Any`
  pointer_write %263i0 to %263
  %265 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin UInt64.Type, @in_guaranteed τ_0_0) -> (UInt64, @error Error)`
  %265i0 = apply %265(uint64Type, %7), $`UInt64`
  %265i1 = new $`Builtin.Int1`
  cond_br %265i1, true bb51(%265i0), false bb87(%265i0)

bb51(%267 : $`UInt64`):
  pointer_write %267 to %263
  %262i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %262i0 to %262, type
  br bb52

bb52:
  %262i1 = pointer_read %262, $`Optional<Any>`
  pointer_write %262i1 to %5
  br bb70

bb53(%277 : $`@thick (Decodable & Encodable).Type`):
  %52i10 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i10, true bb54(type), false bb57

bb54(%279 : $`@thick Double.Type`):
  doubleType = new $`@thin Double.Type`
  %282 = new $`*Optional<Any>`
  %283 = new $`*Any`
  %283i0 = field_read [alias %283] %282, data, $`Any`
  pointer_write %283i0 to %283
  %285 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin Double.Type, @in_guaranteed τ_0_0) -> (Double, @error Error)`
  %285i0 = apply %285(doubleType, %7), $`Double`
  %285i1 = new $`Builtin.Int1`
  cond_br %285i1, true bb55(%285i0), false bb88(%285i0)

bb55(%287 : $`Double`):
  pointer_write %287 to %283
  %282i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %282i0 to %282, type
  br bb56

bb56:
  %282i1 = pointer_read %282, $`Optional<Any>`
  pointer_write %282i1 to %5
  br bb70

bb57(%297 : $`@thick (Decodable & Encodable).Type`):
  %52i11 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i11, true bb58(type), false bb61

bb58(%299 : $`@thick String.Type`):
  stringType = new $`@thin String.Type`
  %302 = new $`*Optional<Any>`
  %303 = new $`*Any`
  %303i0 = field_read [alias %303] %302, data, $`Any`
  pointer_write %303i0 to %303
  %305 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer> (@thin String.Type, @in_guaranteed τ_0_0) -> (@owned String, @error Error)`
  %305i0 = apply %305(stringType, %7), $`String`
  %305i1 = new $`Builtin.Int1`
  cond_br %305i1, true bb59(%305i0), false bb89(%305i0)

bb59(%307 : $`@owned $String`):
  pointer_write %307 to %303
  %302i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %302i0 to %302, type
  br bb60

bb60:
  %302i1 = pointer_read %302, $`Optional<Any>`
  pointer_write %302i1 to %5
  br bb70

bb61(%317 : $`@thick (Decodable & Encodable).Type`):
  %52i12 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i12, true bb62(type), false bb65

bb62(%319 : $`@thick Array<JSON>.Type`):
  jsonValueArrayType = new $`@thin Array<JSON>.Type`
  %322 = new $`*Optional<Any>`
  %323 = new $`*Any`
  %323i0 = field_read [alias %323] %322, data, $`Any`
  pointer_write %323i0 to %323
  %325 = new $`@thick Array<JSON>.Type`
  %326 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer><τ_1_0 where τ_1_0 : Decodable> (@thick τ_1_0.Type, @in_guaranteed τ_0_0) -> (@out τ_1_0, @error Error)`
  %326i0 = apply %326(%323, %325, %7), $`τ_1_0`
  %326i1 = new $`Builtin.Int1`
  cond_br %326i1, true bb63(%326i0), false bb90(%326i0)

bb63(%329 : $`()`):
  %322i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %322i0 to %322, type
  br bb64

bb64:
  %322i1 = pointer_read %322, $`Optional<Any>`
  pointer_write %322i1 to %5
  br bb70

bb65(%337 : $`@thick (Decodable & Encodable).Type`):
  %52i13 = unary_op [arb] type, $`Builtin.Int1`
  cond_br %52i13, true bb66(type), false bb69

bb66(%339 : $`@thick Dictionary<String, JSON>.Type`):
  jsonValueDictType = new $`@thin Dictionary<String, JSON>.Type`
  %342 = new $`*Optional<Any>`
  %343 = new $`*Any`
  %343i0 = field_read [alias %343] %342, data, $`Any`
  pointer_write %343i0 to %343
  %345 = new $`@thick Dictionary<String, JSON>.Type`
  %346 = dynamic_ref @`#SingleValueDecodingContainer.decode`, $`@convention(witness_method: SingleValueDecodingContainer) <τ_0_0 where τ_0_0 : SingleValueDecodingContainer><τ_1_0 where τ_1_0 : Decodable> (@thick τ_1_0.Type, @in_guaranteed τ_0_0) -> (@out τ_1_0, @error Error)`
  %346i0 = apply %346(%343, %345, %7), $`τ_1_0`
  %346i1 = new $`Builtin.Int1`
  cond_br %346i1, true bb67(%346i0), false bb91(%346i0)

bb67(%349 : $`()`):
  %342i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %342i0 to %342, type
  br bb68

bb68:
  %342i1 = pointer_read %342, $`Optional<Any>`
  pointer_write %342i1 to %5
  br bb70

bb69(%357 : $`@thick (Decodable & Encodable).Type`):
  br bb70

bb70:
  br bb6

bb71:
  br bb73

bb72:
  br bb73

bb73:
  %368 = new $`*Any`
  %370 = new $`*Optional<Any>`
  %369i0 = pointer_read %5, $`Optional<Any>`
  pointer_write %369i0 to %370
  %373 = new $`*Optional<Any>`
  %370i0 = pointer_read %370, $`Optional<Any>`
  pointer_write %370i0 to %373
  %373i0 = pointer_read %373, $`Optional<Any>`
  switch_enum %373i0, case "#Optional.some!enumelt" : bb74, case "#Optional.none!enumelt" : bb75

bb74:
  %376 = new $`*Any`
  %376i0 = field_read [alias %376] %373, data, $`Any`
  pointer_write %376i0 to %376
  %376i1 = pointer_read %376, $`Any`
  pointer_write %376i1 to %368
  br bb76

bb75:
  %380 = new $`@thick NSNull.Type`
  %381 = function_ref @`__C.NSNull.__allocating_init() -> __C.NSNull`, $`@convention(method) (@thick NSNull.Type) -> @owned NSNull`
  %382 = apply %381(%380), $`@owned NSNull`
  pointer_write %382 to %368
  %385 = new $`()`
  br bb76

bb76:
  %388 = new $`()`
  %391 = function_ref @`SwiftyJSON.JSON.init(Any) -> SwiftyJSON.JSON`, $`@convention(method) (@in Any, @thin JSON.Type) -> @owned JSON`
  %392 = apply %391(%368, %1), $`@owned JSON`
  %394 = assign %392, $`JSON`
  pointer_write %392 to %2
  %398 = assign %394, $`JSON`
  return %398

bb77(%404 : $`@owned $Error`):
  %8i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %8i2 to %8, type
  br bb2

bb78(%408 : $`@owned $Error`):
  %82i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %82i2 to %82, type
  br bb16

bb79(%412 : $`@owned $Error`):
  %102i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %102i2 to %102, type
  br bb20

bb80(%416 : $`@owned $Error`):
  %122i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %122i2 to %122, type
  br bb24

bb81(%420 : $`@owned $Error`):
  %142i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %142i2 to %142, type
  br bb28

bb82(%424 : $`@owned $Error`):
  %162i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %162i2 to %162, type
  br bb32

bb83(%428 : $`@owned $Error`):
  %182i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %182i2 to %182, type
  br bb36

bb84(%432 : $`@owned $Error`):
  %202i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %202i2 to %202, type
  br bb40

bb85(%436 : $`@owned $Error`):
  %222i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %222i2 to %222, type
  br bb44

bb86(%440 : $`@owned $Error`):
  %242i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %242i2 to %242, type
  br bb48

bb87(%444 : $`@owned $Error`):
  %262i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %262i2 to %262, type
  br bb52

bb88(%448 : $`@owned $Error`):
  %282i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %282i2 to %282, type
  br bb56

bb89(%452 : $`@owned $Error`):
  %302i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %302i2 to %302, type
  br bb60

bb90(%456 : $`@owned $Error`):
  %322i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %322i2 to %322, type
  br bb64

bb91(%461 : $`@owned $Error`):
  %342i2 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer`
  field_write %342i2 to %342, type
  br bb68
}

func @`SwiftyJSON.JSON.encode(to: Swift.Encoder) throws -> ()` : $`@error Error` {
bb0(encoder : $`*Encoder`, self : $`@guaranteed $JSON`):
  %5 = new $`*SingleValueEncodingContainer`
  %7 = dynamic_ref @`#Encoder.singleValueContainer`, $`@convention(witness_method: Encoder) <τ_0_0 where τ_0_0 : Encoder> (@in_guaranteed τ_0_0) -> @out SingleValueEncodingContainer`
  %8 = apply %7(%5, encoder), $`@out SingleValueEncodingContainer`
  %9 = new $`*Any`
  %10 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %11 = apply %10(%9, self), $`@out Any`
  %12 = new $`*NSNull`
  %9i0 = binary_op %9 [arb] %12, $`Builtin.Int1`
  cond_br %9i0, true bb1, false bb2

bb1:
  %14 = pointer_read %12, $`NSNull`
  %15 = literal [int] -1, $`Builtin.Int1`
  br bb3(%15)

bb2:
  %20 = literal [int] 0, $`Builtin.Int1`
  br bb3(%20)

bb3(%24 : $`Builtin.Int1`):
  cond_br %24, true bb4, false bb6

bb4:
  %28 = dynamic_ref @`#SingleValueEncodingContainer.encodeNil`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (@inout τ_0_0) -> @error Error`
  %28i0 = apply %28(%5), $`()`
  %28i1 = new $`Builtin.Int1`
  cond_br %28i1, true bb5(%28i0), false bb57(%28i0)

bb5(%30 : $`()`):
  br bb56

bb6:
  %35 = new $`*Any`
  %36 = function_ref @`SwiftyJSON.JSON.object.getter : Any`, $`@convention(method) (@guaranteed JSON) -> @out Any`
  %37 = apply %36(%35, self), $`@out Any`
  %38 = new $`*Int`
  %35i0 = binary_op %35 [arb] %38, $`Builtin.Int1`
  cond_br %35i0, true bb7, false bb9

bb7:
  intValue = pointer_read %38, $`Int`
  %44 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (Int, @inout τ_0_0) -> @error Error`
  %44i0 = apply %44(intValue, %5), $`()`
  %44i1 = new $`Builtin.Int1`
  cond_br %44i1, true bb8(%44i0), false bb58(%44i0)

bb8(%46 : $`()`):
  br bb55

bb9:
  %53 = new $`*Int8`
  %35i1 = binary_op %35 [arb] %53, $`Builtin.Int1`
  cond_br %35i1, true bb10, false bb12

bb10:
  int8Value = pointer_read %53, $`Int8`
  %59 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (Int8, @inout τ_0_0) -> @error Error`
  %59i0 = apply %59(int8Value, %5), $`()`
  %59i1 = new $`Builtin.Int1`
  cond_br %59i1, true bb11(%59i0), false bb59(%59i0)

bb11(%61 : $`()`):
  br bb55

bb12:
  %68 = new $`*Int32`
  %35i2 = binary_op %35 [arb] %68, $`Builtin.Int1`
  cond_br %35i2, true bb13, false bb15

bb13:
  int32Value = pointer_read %68, $`Int32`
  %74 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (Int32, @inout τ_0_0) -> @error Error`
  %74i0 = apply %74(int32Value, %5), $`()`
  %74i1 = new $`Builtin.Int1`
  cond_br %74i1, true bb14(%74i0), false bb60(%74i0)

bb14(%76 : $`()`):
  br bb55

bb15:
  %83 = new $`*Int64`
  %35i3 = binary_op %35 [arb] %83, $`Builtin.Int1`
  cond_br %35i3, true bb16, false bb18

bb16:
  int64Value = pointer_read %83, $`Int64`
  %89 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (Int64, @inout τ_0_0) -> @error Error`
  %89i0 = apply %89(int64Value, %5), $`()`
  %89i1 = new $`Builtin.Int1`
  cond_br %89i1, true bb17(%89i0), false bb61(%89i0)

bb17(%91 : $`()`):
  br bb55

bb18:
  %98 = new $`*UInt`
  %35i4 = binary_op %35 [arb] %98, $`Builtin.Int1`
  cond_br %35i4, true bb19, false bb21

bb19:
  uintValue = pointer_read %98, $`UInt`
  %104 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (UInt, @inout τ_0_0) -> @error Error`
  %104i0 = apply %104(uintValue, %5), $`()`
  %104i1 = new $`Builtin.Int1`
  cond_br %104i1, true bb20(%104i0), false bb62(%104i0)

bb20(%106 : $`()`):
  br bb55

bb21:
  %113 = new $`*UInt8`
  %35i5 = binary_op %35 [arb] %113, $`Builtin.Int1`
  cond_br %35i5, true bb22, false bb24

bb22:
  uint8Value = pointer_read %113, $`UInt8`
  %119 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (UInt8, @inout τ_0_0) -> @error Error`
  %119i0 = apply %119(uint8Value, %5), $`()`
  %119i1 = new $`Builtin.Int1`
  cond_br %119i1, true bb23(%119i0), false bb63(%119i0)

bb23(%121 : $`()`):
  br bb55

bb24:
  %128 = new $`*UInt16`
  %35i6 = binary_op %35 [arb] %128, $`Builtin.Int1`
  cond_br %35i6, true bb25, false bb27

bb25:
  uint16Value = pointer_read %128, $`UInt16`
  %134 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (UInt16, @inout τ_0_0) -> @error Error`
  %134i0 = apply %134(uint16Value, %5), $`()`
  %134i1 = new $`Builtin.Int1`
  cond_br %134i1, true bb26(%134i0), false bb64(%134i0)

bb26(%136 : $`()`):
  br bb55

bb27:
  %143 = new $`*UInt32`
  %35i7 = binary_op %35 [arb] %143, $`Builtin.Int1`
  cond_br %35i7, true bb28, false bb30

bb28:
  uint32Value = pointer_read %143, $`UInt32`
  %149 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (UInt32, @inout τ_0_0) -> @error Error`
  %149i0 = apply %149(uint32Value, %5), $`()`
  %149i1 = new $`Builtin.Int1`
  cond_br %149i1, true bb29(%149i0), false bb65(%149i0)

bb29(%151 : $`()`):
  br bb55

bb30:
  %158 = new $`*UInt64`
  %35i8 = binary_op %35 [arb] %158, $`Builtin.Int1`
  cond_br %35i8, true bb31, false bb33

bb31:
  uint64Value = pointer_read %158, $`UInt64`
  %164 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (UInt64, @inout τ_0_0) -> @error Error`
  %164i0 = apply %164(uint64Value, %5), $`()`
  %164i1 = new $`Builtin.Int1`
  cond_br %164i1, true bb32(%164i0), false bb66(%164i0)

bb32(%166 : $`()`):
  br bb55

bb33:
  %173 = new $`*Double`
  %35i9 = binary_op %35 [arb] %173, $`Builtin.Int1`
  cond_br %35i9, true bb34, false bb36

bb34:
  doubleValue = pointer_read %173, $`Double`
  %179 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (Double, @inout τ_0_0) -> @error Error`
  %179i0 = apply %179(doubleValue, %5), $`()`
  %179i1 = new $`Builtin.Int1`
  cond_br %179i1, true bb35(%179i0), false bb67(%179i0)

bb35(%181 : $`()`):
  br bb55

bb36:
  %188 = new $`*Bool`
  %35i10 = binary_op %35 [arb] %188, $`Builtin.Int1`
  cond_br %35i10, true bb37, false bb39

bb37:
  boolValue = pointer_read %188, $`Bool`
  %194 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (Bool, @inout τ_0_0) -> @error Error`
  %194i0 = apply %194(boolValue, %5), $`()`
  %194i1 = new $`Builtin.Int1`
  cond_br %194i1, true bb38(%194i0), false bb68(%194i0)

bb38(%196 : $`()`):
  br bb55

bb39:
  %203 = new $`*String`
  %35i11 = binary_op %35 [arb] %203, $`Builtin.Int1`
  cond_br %35i11, true bb40, false bb42

bb40:
  stringValue = pointer_read %203, $`String`
  %210 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer> (@guaranteed String, @inout τ_0_0) -> @error Error`
  %210i0 = apply %210(stringValue, %5), $`()`
  %210i1 = new $`Builtin.Int1`
  cond_br %210i1, true bb41(%210i0), false bb69(%210i0)

bb41(%212 : $`()`):
  br bb55

bb42:
  %221 = new $`*Array<Any>`
  %35i12 = binary_op %35 [arb] %221, $`Builtin.Int1`
  cond_br %35i12, true bb43, false bb48

bb43:
  %223 = pointer_read %221, $`Array<Any>`
  %224 = new $`*Array<JSON>`
  %225 = function_ref @`SwiftyJSON.JSON.array.getter : [SwiftyJSON.JSON]?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<Array<JSON>>`
  %226 = apply %225(self), $`@owned Optional<Array<JSON>>`
  %227 = assign %226, $`Optional<Array<JSON>>`
  %228 = new $`*Optional<Array<JSON>>`
  %229 = assign %227, $`Optional<Array<JSON>>`
  pointer_write %229 to %228
  %228i0 = pointer_read %228, $`Optional<Array<JSON>>`
  switch_enum %228i0, case "#Optional.some!enumelt" : bb44, case "#Optional.none!enumelt" : bb45

bb44:
  %233 = new $`*Any`
  %233i0 = field_read [alias %233] %228, data, $`Any`
  pointer_write %233i0 to %233
  %234 = pointer_read %233, $`Array<JSON>`
  pointer_write %234 to %224
  br bb46

bb45:
  %238 = literal [int] 0, $`Builtin.Word`
  %239 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %240 = apply %239(%238), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %241 = field_read %240, 0, $`Array<JSON>`
  %242 = field_read %240, 1, $`Builtin.RawPointer`
  pointer_write %241 to %224
  %245 = new $`()`
  br bb46

bb46:
  %248 = new $`()`
  jsonValueArray = pointer_read %224, $`Array<JSON>`
  %254 = new $`*Array<JSON>`
  pointer_write jsonValueArray to %254
  %258 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer><τ_1_0 where τ_1_0 : Encodable> (@in_guaranteed τ_1_0, @inout τ_0_0) -> @error Error`
  %258i0 = apply %258(%254, %5), $`()`
  %258i1 = new $`Builtin.Int1`
  cond_br %258i1, true bb47(%258i0), false bb70(%258i0)

bb47(%260 : $`()`):
  br bb55

bb48:
  %271 = new $`*Dictionary<String, Any>`
  %35i13 = binary_op %35 [arb] %271, $`Builtin.Int1`
  cond_br %35i13, true bb49, false bb54

bb49:
  %273 = pointer_read %271, $`Dictionary<String, Any>`
  %274 = new $`*Dictionary<String, JSON>`
  %275 = function_ref @`SwiftyJSON.JSON.dictionary.getter : [Swift.String : SwiftyJSON.JSON]?`, $`@convention(method) (@guaranteed JSON) -> @owned Optional<Dictionary<String, JSON>>`
  %276 = apply %275(self), $`@owned Optional<Dictionary<String, JSON>>`
  %277 = assign %276, $`Optional<Dictionary<String, JSON>>`
  %278 = new $`*Optional<Dictionary<String, JSON>>`
  %279 = assign %277, $`Optional<Dictionary<String, JSON>>`
  pointer_write %279 to %278
  %278i0 = pointer_read %278, $`Optional<Dictionary<String, JSON>>`
  switch_enum %278i0, case "#Optional.some!enumelt" : bb50, case "#Optional.none!enumelt" : bb51

bb50:
  %283 = new $`*Any`
  %283i0 = field_read [alias %283] %278, data, $`Any`
  pointer_write %283i0 to %283
  %284 = pointer_read %283, $`Dictionary<String, JSON>`
  pointer_write %284 to %274
  br bb52

bb51:
  %288 = literal [int] 0, $`Builtin.Word`
  %289 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %290 = apply %289(%288), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %291 = field_read %290, 0, $`Array<(String, JSON)>`
  %292 = field_read %290, 1, $`Builtin.RawPointer`
  %294 = new $`@thin Dictionary<String, JSON>.Type`
  %295 = function_ref @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]`, $`@convention(method) <τ_0_0, τ_0_1 where τ_0_0 : Hashable> (@owned Array<(τ_0_0, τ_0_1)>, @thin Dictionary<τ_0_0, τ_0_1>.Type) -> @owned Dictionary<τ_0_0, τ_0_1>`
  %296 = apply %295(%291, %294), $`@owned Dictionary<τ_0_0, τ_0_1>`
  pointer_write %296 to %274
  %298 = new $`()`
  br bb52

bb52:
  %301 = new $`()`
  jsonValueDictValue = pointer_read %274, $`Dictionary<String, JSON>`
  %307 = new $`*Dictionary<String, JSON>`
  pointer_write jsonValueDictValue to %307
  %311 = dynamic_ref @`#SingleValueEncodingContainer.encode`, $`@convention(witness_method: SingleValueEncodingContainer) <τ_0_0 where τ_0_0 : SingleValueEncodingContainer><τ_1_0 where τ_1_0 : Encodable> (@in_guaranteed τ_1_0, @inout τ_0_0) -> @error Error`
  %311i0 = apply %311(%307, %5), $`()`
  %311i1 = new $`Builtin.Int1`
  cond_br %311i1, true bb53(%311i0), false bb71(%311i0)

bb53(%313 : $`()`):
  br bb55

bb54:
  br bb55

bb55:
  br bb56

bb56:
  %330 = new $`()`
  return %330

bb57(%332 : $`@owned $Error`):
  br bb72(%332)

bb58(%337 : $`@owned $Error`):
  br bb72(%337)

bb59(%345 : $`@owned $Error`):
  br bb72(%345)

bb60(%353 : $`@owned $Error`):
  br bb72(%353)

bb61(%361 : $`@owned $Error`):
  br bb72(%361)

bb62(%369 : $`@owned $Error`):
  br bb72(%369)

bb63(%377 : $`@owned $Error`):
  br bb72(%377)

bb64(%385 : $`@owned $Error`):
  br bb72(%385)

bb65(%393 : $`@owned $Error`):
  br bb72(%393)

bb66(%401 : $`@owned $Error`):
  br bb72(%401)

bb67(%409 : $`@owned $Error`):
  br bb72(%409)

bb68(%417 : $`@owned $Error`):
  br bb72(%417)

bb69(%425 : $`@owned $Error`):
  br bb72(%425)

bb70(%435 : $`@owned $Error`):
  br bb72(%435)

bb71(%447 : $`@owned $Error`):
  br bb72(%447)

bb72(%459 : $`@owned $Error`):
  return %459
}

func @`protocol witness for Swift.Decodable.init(from: Swift.Decoder) throws -> A in conformance SwiftyJSON.JSON : Swift.Decodable in SwiftyJSON` : $`(@out JSON, @error Error)` {
bb0(%0 : $`*JSON`, %1 : $`*Decoder`, %2 : $`@thick JSON.Type`):
  %3 = new $`@thin JSON.Type`
  %4 = function_ref @`SwiftyJSON.JSON.init(from: Swift.Decoder) throws -> SwiftyJSON.JSON`, $`@convention(method) (@in Decoder, @thin JSON.Type) -> (@owned JSON, @error Error)`
  %4i0 = apply %4(%1, %3), $`JSON`
  %4i1 = new $`Builtin.Int1`
  cond_br %4i1, true bb1(%4i0), false bb2(%4i0)

bb1(%6 : $`@owned $JSON`):
  pointer_write %6 to %0
  %8 = new $`()`
  return %8

bb2(%10 : $`@owned $Error`):
  return %10
}

func @`protocol witness for Swift.Encodable.encode(to: Swift.Encoder) throws -> () in conformance SwiftyJSON.JSON : Swift.Encodable in SwiftyJSON` : $`@error Error` {
bb0(%0 : $`*Encoder`, %1 : $`*JSON`):
  %2 = pointer_read %1, $`JSON`
  %3 = function_ref @`SwiftyJSON.JSON.encode(to: Swift.Encoder) throws -> ()`, $`@convention(method) (@in_guaranteed Encoder, @guaranteed JSON) -> @error Error`
  %3i0 = apply %3(%0, %2), $`()`
  %3i1 = new $`Builtin.Int1`
  cond_br %3i1, true bb1(%3i0), false bb2(%3i0)

bb1(%5 : $`()`):
  %6 = new $`()`
  return %6

bb2(%9 : $`@owned $Error`):
  return %9
}

func @`protocol witness for Swift.SetAlgebra.init() -> A in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`@thick JSONSerialization.ReadingOptions.Type`):
  %2 = function_ref @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.init() -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0.RawValue : FixedWidthInteger> (@thick τ_0_0.Type) -> @out τ_0_0`
  %3 = apply %2(%0, %1), $`@out τ_0_0`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.init() -> A` : $`@out τ_0_0` {
bb0(%0 : $`@thick τ_0_0.Type`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.contains(A.Element) -> Swift.Bool in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`Bool` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.OptionSet< where A == A.Element>.contains(A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0 == τ_0_0.Element> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %3 = apply %2(%0, %1), $`Bool`
  return %3
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A == A.Element>.contains(A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.union(__owned A) -> A in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`*JSONSerialization.ReadingOptions`):
  %3 = function_ref @`(extension in Swift):Swift.OptionSet.union(A) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0`
  %4 = apply %3(%0, %1, %2), $`@out τ_0_0`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.OptionSet.union(A) -> A` : $`@out τ_0_0` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.intersection(A) -> A in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`*JSONSerialization.ReadingOptions`):
  %3 = function_ref @`(extension in Swift):Swift.OptionSet.intersection(A) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0`
  %4 = apply %3(%0, %1, %2), $`@out τ_0_0`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.OptionSet.intersection(A) -> A` : $`@out τ_0_0` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.symmetricDifference(__owned A) -> A in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`*JSONSerialization.ReadingOptions`):
  %3 = function_ref @`(extension in Swift):Swift.OptionSet.symmetricDifference(A) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0`
  %4 = apply %3(%0, %1, %2), $`@out τ_0_0`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.OptionSet.symmetricDifference(A) -> A` : $`@out τ_0_0` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.insert(__owned A.Element) -> (inserted: Swift.Bool, memberAfterInsert: A.Element) in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`(Bool, @out JSONSerialization.ReadingOptions)` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`*JSONSerialization.ReadingOptions`):
  %3 = function_ref @`(extension in Swift):Swift.OptionSet< where A == A.Element>.insert(A) -> (inserted: Swift.Bool, memberAfterInsert: A)`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0 == τ_0_0.Element> (@in_guaranteed τ_0_0, @inout τ_0_0) -> (Bool, @out τ_0_0)`
  %4 = apply %3(%0, %1, %2), $`(Bool, @out τ_0_0)`
  return %4
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A == A.Element>.insert(A) -> (inserted: Swift.Bool, memberAfterInsert: A)` : $`(Bool, @out τ_0_0)` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout τ_0_0`):
  %ret = new $`(Bool, @out τ_0_0)`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.remove(A.Element) -> A.Element? in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out Optional<JSONSerialization.ReadingOptions>` {
bb0(%0 : $`*Optional<JSONSerialization.ReadingOptions>`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`*JSONSerialization.ReadingOptions`):
  %3 = function_ref @`(extension in Swift):Swift.OptionSet< where A == A.Element>.remove(A) -> A?`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0 == τ_0_0.Element> (@in_guaranteed τ_0_0, @inout τ_0_0) -> @out Optional<τ_0_0>`
  %4 = apply %3(%0, %1, %2), $`@out Optional<τ_0_0>`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A == A.Element>.remove(A) -> A?` : $`@out Optional<τ_0_0>` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout τ_0_0`):
  %ret = new $`@out Optional<τ_0_0>`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.update(with: __owned A.Element) -> A.Element? in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out Optional<JSONSerialization.ReadingOptions>` {
bb0(%0 : $`*Optional<JSONSerialization.ReadingOptions>`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`*JSONSerialization.ReadingOptions`):
  %3 = function_ref @`(extension in Swift):Swift.OptionSet< where A == A.Element>.update(with: A) -> A?`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0 == τ_0_0.Element> (@in_guaranteed τ_0_0, @inout τ_0_0) -> @out Optional<τ_0_0>`
  %4 = apply %3(%0, %1, %2), $`@out Optional<τ_0_0>`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A == A.Element>.update(with: A) -> A?` : $`@out Optional<τ_0_0>` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout τ_0_0`):
  %ret = new $`@out Optional<τ_0_0>`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.formUnion(__owned A) -> () in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`()` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.formUnion(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0.RawValue : FixedWidthInteger> (@in_guaranteed τ_0_0, @inout τ_0_0) -> ()`
  %3 = apply %2(%0, %1), $`()`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.formUnion(A) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.formIntersection(A) -> () in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`()` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.formIntersection(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0.RawValue : FixedWidthInteger> (@in_guaranteed τ_0_0, @inout τ_0_0) -> ()`
  %3 = apply %2(%0, %1), $`()`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.formIntersection(A) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.formSymmetricDifference(__owned A) -> () in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`()` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.formSymmetricDifference(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : OptionSet, τ_0_0.RawValue : FixedWidthInteger> (@in_guaranteed τ_0_0, @inout τ_0_0) -> ()`
  %3 = apply %2(%0, %1), $`()`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.OptionSet< where A.RawValue: Swift.FixedWidthInteger>.formSymmetricDifference(A) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.subtracting(A) -> A in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`*JSONSerialization.ReadingOptions`):
  %3 = function_ref @`(extension in Swift):Swift.SetAlgebra.subtracting(A) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0`
  %4 = apply %3(%0, %1, %2), $`@out τ_0_0`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.SetAlgebra.subtracting(A) -> A` : $`@out τ_0_0` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.isSubset(of: A) -> Swift.Bool in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`Bool` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.SetAlgebra.isSubset(of: A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %3 = apply %2(%0, %1), $`Bool`
  return %3
}

func [stub] @`(extension in Swift):Swift.SetAlgebra.isSubset(of: A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.isDisjoint(with: A) -> Swift.Bool in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`Bool` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.SetAlgebra.isDisjoint(with: A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %3 = apply %2(%0, %1), $`Bool`
  return %3
}

func [stub] @`(extension in Swift):Swift.SetAlgebra.isDisjoint(with: A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.isSuperset(of: A) -> Swift.Bool in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`Bool` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.SetAlgebra.isSuperset(of: A) -> Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %3 = apply %2(%0, %1), $`Bool`
  return %3
}

func [stub] @`(extension in Swift):Swift.SetAlgebra.isSuperset(of: A) -> Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.isEmpty.getter : Swift.Bool in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`Bool` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`):
  %1 = function_ref @`(extension in Swift):Swift.SetAlgebra.isEmpty.getter : Swift.Bool`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra> (@in_guaranteed τ_0_0) -> Bool`
  %2 = apply %1(%0), $`Bool`
  return %2
}

func [stub] @`(extension in Swift):Swift.SetAlgebra.isEmpty.getter : Swift.Bool` : $`Bool` {
bb0(%0 : $`@in_guaranteed τ_0_0`):
  %ret = new $`Bool`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.init<A where A1: Swift.Sequence, A.Element == A1.Element>(__owned A1) -> A in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*τ_0_0`, %2 : $`@thick JSONSerialization.ReadingOptions.Type`):
  %3 = function_ref @`(extension in Swift):Swift.SetAlgebra.init<A where A1: Swift.Sequence, A.Element == A1.Element>(__owned A1) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra><τ_1_0 where τ_1_0 : Sequence, τ_0_0.Element == τ_1_0.Element> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0`
  %4 = apply %3(%0, %1, %2), $`@out τ_0_0`
  %5 = new $`()`
  return %5
}

func [stub] @`(extension in Swift):Swift.SetAlgebra.init<A where A1: Swift.Sequence, A.Element == A1.Element>(__owned A1) -> A` : $`@out τ_0_0` {
bb0(%0 : $`@in τ_1_0`, %1 : $`@thick τ_0_0.Type`):
  %ret = new $`@out τ_0_0`
  return %ret
}

func @`protocol witness for Swift.SetAlgebra.subtract(A) -> () in conformance __C.NSJSONReadingOptions : Swift.SetAlgebra in __C_Synthesized` : $`()` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = function_ref @`(extension in Swift):Swift.SetAlgebra.subtract(A) -> ()`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra> (@in_guaranteed τ_0_0, @inout τ_0_0) -> ()`
  %3 = apply %2(%0, %1), $`()`
  %4 = new $`()`
  return %4
}

func [stub] @`(extension in Swift):Swift.SetAlgebra.subtract(A) -> ()` : $`()` {
bb0(%0 : $`@in_guaranteed τ_0_0`, %1 : $`@inout τ_0_0`):
  %ret = new $`()`
  return %ret
}

func @`protocol witness for Swift.RawRepresentable.init(rawValue: A.RawValue) -> A? in conformance __C.NSComparisonResult : Swift.RawRepresentable in __C_Synthesized` : $`@out Optional<ComparisonResult>` {
bb0(%0 : $`*Optional<ComparisonResult>`, %1 : $`*Int`, %2 : $`@thick ComparisonResult.Type`):
  %3 = pointer_read %1, $`Int`
  %4 = new $`@thin ComparisonResult.Type`
  %5 = function_ref @`__C.NSComparisonResult.init(rawValue: Swift.Int) -> __C.NSComparisonResult?`, $`@convention(method) (Int, @thin ComparisonResult.Type) -> Optional<ComparisonResult>`
  %6 = apply %5(%3, %4), $`Optional<ComparisonResult>`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`__C.NSComparisonResult.init(rawValue: Swift.Int) -> __C.NSComparisonResult?` : $`Optional<ComparisonResult>` {
bb0(rawValue : $`Int`, %1 : $`@thin ComparisonResult.Type`):
  %2 = new $`*ComparisonResult`
  pointer_write rawValue to %2
  %8 = new $`Optional<ComparisonResult>`
  %8i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %8i0 to %8, type
  field_write rawValue to %8, data
  br bb1

bb1:
  return %8
}

func @`protocol witness for Swift.RawRepresentable.rawValue.getter : A.RawValue in conformance __C.NSComparisonResult : Swift.RawRepresentable in __C_Synthesized` : $`@out Int` {
bb0(%0 : $`*Int`, %1 : $`*ComparisonResult`):
  %2 = pointer_read %1, $`ComparisonResult`
  %3 = function_ref @`__C.NSComparisonResult.rawValue.getter : Swift.Int`, $`@convention(method) (ComparisonResult) -> Int`
  %4 = apply %3(%2), $`Int`
  pointer_write %4 to %0
  %6 = new $`()`
  return %6
}

func @`__C.NSComparisonResult.rawValue.getter : Swift.Int` : $`Int` {
bb0(self : $`ComparisonResult`):
  return self
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance __C.NSComparisonResult : Swift.Equatable in __C_Synthesized` : $`Bool` {
bb0(%0 : $`*ComparisonResult`, %1 : $`*ComparisonResult`, %2 : $`@thick ComparisonResult.Type`):
  %3 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %4 = apply %3(%0, %1), $`Bool`
  return %4
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance __C.NSJSONReadingOptions : Swift.Equatable in __C_Synthesized` : $`Bool` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*JSONSerialization.ReadingOptions`, %2 : $`@thick JSONSerialization.ReadingOptions.Type`):
  %3 = function_ref @`Swift.== infix<A where A: Swift.RawRepresentable, A.RawValue: Swift.Equatable>(A, A) -> Swift.Bool`, $`@convention(thin) <τ_0_0 where τ_0_0 : RawRepresentable, τ_0_0.RawValue : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool`
  %4 = apply %3(%0, %1), $`Bool`
  return %4
}

func @`protocol witness for Swift.ExpressibleByArrayLiteral.init(arrayLiteral: A.ArrayLiteralElement...) -> A in conformance __C.NSJSONReadingOptions : Swift.ExpressibleByArrayLiteral in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`@owned $Array<JSONSerialization.ReadingOptions>`, %2 : $`@thick JSONSerialization.ReadingOptions.Type`):
  %3 = function_ref @`(extension in Swift):Swift.SetAlgebra< where A.ArrayLiteralElement == A.Element>.init(arrayLiteral: A.ArrayLiteralElement...) -> A`, $`@convention(method) <τ_0_0 where τ_0_0 : SetAlgebra, τ_0_0.ArrayLiteralElement == τ_0_0.Element> (@owned Array<τ_0_0.ArrayLiteralElement>, @thick τ_0_0.Type) -> @out τ_0_0`
  %4 = apply %3(%0, %1, %2), $`@out τ_0_0`
  %5 = new $`()`
  return %5
}

func @`protocol witness for Swift.OptionSet.init(rawValue: A.RawValue) -> A in conformance __C.NSJSONReadingOptions : Swift.OptionSet in __C_Synthesized` : $`@out JSONSerialization.ReadingOptions` {
bb0(%0 : $`*JSONSerialization.ReadingOptions`, %1 : $`*UInt`, %2 : $`@thick JSONSerialization.ReadingOptions.Type`):
  %3 = pointer_read %1, $`UInt`
  %4 = new $`@thin JSONSerialization.ReadingOptions.Type`
  %5 = function_ref @`__C.NSJSONReadingOptions.init(rawValue: Swift.UInt) -> __C.NSJSONReadingOptions`, $`@convention(method) (UInt, @thin JSONSerialization.ReadingOptions.Type) -> JSONSerialization.ReadingOptions`
  %6 = apply %5(%3, %4), $`JSONSerialization.ReadingOptions`
  pointer_write %6 to %0
  %8 = new $`()`
  return %8
}

func @`__C.NSJSONReadingOptions.init(rawValue: Swift.UInt) -> __C.NSJSONReadingOptions` : $`JSONSerialization.ReadingOptions` {
bb0(rawValue : $`UInt`, %1 : $`@thin JSONSerialization.ReadingOptions.Type`):
  %3 = new $`JSONSerialization.ReadingOptions`
  return %3
}

func @`protocol witness for Swift.RawRepresentable.init(rawValue: A.RawValue) -> A? in conformance __C.NSJSONReadingOptions : Swift.RawRepresentable in __C_Synthesized` : $`@out Optional<JSONSerialization.ReadingOptions>` {
bb0(%0 : $`*Optional<JSONSerialization.ReadingOptions>`, %1 : $`*UInt`, %2 : $`@thick JSONSerialization.ReadingOptions.Type`):
  %3 = pointer_read %1, $`UInt`
  %4 = new $`@thin JSONSerialization.ReadingOptions.Type`
  %5 = function_ref @`__C.NSJSONReadingOptions.init(rawValue: Swift.UInt) -> __C.NSJSONReadingOptions`, $`@convention(method) (UInt, @thin JSONSerialization.ReadingOptions.Type) -> JSONSerialization.ReadingOptions`
  %6 = apply %5(%3, %4), $`JSONSerialization.ReadingOptions`
  %7 = new $`Optional<JSONSerialization.ReadingOptions>`
  %7i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer`
  field_write %7i0 to %7, type
  field_write %6 to %7, data
  pointer_write %7 to %0
  %9 = new $`()`
  return %9
}

func @`protocol witness for Swift.RawRepresentable.rawValue.getter : A.RawValue in conformance __C.NSJSONReadingOptions : Swift.RawRepresentable in __C_Synthesized` : $`@out UInt` {
bb0(%0 : $`*UInt`, %1 : $`*JSONSerialization.ReadingOptions`):
  %2 = pointer_read %1, $`JSONSerialization.ReadingOptions`
  %3 = function_ref @`__C.NSJSONReadingOptions.rawValue.getter : Swift.UInt`, $`@convention(method) (JSONSerialization.ReadingOptions) -> UInt`
  %4 = apply %3(%2), $`UInt`
  pointer_write %4 to %0
  %6 = new $`()`
  return %6
}

func @`__C.NSJSONReadingOptions.rawValue.getter : Swift.UInt` : $`UInt` {
bb0(self : $`JSONSerialization.ReadingOptions`):
  %2 = field_read self, rawValue, $`Any`
  return %2
}

func @`protocol witness for Swift.IteratorProtocol.next() -> A.Element? in conformance Swift.IndexingIterator<A> : Swift.IteratorProtocol in Swift` : $`@out Optional<τ_0_0.Element>` {
bb0(%0 : $`*Optional<τ_0_0.Element>`, %1 : $`*IndexingIterator<τ_0_0>`):
  %2 = function_ref @`Swift.IndexingIterator.next() -> A.Element?`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@inout IndexingIterator<τ_0_0>) -> @out Optional<τ_0_0.Element>`
  %3 = apply %2(%0, %1), $`@out Optional<τ_0_0.Element>`
  %4 = new $`()`
  return %4
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance __C.NSObject : Swift.Equatable in ObjectiveC` : $`Bool` {
bb0(%0 : $`*NSObject`, %1 : $`*NSObject`, %2 : $`@thick NSObject.Type`):
  %3 = pointer_read %0, $`NSObject`
  %4 = pointer_read %1, $`NSObject`
  %5 = function_ref @`static (extension in ObjectiveC):__C.NSObject.== infix(__C.NSObject, __C.NSObject) -> Swift.Bool`, $`@convention(method) (@guaranteed NSObject, @guaranteed NSObject, @thick NSObject.Type) -> Bool`
  %6 = apply %5(%3, %4, %2), $`Bool`
  return %6
}

func @`protocol witness for Swift.Sequence.makeIterator() -> A.Iterator in conformance [A] : Swift.Sequence in Swift` : $`@out IndexingIterator<Array<τ_0_0>>` {
bb0(%0 : $`*IndexingIterator<Array<τ_0_0>>`, %1 : $`*Array<τ_0_0>`):
  %2 = function_ref @`(extension in Swift):Swift.Collection< where A.Iterator == Swift.IndexingIterator<A>>.makeIterator() -> Swift.IndexingIterator<A>`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Iterator == IndexingIterator<τ_0_0>> (@in τ_0_0) -> @out IndexingIterator<τ_0_0>`
  %3 = apply %2(%0, %1), $`@out IndexingIterator<τ_0_0>`
  %4 = new $`()`
  return %4
}

func @`protocol witness for Swift.Sequence.underestimatedCount.getter : Swift.Int in conformance [A] : Swift.Sequence in Swift` : $`Int` {
bb0(%0 : $`*Array<τ_0_0>`):
  %1 = function_ref @`(extension in Swift):Swift.Collection.underestimatedCount.getter : Swift.Int`, $`@convention(method) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0) -> Int`
  %2 = apply %1(%0), $`Int`
  return %2
}

func @`protocol witness for Swift.Sequence._customContainsEquatableElement(A.Element) -> Swift.Bool? in conformance [A] : Swift.Sequence in Swift` : $`Optional<Bool>` {
bb0(%0 : $`*τ_0_0`, %1 : $`*Array<τ_0_0>`):
  %2 = function_ref @`(extension in Swift):Swift.Sequence._customContainsEquatableElement(A.Element) -> Swift.Bool?`, $`@convention(method) <τ_0_0 where τ_0_0 : Sequence> (@in_guaranteed τ_0_0.Element, @in_guaranteed τ_0_0) -> Optional<Bool>`
  %3 = apply %2(%0, %1), $`Optional<Bool>`
  return %3
}

func @`protocol witness for Swift.Sequence._copyToContiguousArray() -> Swift.ContiguousArray<A.Element> in conformance [A] : Swift.Sequence in Swift` : $`@owned ContiguousArray<τ_0_0>` {
bb0(%0 : $`*Array<τ_0_0>`):
  %1 = pointer_read %0, $`Array<τ_0_0>`
  %2 = function_ref @`Swift.Array._copyToContiguousArray() -> Swift.ContiguousArray<A>`, $`@convention(method) <τ_0_0> (@owned Array<τ_0_0>) -> @owned ContiguousArray<τ_0_0>`
  %3 = apply %2(%1), $`@owned ContiguousArray<τ_0_0>`
  return %3
}

func @`protocol witness for Swift.Sequence._copyContents(initializing: Swift.UnsafeMutableBufferPointer<A.Element>) -> (A.Iterator, Swift.Int) in conformance [A] : Swift.Sequence in Swift` : $`(@out IndexingIterator<Array<τ_0_0>>, Int)` {
bb0(%0 : $`*IndexingIterator<Array<τ_0_0>>`, %1 : $`UnsafeMutableBufferPointer<τ_0_0>`, %2 : $`*Array<τ_0_0>`):
  %3 = pointer_read %2, $`Array<τ_0_0>`
  %4 = function_ref @`Swift.Array._copyContents(initializing: Swift.UnsafeMutableBufferPointer<A>) -> (Swift.IndexingIterator<[A]>, Swift.Int)`, $`@convention(method) <τ_0_0> (UnsafeMutableBufferPointer<τ_0_0>, @owned Array<τ_0_0>) -> (@owned IndexingIterator<Array<τ_0_0>>, Int)`
  %5 = apply %4(%1, %3), $`(@owned IndexingIterator<Array<τ_0_0>>, Int)`
  %6 = field_read %5, 0, $`IndexingIterator<Array<τ_0_0>>`
  %7 = field_read %5, 1, $`Int`
  pointer_write %6 to %0
  return %7
}

func @`protocol witness for Swift.Sequence.withContiguousStorageIfAvailable<A>((Swift.UnsafeBufferPointer<A.Element>) throws -> A1) throws -> A1? in conformance [A] : Swift.Sequence in Swift` : $`(@out Optional<τ_1_0>, @error Error)` {
bb0(%0 : $`*Optional<τ_1_0>`, %1 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_1_0>`, %2 : $`*Array<τ_0_0>`):
  %3 = pointer_read %2, $`Array<τ_0_0>`
  %4 = function_ref @`Swift.Array.withContiguousStorageIfAvailable<A>((Swift.UnsafeBufferPointer<A>) throws -> A1) throws -> A1?`, $`@convention(method) <τ_0_0><τ_1_0> (@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_1_0>, @guaranteed Array<τ_0_0>) -> (@out Optional<τ_1_0>, @error Error)`
  %4i0 = apply %4(%0, %1, %3), $`Optional<τ_1_0>`
  %4i1 = new $`Builtin.Int1`
  cond_br %4i1, true bb2(%4i0), false bb1(%4i0)

bb1(%6 : $`@owned $Error`):
  return %6

bb2(%9 : $`()`):
  %10 = new $`()`
  return %10
}

func @`protocol witness for static Swift.Equatable.== infix(A, A) -> Swift.Bool in conformance Swift.Int : Swift.Equatable in Swift` : $`Bool` {
bb0(%0 : $`*Int`, %1 : $`*Int`, %2 : $`@thick Int.Type`):
  %3 = new $`*Any`
  %3i0 = pointer_read %0, $`*Any`
  %3i1 = field_read [alias %3] %3i0, _value, $`Any`
  pointer_write %3i1 to %3
  %4 = pointer_read %3, $`Builtin.Int64`
  %5 = new $`*Any`
  %5i0 = pointer_read %1, $`*Any`
  %5i1 = field_read [alias %5] %5i0, _value, $`Any`
  pointer_write %5i1 to %5
  %6 = pointer_read %5, $`Builtin.Int64`
  %7i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %7 = apply %7i0(%4, %6), $`Builtin.Int1`
  %8 = new $`Bool`
  br bb1

bb1:
  br bb2

bb2:
  return %8
}

func @`protocol witness for Swift._Pointer._rawValue.getter : Builtin.RawPointer in conformance Swift.AutoreleasingUnsafeMutablePointer<A> : Swift._Pointer in Swift` : $`Builtin.RawPointer` {
bb0(%0 : $`*AutoreleasingUnsafeMutablePointer<τ_0_0>`):
  %1 = new $`*Any`
  %1i0 = pointer_read %0, $`*Any`
  %1i1 = field_read [alias %1] %1i0, _rawValue, $`Any`
  pointer_write %1i1 to %1
  %2 = pointer_read %1, $`Builtin.RawPointer`
  br bb1

bb1:
  return %2
}

func @`protocol witness for Swift._Pointer.init(Builtin.RawPointer) -> A in conformance Swift.AutoreleasingUnsafeMutablePointer<A> : Swift._Pointer in Swift` : $`@out AutoreleasingUnsafeMutablePointer<τ_0_0>` {
bb0(%0 : $`*AutoreleasingUnsafeMutablePointer<τ_0_0>`, %1 : $`Builtin.RawPointer`, %2 : $`@thick AutoreleasingUnsafeMutablePointer<τ_0_0>.Type`):
  %3 = new $`AutoreleasingUnsafeMutablePointer<τ_0_0>`
  br bb1

bb1:
  pointer_write %3 to %0
  %6 = new $`()`
  return %6
}

func [stub] @`Swift.IndexingIterator.next() -> A.Element?` : $`@out Optional<τ_0_0.Element>` {
bb0(%0 : $`@inout IndexingIterator<τ_0_0>`):
  %ret = new $`@out Optional<τ_0_0.Element>`
  return %ret
}

func [stub] @`Swift.ClosedRange.init(uncheckedBounds: (lower: A, upper: A)) -> Swift.ClosedRange<A>` : $`@out ClosedRange<τ_0_0>` {
bb0(%0 : $`@in τ_0_0`, %1 : $`@in τ_0_0`, %2 : $`@thin ClosedRange<τ_0_0>.Type`):
  %ret = new $`@out ClosedRange<τ_0_0>`
  return %ret
}

func [stub] @`Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never` : $`Never` {
bb0(%0 : $`StaticString`, %1 : $`StaticString`, %2 : $`StaticString`, %3 : $`UInt`, %4 : $`UInt32`):
  %ret = new $`Never`
  return %ret
}

func @`protocol witness for static Swift.Comparable.< infix(A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift` : $`Bool` {
bb0(%0 : $`*Int`, %1 : $`*Int`, %2 : $`@thick Int.Type`):
  %3 = new $`*Any`
  %3i0 = pointer_read %0, $`*Any`
  %3i1 = field_read [alias %3] %3i0, _value, $`Any`
  pointer_write %3i1 to %3
  %4 = pointer_read %3, $`Builtin.Int64`
  %5 = new $`*Any`
  %5i0 = pointer_read %1, $`*Any`
  %5i1 = field_read [alias %5] %5i0, _value, $`Any`
  pointer_write %5i1 to %5
  %6 = pointer_read %5, $`Builtin.Int64`
  %7i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %7 = apply %7i0(%4, %6), $`Builtin.Int1`
  %8 = new $`Bool`
  br bb1

bb1:
  br bb2

bb2:
  return %8
}

func @`protocol witness for static Swift.Comparable.<= infix(A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift` : $`Bool` {
bb0(%0 : $`*Int`, %1 : $`*Int`, %2 : $`@thick Int.Type`):
  %3 = new $`*Any`
  %3i0 = pointer_read %0, $`*Any`
  %3i1 = field_read [alias %3] %3i0, _value, $`Any`
  pointer_write %3i1 to %3
  %4 = pointer_read %3, $`Builtin.Int64`
  %5 = new $`*Any`
  %5i0 = pointer_read %1, $`*Any`
  %5i1 = field_read [alias %5] %5i0, _value, $`Any`
  pointer_write %5i1 to %5
  %6 = pointer_read %5, $`Builtin.Int64`
  %7i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %7 = apply %7i0(%6, %4), $`Builtin.Int1`
  br bb1

bb1:
  br bb2

bb2:
  %10 = literal [int] -1, $`Builtin.Int1`
  br bb3

bb3:
  %12i0 = builtin_ref @`xor_Int1`, $`Any`
  %12 = apply %12i0(%7, %10), $`Builtin.Int1`
  %13 = new $`Bool`
  br bb4

bb4:
  br bb5

bb5:
  br bb6

bb6:
  return %13
}

func @`protocol witness for static Swift.Comparable.>= infix(A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift` : $`Bool` {
bb0(%0 : $`*Int`, %1 : $`*Int`, %2 : $`@thick Int.Type`):
  %3 = new $`*Any`
  %3i0 = pointer_read %0, $`*Any`
  %3i1 = field_read [alias %3] %3i0, _value, $`Any`
  pointer_write %3i1 to %3
  %4 = pointer_read %3, $`Builtin.Int64`
  %5 = new $`*Any`
  %5i0 = pointer_read %1, $`*Any`
  %5i1 = field_read [alias %5] %5i0, _value, $`Any`
  pointer_write %5i1 to %5
  %6 = pointer_read %5, $`Builtin.Int64`
  %7i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %7 = apply %7i0(%4, %6), $`Builtin.Int1`
  %8 = literal [int] -1, $`Builtin.Int1`
  %9i0 = builtin_ref @`xor_Int1`, $`Any`
  %9 = apply %9i0(%7, %8), $`Builtin.Int1`
  %10 = new $`Bool`
  return %10
}

func @`protocol witness for static Swift.Comparable.> infix(A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift` : $`Bool` {
bb0(%0 : $`*Int`, %1 : $`*Int`, %2 : $`@thick Int.Type`):
  %3 = new $`*Any`
  %3i0 = pointer_read %0, $`*Any`
  %3i1 = field_read [alias %3] %3i0, _value, $`Any`
  pointer_write %3i1 to %3
  %4 = pointer_read %3, $`Builtin.Int64`
  %5 = new $`*Any`
  %5i0 = pointer_read %1, $`*Any`
  %5i1 = field_read [alias %5] %5i0, _value, $`Any`
  pointer_write %5i1 to %5
  %6 = pointer_read %5, $`Builtin.Int64`
  %7i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %7 = apply %7i0(%6, %4), $`Builtin.Int1`
  %8 = new $`Bool`
  return %8
}

func @`generic specialization <serialized, __C.NSStringCompareOptions> of static Swift.Array._allocateUninitialized(Swift.Int) -> ([A], Swift.UnsafeMutablePointer<A>)` : $`(@owned Array<NSString.CompareOptions>, UnsafeMutablePointer<NSString.CompareOptions>)` {
bb0(%0 : $`Int`, %1 : $`@thin Array<NSString.CompareOptions>.Type`):
  %2 = literal [int] 0, $`Builtin.Int64`
  %3 = field_read %0, _value, $`Any`
  %4i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %4 = apply %4i0(%3, %2), $`Builtin.Int1`
  cond_fail %4
  %6 = singleton_read `_swiftEmptyArrayStorage` from Globals_SwiftyJSON.Pods.sil, $`*_SwiftEmptyArrayStorage`
  %10i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %10 = apply %10i0(%2, %3), $`Builtin.Int1`
  cond_br %10, true bb2, false bb1

bb1:
  br bb3(%6)

bb2:
  %14 = function_ref @`static Swift.Array._allocateBufferUninitialized(minimumCapacity: Swift.Int) -> Swift._ArrayBuffer<A>`, $`@convention(method) <τ_0_0> (Int, @thin Array<τ_0_0>.Type) -> @owned _ArrayBuffer<τ_0_0>`
  %15 = apply %14(%0, %1), $`@owned _ArrayBuffer<τ_0_0>`
  %16 = field_read %15, _storage, $`Any`
  %17 = field_read %16, rawValue, $`Any`
  %19 = new $`*Any`
  %19i0 = field_read [alias %19] %17, countAndCapacity, $`Any`
  pointer_write %19i0 to %19
  %20 = new $`*Any`
  %20i0 = pointer_read %19, $`*Any`
  %20i1 = field_read [alias %20] %20i0, _storage, $`Any`
  pointer_write %20i1 to %20
  %21 = new $`*Any`
  %21i0 = pointer_read %20, $`*Any`
  %21i1 = field_read [alias %21] %21i0, count, $`Any`
  pointer_write %21i1 to %21
  pointer_write %0 to %21
  br bb3(%17)

bb3(%24 : $`Builtin.BridgeObject`):
  %25 = new $`_BridgeStorage<__ContiguousArrayStorageBase>`
  %26 = new $`_ArrayBuffer<NSString.CompareOptions>`
  %27 = new $`Array<NSString.CompareOptions>`
  %29 = assign %24, $`*__ContiguousArrayStorageBase`
  %31 = new $`UnsafeMutablePointer<NSString.CompareOptions>`
  %32 = new $`(Array<NSString.CompareOptions>, UnsafeMutablePointer<NSString.CompareOptions>)`
  field_write %27 to %32, 0
  field_write %31 to %32, 1
  return %32
}

func @`generic specialization <serialized, __C.NSStringCompareOptions> of (extension in Swift):Swift.SetAlgebra< where A.ArrayLiteralElement == A.Element>.init(arrayLiteral: A.ArrayLiteralElement...) -> A` : $`NSString.CompareOptions` {
bb0(%0 : $`Array<NSString.CompareOptions>`, %1 : $`@thick NSString.CompareOptions.Type`):
  %2 = literal [int] 0, $`Builtin.Int64`
  %3 = field_read %0, _buffer, $`Any`
  %4 = field_read %3, _storage, $`Any`
  %5 = field_read %4, rawValue, $`Any`
  %6 = function_ref @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift.Array._getCount() -> Swift.Int`, $`@convention(method) (@guaranteed Array<NSString.CompareOptions>) -> Int`
  %7 = apply %6(%0), $`Int`
  %8 = field_read %7, _value, $`Any`
  %9i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %9 = apply %9i0(%8, %2), $`Builtin.Int1`
  cond_br %9, true bb8, false bb1

bb1:
  %11 = function_ref @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift.Array._hoistableIsNativeTypeChecked() -> Swift.Bool`, $`@convention(method) (@guaranteed Array<NSString.CompareOptions>) -> Bool`
  %12 = apply %11(%0), $`Bool`
  %13 = function_ref @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift.Array._getElement(_: Swift.Int, wasNativeTypeChecked: Swift.Bool, matchingSubscriptCheck: Swift._DependenceToken) -> A`, $`@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<NSString.CompareOptions>) -> NSString.CompareOptions`
  %14 = literal [int] 1, $`Builtin.Int64`
  %15 = literal [int] -1, $`Builtin.Int1`
  %16i0 = builtin_ref @`cmp_sge_Int64`, $`Any`
  %16 = apply %16i0(%2, %8), $`Builtin.Int1`
  cond_fail %16
  %18 = new $`_DependenceToken`
  br bb2(%2, %2)

bb2(%20 : $`Builtin.Int64`, %21 : $`Builtin.Int64`):
  %22 = new $`Int`
  field_write %21 to %22, _value
  %23 = apply %13(%22, %12, %18, %0), $`NSString.CompareOptions`
  %24i0 = builtin_ref @`sadd_with_overflow_Int64`, $`Any`
  %24 = apply %24i0(%21, %14, %15), $`(Builtin.Int64, Builtin.Int1)`
  %25 = field_read %24, 0, $`Builtin.Int64`
  %26 = field_read %23, rawValue, $`Any`
  %27 = field_read %26, _value, $`Any`
  %28i0 = builtin_ref @`and_Int64`, $`Any`
  %28 = apply %28i0(%20, %27), $`Builtin.Int64`
  %29i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %29 = apply %29i0(%28, %27), $`Builtin.Int1`
  cond_br %29, true bb4, false bb3

bb3:
  %31i0 = builtin_ref @`or_Int64`, $`Any`
  %31 = apply %31i0(%20, %27), $`Builtin.Int64`
  br bb5(%31)

bb4:
  br bb5(%20)

bb5(%34 : $`Builtin.Int64`):
  %35i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %35 = apply %35i0(%25, %8), $`Builtin.Int1`
  cond_br %35, true bb7, false bb6

bb6:
  br bb2(%34, %25)

bb7:
  br bb9(%34)

bb8:
  br bb9(%2)

bb9(%40 : $`Builtin.Int64`):
  %42 = new $`UInt`
  field_write %40 to %42, _value
  %43 = new $`NSString.CompareOptions`
  return %43
}

func [stub] @`static Swift.Array._allocateBufferUninitialized(minimumCapacity: Swift.Int) -> Swift._ArrayBuffer<A>` : $`@owned _ArrayBuffer<τ_0_0>` {
bb0(%0 : $`Int`, %1 : $`@thin Array<τ_0_0>.Type`):
  %ret = new $`@owned _ArrayBuffer<τ_0_0>`
  return %ret
}

func @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift.Array._getCount() -> Swift.Int` : $`Int` {
bb0(%0 : $`Array<NSString.CompareOptions>`):
  %1 = field_read %0, _buffer, $`Any`
  %2 = field_read %1, _storage, $`Any`
  %3 = field_read %2, rawValue, $`Any`
  %5 = new $`*Any`
  %5i0 = field_read [alias %5] %3, countAndCapacity, $`Any`
  pointer_write %5i0 to %5
  %6 = new $`*Any`
  %6i0 = pointer_read %5, $`*Any`
  %6i1 = field_read [alias %6] %6i0, _storage, $`Any`
  pointer_write %6i1 to %6
  %7 = new $`*Any`
  %7i0 = pointer_read %6, $`*Any`
  %7i1 = field_read [alias %7] %7i0, count, $`Any`
  pointer_write %7i1 to %7
  %8 = new $`*Any`
  %8i0 = pointer_read %7, $`*Any`
  %8i1 = field_read [alias %8] %8i0, _value, $`Any`
  pointer_write %8i1 to %8
  %9 = pointer_read %8, $`Builtin.Int64`
  %10i0 = builtin_ref @`assumeNonNegative_Int64`, $`Any`
  %10 = apply %10i0(%9), $`Builtin.Int64`
  %11 = new $`Int`
  field_write %10 to %11, _value
  return %11
}

func @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift.Array._hoistableIsNativeTypeChecked() -> Swift.Bool` : $`Bool` {
bb0(%0 : $`Array<NSString.CompareOptions>`):
  %1 = literal [int] -1, $`Builtin.Int1`
  %2 = new $`Bool`
  return %2
}

func @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift.Array._getElement(_: Swift.Int, wasNativeTypeChecked: Swift.Bool, matchingSubscriptCheck: Swift._DependenceToken) -> A` : $`NSString.CompareOptions` {
bb0(%0 : $`Int`, %1 : $`Bool`, %2 : $`_DependenceToken`, %3 : $`Array<NSString.CompareOptions>`):
  %4 = field_read %3, _buffer, $`Any`
  %5 = field_read %1, _value, $`Any`
  %6 = literal [int] -1, $`Builtin.Int1`
  %7i0 = builtin_ref @`int_expect_Int1`, $`Any`
  %7 = apply %7i0(%5, %6), $`Builtin.Int1`
  cond_br %7, true bb2, false bb1

bb1:
  %9 = function_ref @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift._ArrayBuffer._getElementSlowPath(Swift.Int) -> Swift.AnyObject`, $`@convention(method) (Int, @guaranteed _ArrayBuffer<NSString.CompareOptions>) -> @owned AnyObject`
  %10 = apply %9(%0, %4), $`@owned AnyObject`
  %11 = new $`@thick AnyObject.Protocol`
  %12i0 = builtin_ref @`sizeof`, $`Any`
  %12 = apply %12i0(%11), $`Builtin.Word`
  %13i0 = builtin_ref @`sextOrBitCast_Word_Int64`, $`Any`
  %13 = apply %13i0(%12), $`Builtin.Int64`
  %14 = new $`@thick NSString.CompareOptions.Type`
  %15i0 = builtin_ref @`sizeof`, $`Any`
  %15 = apply %15i0(%14), $`Builtin.Word`
  %16i0 = builtin_ref @`sextOrBitCast_Word_Int64`, $`Any`
  %16 = apply %16i0(%15), $`Builtin.Int64`
  %17i0 = builtin_ref @`cmp_eq_Int64`, $`Any`
  %17 = apply %17i0(%13, %16), $`Builtin.Int1`
  %18i0 = builtin_ref @`xor_Int1`, $`Any`
  %18 = apply %18i0(%17, %6), $`Builtin.Int1`
  cond_fail %18
  br bb3(%10)

bb2:
  %23 = field_read %4, _storage, $`Any`
  %24 = field_read %23, rawValue, $`Any`
  %26 = assign %24, $`*__ContiguousArrayStorageBase`
  %27 = field_read %0, _value, $`Any`
  %28i0 = builtin_ref @`truncOrBitCast_Int64_Word`, $`Any`
  %28 = apply %28i0(%27), $`Builtin.Word`
  %30 = pointer_read %26, $`NSString.CompareOptions`
  br bb3(%30)

bb3(%32 : $`NSString.CompareOptions`):
  return %32
}

func @`generic specialization <serialized, __C.NSStringCompareOptions> of Swift._ArrayBuffer._getElementSlowPath(Swift.Int) -> Swift.AnyObject` : $`@owned AnyObject` {
bb0(%0 : $`Int`, %1 : $`_ArrayBuffer<NSString.CompareOptions>`):
  %2 = field_read %1, _storage, $`Any`
  %3 = field_read %2, rawValue, $`Any`
  %5 = literal [int] 0, $`Builtin.Int64`
  %6 = field_read %0, _value, $`Any`
  %7i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %7 = apply %7i0(%6, %5), $`Builtin.Int1`
  cond_fail %7
  %9 = new $`*Any`
  %9i0 = field_read [alias %9] %3, countAndCapacity, $`Any`
  pointer_write %9i0 to %9
  %10 = new $`*Any`
  %10i0 = pointer_read %9, $`*Any`
  %10i1 = field_read [alias %10] %10i0, _storage, $`Any`
  pointer_write %10i1 to %10
  %11 = new $`*Any`
  %11i0 = pointer_read %10, $`*Any`
  %11i1 = field_read [alias %11] %11i0, count, $`Any`
  pointer_write %11i1 to %11
  %12 = new $`*Any`
  %12i0 = pointer_read %11, $`*Any`
  %12i1 = field_read [alias %12] %12i0, _value, $`Any`
  pointer_write %12i1 to %12
  %13 = pointer_read %12, $`Builtin.Int64`
  %14i0 = builtin_ref @`assumeNonNegative_Int64`, $`Any`
  %14 = apply %14i0(%13), $`Builtin.Int64`
  %15i0 = builtin_ref @`cmp_slt_Int64`, $`Any`
  %15 = apply %15i0(%6, %14), $`Builtin.Int1`
  %16 = literal [int] -1, $`Builtin.Int1`
  %17i0 = builtin_ref @`xor_Int1`, $`Any`
  %17 = apply %17i0(%15, %16), $`Builtin.Int1`
  cond_fail %17
  %20 = assign %3, $`*__ContiguousArrayStorageBase`
  %21i0 = builtin_ref @`truncOrBitCast_Int64_Word`, $`Any`
  %21 = apply %21i0(%6), $`Builtin.Word`
  %23 = pointer_read %20, $`AnyObject`
  %25 = new $`*AnyObject`
  pointer_write %23 to %25
  %27 = new $`*NSString.CompareOptions`
  %25i0 = binary_op %25 [arb] %27, $`Builtin.Int1`
  cond_br %25i0, true bb2, false bb1

bb1:
  cond_fail %16
  unreachable

bb2:
  return %23
}

func [stub] @`Swift.Array._copyToContiguousArray() -> Swift.ContiguousArray<A>` : $`@owned ContiguousArray<τ_0_0>` {
bb0(%0 : $`@owned Array<τ_0_0>`):
  %ret = new $`@owned ContiguousArray<τ_0_0>`
  return %ret
}

func [stub] @`Swift.Array._copyContents(initializing: Swift.UnsafeMutableBufferPointer<A>) -> (Swift.IndexingIterator<[A]>, Swift.Int)` : $`(@owned IndexingIterator<Array<τ_0_0>>, Int)` {
bb0(%0 : $`UnsafeMutableBufferPointer<τ_0_0>`, %1 : $`@owned Array<τ_0_0>`):
  %ret = new $`(@owned IndexingIterator<Array<τ_0_0>>, Int)`
  return %ret
}

func [stub] @`Swift.Array.withContiguousStorageIfAvailable<A>((Swift.UnsafeBufferPointer<A>) throws -> A1) throws -> A1?` : $`(@out Optional<τ_1_0>, @error Error)` {
bb0(%0 : $`@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_1_0>`, %1 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`(@out Optional<τ_1_0>, @error Error)`
  return %ret
}

