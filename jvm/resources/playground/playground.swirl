swirl_stage raw

func [entry] @`SWAN_FAKE_MAIN_playground.swift.sil` : $`Int32` {
bb0:
  g_0 = new $`Array<String>`
  singleton_write g_0 to `playground.strings : [Swift.String]` in Globals_playground.swift.sil
  arg0 = new $`Int32`
  arg1 = new $`UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>`
  main_function_ref = function_ref @`main_playground.swift.sil`, $`Any`
  ret = apply main_function_ref(arg0, arg1), $`Int32`
  return ret
}

func @`main_playground.swift.sil` : $`Int32` {
bb0(%0 : $`Int32`, %1 : $`UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>`):
  %3 = singleton_read `playground.strings : [Swift.String]` from Globals_playground.swift.sil, $`*Array<String>`
  %4 = new $`@thin Array<String>.Type`
  %5 = function_ref @`Swift.Array.init() -> [A]`, $`@convention(method) <τ_0_0> (@thin Array<τ_0_0>.Type) -> @owned Array<τ_0_0>`
  %6 = apply %5(%4), $`@owned Array<τ_0_0>`
  pointer_write %6 to %3
  %8 = function_ref @`playground.source() -> Swift.String`, $`@convention(thin) () -> @owned String`
  %9 = apply %8(), $`@owned String`
  %10 = new $`*String`
  pointer_write %9 to %10
  %13 = function_ref @`Swift.Array.append(__owned A) -> ()`, $`@convention(method) <τ_0_0> (@in τ_0_0, @inout Array<τ_0_0>) -> ()`
  %14 = apply %13(%10, %3), $`()`
  %17 = literal [int] 0, $`Builtin.Int64`
  %18 = new $`Int`
  field_write %17 to %18, _value
  %20 = pointer_read %3, $`Array<String>`
  %21 = new $`*String`
  %22 = function_ref @`Swift.Array.subscript.getter : (Swift.Int) -> A`, $`@convention(method) <τ_0_0> (Int, @guaranteed Array<τ_0_0>) -> @out τ_0_0`
  %23 = apply %22(%21, %18, %20), $`@out τ_0_0`
  %24 = pointer_read %21, $`String`
  %27 = function_ref @`playground.sink(sunk: Swift.String) -> ()`, $`@convention(thin) (@guaranteed String) -> ()`
  %28 = apply %27(%24), $`()`
  %31 = literal [int] 0, $`Builtin.Int32`
  %32 = new $`Int32`
  field_write %31 to %32, _value
  return %32
}

func @`playground.source() -> Swift.String` : $`@owned String` {
bb0:
  %0 = literal [string] "I'm bad", $`$Builtin.RawPointer`
  %1 = literal [int] 7, $`Builtin.Word`
  %2 = literal [int] -1, $`Builtin.Int1`
  %3 = new $`@thin String.Type`
  %4 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %5 = apply %4(%0, %1, %2, %3), $`@owned String`
  return %5
}

func [stub] @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String` : $`@owned String` {
bb0(%0 : $`Builtin.RawPointer`, %1 : $`Builtin.Word`, %2 : $`Builtin.Int1`, %3 : $`@thin String.Type`):
  %ret = new $`@owned String`
  return %ret
}

func @`playground.sink(sunk: Swift.String) -> ()` : $`()` {
bb0(sunk : $`@guaranteed $String`):
  %2 = literal [int] 1, $`Builtin.Word`
  %3 = function_ref @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)`, $`@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)`
  %4 = apply %3(%2), $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  %5 = field_read %4, 0, $`Array<Any>`
  %6 = field_read %4, 1, $`Builtin.RawPointer`
  %8 = assign sunk, $`String`
  pointer_write %8 to %6
  %11 = function_ref @`default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) () -> @owned String`
  %12 = apply %11(), $`@owned String`
  %13 = function_ref @`default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) () -> @owned String`
  %14 = apply %13(), $`@owned String`
  %15 = function_ref @`Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()`, $`@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()`
  %16 = apply %15(%5, %12, %14), $`()`
  %20 = new $`()`
  return %20
}

func [stub] @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)` : $`(@owned Array<τ_0_0>, Builtin.RawPointer)` {
bb0(%0 : $`Builtin.Word`):
  %ret = new $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  return %ret
}

func @`default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`@owned String` {
bb0:
  %0 = literal [string] " ", $`$Builtin.RawPointer`
  %1 = literal [int] 1, $`Builtin.Word`
  %2 = literal [int] -1, $`Builtin.Int1`
  %3 = new $`@thin String.Type`
  %4 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %5 = apply %4(%0, %1, %2, %3), $`@owned String`
  return %5
}

func @`default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`@owned String` {
bb0:
  %0 = literal [string] "\n", $`$Builtin.RawPointer`
  %1 = literal [int] 1, $`Builtin.Word`
  %2 = literal [int] -1, $`Builtin.Int1`
  %3 = new $`@thin String.Type`
  %4 = function_ref @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String`, $`@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String`
  %5 = apply %4(%0, %1, %2, %3), $`@owned String`
  return %5
}

func [stub] @`Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`()` {
bb0(%0 : $`@guaranteed Array<Any>`, %1 : $`@guaranteed String`, %2 : $`@guaranteed String`):
  %ret = new $`()`
  return %ret
}

func [stub] @`Swift.Array.init() -> [A]` : $`@owned Array<τ_0_0>` {
bb0(%0 : $`@thin Array<τ_0_0>.Type`):
  %ret = new $`@owned Array<τ_0_0>`
  return %ret
}

func [stub] @`Swift.Array.append(__owned A) -> ()` : $`()` {
bb0(%0 : $`@in τ_0_0`, %1 : $`@inout Array<τ_0_0>`):
  %ret = new $`()`
  return %ret
}

func @`Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int` : $`Int` {
bb0(%0 : $`Builtin.IntLiteral`, %1 : $`@thin Int.Type`):
  %2i0 = builtin_ref @`s_to_s_checked_trunc_IntLiteral_Int64`, $`Any`
  %2 = apply %2i0(%0), $`(Builtin.Int64, Builtin.Int1)`
  %3 = field_read %2, 0, $`Builtin.Int64`
  %4 = field_read %2, 1, $`Builtin.Int1`
  %5 = new $`Int`
  field_write %3 to %5, _value
  return %5
}

func [stub] @`Swift.Array.subscript.getter : (Swift.Int) -> A` : $`@out τ_0_0` {
bb0(%0 : $`Int`, %1 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`@out τ_0_0`
  return %ret
}

