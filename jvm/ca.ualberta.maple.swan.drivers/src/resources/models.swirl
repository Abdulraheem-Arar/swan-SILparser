swirl_stage raw

/* ------------------------------------------------------------------
   Add models in this file.
   Use the [model] function attribute.
   Comment model functionality.

   Do not rely on stubs for the initial signature. They are based
   on the function type which doesn't always represent the real args.

   Return values are often not used so just use dummy values.

   Types don't have to be perfectly consistent. For example,
   attributes can be left out. This improves clarity, too.

   Remember to use [weak] where necessary.
   ------------------------------------------------------------------ */

// -------------------- Swift.Collection ----------------------------


// %0 -> ptr to populate with first element, %1 -> collection
// Get the first element of the collection
// Just read from it and populate %0
func [model] @`(extension in Swift):Swift.Collection.first.getter : A.Element?` : $`@out Optional<τ_0_0.Element>` {
bb0(%0 : $`*Optional<τ_0_0>`, %1: $`*Collection<τ_0_0>`):
  elem = new $`Optional<τ_0_0>`
  arr = pointer_read %1, $`Collection<τ_0_0>`
  val = pointer_read arr, $`τ_0_0`
  field_write val to elem, data // must write to data field because it is Optional
  pointer_write elem to %0
  return elem
}

// %0 -> ptr to populate with first element, %1 -> collection
// Get random element from collection
// Just read from it and populate %0
func [model] @`(extension in Swift):Swift.Collection.randomElement() -> A.Element?` : $`@out Optional<τ_0_0.Element>` {
bb0(%0 : $`*Optional<τ_0_0>`, %1: $`*Collection<τ_0_0>`):
  elem = new $`Optional<τ_0_0>`
  arr = pointer_read %1, $`Collection<τ_0_0>`
  val = pointer_read arr, $`τ_0_0`
  field_write val to elem, data // must write to data field because it is Optional
  pointer_write elem to %0
  return elem
}

// %0 -> collection to add, %1 -> index, %2 -> collection to add to
// Take data from %0 and write it to %2
func [model] @`(extension in Swift):Swift.RangeReplaceableCollection.insert<A where A1: Swift.Collection, A.Element == A1.Element>(contentsOf: __owned A1, at: A.Index) -> ()` : $`()` {
bb0(%0 : $`*Collection<τ_0_0>`, %1 : $`*Int`, %2 : $`*Collection<τ_0_0>`):
  from_collection = pointer_read %0, $`Collection<τ_0_0>`
  from_val = pointer_read from_collection, $`τ_0_0`
  to_collection = pointer_read %2, $`Collection<τ_0_0>`
  pointer_write [weak] from_val to to_collection
  %ret = new $`()`
  return %ret
}

// %0 -> range, %1 -> collection to add, %2 -> collection to add to
// Replace  collection subrange with another collection
func [model] @`(extension in Swift):Swift.RangeReplaceableCollection.replaceSubrange<A, B where A1: Swift.Collection, B1: Swift.RangeExpression, A.Element == A1.Element, A.Index == B1.Bound>(_: B1, with: __owned A1) -> ()` : $`()` {
bb0(%0 : $`*ClosedRange<Int>`, %1 : $`*Collection<τ_0_0>`, %2 : $`*Collection<τ_0_0>`):
  from_collection = pointer_read %1, $`Collection<τ_0_0>`
  from_val = pointer_read from_collection, $`τ_0_0`
  to_collection = pointer_read %2, $`Collection<τ_0_0>`
  pointer_write [weak] from_val to to_collection
  %ret = new $`()`
  return %ret
}

// -------------------- Swift.Array ---------------------------------

// %0 -> value to write, %1 -> index, %2 -> array
// Write array to pointer %0. Index not used.
// Also likely returns the element, but the return value
// isn't used in practice.
func [model] @`Swift.Array.subscript.getter : (Swift.Int) -> A` : $`@out τ_0_0` {
bb0(%0 : $`*τ_0_0`, %1 : $`Int`, %2 : $`Array<τ_0_0>`):
  val = pointer_read %2, $`τ_0_0`
  pointer_write val to %0
  return val
}

// Get slice of array, so just return the array argument.
func [model] @`Swift.Array.subscript.getter : (Swift.Range<Swift.Int>) -> Swift.ArraySlice<A>` : $`@owned ArraySlice<τ_0_0>` {
bb0(%0 : $`Range<Int>`, %1 : $`@guaranteed Array<τ_0_0>`):
  return %1
}

// %0 -> index, %1 -> array pointer to read
// Get address of element in array, so just get the array.
// Array<τ_0_0> == τ_0_0
func [model] @`Swift.Array.subscript.modify : (Swift.Int) -> A` : $`@yields @inout τ_0_0` {
bb0(%0 : $`Int`, %1 : $`*Array<τ_0_0>`):
  ret = pointer_read %1, $`Array<τ_0_0>`
  return ret
}

// %0 -> type to instantiate
// This loads the given type and creates a value based off it.
// Therefore, it is dynamic behaviour. Simply return a new value.
func [model] @`Swift.Array.init() -> [A]` : $`@owned Array<τ_0_0>` {
bb0(%0 : $`@thin Array<τ_0_0>.Type`):
  ret = new $`@owned Array<τ_0_0>`
  return ret
}

// %0 -> value to append (pointer), %1 -> array pointer
func [model] @`Swift.Array.append(__owned A) -> ()` : $`()` {
bb0(%0 : $`*τ_0_0`, %1 : $`*Array<τ_0_0>`):
  val = pointer_read %0, $`τ_0_0`
  arr = pointer_read %1, $`Array<τ_0_0>`
  pointer_write [weak] val to arr
  ret = new $`()`
  return ret
}

// %0 -> value to add to array, %1 -> count, %2 -> array type
// Create array and write value to array 'count' times.
// Simply write the value to the array, ignore the count and type.
func [model] @`Swift.Array.init(repeating: A, count: Swift.Int) -> [A]` : $`@owned Array<τ_0_0>` {
bb0(%0 : $`*τ_0_0`, %1 : $`Int`, %2 : $`@thin Array<τ_0_0>.Type`):
  arr = new $`@owned Array<τ_0_0>`
  val = pointer_read %0, $`τ_0_0`
  pointer_write [weak] val to arr
  return arr
}

// %0 -> ptr to populate with first element, %1 -> array
// Get the last element of the array
// Just read from it and populate %0 (same as .first)
func [model] @`(extension in Swift):Swift.BidirectionalCollection.last.getter : A.Element?` : $`@out Optional<τ_0_0.Element>` {
bb0(%0 : $`*Optional<τ_0_0>`, %1: $`*Array<τ_0_0>`):
  elem = new $`Optional<τ_0_0>`
  arr = pointer_read %1, $`Array<τ_0_0>`
  val = pointer_read arr, $`τ_0_0`
  field_write val to elem, data // must write to data field because it is Optional
  pointer_write elem to %0
  return elem
}

// These functions are problematic because endMutation overwrites
// the array with another one using unhandled structures. See SWAN-31.
// (finalizeUninitializedArray calls endMutation)
func [model] @`Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A]` : $`@owned Array<Element>` {
bb0(%0 : $`Array<Element>`):
  return %0
}
func [model] @`Swift.Array._endMutation() -> ()` : $`()` {
bb0(%0 : $`*Array<Element>`):
  %10 = new $`()`
  return %10
}

// %0 -> ptr of element to add, %1 -> index, %2 -> array
// Insert element into an array
func [model] @`Swift.Array.insert(_: __owned A, at: Swift.Int) -> ()` : $`()` {
bb0(%0 : $`*τ_0_0`, %1 : $`Int`, %2 : $`*Array<τ_0_0>`):
  val = pointer_read %0, $`τ_0_0`
  arr = pointer_read %2, $`Array<τ_0_0>`
  pointer_write [weak] val to arr
  %ret = new $`()`
  return %ret
}

// %0 -> array to append, %1 -> array to append to
// Write data from %0 to %1
func [model] @`Swift.Array.append<A where A == A1.Element, A1: Swift.Sequence>(contentsOf: __owned A1) -> ()` : $`()` {
bb0(%0 : $`*Array<τ_0_0>`, %1 : $`*Array<τ_0_0>`):
  from_array = pointer_read %0, $`Array<τ_0_0>`
  from_val = pointer_read from_array, $`τ_0_0`
  to_array = pointer_read %1, $`Array<τ_0_0>`
  pointer_write [weak] from_val to to_array
  %ret = new $`()`
  return %ret
}

// %0 -> first array, %1 -> second array, %2 -> array type
// Create new array and write data from %0 and %1 to it
func [model] @`static Swift.Array.+ infix([A], [A]) -> [A]` : $`@owned Array<τ_0_0>` {
bb0(%0 : $`Array<τ_0_0>`, %1 : $`Array<τ_0_0>`, %2 : $`@thin Array<τ_0_0>.Type`):
  new_arr = new $`@owned Array<τ_0_0>`
  first_val = pointer_read %0, $`τ_0_0`
  second_val = pointer_read %1, $`τ_0_0`
  pointer_write [weak] first_val to new_arr
  pointer_write [weak] second_val to new_arr
  return new_arr
}

// %0 -> array to add to, %1 -> array to add, %2 -> array type
// Write data from %1 to %0
func [model] @`static Swift.Array.+= infix(inout [A], [A]) -> ()` : $`()` {
bb0(%0 : $`*Array<τ_0_0>`, %1 : $`Array<τ_0_0>`, %2 : $`@thin Array<τ_0_0>.Type`):
  to_arr = pointer_read %0, $`Array<τ_0_0>`
  val = pointer_read %1, $`τ_0_0`
  pointer_write [weak] val to to_arr
  %ret = new $`()`
  return %ret
}

// -------------------- Swift.ArraySlice ----------------------------

// %0 -> value to write, %1 -> index, %2 -> array
// Write array to pointer %0. Index not used.
// Also likely returns the element, but the return value
// isn't used in practice.
func [model] @`Swift.ArraySlice.subscript.getter : (Swift.Int) -> A` : $`τ_0_0` {
bb0(%0 : $`*τ_0_0`, %1 : $`Int`, %2: $`ArraySlice<τ_0_0>`):
  val = pointer_read %2, $`τ_0_0`
  pointer_write val to %0
  return val
}

// -------------------- Swift.Dictionary ----------------------------

// %0 -> initial values for dictionary, %2 -> dictionary type
// Write second value of given array element to dictionary
func [model] @`Swift.Dictionary.init(dictionaryLiteral: (A, B)...) -> [A : B]` : $`Dictionary<τ_0_0, τ_0_1>` {
bb0(%0 : $`Array<(τ_0_0, τ_0_1)>`, %1 : $`@thin Dictionary<τ_0_0, τ_0_1>.Type`):
  val = field_read %0, 1, $`τ_0_1`
  dict = new $`Dictionary<τ_0_0, τ_0_1>`
  pointer_write [weak] val to dict
  return dict
}

// %0 -> value to write to, %1 -> key, %2 -> dictionary
// Write data from dictionary to %0 and return it
func [model] @`Swift.Dictionary.subscript.getter : (A) -> B?` : $`Optional<τ_0_1>` {
bb0(%0 : $`*Optional<τ_0_1>`, %1 : $`*τ_0_0`, %2 : $`Dictionary<τ_0_0, τ_0_1>`):
  elem = new $`Optional<τ_0_1>`
  val = pointer_read %2, $`τ_0_1`
  field_write val to elem, data // must write to data field because it is Optional
  pointer_write elem to %0
  return elem
}

// %0 -> value to write to, %1 ->key, %2 -> default value, %3 -> dictionary
// Write dictionary data and default value to %0
func [model] @`Swift.Dictionary.subscript.getter : (_: A, default: @autoclosure () -> B) -> B` : $`τ_0_1` {
bb0(%0 : $`*τ_0_1`, %1 : $`*τ_0_0`, %2 : $`τ_0_1`, %3 : $`Dictionary<τ_0_0, τ_0_1>`):
  val = field_read %3, 1, $`τ_0_1`
  pointer_write [weak] val to %0
  pointer_write [weak] %2 to %0
  ret = pointer_read %0, $`τ_0_1`
  return ret
}


// -------------------- Swift.String --------------------------------

// %0 -> string to initialize, the rest is irrelevant
// Simply return the first argument because that is the string value.
func [model] @`Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String` : $`@owned String` {
bb0(%0 : $`Builtin.RawPointer`, %1 : $`Builtin.Word`, %2 : $`Builtin.Int1`, %3 : $`@thin String.Type`):
  return %0
}

// -------------------- SIL -----------------------------------------
// Usually low-level functions.

func [model] @`Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer)` : $`(@owned Array<τ_0_0>, Builtin.RawPointer)` {
bb0(%0 : $`Builtin.Word`):
  second = new $`Builtin.RawPointer`
  first = assign second, $`Builtin.RawPointer`
  %ret = new $`(@owned Array<τ_0_0>, Builtin.RawPointer)`
  field_write first to %ret, 0
  field_write second to %ret, 1
  return %ret
}

// -------------------- Operators -----------------------------------

func [model] @`static Swift.String.+ infix(Swift.String, Swift.String) -> Swift.String` : $`@owned String` {
bb0(%0 : $`@guaranteed String`, %1 : $`@guaranteed String`, %2 : $`@thin String.Type`):
  %ret = binary_op %0 [reg] %1, $`@owned String`
  return %ret
}

// -------------------- Model Stubs ---------------------------------
// Intentional stubs for functions that we don't care about.
// No comments needed.

func [model] @`Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`()` {
bb0(%0 : $`@guaranteed Array<Any>`, %1 : $`@guaranteed String`, %2 : $`@guaranteed String`):
  %ret = new $`()`
  return %ret
}

func [model] @`default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`@owned String` {
bb0:
  %ret = new $`@owned String`
  return %ret
}

func [model] @`default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()` : $`@owned String` {
bb0:
  %ret = new $`@owned String`
  return %ret
}

func [model] @`Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never` : $`Never` {
bb0(%0 : $`StaticString`, %1 : $`StaticString`, %2 : $`StaticString`, %3 : $`UInt`, %4 : $`UInt32`):
  %ret = new $`Never`
  return %ret
}

func [model] @`Swift.Array.endIndex.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`Int`
  return %ret
}

func [model] @`Swift.Array.firstIndex.getter : Swift.Int` : $`Int` {
bb0(%0 : $`@guaranteed Array<τ_0_0>`):
  %ret = new $`Int`
  return %ret
}