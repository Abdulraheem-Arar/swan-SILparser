%3 = alloc_stack $Hasher ~ %3 = new $`*Hasher`

%14 = alloc_ref [stack] $_ContiguousArrayStorage<Card> ~ %14 = new $`_ContiguousArrayStorage<Card>`
%14 = alloc_ref [stack] [tail_elems $Card * %11 : $Builtin.Word] $_ContiguousArrayStorage<Card> ~ %14 = new $`_ContiguousArrayStorage<Card>`
%14 = alloc_ref [tail_elems $Val * %0 : $Builtin.Word] [tail_elems $Aleph * %1 : $Builtin.Word] $Class1 ~ %14 = new $`Class1`

%5 = alloc_ref_dynamic [objc] %4 : $@objc_metatype Gizmo.Type, $Gizmo ~ %5 = new $`Gizmo`
%2 = alloc_ref_dynamic %1 : $@thick A.Type, $A ~ %2 = new $`A`

%182 = alloc_box ${ var @sil_weak Optional<CardCell> } ~ %182 = new $`*{ var @sil_weak Optional<CardCell> }`

%0 = alloc_value_buffer $Int in %b : $*Builtin.UnsafeValueBuffer ~ %0 = new $`*Int`

alloc_global @$s6Memory10imageCache33_09824A4F0B3ADFC1D63FE8FD1BE2AC3BLLSo7NSCacheCySo8NSStringCSo7UIImageCGvp ~ NOP

dealloc_stack %33 : $*URL ~ NOP

dealloc_box %b : $<τ_0_0> { var τ_0_0 } <Int> ~ NOP

%53 = project_box %52 : ${ var @sil_weak Optional<UIViewController> }, 0 ~ symbol_copy %52 to %53

dealloc_ref [stack] %81 : $_ContiguousArrayStorage<Card> ~ NOP

debug_value %3 : $UInt, let, name "rawValue", argno 1 ~ NOP

debug_value_addr %57 : $*Content, let, name "content", argno 1 ~ NOP

%8 = load %7 : $*Builtin.Int64 ~ %8 = pointer_read %7, $`Builtin.Int64`

store %31 to %58 : $*Array<Card> ~ pointer_write %31 to %58

%2 = load_borrow %0 : $*Builtin.NativeObject ~ %2 = pointer_read %0, $`Builtin.NativeObject`

end_borrow %1 : $Builtin.NativeObject ~ NOP

copy_addr [take] %105 to [initialization] %107 : $*UUID ~ %105i0 = pointer_read %105, $`UUID` ::: pointer_write %105i0 to %107

destroy_addr %28 : $*DispatchWorkItemFlags ~ NOP

%28 = index_addr %19 : $*JSONSerialization.ReadingOptions, %27 : $Builtin.Word ~ %28 = array_read %19, $`*JSONSerialization.ReadingOptions`

%138 = begin_access [modify] [dynamic] %137 : $*Optional<Card> ~ symbol_copy %137 to %138

end_access %54 : $*Array<Card> ~ NOP

strong_retain %0 : $Builtin.BridgeObject ~ NOP

strong_release %21 : $@convention(block) () -> () ~ NOP

%14 = load_weak %13 : $*@sil_weak Optional<UILabel> ~ %14 = pointer_read %13, $`@sil_weak Optional<UILabel>`

store_weak %54 to [initialization] %53 : $*@sil_weak Optional<UIViewController> ~ pointer_write %54 to %53

%t = load_unowned %u1 : $*@sil_unowned CP ~ %t = pointer_read %u1, $`@sil_unowned CP`

store_unowned %1 to [initialization] %0 : $*@sil_unowned C ~ pointer_write %1 to %0
store_unowned %1 to %0 : $*@sil_unowned C ~ pointer_write %1 to %0

%40 = mark_dependence %39 : $@noescape @callee_guaranteed (UnsafeMutablePointer<Self.Element>, Int) -> () on %2 : $*C ~ symbol_copy %39 to %40

%63 = copy_block %62 : $@convention(block) () -> () ~ %63 = assign %62, $`@convention(block) () -> ()`

%32 = function_ref @$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF : $@convention(method) (@guaranteed String) -> @owned NSString ~ %32 = function_ref @`(extension in Foundation):Swift.String._bridgeToObjectiveC() -> __C.NSString`, $`@convention(method) (@guaranteed String) -> @owned NSString`

%0 = dynamic_function_ref @test_dynamically_replaceable : $@convention(thin) () -> () ~ %0 = function_ref @`test_dynamically_replaceable`, $`@convention(thin) () -> ()`
%5 = dynamic_function_ref @closureCapturingByStorageAddress2 : $@convention(thin) (@inout_aliasable Builtin.Int64) -> () ~ %5 = function_ref @`closureCapturingByStorageAddress2`, $`@convention(thin) (@inout_aliasable Builtin.Int64) -> ()`

%0 = prev_dynamic_function_ref @test_dynamic_replacement_for : $@convention(thin) () -> () ~ %0 = function_ref @`test_dynamic_replacement_for`, $`@convention(thin) () -> ()`

%91 = global_addr @globalinit_33_09824A4F0B3ADFC1D63FE8FD1BE2AC3B_token1 : $*Builtin.Word ~ %91 = singleton_read `globalinit_33_09824A4F0B3ADFC1D63FE8FD1BE2AC3B_token1` from Globals, $`*Builtin.Word`

%68 = integer_literal $Builtin.Int64, 0 ~ %68 = literal [int] 0, $`Builtin.Int64`

%2 = float_literal $Builtin.FPIEEE64, 0x400921FB54442D18 ~ %2 = literal [float] 3.141592653589793, $`Builtin.FPIEEE64`

%17 = string_literal utf8 "Fatal error" ~ %17 = literal [string] "Fatal error", $`$Builtin.RawPointer`

# Dynamic dispatch expected SWANIR is empty because these rely on v/witness table information.
# A separate test is needed for dynamic dispatch instruction testing.

%35 = objc_method %33 : $UIViewController, #UIViewController.present!1.foreign : (UIViewController) -> (UIViewController, Bool, (() -> ())?) -> (), $@convention(objc_method) (UIViewController, Bool, Optional<@convention(block) () -> ()>, UIViewController) -> () ~ %35 = builtin_ref @`#UIViewController.present!1.foreign`, $`@convention(objc_method) (UIViewController, Bool, Optional<@convention(block) () -> ()>, UIViewController) -> ()`

%45 = objc_super_method %1 : $CardCell, #UICollectionViewCell.init!initializer.1.foreign : (UICollectionViewCell.Type) -> (NSCoder) -> UICollectionViewCell?, $@convention(objc_method) (NSCoder, @owned UICollectionViewCell) -> @owned Optional<UICollectionViewCell> ~ %45 = builtin_ref @`#UICollectionViewCell.init!initializer.1.foreign`, $`@convention(objc_method) (NSCoder, @owned UICollectionViewCell) -> @owned Optional<UICollectionViewCell>`

%52 = witness_method $DispatchWorkItemFlags, #SetAlgebra.init!allocator.1 : <Self where Self : SetAlgebra><S where S : Sequence, Self.Element == S.Element> (Self.Type) -> (__owned S) -> Self : $@convention(witness_method: SetAlgebra) <τ_0_0 where τ_0_0 : SetAlgebra><τ_1_0 where τ_1_0 : Sequence, τ_0_0.Element == τ_1_0.Element> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 ~ NOP
witness_method $Self, #Comparable."<="!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool ~ NOP

%149 = apply %148<[Int], PartialRangeFrom<Int>>(%143, %146, %144) : $@convention(method) <τ_0_0 where τ_0_0 : MutableCollection><τ_1_0 where τ_1_0 : RangeExpression, τ_0_0.Index == τ_1_0.Bound> (@in_guaranteed τ_1_0, @in_guaranteed τ_0_0) -> @out τ_0_0.SubSequence ~ %149 = apply %148(%143, %146, %144), $`@out τ_0_0.SubSequence`
%59 = apply %58(%34, %35, %41, %33, %25) : $@convention(method) (@guaranteed Optional<DispatchGroup>, @in_guaranteed DispatchQoS, @in_guaranteed DispatchWorkItemFlags, @guaranteed @convention(block) () -> (), @guaranteed DispatchQueue) -> () ~ %59 = apply %58(%34, %35, %41, %33, %25), $`()`

(%38, %39) = begin_apply %16<C>(%34, %36) : $@yield_once @convention(witness_method: Collection) <τ_0_0 where τ_0_0 : Collection> (@in_guaranteed τ_0_0.Index, @in_guaranteed τ_0_0) -> @yields @in_guaranteed τ_0_0.Element ~ %38 = apply %16(%34, %36), $`@yields @in_guaranteed τ_0_0.Element`

abort_apply %6 ~ NOP

end_apply %22 ~ NOP

%57 = partial_apply [callee_guaranteed] %56(%52, %27, %3, %4) : $@convention(thin) (@guaranteed { var @sil_weak Optional<UIViewController> }, @guaranteed UIAlertController, Bool, @guaranteed Optional<@callee_guaranteed () -> ()>) -> () ~
%5 = partial_apply [callee_guaranteed] [on_stack] %4<Element, R>(%1) : $@convention(thin) <τ_0_0><τ_1_0> (UnsafeBufferPointer<τ_0_0>, @noescape @callee_guaranteed (UnsafeBufferPointer<τ_0_0>) -> (@out τ_1_0, @error Error)) -> (@out τ_1_0, @error Error) ~

%24 = builtin "assumeNonNegative_Int64"(%23 : $Builtin.Int64) : $Builtin.Int64 ~ %24i0 = builtin_ref @`assumeNonNegative_Int64`, $`Any` ::: %24 = apply %24i0(%23), $`Builtin.Int64`

%106 = metatype $@thick AnyObject.Protocol ~ %106 = new $`@thick AnyObject.Protocol`
%10 = metatype $@objc_metatype Bundle.Type ~ %10 = new $`@objc_metatype Bundle.Type`

%2 = value_metatype $@thick Optional<Any.Type>.Type, %1 : $*Optional<@thick Any.Type> ~ %2 = new $`@thick Optional<Any.Type>.Type`

%2 = existential_metatype $@thick SwiftKlassP.Type, %0 : $SwiftKlassP ~ %2 = new $`@thick SwiftKlassP.Type`

%0 = objc_protocol #NSBurrito : $Protocol ~ %0 = new $`Protocol`

retain_value %0 : $Optional<@callee_guaranteed (@guaranteed Optional<UIImage>) -> ()> ~ NOP
retain_value %0 : $Array<Card> ~ NOP

release_value %103 : $Optional<GameWireFrameProtocol> ~ NOP

autorelease_value %4 : $Optional<Hive> ~ NOP

%12 = tuple (%4 : $Array<Element>, %10 : $UnsafeMutablePointer<Element>) ~ %12 = new $`(Array<Element>, UnsafeMutablePointer<Element>)` ::: field_write %4 to %12, 0 ::: field_write %10 to %12, 1
%46 = tuple () ~ %46 = new $`()`
%9 = tuple $(Builtin.Word, Builtin.Word) (%0, %1) ~ %9 = new $`(Builtin.Word, Builtin.Word)` ::: field_write %0 to %9, 0 ::: field_write %1 to %9, 1

%35 = tuple_extract %34 : $(Builtin.Int64, Builtin.Int1), 0 ~ %35 = field_read %34, 0, $`Builtin.Int64`
%35 = tuple_extract %34 : $(Builtin.Int64, Builtin.Int1), 1 ~ %35 = field_read %34, 1, $`Builtin.Int1`

%20 = tuple_element_addr %19 : $*(lower: Bound, upper: Bound), 0 ~ %20 = new $`*lower: Bound` ::: %20i0 = field_read [alias %20] %19, 0, $`lower: Bound` ::: pointer_write %20i0 to %20

(%2, %3) = destructure_tuple %0 : $(Builtin.NativeObject, Builtin.Int32) ~ %2 = field_read %0, 0, $`Builtin.NativeObject` ::: %3 = field_read %0, 1, $`Builtin.Int32`

%36 = struct $Array<DispatchWorkItemFlags> (%35 : $_ArrayBuffer<DispatchWorkItemFlags>) ~ NOP
%47 = struct $_BridgeStorage<__ContiguousArrayStorageBase> (%46 : $Builtin.BridgeObject) ~ NOP
%3 = struct $Double (%2 : $Builtin.FPIEEE64) ~ %3 = new $`Double` ::: field_write %2 to %3, _value

%55 = struct_extract %47 : $_ContiguousArrayBuffer<Card>, #_ContiguousArrayBuffer._storage ~ %55 = field_read %47, _storage, $`Any`

%5 = struct_element_addr %1 : $*UIView.AnimationOptions, #UIView.AnimationOptions.rawValue ~ %5 = new $`*Any` ::: %5i0 = field_read [alias %5] %1, rawValue, $`Any` ::: pointer_write %5i0 to %5

%initval = object $GlobalObject (%0 : $Builtin.Int64, [tail_elems] %1 : $Builtin.Int64, %1 : $Builtin.Int64) ~ %initval = new $`GlobalObject`

%19 = ref_element_addr %18 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity ~ %19 = new $`*Any` ::: %19i0 = field_read [alias %19] %18, countAndCapacity, $`Any` ::: pointer_write %19i0 to %19

%15 = enum $Optional<GameInteractorInputProtocol>, #Optional.none!enumelt ~ %15 = new $`Optional<GameInteractorInputProtocol>` ::: %15i0 = literal [string] "#Optional.none!enumelt", $`Builtin.RawPointer` ::: field_write %15i0 to %15, type
%41 = enum $Optional<String>, #Optional.some!enumelt, %40 : $String ~ %41 = new $`Optional<String>` ::: %41i0 = literal [string] "#Optional.some!enumelt", $`Builtin.RawPointer` ::: field_write %41i0 to %41, type ::: field_write %40 to %41, data

%34 = unchecked_enum_data %18 : $Optional<FloatingPointSign>, #Optional.some!enumelt.1 ~ %34 = field_read %18, data, $`Any`

%15 = init_enum_data_addr %0 : $*Optional<Self.Element>, #Optional.some!enumelt.1 ~ %15 = new $`*Any` ::: %15i1 = field_read [alias %15] %0, data, $`Any` ::: pointer_write %15i1 to %15

inject_enum_addr %0 : $*Optional<Self>, #Optional.some!enumelt.1 ~ %0i0 = literal [string] "#Optional.some!enumelt.1", $`Builtin.RawPointer` ::: field_write %0i0 to %0, type

%112 = unchecked_take_enum_data_addr %84 : $*Optional<S.Element>, #Optional.some!enumelt.1 ~ %112 = new $`*Any` ::: %112i0 = field_read [alias %112] %84, data, $`Any` ::: pointer_write %112i0 to %112

%757 = select_enum %754 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %755, case #FloatingPointSign.minus!enumelt: %756 : $Builtin.Int64 ~ %757 = switch_enum_assign %754, case "#FloatingPointSign.plus!enumelt" : %755, case "#FloatingPointSign.minus!enumelt" : %756, $`Builtin.Int64`

%b = select_enum_addr %7 : $*Optional<SomeClass>, case #Optional.some!enumelt: %t, case #Optional.none!enumelt: %f : $Builtin.Int1 ~ %7i0 = pointer_read %7, $`Optional<SomeClass>` ::: %b = switch_enum_assign %7i0, case "#Optional.some!enumelt" : %t, case "#Optional.none!enumelt" : %f, $`Builtin.Int1`
%4 = select_enum_addr %1 : $*Direction, case #Direction.north!enumelt: %2, default %3 : $Builtin.Int32 ~ %1i0 = pointer_read %1, $`Direction` ::: %4 = switch_enum_assign %1i0, case "#Direction.north!enumelt" : %2, default %3, $`Builtin.Int32`

%141 = init_existential_addr %140 : $*Content, $Logo ~ symbol_copy %140 to %141

deinit_existential_addr %exist_container : $*Existential ~ NOP

%43 = open_existential_addr immutable_access %41 : $*Content to $*@opened("3B29F16E-A446-11EA-A04F-38F9D356CDAF") Content ~ symbol_copy %41 to %43

%15 = init_existential_ref %14 : $__ContiguousArrayStorageBase : $__ContiguousArrayStorageBase, $AnyObject ~ symbol_copy %14 to %15

%56 = open_existential_ref %55 : $GamePresenterProtocol to $@opened("3AE48EC6-A446-11EA-A04F-38F9D356CDAF") GamePresenterProtocol ~ symbol_copy %55 to %56

%2 = init_existential_metatype %1 : $@thick Element.Type, $@thick Any.Type ~ symbol_copy %1 to %2

%1 = open_existential_metatype %0 : $@thick AnyObject.Type to $@thick AnyObject.Type ~ symbol_copy %0 to %1

%89 = alloc_existential_box $Error, $FileError ~ %89 = new $`*Error`

%90 = project_existential_box $FileError in %89 : $Error ~ symbol_copy %89 to %90

%13 = open_existential_box %0 : $Error to $*@opened("3AF9DBA0-A446-11EA-A04F-38F9D356CDAF") Error ~ symbol_copy %0 to %13

dealloc_existential_box %1 : $Error, $SomeError ~ NOP

%59 = project_block_storage %58 : $*@block_storage @callee_guaranteed () -> () ~ symbol_copy %58 to %59

%62 = init_block_storage_header %58 : $*@block_storage @callee_guaranteed () -> (), invoke %61 : $@convention(c) (@inout_aliasable @block_storage @callee_guaranteed () -> ()) -> (), type $@convention(block) () -> () ~

%69 = upcast %3 : $MD5 to $Hash ~ symbol_copy %3 to %69

%3 = address_to_pointer %2 : $*_SwiftEmptyArrayStorage to $Builtin.RawPointer ~ symbol_copy %2 to %3

%170 = pointer_to_address %167 : $Builtin.RawPointer to [strict] $*S.Element ~ symbol_copy %167 to %170

%89 = unchecked_ref_cast %81 : $_ContiguousArrayStorage<Card> to $Builtin.BridgeObject ~ symbol_copy %81 to %89

%144 = unchecked_addr_cast %103 : $*Builtin.BridgeObject to $*Builtin.NativeObject ~ symbol_copy %103 to %144

%1 = unchecked_trivial_bit_cast %0 : $@thick UIViewController.Type to $@thick @dynamic_self UIViewController.Type ~ symbol_copy %0 to %1

%5 = ref_to_unowned %4 : $SomeClass to $@sil_unowned SomeClass ~ symbol_copy %4 to %5

%10 = ref_to_unmanaged %8 : $Optional<NSError> to $@sil_unmanaged Optional<NSError> ~ symbol_copy %8 to %10

%17 = unmanaged_to_ref %16 : $@sil_unmanaged Optional<NSError> to $Optional<NSError> ~ symbol_copy %16 to %17

%c = convert_function %m : $@noescape @callee_guaranteed (@guaranteed BigStruct) -> () to $@noescape @callee_guaranteed (@guaranteed BigStruct) -> (@error Error) ~ symbol_copy %m to %c

%24 = convert_escape_to_noescape %23 : $@callee_guaranteed (UnsafeMutablePointer<Content>, Int) -> () to $@noescape @callee_guaranteed (UnsafeMutablePointer<Content>, Int) -> () ~ symbol_copy %23 to %24

%1 = thin_to_thick_function %0 : $@convention(thin) (UnsafeMutablePointer<Content>, Int) -> () to $@callee_guaranteed (UnsafeMutablePointer<Content>, Int) -> () ~ symbol_copy %0 to %1

%3 = thick_to_objc_metatype %2 : $@thick NSData.Type to $@objc_metatype NSData.Type ~ symbol_copy %2 to %3

%1 = objc_to_thick_metatype %0 : $@objc_metatype C.Type to $@thick C.Type ~ symbol_copy %0 to %1

%x = objc_metatype_to_object %a : $@objc_metatype SomeClass.Type to $AnyObject ~ symbol_copy %a to %x

%y = objc_existential_metatype_to_object %b : $@objc_metatype SomeClassProtocol.Type to $AnyObject ~ symbol_copy %b to %y

%8 = unconditional_checked_cast %7 : $UIViewController to $T ~ symbol_copy %7 to %8

unconditional_checked_cast_addr Card in %101 : $*Card to Any in %91 : $*Any ~ NOP

cond_fail %14 : $Builtin.Int1 ~ cond_fail %14
cond_fail %15 : $Builtin.Int1, "failure message" ~ cond_fail %15

unreachable ~ unreachable

return %23 : $JSONSerialization.ReadingOptions ~ return %23

throw %22 : $Error ~ throw %22

yield %2 : $*Element, resume bb2, unwind bb1 ~ yield (%2), resume bb2, unwind bb1
yield (%0 : $Int, %1 : $Float), resume bb1, unwind bb3 ~ yield (%0, %1), resume bb1, unwind bb3

unwind ~ unwind

br bb4(%92 : $Builtin.Int64, %93 : $Builtin.Int64) ~ br bb4(%92, %93)

cond_br %101, bb10, bb14 ~ cond_br %101, true bb10, false bb14
cond_br %1, bb1(%0 : $Int), bb2(%0 : $Int) ~ cond_br %1, true bb1(%0), false bb2(%0)

switch_value %1 : $Builtin.Word, case %1: bb1, case %2: bb2 ~ switch %1, case %1 : bb1, case %2 : bb2
switch_value %3 : $Builtin.Int32, case %1: bb1, case %2: bb2, default bb3 ~ switch %3, case %1 : bb1, case %2 : bb2, default bb3

switch_enum %91 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb23, case #Optional.none!enumelt: bb22 ~ switch_enum %91, case #Optional.some!enumelt.1 : bb23, case #Optional.none!enumelt : bb22
switch_enum %1 : $Either, case #Either.left!enumelt: bb1, default bb2 ~ switch_enum %1, case #Either.left!enumelt : bb1, default bb2

switch_enum_addr %52 : $*Optional<S.Element>, case #Optional.some!enumelt.1: bb8, case #Optional.none!enumelt: bb7 ~ %52i0 = pointer_read %52, $`Optional<S.Element>` ::: switch_enum %52i0, case #Optional.some!enumelt.1 : bb8, case #Optional.none!enumelt : bb7

dynamic_method_br %0 : $ProtocolA, #ProtocolA.funcA!foreign, bb1, bb2 ~ %0i1 = unary_op [arb] %0, $`Builtin.Int1` ::: cond_br %0i1, true bb1, false bb2
dynamic_method_br %2 : $@opened("01234567-89ab-cdef-0123-000000000000") AnyObject, #X.f!foreign, bb1, bb2 ~ %2i0 = unary_op [arb] %2, $`Builtin.Int1` ::: cond_br %2i0, true bb1, false bb2

checked_cast_br %33 : $AnyObject to $NSDictionary, bb6, bb7 ~ %33i0 = unary_op [arb] %33, $`Builtin.Int1` ::: cond_br %33i0, true bb6(%33), false bb7(%33)

checked_cast_addr_br take_always Any in %97 : $*Any to NSDictionary in %99 : $*NSDictionary, bb6, bb7 ~ %97i0 = binary_op %97 [arb] %99, $`Builtin.Int1` ::: cond_br %97i0, true bb6, false bb7

try_apply %6<Element, R>(%3, %5, %2) : $@convention(method) <τ_0_0><τ_1_0> (@noescape @callee_guaranteed (UnsafeBufferPointer<τ_0_0>) -> (@out τ_1_0, @error Error), @guaranteed Array<τ_0_0>) -> (@out τ_1_0, @error Error), normal bb2, error bb1 ~ try_apply %6(%3, %5, %2), normal bb2, $`τ_1_0`, error bb1, $`Error`
