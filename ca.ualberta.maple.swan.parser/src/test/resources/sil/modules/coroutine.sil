sil_stage canonical

import Builtin
import Swift
import SwiftShims

sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = metatype $@thick HoverCar.Type
  %3 = function_ref @$s4main8HoverCarCACycfC : $@convention(method) (@thick HoverCar.Type) -> @owned HoverCar
  %4 = apply %3(%2) : $@convention(method) (@thick HoverCar.Type) -> @owned HoverCar
  %5 = alloc_stack $HoverCar
  store %4 to %5 : $*HoverCar
  %7 = function_ref @$s4main3CarPAAE11descriptionSSvg : $@convention(method) <τ_0_0 where τ_0_0 : Car> (@in_guaranteed τ_0_0) -> @owned String
  %8 = apply %7<HoverCar>(%5) : $@convention(method) <τ_0_0 where τ_0_0 : Car> (@in_guaranteed τ_0_0) -> @owned String
  dealloc_stack %5 : $*HoverCar
  strong_release %4 : $HoverCar
  release_value %8 : $String
  %12 = integer_literal $Builtin.Int32, 0
  %13 = struct $Int32 (%12 : $Builtin.Int32)
  return %13 : $Int32
}

sil hidden @$s4main3CarPAAE11descriptionSSvg : $@convention(method) <Self where Self : Car> (@in_guaranteed Self) -> @owned String {
bb0(%0 : $*Self):
  debug_value_addr %0 : $*Self, let, name "self", argno 1
  %2 = alloc_stack $String
  %3 = alloc_stack $Self
  copy_addr %0 to [initialization] %3 : $*Self
  %5 = witness_method $Self, #Car.intValue!getter.1 : <Self where Self : Car> (Self) -> () -> Int? : $@convention(witness_method: Car) <τ_0_0 where τ_0_0 : Car> (@in_guaranteed τ_0_0) -> Optional<Int>
  %6 = apply %5<Self>(%3) : $@convention(witness_method: Car) <τ_0_0 where τ_0_0 : Car> (@in_guaranteed τ_0_0) -> Optional<Int>
  destroy_addr %3 : $*Self
  switch_enum %6 : $Optional<Int>, case #Optional.some!enumelt.1: bb1, case #Optional.none!enumelt: bb6

bb1(%9 : $Int):
  %10 = alloc_stack $Int
  store %9 to %10 : $*Int
  %12 = function_ref @$sSzsE11descriptionSSvg : $@convention(method) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> @owned String
  %13 = apply %12<Int>(%10) : $@convention(method) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> @owned String
  dealloc_stack %10 : $*Int
  %15 = enum $Optional<String>, #Optional.some!enumelt.1, %13 : $String
  dealloc_stack %3 : $*Self
  br bb2(%15 : $Optional<String>)

bb2(%18 : $Optional<String>):
  %19 = alloc_stack $Optional<String>
  retain_value %18 : $Optional<String>
  store %18 to %19 : $*Optional<String>
  switch_enum_addr %19 : $*Optional<String>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb4

bb3:
  %23 = unchecked_take_enum_data_addr %19 : $*Optional<String>, #Optional.some!enumelt.1
  %24 = load %23 : $*String
  store %24 to %2 : $*String
  br bb5

bb4:
  %27 = string_literal utf8 ""
  %28 = integer_literal $Builtin.Word, 0
  %29 = integer_literal $Builtin.Int1, -1
  %30 = metatype $@thin String.Type
  %31 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String
  %32 = apply %31(%27, %28, %29, %30) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String
  store %32 to %2 : $*String
  %34 = tuple ()
  br bb5

bb5:
  dealloc_stack %19 : $*Optional<String>
  %37 = tuple ()
  release_value %18 : $Optional<String>
  %39 = load %2 : $*String
  dealloc_stack %2 : $*String
  return %39 : $String

bb6:
  dealloc_stack %3 : $*Self
  %43 = enum $Optional<String>, #Optional.none!enumelt
  br bb2(%43 : $Optional<String>)
}

sil @$sSzsE11descriptionSSvg : $@convention(method) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> @owned String

sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

sil public_external [transparent] [serialized] @$ss2qqoiyxxSg_xyKXKtKlF : $@convention(thin) <T> (@in_guaranteed Optional<T>, @noescape @callee_guaranteed () -> (@out T, @error Error)) -> (@out T, @error Error) {
bb0(%0 : $*T, %1 : $*Optional<T>, %2 : $@noescape @callee_guaranteed () -> (@out T, @error Error)):
  %3 = alloc_stack $Optional<T>
  copy_addr %1 to [initialization] %3 : $*Optional<T>
  switch_enum_addr %3 : $*Optional<T>, case #Optional.some!enumelt.1: bb4, case #Optional.none!enumelt: bb1

bb1:
  try_apply %2(%0) : $@noescape @callee_guaranteed () -> (@out T, @error Error), normal bb3, error bb2

bb2(%7 : $Error):
  dealloc_stack %3 : $*Optional<T>
  throw %7 : $Error

bb3(%10 : $()):
  br bb5

bb4:
  %12 = unchecked_take_enum_data_addr %3 : $*Optional<T>, #Optional.some!enumelt.1
  copy_addr [take] %12 to [initialization] %0 : $*T
  br bb5

bb5:
  dealloc_stack %3 : $*Optional<T>
  %16 = tuple ()
  return %16 : $()
}

sil hidden [transparent] @$s4main8HoverCarC8intValueSiSgvpfi : $@convention(thin) () -> Optional<Int> {
bb0:
  %0 = integer_literal $Builtin.Int64, 1
  %1 = struct $Int (%0 : $Builtin.Int64)
  %2 = enum $Optional<Int>, #Optional.some!enumelt.1, %1 : $Int
  return %2 : $Optional<Int>
}

sil public_external [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1)
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0
  %4 = struct $Int (%3 : $Builtin.Int64)
  return %4 : $Int
}

sil hidden [transparent] @$s4main8HoverCarC8intValueSiSgvg : $@convention(method) (@guaranteed HoverCar) -> Optional<Int> {
bb0(%0 : $HoverCar):
  debug_value %0 : $HoverCar, let, name "self", argno 1
  %2 = ref_element_addr %0 : $HoverCar, #HoverCar.intValue
  %3 = begin_access [read] [dynamic] %2 : $*Optional<Int>
  %4 = load %3 : $*Optional<Int>
  end_access %3 : $*Optional<Int>
  return %4 : $Optional<Int>
}

sil hidden [transparent] @$s4main8HoverCarC8intValueSiSgvs : $@convention(method) (Optional<Int>, @guaranteed HoverCar) -> () {
bb0(%0 : $Optional<Int>, %1 : $HoverCar):
  debug_value %0 : $Optional<Int>, let, name "value", argno 1
  debug_value %1 : $HoverCar, let, name "self", argno 2
  %4 = ref_element_addr %1 : $HoverCar, #HoverCar.intValue
  %5 = begin_access [modify] [dynamic] %4 : $*Optional<Int>
  store %0 to %5 : $*Optional<Int>
  end_access %5 : $*Optional<Int>
  %8 = tuple ()
  return %8 : $()
}

sil hidden [transparent] @$s4main8HoverCarC8intValueSiSgvM : $@yield_once @convention(method) (@guaranteed HoverCar) -> @yields @inout Optional<Int> {
bb0(%0 : $HoverCar):
  debug_value %0 : $HoverCar, let, name "self", argno 1
  %2 = ref_element_addr %0 : $HoverCar, #HoverCar.intValue
  %3 = begin_access [modify] [dynamic] %2 : $*Optional<Int>
  yield %3 : $*Optional<Int>, resume bb1, unwind bb2

bb1:
  end_access %3 : $*Optional<Int>
  %6 = tuple ()
  return %6 : $()

bb2:
  end_access %3 : $*Optional<Int>
  unwind
}

sil hidden @$s4main8HoverCarCACycfC : $@convention(method) (@thick HoverCar.Type) -> @owned HoverCar {
bb0(%0 : $@thick HoverCar.Type):
  %1 = alloc_ref $HoverCar
  %2 = function_ref @$s4main8HoverCarCACycfc : $@convention(method) (@owned HoverCar) -> @owned HoverCar
  %3 = apply %2(%1) : $@convention(method) (@owned HoverCar) -> @owned HoverCar
  return %3 : $HoverCar
}

sil hidden @$s4main8HoverCarCACycfc : $@convention(method) (@owned HoverCar) -> @owned HoverCar {
bb0(%0 : $HoverCar):
  debug_value %0 : $HoverCar, let, name "self", argno 1
  %2 = integer_literal $Builtin.Int64, 1
  %3 = struct $Int (%2 : $Builtin.Int64)
  %4 = enum $Optional<Int>, #Optional.some!enumelt.1, %3 : $Int
  %5 = ref_element_addr %0 : $HoverCar, #HoverCar.intValue
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<Int>
  store %4 to %6 : $*Optional<Int>
  end_access %6 : $*Optional<Int>
  return %0 : $HoverCar
}

sil hidden @$s4main8HoverCarCfd : $@convention(method) (@guaranteed HoverCar) -> @owned Builtin.NativeObject {
bb0(%0 : $HoverCar):
  debug_value %0 : $HoverCar, let, name "self", argno 1
  %2 = unchecked_ref_cast %0 : $HoverCar to $Builtin.NativeObject
  return %2 : $Builtin.NativeObject
}

sil hidden @$s4main8HoverCarCfD : $@convention(method) (@owned HoverCar) -> () {
bb0(%0 : $HoverCar):
  debug_value %0 : $HoverCar, let, name "self", argno 1
  %2 = function_ref @$s4main8HoverCarCfd : $@convention(method) (@guaranteed HoverCar) -> @owned Builtin.NativeObject
  %3 = apply %2(%0) : $@convention(method) (@guaranteed HoverCar) -> @owned Builtin.NativeObject
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $HoverCar
  dealloc_ref %4 : $HoverCar
  %6 = tuple ()
  return %6 : $()
}

sil private [transparent] [thunk] @$s4main8HoverCarCAA0C0A2aDP8intValueSiSgvgTW : $@convention(witness_method: Car) (@in_guaranteed HoverCar) -> Optional<Int> {
bb0(%0 : $*HoverCar):
  %1 = load %0 : $*HoverCar
  %2 = function_ref @$s4main8HoverCarC8intValueSiSgvg : $@convention(method) (@guaranteed HoverCar) -> Optional<Int>
  %3 = apply %2(%1) : $@convention(method) (@guaranteed HoverCar) -> Optional<Int>
  return %3 : $Optional<Int>
}

sil private [transparent] [thunk] @$s4main8HoverCarCAA0C0A2aDP8intValueSiSgvsTW : $@convention(witness_method: Car) (Optional<Int>, @inout HoverCar) -> () {
bb0(%0 : $Optional<Int>, %1 : $*HoverCar):
  %2 = load %1 : $*HoverCar
  %3 = function_ref @$s4main8HoverCarC8intValueSiSgvs : $@convention(method) (Optional<Int>, @guaranteed HoverCar) -> ()
  %4 = apply %3(%0, %2) : $@convention(method) (Optional<Int>, @guaranteed HoverCar) -> ()
  %5 = tuple ()
  return %5 : $()
}

sil private [transparent] [thunk] @$s4main8HoverCarCAA0C0A2aDP8intValueSiSgvMTW : $@yield_once @convention(witness_method: Car) (@inout HoverCar) -> @yields @inout Optional<Int> {
bb0(%0 : $*HoverCar):
  %1 = load %0 : $*HoverCar
  %2 = function_ref @$s4main8HoverCarC8intValueSiSgvM : $@yield_once @convention(method) (@guaranteed HoverCar) -> @yields @inout Optional<Int>
  (%3, %4) = begin_apply %2(%1) : $@yield_once @convention(method) (@guaranteed HoverCar) -> @yields @inout Optional<Int>
  yield %3 : $*Optional<Int>, resume bb1, unwind bb2

bb1:
  end_apply %4
  %7 = tuple ()
  return %7 : $()

bb2:
  abort_apply %4
  unwind
}

sil_vtable HoverCar {
  #HoverCar.init!allocator.1: (HoverCar.Type) -> () -> HoverCar : @$s4main8HoverCarCACycfC
  #HoverCar.deinit!deallocator.1: @$s4main8HoverCarCfD
}

sil_witness_table hidden HoverCar: Car module main {
  method #Car.intValue!getter.1: <Self where Self : Car> (Self) -> () -> Int? : @$s4main8HoverCarCAA0C0A2aDP8intValueSiSgvgTW
  method #Car.intValue!setter.1: <Self where Self : Car> (inout Self) -> (Int?) -> () : @$s4main8HoverCarCAA0C0A2aDP8intValueSiSgvsTW
  method #Car.intValue!modify.1: <Self where Self : Car> (inout Self) -> () -> () : @$s4main8HoverCarCAA0C0A2aDP8intValueSiSgvMTW
}

